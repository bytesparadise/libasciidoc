// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	"github.com/davecgh/go-spew/spew"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 462},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 486},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 5, offset: 486},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 27, col: 9, offset: 504},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 27, col: 9, offset: 504},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 360, col: 19, offset: 10907},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 360, col: 19, offset: 10907},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 360, col: 19, offset: 10907},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 360, col: 24, offset: 10912},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9733},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9733},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9743},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9744},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 360, col: 45, offset: 10933},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 360, col: 49, offset: 10937},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 362, col: 9, offset: 11028},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 362, col: 9, offset: 11028},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 362, col: 9, offset: 11028},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 362, col: 13, offset: 11032},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9733},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9733},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9743},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9744},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 362, col: 34, offset: 11053},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 362, col: 39, offset: 11058},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 29, col: 11, offset: 560},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 70, col: 10, offset: 1763},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 70, col: 10, offset: 1763},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 70, col: 10, offset: 1763},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 20, offset: 1773},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3552},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3552},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 51, offset: 1804},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 55, offset: 1808},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 70, col: 60, offset: 1813},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 93, offset: 1846},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 70, col: 97, offset: 1850},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 74, col: 11, offset: 1940},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 74, col: 11, offset: 1940},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 74, col: 11, offset: 1940},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 22, offset: 1951},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3552},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3552},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 53, offset: 1982},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 57, offset: 1986},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 74, col: 62, offset: 1991},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 95, offset: 2024},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 74, col: 99, offset: 2028},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 82, col: 11, offset: 2207},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 82, col: 11, offset: 2207},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 82, col: 11, offset: 2207},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 84, col: 5, offset: 2232},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						run: (*parser).callonDocumentRawLine97,
																						expr: &seqExpr{
																							pos: position{line: 644, col: 5, offset: 20295},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 644, col: 5, offset: 20295},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 13, offset: 20303},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine101,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 644, col: 32, offset: 20322},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						run: (*parser).callonDocumentRawLine107,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 20563},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 651, col: 5, offset: 20563},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 9, offset: 20567},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine111,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 651, col: 28, offset: 20586},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine118,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						run: (*parser).callonDocumentRawLine123,
																						expr: &seqExpr{
																							pos: position{line: 644, col: 5, offset: 20295},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 644, col: 5, offset: 20295},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 13, offset: 20303},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine127,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 644, col: 32, offset: 20322},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						run: (*parser).callonDocumentRawLine133,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 20563},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 651, col: 5, offset: 20563},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 9, offset: 20567},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine137,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 651, col: 28, offset: 20586},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine144,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 644, col: 5, offset: 20295},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				run: (*parser).callonDocumentRawLine147,
																				expr: &seqExpr{
																					pos: position{line: 644, col: 5, offset: 20295},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 644, col: 5, offset: 20295},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 644, col: 13, offset: 20303},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonDocumentRawLine151,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 644, col: 32, offset: 20322},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 651, col: 5, offset: 20563},
																				run: (*parser).callonDocumentRawLine157,
																				expr: &seqExpr{
																					pos: position{line: 651, col: 5, offset: 20563},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 651, col: 5, offset: 20563},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 651, col: 9, offset: 20567},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonDocumentRawLine161,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 651, col: 28, offset: 20586},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine167,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine171,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine175,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine179,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2902, col: 12, offset: 91974},
																run: (*parser).callonDocumentRawLine183,
																expr: &seqExpr{
																	pos: position{line: 2902, col: 13, offset: 91975},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2902, col: 13, offset: 91975},
																			expr: &litMatcher{
																				pos:        position{line: 2902, col: 13, offset: 91975},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2902, col: 18, offset: 91980},
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 18, offset: 91980},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 84, col: 35, offset: 2262},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine190,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2274},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 100, col: 5, offset: 2885},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 100, col: 6, offset: 2886},
																run: (*parser).callonDocumentRawLine194,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 6, offset: 2886},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 103, col: 8, offset: 2946},
																run: (*parser).callonDocumentRawLine196,
																expr: &litMatcher{
																	pos:        position{line: 103, col: 8, offset: 2946},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 106, col: 8, offset: 3009},
																run: (*parser).callonDocumentRawLine198,
																expr: &litMatcher{
																	pos:        position{line: 106, col: 8, offset: 3009},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 109, col: 8, offset: 3071},
																run: (*parser).callonDocumentRawLine200,
																expr: &litMatcher{
																	pos:        position{line: 109, col: 8, offset: 3071},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 112, col: 8, offset: 3137},
																run: (*parser).callonDocumentRawLine202,
																expr: &litMatcher{
																	pos:        position{line: 112, col: 8, offset: 3137},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 115, col: 8, offset: 3202},
																run: (*parser).callonDocumentRawLine204,
																expr: &litMatcher{
																	pos:        position{line: 115, col: 8, offset: 3202},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 39, offset: 2308},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine207,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2320},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine211,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						run: (*parser).callonDocumentRawLine216,
																						expr: &seqExpr{
																							pos: position{line: 644, col: 5, offset: 20295},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 644, col: 5, offset: 20295},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 13, offset: 20303},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine220,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 644, col: 32, offset: 20322},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						run: (*parser).callonDocumentRawLine226,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 20563},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 651, col: 5, offset: 20563},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 9, offset: 20567},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine230,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 651, col: 28, offset: 20586},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine237,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						run: (*parser).callonDocumentRawLine242,
																						expr: &seqExpr{
																							pos: position{line: 644, col: 5, offset: 20295},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 644, col: 5, offset: 20295},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 13, offset: 20303},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine246,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 644, col: 32, offset: 20322},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						run: (*parser).callonDocumentRawLine252,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 20563},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 651, col: 5, offset: 20563},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 9, offset: 20567},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonDocumentRawLine256,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 651, col: 28, offset: 20586},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine263,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 644, col: 5, offset: 20295},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				run: (*parser).callonDocumentRawLine266,
																				expr: &seqExpr{
																					pos: position{line: 644, col: 5, offset: 20295},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 644, col: 5, offset: 20295},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 644, col: 13, offset: 20303},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonDocumentRawLine270,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 644, col: 32, offset: 20322},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 651, col: 5, offset: 20563},
																				run: (*parser).callonDocumentRawLine276,
																				expr: &seqExpr{
																					pos: position{line: 651, col: 5, offset: 20563},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 651, col: 5, offset: 20563},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 651, col: 9, offset: 20567},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonDocumentRawLine280,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 651, col: 28, offset: 20586},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine286,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine290,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine294,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine298,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2902, col: 12, offset: 91974},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 2902, col: 13, offset: 91975},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2902, col: 13, offset: 91975},
																			expr: &litMatcher{
																				pos:        position{line: 2902, col: 13, offset: 91975},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2902, col: 18, offset: 91980},
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 18, offset: 91980},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 86, col: 36, offset: 2351},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 87, col: 5, offset: 2360},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine310,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 123, col: 10, offset: 3329},
										run: (*parser).callonDocumentRawLine314,
										expr: &seqExpr{
											pos: position{line: 123, col: 10, offset: 3329},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 123, col: 10, offset: 3329},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 20, offset: 3339},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 25, offset: 3344},
														expr: &actionExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															run: (*parser).callonDocumentRawLine319,
															expr: &oneOrMoreExpr{
																pos: position{line: 127, col: 28, offset: 3552},
																expr: &charClassMatcher{
																	pos:        position{line: 127, col: 28, offset: 3552},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 52, offset: 3371},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 56, offset: 3375},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 61, offset: 3380},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine325,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 94, offset: 3413},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 123, col: 98, offset: 3417},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonDocumentRawLine330,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 723, col: 5, offset: 23016},
										run: (*parser).callonDocumentRawLine334,
										expr: &seqExpr{
											pos: position{line: 723, col: 5, offset: 23016},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 723, col: 5, offset: 23016},
													expr: &charClassMatcher{
														pos:        position{line: 2831, col: 13, offset: 90012},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 23046},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 725, col: 9, offset: 23066},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 739, col: 5, offset: 23558},
																run: (*parser).callonDocumentRawLine340,
																expr: &seqExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 739, col: 5, offset: 23558},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 739, col: 16, offset: 23569},
																				run: (*parser).callonDocumentRawLine343,
																				expr: &seqExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 739, col: 16, offset: 23569},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 739, col: 23, offset: 23576},
																							expr: &litMatcher{
																								pos:        position{line: 739, col: 23, offset: 23576},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 741, col: 8, offset: 23660},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine349,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine352,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 746, col: 5, offset: 23806},
																run: (*parser).callonDocumentRawLine359,
																expr: &seqExpr{
																	pos: position{line: 746, col: 5, offset: 23806},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 746, col: 5, offset: 23806},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 746, col: 16, offset: 23817},
																				run: (*parser).callonDocumentRawLine362,
																				expr: &seqExpr{
																					pos: position{line: 746, col: 16, offset: 23817},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 746, col: 16, offset: 23817},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 746, col: 23, offset: 23824},
																							expr: &litMatcher{
																								pos:        position{line: 746, col: 23, offset: 23824},
																								val:        "=",
																								ignoreCase: false,
																								want:       "\"=\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 748, col: 8, offset: 23908},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine368,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine371,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 26, offset: 24294},
																run: (*parser).callonDocumentRawLine378,
																expr: &seqExpr{
																	pos: position{line: 759, col: 26, offset: 24294},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 759, col: 26, offset: 24294},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 32, offset: 24300},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 763, col: 13, offset: 24430},
																				run: (*parser).callonDocumentRawLine382,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 763, col: 14, offset: 24431},
																					expr: &charClassMatcher{
																						pos:        position{line: 763, col: 14, offset: 24431},
																						val:        "[^\\r\\n` ]",
																						chars:      []rune{'\r', '\n', '`', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 759, col: 52, offset: 24320},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine386,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine389,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 753, col: 5, offset: 24053},
																run: (*parser).callonDocumentRawLine396,
																expr: &seqExpr{
																	pos: position{line: 753, col: 5, offset: 24053},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 753, col: 5, offset: 24053},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 753, col: 16, offset: 24064},
																				run: (*parser).callonDocumentRawLine399,
																				expr: &seqExpr{
																					pos: position{line: 753, col: 16, offset: 24064},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 753, col: 16, offset: 24064},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 753, col: 22, offset: 24070},
																							expr: &litMatcher{
																								pos:        position{line: 753, col: 22, offset: 24070},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 755, col: 8, offset: 24154},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine405,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine408,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 768, col: 5, offset: 24590},
																run: (*parser).callonDocumentRawLine415,
																expr: &seqExpr{
																	pos: position{line: 768, col: 5, offset: 24590},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 768, col: 5, offset: 24590},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 768, col: 16, offset: 24601},
																				run: (*parser).callonDocumentRawLine418,
																				expr: &seqExpr{
																					pos: position{line: 768, col: 16, offset: 24601},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 768, col: 16, offset: 24601},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 768, col: 23, offset: 24608},
																							expr: &litMatcher{
																								pos:        position{line: 768, col: 23, offset: 24608},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 770, col: 8, offset: 24692},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine424,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine427,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 782, col: 5, offset: 25066},
																run: (*parser).callonDocumentRawLine434,
																expr: &seqExpr{
																	pos: position{line: 782, col: 5, offset: 25066},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 782, col: 5, offset: 25066},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 782, col: 16, offset: 25077},
																				run: (*parser).callonDocumentRawLine437,
																				expr: &seqExpr{
																					pos: position{line: 782, col: 16, offset: 25077},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 782, col: 16, offset: 25077},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 782, col: 23, offset: 25084},
																							expr: &litMatcher{
																								pos:        position{line: 782, col: 23, offset: 25084},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 784, col: 8, offset: 25168},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine443,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine446,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 789, col: 5, offset: 25318},
																run: (*parser).callonDocumentRawLine453,
																expr: &seqExpr{
																	pos: position{line: 789, col: 5, offset: 25318},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 789, col: 5, offset: 25318},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 789, col: 16, offset: 25329},
																				run: (*parser).callonDocumentRawLine456,
																				expr: &seqExpr{
																					pos: position{line: 789, col: 16, offset: 25329},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 789, col: 16, offset: 25329},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 789, col: 23, offset: 25336},
																							expr: &litMatcher{
																								pos:        position{line: 789, col: 23, offset: 25336},
																								val:        "+",
																								ignoreCase: false,
																								want:       "\"+\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 791, col: 8, offset: 25420},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine462,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine465,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 796, col: 5, offset: 25568},
																run: (*parser).callonDocumentRawLine472,
																expr: &seqExpr{
																	pos: position{line: 796, col: 5, offset: 25568},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 796, col: 5, offset: 25568},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 796, col: 16, offset: 25579},
																				run: (*parser).callonDocumentRawLine475,
																				expr: &seqExpr{
																					pos: position{line: 796, col: 16, offset: 25579},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 796, col: 16, offset: 25579},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 796, col: 23, offset: 25586},
																							expr: &litMatcher{
																								pos:        position{line: 796, col: 23, offset: 25586},
																								val:        "_",
																								ignoreCase: false,
																								want:       "\"_\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 798, col: 8, offset: 25670},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine481,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine484,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 803, col: 5, offset: 25814},
																run: (*parser).callonDocumentRawLine491,
																expr: &seqExpr{
																	pos: position{line: 803, col: 5, offset: 25814},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 803, col: 5, offset: 25814},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 803, col: 16, offset: 25825},
																				run: (*parser).callonDocumentRawLine494,
																				expr: &seqExpr{
																					pos: position{line: 803, col: 16, offset: 25825},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 803, col: 16, offset: 25825},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 803, col: 23, offset: 25832},
																							expr: &litMatcher{
																								pos:        position{line: 803, col: 23, offset: 25832},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 805, col: 8, offset: 25916},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentRawLine500,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentRawLine503,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 42, col: 5, offset: 929},
										run: (*parser).callonDocumentRawLine510,
										expr: &seqExpr{
											pos: position{line: 42, col: 5, offset: 929},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 42, col: 5, offset: 929},
													run: (*parser).callonDocumentRawLine512,
												},
												&andCodeExpr{
													pos: position{line: 46, col: 5, offset: 1073},
													run: (*parser).callonDocumentRawLine513,
												},
												&labeledExpr{
													pos:   position{line: 49, col: 5, offset: 1136},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 49, col: 12, offset: 1143},
														run: (*parser).callonDocumentRawLine515,
														expr: &oneOrMoreExpr{
															pos: position{line: 49, col: 12, offset: 1143},
															expr: &litMatcher{
																pos:        position{line: 49, col: 13, offset: 1144},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 53, col: 5, offset: 1252},
													run: (*parser).callonDocumentRawLine518,
												},
												&actionExpr{
													pos: position{line: 2914, col: 11, offset: 92214},
													run: (*parser).callonDocumentRawLine519,
													expr: &oneOrMoreExpr{
														pos: position{line: 2914, col: 11, offset: 92214},
														expr: &charClassMatcher{
															pos:        position{line: 2914, col: 12, offset: 92215},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&actionExpr{
													pos: position{line: 2861, col: 14, offset: 90687},
													run: (*parser).callonDocumentRawLine522,
													expr: &oneOrMoreExpr{
														pos: position{line: 2861, col: 14, offset: 90687},
														expr: &charClassMatcher{
															pos:        position{line: 2861, col: 14, offset: 90687},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 134, col: 1, offset: 3752},
			expr: &actionExpr{
				pos: position{line: 135, col: 5, offset: 3774},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 135, col: 5, offset: 3774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3774},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 136, col: 9, offset: 3789},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 136, col: 9, offset: 3789},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 136, col: 9, offset: 3789},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 137, col: 9, offset: 3810},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2865, col: 17, offset: 90757},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2865, col: 17, offset: 90757},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2865, col: 22, offset: 90762},
														expr: &choiceExpr{
															pos: position{line: 2865, col: 23, offset: 90763},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2882, col: 5, offset: 91256},
																	run: (*parser).callonFileInclusion12,
																	expr: &seqExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2882, col: 5, offset: 91256},
																				expr: &litMatcher{
																					pos:        position{line: 2882, col: 6, offset: 91257},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2883, col: 5, offset: 91281},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2883, col: 14, offset: 91290},
																					expr: &choiceExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2884, col: 9, offset: 91300},
																								run: (*parser).callonFileInclusion19,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2884, col: 9, offset: 91300},
																									expr: &charClassMatcher{
																										pos:        position{line: 2884, col: 10, offset: 91301},
																										val:        "[^\\r\\n[]�{.,;?! ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2887, col: 11, offset: 91564},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2848, col: 25, offset: 90406},
																										run: (*parser).callonFileInclusion23,
																										expr: &charClassMatcher{
																											pos:        position{line: 2848, col: 25, offset: 90406},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2887, col: 32, offset: 91585},
																										expr: &notExpr{
																											pos: position{line: 2887, col: 34, offset: 91587},
																											expr: &choiceExpr{
																												pos: position{line: 2887, col: 36, offset: 91589},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonFileInclusion30,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 635, col: 5, offset: 20085},
																								run: (*parser).callonFileInclusion32,
																								expr: &seqExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 635, col: 5, offset: 20085},
																											run: (*parser).callonFileInclusion34,
																										},
																										&labeledExpr{
																											pos:   position{line: 638, col: 5, offset: 20157},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 638, col: 14, offset: 20166},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 657, col: 25, offset: 20767},
																														run: (*parser).callonFileInclusion37,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 25, offset: 20767},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 25, offset: 20767},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 37, offset: 20779},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonFileInclusion41,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 56, offset: 20798},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 657, col: 62, offset: 20804},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonFileInclusion48,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonFileInclusion53,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonFileInclusion55,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 78, offset: 20820},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 661, col: 25, offset: 20938},
																														run: (*parser).callonFileInclusion59,
																														expr: &seqExpr{
																															pos: position{line: 661, col: 25, offset: 20938},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 661, col: 25, offset: 20938},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 38, offset: 20951},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonFileInclusion63,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 57, offset: 20970},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 661, col: 63, offset: 20976},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonFileInclusion70,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonFileInclusion75,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonFileInclusion77,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 661, col: 79, offset: 20992},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 644, col: 5, offset: 20295},
																														run: (*parser).callonFileInclusion81,
																														expr: &seqExpr{
																															pos: position{line: 644, col: 5, offset: 20295},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 644, col: 5, offset: 20295},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 644, col: 13, offset: 20303},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonFileInclusion85,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 644, col: 32, offset: 20322},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 651, col: 5, offset: 20563},
																														run: (*parser).callonFileInclusion91,
																														expr: &seqExpr{
																															pos: position{line: 651, col: 5, offset: 20563},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 651, col: 5, offset: 20563},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 651, col: 9, offset: 20567},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonFileInclusion95,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 651, col: 28, offset: 20586},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2889, col: 11, offset: 91643},
																								run: (*parser).callonFileInclusion101,
																								expr: &litMatcher{
																									pos:        position{line: 2889, col: 11, offset: 91643},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1197, col: 23, offset: 36942},
																	run: (*parser).callonFileInclusion103,
																	expr: &seqExpr{
																		pos: position{line: 1197, col: 23, offset: 36942},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1197, col: 51, offset: 36970},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1197, col: 56, offset: 36975},
																					run: (*parser).callonFileInclusion107,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1197, col: 56, offset: 36975},
																						expr: &charClassMatcher{
																							pos:        position{line: 1197, col: 56, offset: 36975},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3839},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 138, col: 21, offset: 3851},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 5, offset: 4006},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonFileInclusion114,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonFileInclusion117,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 149, col: 1, offset: 4139},
			expr: &actionExpr{
				pos: position{line: 149, col: 15, offset: 4153},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 149, col: 15, offset: 4153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 149, col: 15, offset: 4153},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 149, col: 22, offset: 4160},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 156, col: 23, offset: 4343},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 156, col: 23, offset: 4343},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 156, col: 23, offset: 4343},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 156, col: 30, offset: 4350},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 165, col: 19, offset: 4708},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 165, col: 19, offset: 4708},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 165, col: 19, offset: 4708},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 12, offset: 91974},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2902, col: 13, offset: 91975},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2902, col: 13, offset: 91975},
																							expr: &litMatcher{
																								pos:        position{line: 2902, col: 13, offset: 91975},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2902, col: 18, offset: 91980},
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 18, offset: 91980},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 165, col: 35, offset: 4724},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 165, col: 40, offset: 4729},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 12, offset: 91974},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 2902, col: 13, offset: 91975},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2902, col: 13, offset: 91975},
																							expr: &litMatcher{
																								pos:        position{line: 2902, col: 13, offset: 91975},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2902, col: 18, offset: 91980},
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 18, offset: 91980},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 169, col: 20, offset: 4850},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 169, col: 20, offset: 4850},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 12, offset: 91974},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 2902, col: 13, offset: 91975},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2902, col: 13, offset: 91975},
																					expr: &litMatcher{
																						pos:        position{line: 2902, col: 13, offset: 91975},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2902, col: 18, offset: 91980},
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 18, offset: 91980},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 5, offset: 4389},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 157, col: 12, offset: 4396},
														expr: &actionExpr{
															pos: position{line: 158, col: 9, offset: 4406},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 158, col: 9, offset: 4406},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 158, col: 10, offset: 4407},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 159, col: 9, offset: 4524},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 159, col: 16, offset: 4531},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 165, col: 19, offset: 4708},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 165, col: 19, offset: 4708},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 165, col: 19, offset: 4708},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 12, offset: 91974},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 2902, col: 13, offset: 91975},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2902, col: 13, offset: 91975},
																												expr: &litMatcher{
																													pos:        position{line: 2902, col: 13, offset: 91975},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2902, col: 18, offset: 91980},
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 18, offset: 91980},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 165, col: 35, offset: 4724},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 165, col: 40, offset: 4729},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 12, offset: 91974},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 2902, col: 13, offset: 91975},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2902, col: 13, offset: 91975},
																												expr: &litMatcher{
																													pos:        position{line: 2902, col: 13, offset: 91975},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2902, col: 18, offset: 91980},
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 18, offset: 91980},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 169, col: 20, offset: 4850},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 169, col: 20, offset: 4850},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 12, offset: 91974},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 2902, col: 13, offset: 91975},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2902, col: 13, offset: 91975},
																										expr: &litMatcher{
																											pos:        position{line: 2902, col: 13, offset: 91975},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2902, col: 18, offset: 91980},
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 18, offset: 91980},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 165, col: 19, offset: 4708},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 165, col: 19, offset: 4708},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 165, col: 19, offset: 4708},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2902, col: 12, offset: 91974},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 2902, col: 13, offset: 91975},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2902, col: 13, offset: 91975},
																	expr: &litMatcher{
																		pos:        position{line: 2902, col: 13, offset: 91975},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2902, col: 18, offset: 91980},
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 18, offset: 91980},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 165, col: 35, offset: 4724},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 165, col: 40, offset: 4729},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2902, col: 12, offset: 91974},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 2902, col: 13, offset: 91975},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2902, col: 13, offset: 91975},
																	expr: &litMatcher{
																		pos:        position{line: 2902, col: 13, offset: 91975},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2902, col: 18, offset: 91980},
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 18, offset: 91980},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 169, col: 20, offset: 4850},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 169, col: 20, offset: 4850},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2902, col: 12, offset: 91974},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 2902, col: 13, offset: 91975},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2902, col: 13, offset: 91975},
															expr: &litMatcher{
																pos:        position{line: 2902, col: 13, offset: 91975},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2902, col: 18, offset: 91980},
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 18, offset: 91980},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 174, col: 1, offset: 4986},
			expr: &actionExpr{
				pos: position{line: 174, col: 14, offset: 4999},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 174, col: 14, offset: 4999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 174, col: 14, offset: 4999},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 178, col: 22, offset: 5136},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 178, col: 22, offset: 5136},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 178, col: 22, offset: 5136},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 187, col: 13, offset: 5446},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 187, col: 13, offset: 5446},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 187, col: 13, offset: 5446},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 187, col: 18, offset: 5451},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2835, col: 14, offset: 90086},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2835, col: 14, offset: 90086},
																			expr: &charClassMatcher{
																				pos:        position{line: 2835, col: 14, offset: 90086},
																				val:        "[\\pL\\pN]",
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 193, col: 16, offset: 5651},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 193, col: 16, offset: 5651},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 193, col: 16, offset: 5651},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 193, col: 23, offset: 5658},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 193, col: 23, offset: 5658},
																							expr: &litMatcher{
																								pos:        position{line: 193, col: 24, offset: 5659},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 196, col: 5, offset: 5713},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 189, col: 9, offset: 5539},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 189, col: 9, offset: 5539},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 189, col: 9, offset: 5539},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 189, col: 13, offset: 5543},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 189, col: 18, offset: 5548},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2835, col: 14, offset: 90086},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2835, col: 14, offset: 90086},
																					expr: &charClassMatcher{
																						pos:        position{line: 2835, col: 14, offset: 90086},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 193, col: 16, offset: 5651},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 193, col: 16, offset: 5651},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 193, col: 16, offset: 5651},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 193, col: 23, offset: 5658},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 193, col: 23, offset: 5658},
																									expr: &litMatcher{
																										pos:        position{line: 193, col: 24, offset: 5659},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 196, col: 5, offset: 5713},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 179, col: 5, offset: 5157},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 179, col: 12, offset: 5164},
												expr: &actionExpr{
													pos: position{line: 180, col: 9, offset: 5174},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 180, col: 9, offset: 5174},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 180, col: 10, offset: 5175},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 181, col: 9, offset: 5292},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 187, col: 13, offset: 5446},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 187, col: 13, offset: 5446},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 187, col: 13, offset: 5446},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 187, col: 18, offset: 5451},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2835, col: 14, offset: 90086},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2835, col: 14, offset: 90086},
																								expr: &charClassMatcher{
																									pos:        position{line: 2835, col: 14, offset: 90086},
																									val:        "[\\pL\\pN]",
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 193, col: 16, offset: 5651},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 193, col: 16, offset: 5651},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 193, col: 16, offset: 5651},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 193, col: 23, offset: 5658},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 193, col: 23, offset: 5658},
																												expr: &litMatcher{
																													pos:        position{line: 193, col: 24, offset: 5659},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 196, col: 5, offset: 5713},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 189, col: 9, offset: 5539},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 189, col: 9, offset: 5539},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 189, col: 9, offset: 5539},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 189, col: 13, offset: 5543},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 189, col: 18, offset: 5548},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2835, col: 14, offset: 90086},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2835, col: 14, offset: 90086},
																										expr: &charClassMatcher{
																											pos:        position{line: 2835, col: 14, offset: 90086},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 193, col: 16, offset: 5651},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 193, col: 16, offset: 5651},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 193, col: 16, offset: 5651},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 193, col: 23, offset: 5658},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 193, col: 23, offset: 5658},
																														expr: &litMatcher{
																															pos:        position{line: 193, col: 24, offset: 5659},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 196, col: 5, offset: 5713},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 203, col: 1, offset: 5880},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 5900},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 5900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 203, col: 21, offset: 5900},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 203, col: 29, offset: 5908},
								expr: &choiceExpr{
									pos: position{line: 203, col: 30, offset: 5909},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 207, col: 25, offset: 6089},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 207, col: 25, offset: 6089},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 207, col: 25, offset: 6089},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 207, col: 33, offset: 6097},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 207, col: 38, offset: 6102},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2835, col: 14, offset: 90086},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2835, col: 14, offset: 90086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2835, col: 14, offset: 90086},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 207, col: 78, offset: 6142},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 211, col: 23, offset: 6237},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 211, col: 23, offset: 6237},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 211, col: 23, offset: 6237},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 211, col: 31, offset: 6245},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 211, col: 36, offset: 6250},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2835, col: 14, offset: 90086},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2835, col: 14, offset: 90086},
																	expr: &charClassMatcher{
																		pos:        position{line: 2835, col: 14, offset: 90086},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 211, col: 76, offset: 6290},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 203, col: 74, offset: 5953},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 203, col: 74, offset: 5953,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 227, col: 1, offset: 6776},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 6800},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 6800},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 228, col: 5, offset: 6800},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6809},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 229, col: 16, offset: 6820},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 17, offset: 6821},
									name: "BlockAttributes",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 230, col: 5, offset: 6844},
							run: (*parser).callonDocumentFragment9,
						},
						&labeledExpr{
							pos:   position{line: 236, col: 5, offset: 6998},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 236, col: 13, offset: 7006},
								expr: &choiceExpr{
									pos: position{line: 237, col: 9, offset: 7016},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 237, col: 9, offset: 7016},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 238, col: 11, offset: 7077},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 11, offset: 7142},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 240, col: 11, offset: 7170},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 360, col: 19, offset: 10907},
											run: (*parser).callonDocumentFragment17,
											expr: &seqExpr{
												pos: position{line: 360, col: 19, offset: 10907},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 360, col: 19, offset: 10907},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 360, col: 24, offset: 10912},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															run: (*parser).callonDocumentFragment21,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9733},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9733},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9743},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9744},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 360, col: 45, offset: 10933},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 360, col: 49, offset: 10937},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentFragment28,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment31,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 362, col: 9, offset: 11028},
											run: (*parser).callonDocumentFragment38,
											expr: &seqExpr{
												pos: position{line: 362, col: 9, offset: 11028},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 362, col: 9, offset: 11028},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 362, col: 13, offset: 11032},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															run: (*parser).callonDocumentFragment42,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9733},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9733},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9743},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9744},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 362, col: 34, offset: 11053},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 362, col: 39, offset: 11058},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentFragment49,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment52,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 676, col: 14, offset: 21465},
											run: (*parser).callonDocumentFragment59,
											expr: &seqExpr{
												pos: position{line: 676, col: 14, offset: 21465},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														expr: &notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 676, col: 19, offset: 21470},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentFragment65,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment68,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 243, col: 11, offset: 7246},
											name: "DocumentHeader",
										},
										&ruleRefExpr{
											pos:  position{line: 244, col: 11, offset: 7272},
											name: "Section",
										},
										&actionExpr{
											pos: position{line: 819, col: 5, offset: 26296},
											run: (*parser).callonDocumentFragment77,
											expr: &seqExpr{
												pos: position{line: 819, col: 5, offset: 26296},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 739, col: 5, offset: 23558},
														run: (*parser).callonDocumentFragment79,
														expr: &seqExpr{
															pos: position{line: 739, col: 5, offset: 23558},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 739, col: 5, offset: 23558},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 739, col: 16, offset: 23569},
																		run: (*parser).callonDocumentFragment82,
																		expr: &seqExpr{
																			pos: position{line: 739, col: 16, offset: 23569},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 739, col: 16, offset: 23569},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 739, col: 23, offset: 23576},
																					expr: &litMatcher{
																						pos:        position{line: 739, col: 23, offset: 23576},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 741, col: 8, offset: 23660},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonDocumentFragment88,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonDocumentFragment91,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 820, col: 5, offset: 26327},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 830, col: 5, offset: 26613},
															expr: &actionExpr{
																pos: position{line: 830, col: 6, offset: 26614},
																run: (*parser).callonDocumentFragment100,
																expr: &seqExpr{
																	pos: position{line: 830, col: 6, offset: 26614},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 830, col: 6, offset: 26614},
																			expr: &choiceExpr{
																				pos: position{line: 827, col: 29, offset: 26556},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						run: (*parser).callonDocumentFragment104,
																						expr: &seqExpr{
																							pos: position{line: 739, col: 5, offset: 23558},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 739, col: 5, offset: 23558},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										run: (*parser).callonDocumentFragment107,
																										expr: &seqExpr{
																											pos: position{line: 739, col: 16, offset: 23569},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 739, col: 16, offset: 23569},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 739, col: 23, offset: 23576},
																													expr: &litMatcher{
																														pos:        position{line: 739, col: 23, offset: 23576},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 741, col: 8, offset: 23660},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDocumentFragment113,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDocumentFragment116,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 831, col: 5, offset: 26644},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment126,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment132,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment136,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 821, col: 5, offset: 26361},
														expr: &choiceExpr{
															pos: position{line: 827, col: 29, offset: 26556},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	run: (*parser).callonDocumentFragment145,
																	expr: &seqExpr{
																		pos: position{line: 739, col: 5, offset: 23558},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 739, col: 5, offset: 23558},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					run: (*parser).callonDocumentFragment148,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 16, offset: 23569},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 739, col: 16, offset: 23569},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 739, col: 23, offset: 23576},
																								expr: &litMatcher{
																									pos:        position{line: 739, col: 23, offset: 23576},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 741, col: 8, offset: 23660},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDocumentFragment154,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDocumentFragment157,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 839, col: 5, offset: 26797},
											run: (*parser).callonDocumentFragment166,
											expr: &seqExpr{
												pos: position{line: 839, col: 5, offset: 26797},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 839, col: 5, offset: 26797},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 746, col: 5, offset: 23806},
															run: (*parser).callonDocumentFragment169,
															expr: &seqExpr{
																pos: position{line: 746, col: 5, offset: 23806},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 746, col: 5, offset: 23806},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 746, col: 16, offset: 23817},
																			run: (*parser).callonDocumentFragment172,
																			expr: &seqExpr{
																				pos: position{line: 746, col: 16, offset: 23817},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 746, col: 16, offset: 23817},
																						val:        "====",
																						ignoreCase: false,
																						want:       "\"====\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 746, col: 23, offset: 23824},
																						expr: &litMatcher{
																							pos:        position{line: 746, col: 23, offset: 23824},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 748, col: 8, offset: 23908},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment178,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment181,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 840, col: 5, offset: 26836},
														run: (*parser).callonDocumentFragment188,
													},
													&labeledExpr{
														pos:   position{line: 843, col: 5, offset: 26928},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 858, col: 4, offset: 27325},
															expr: &actionExpr{
																pos: position{line: 858, col: 5, offset: 27326},
																run: (*parser).callonDocumentFragment191,
																expr: &seqExpr{
																	pos: position{line: 858, col: 5, offset: 27326},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 858, col: 5, offset: 27326},
																			expr: &choiceExpr{
																				pos: position{line: 851, col: 5, offset: 27168},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 851, col: 5, offset: 27168},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 851, col: 5, offset: 27168},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 746, col: 5, offset: 23806},
																									run: (*parser).callonDocumentFragment197,
																									expr: &seqExpr{
																										pos: position{line: 746, col: 5, offset: 23806},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 746, col: 5, offset: 23806},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 746, col: 16, offset: 23817},
																													run: (*parser).callonDocumentFragment200,
																													expr: &seqExpr{
																														pos: position{line: 746, col: 16, offset: 23817},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 746, col: 16, offset: 23817},
																																val:        "====",
																																ignoreCase: false,
																																want:       "\"====\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 746, col: 23, offset: 23824},
																																expr: &litMatcher{
																																	pos:        position{line: 746, col: 23, offset: 23824},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 748, col: 8, offset: 23908},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment206,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment209,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 852, col: 5, offset: 27199},
																								run: (*parser).callonDocumentFragment216,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 859, col: 5, offset: 27356},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment220,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment226,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment230,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 844, col: 5, offset: 26962},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 844, col: 9, offset: 26966},
															expr: &choiceExpr{
																pos: position{line: 851, col: 5, offset: 27168},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 851, col: 5, offset: 27168},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 851, col: 5, offset: 27168},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 746, col: 5, offset: 23806},
																					run: (*parser).callonDocumentFragment242,
																					expr: &seqExpr{
																						pos: position{line: 746, col: 5, offset: 23806},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 746, col: 5, offset: 23806},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 746, col: 16, offset: 23817},
																									run: (*parser).callonDocumentFragment245,
																									expr: &seqExpr{
																										pos: position{line: 746, col: 16, offset: 23817},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 746, col: 16, offset: 23817},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 746, col: 23, offset: 23824},
																												expr: &litMatcher{
																													pos:        position{line: 746, col: 23, offset: 23824},
																													val:        "=",
																													ignoreCase: false,
																													want:       "\"=\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 748, col: 8, offset: 23908},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment251,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment254,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 852, col: 5, offset: 27199},
																				run: (*parser).callonDocumentFragment261,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 951, col: 5, offset: 29648},
											run: (*parser).callonDocumentFragment264,
											expr: &seqExpr{
												pos: position{line: 951, col: 5, offset: 29648},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 951, col: 5, offset: 29648},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 759, col: 26, offset: 24294},
															run: (*parser).callonDocumentFragment267,
															expr: &seqExpr{
																pos: position{line: 759, col: 26, offset: 24294},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 759, col: 26, offset: 24294},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 759, col: 32, offset: 24300},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 763, col: 13, offset: 24430},
																			run: (*parser).callonDocumentFragment271,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 763, col: 14, offset: 24431},
																				expr: &charClassMatcher{
																					pos:        position{line: 763, col: 14, offset: 24431},
																					val:        "[^\\r\\n` ]",
																					chars:      []rune{'\r', '\n', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 759, col: 52, offset: 24320},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment275,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment278,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 952, col: 5, offset: 29694},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 965, col: 5, offset: 30167},
															expr: &actionExpr{
																pos: position{line: 965, col: 6, offset: 30168},
																run: (*parser).callonDocumentFragment287,
																expr: &seqExpr{
																	pos: position{line: 965, col: 6, offset: 30168},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 965, col: 6, offset: 30168},
																			expr: &seqExpr{
																				pos: position{line: 962, col: 34, offset: 30115},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 962, col: 34, offset: 30115},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 962, col: 40, offset: 30121},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDocumentFragment293,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDocumentFragment296,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 966, col: 5, offset: 30203},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment304,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment310,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment314,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 953, col: 5, offset: 29733},
														expr: &seqExpr{
															pos: position{line: 962, col: 34, offset: 30115},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 962, col: 34, offset: 30115},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 962, col: 40, offset: 30121},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonDocumentFragment325,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonDocumentFragment328,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 867, col: 5, offset: 27509},
											run: (*parser).callonDocumentFragment335,
											expr: &seqExpr{
												pos: position{line: 867, col: 5, offset: 27509},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 867, col: 5, offset: 27509},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 753, col: 5, offset: 24053},
															run: (*parser).callonDocumentFragment338,
															expr: &seqExpr{
																pos: position{line: 753, col: 5, offset: 24053},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 753, col: 5, offset: 24053},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 753, col: 16, offset: 24064},
																			run: (*parser).callonDocumentFragment341,
																			expr: &seqExpr{
																				pos: position{line: 753, col: 16, offset: 24064},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 753, col: 16, offset: 24064},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 753, col: 22, offset: 24070},
																						expr: &litMatcher{
																							pos:        position{line: 753, col: 22, offset: 24070},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 755, col: 8, offset: 24154},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment347,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment350,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 868, col: 5, offset: 27547},
														run: (*parser).callonDocumentFragment357,
													},
													&labeledExpr{
														pos:   position{line: 871, col: 5, offset: 27639},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 886, col: 5, offset: 28029},
															expr: &actionExpr{
																pos: position{line: 886, col: 6, offset: 28030},
																run: (*parser).callonDocumentFragment360,
																expr: &seqExpr{
																	pos: position{line: 886, col: 6, offset: 28030},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 886, col: 6, offset: 28030},
																			expr: &choiceExpr{
																				pos: position{line: 879, col: 5, offset: 27873},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 879, col: 5, offset: 27873},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 879, col: 5, offset: 27873},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 753, col: 5, offset: 24053},
																									run: (*parser).callonDocumentFragment366,
																									expr: &seqExpr{
																										pos: position{line: 753, col: 5, offset: 24053},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 753, col: 5, offset: 24053},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 753, col: 16, offset: 24064},
																													run: (*parser).callonDocumentFragment369,
																													expr: &seqExpr{
																														pos: position{line: 753, col: 16, offset: 24064},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 753, col: 16, offset: 24064},
																																val:        "```",
																																ignoreCase: false,
																																want:       "\"```\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 753, col: 22, offset: 24070},
																																expr: &litMatcher{
																																	pos:        position{line: 753, col: 22, offset: 24070},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 755, col: 8, offset: 24154},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment375,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment378,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 880, col: 5, offset: 27903},
																								run: (*parser).callonDocumentFragment385,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 887, col: 5, offset: 28059},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment389,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment395,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment399,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 872, col: 5, offset: 27672},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 872, col: 9, offset: 27676},
															expr: &choiceExpr{
																pos: position{line: 879, col: 5, offset: 27873},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 879, col: 5, offset: 27873},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 879, col: 5, offset: 27873},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 753, col: 5, offset: 24053},
																					run: (*parser).callonDocumentFragment411,
																					expr: &seqExpr{
																						pos: position{line: 753, col: 5, offset: 24053},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 753, col: 5, offset: 24053},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 753, col: 16, offset: 24064},
																									run: (*parser).callonDocumentFragment414,
																									expr: &seqExpr{
																										pos: position{line: 753, col: 16, offset: 24064},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 753, col: 16, offset: 24064},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 753, col: 22, offset: 24070},
																												expr: &litMatcher{
																													pos:        position{line: 753, col: 22, offset: 24070},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 755, col: 8, offset: 24154},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment420,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment423,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 880, col: 5, offset: 27903},
																				run: (*parser).callonDocumentFragment430,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 895, col: 5, offset: 28214},
											run: (*parser).callonDocumentFragment433,
											expr: &seqExpr{
												pos: position{line: 895, col: 5, offset: 28214},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 895, col: 5, offset: 28214},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 768, col: 5, offset: 24590},
															run: (*parser).callonDocumentFragment436,
															expr: &seqExpr{
																pos: position{line: 768, col: 5, offset: 24590},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 768, col: 5, offset: 24590},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 768, col: 16, offset: 24601},
																			run: (*parser).callonDocumentFragment439,
																			expr: &seqExpr{
																				pos: position{line: 768, col: 16, offset: 24601},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 768, col: 16, offset: 24601},
																						val:        "----",
																						ignoreCase: false,
																						want:       "\"----\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 768, col: 23, offset: 24608},
																						expr: &litMatcher{
																							pos:        position{line: 768, col: 23, offset: 24608},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 770, col: 8, offset: 24692},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment445,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment448,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 896, col: 5, offset: 28253},
														run: (*parser).callonDocumentFragment455,
													},
													&labeledExpr{
														pos:   position{line: 899, col: 5, offset: 28345},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 914, col: 5, offset: 28743},
															expr: &actionExpr{
																pos: position{line: 914, col: 6, offset: 28744},
																run: (*parser).callonDocumentFragment458,
																expr: &seqExpr{
																	pos: position{line: 914, col: 6, offset: 28744},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 914, col: 6, offset: 28744},
																			expr: &choiceExpr{
																				pos: position{line: 907, col: 5, offset: 28585},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 907, col: 5, offset: 28585},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 907, col: 5, offset: 28585},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 768, col: 5, offset: 24590},
																									run: (*parser).callonDocumentFragment464,
																									expr: &seqExpr{
																										pos: position{line: 768, col: 5, offset: 24590},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 768, col: 5, offset: 24590},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 768, col: 16, offset: 24601},
																													run: (*parser).callonDocumentFragment467,
																													expr: &seqExpr{
																														pos: position{line: 768, col: 16, offset: 24601},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 768, col: 16, offset: 24601},
																																val:        "----",
																																ignoreCase: false,
																																want:       "\"----\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 768, col: 23, offset: 24608},
																																expr: &litMatcher{
																																	pos:        position{line: 768, col: 23, offset: 24608},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 770, col: 8, offset: 24692},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment473,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment476,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 908, col: 5, offset: 28616},
																								run: (*parser).callonDocumentFragment483,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 915, col: 5, offset: 28774},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment487,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment493,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment497,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 900, col: 5, offset: 28379},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 900, col: 9, offset: 28383},
															expr: &choiceExpr{
																pos: position{line: 907, col: 5, offset: 28585},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 907, col: 5, offset: 28585},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 907, col: 5, offset: 28585},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 768, col: 5, offset: 24590},
																					run: (*parser).callonDocumentFragment509,
																					expr: &seqExpr{
																						pos: position{line: 768, col: 5, offset: 24590},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 768, col: 5, offset: 24590},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 768, col: 16, offset: 24601},
																									run: (*parser).callonDocumentFragment512,
																									expr: &seqExpr{
																										pos: position{line: 768, col: 16, offset: 24601},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 768, col: 16, offset: 24601},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 768, col: 23, offset: 24608},
																												expr: &litMatcher{
																													pos:        position{line: 768, col: 23, offset: 24608},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 770, col: 8, offset: 24692},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment518,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment521,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 908, col: 5, offset: 28616},
																				run: (*parser).callonDocumentFragment528,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 923, col: 5, offset: 28929},
											run: (*parser).callonDocumentFragment531,
											expr: &seqExpr{
												pos: position{line: 923, col: 5, offset: 28929},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 923, col: 5, offset: 28929},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 782, col: 5, offset: 25066},
															run: (*parser).callonDocumentFragment534,
															expr: &seqExpr{
																pos: position{line: 782, col: 5, offset: 25066},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 782, col: 5, offset: 25066},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 782, col: 16, offset: 25077},
																			run: (*parser).callonDocumentFragment537,
																			expr: &seqExpr{
																				pos: position{line: 782, col: 16, offset: 25077},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 782, col: 16, offset: 25077},
																						val:        "....",
																						ignoreCase: false,
																						want:       "\"....\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 782, col: 23, offset: 25084},
																						expr: &litMatcher{
																							pos:        position{line: 782, col: 23, offset: 25084},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 784, col: 8, offset: 25168},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment543,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment546,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 924, col: 5, offset: 28968},
														run: (*parser).callonDocumentFragment553,
													},
													&labeledExpr{
														pos:   position{line: 927, col: 5, offset: 29060},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 942, col: 5, offset: 29458},
															expr: &actionExpr{
																pos: position{line: 942, col: 6, offset: 29459},
																run: (*parser).callonDocumentFragment556,
																expr: &seqExpr{
																	pos: position{line: 942, col: 6, offset: 29459},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 942, col: 6, offset: 29459},
																			expr: &choiceExpr{
																				pos: position{line: 935, col: 5, offset: 29300},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 935, col: 5, offset: 29300},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 935, col: 5, offset: 29300},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 782, col: 5, offset: 25066},
																									run: (*parser).callonDocumentFragment562,
																									expr: &seqExpr{
																										pos: position{line: 782, col: 5, offset: 25066},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 782, col: 5, offset: 25066},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 782, col: 16, offset: 25077},
																													run: (*parser).callonDocumentFragment565,
																													expr: &seqExpr{
																														pos: position{line: 782, col: 16, offset: 25077},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 782, col: 16, offset: 25077},
																																val:        "....",
																																ignoreCase: false,
																																want:       "\"....\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 782, col: 23, offset: 25084},
																																expr: &litMatcher{
																																	pos:        position{line: 782, col: 23, offset: 25084},
																																	val:        ".",
																																	ignoreCase: false,
																																	want:       "\".\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 784, col: 8, offset: 25168},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment571,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment574,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 936, col: 5, offset: 29331},
																								run: (*parser).callonDocumentFragment581,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 943, col: 5, offset: 29489},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment585,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment591,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment595,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 928, col: 5, offset: 29094},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 928, col: 9, offset: 29098},
															expr: &choiceExpr{
																pos: position{line: 935, col: 5, offset: 29300},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 935, col: 5, offset: 29300},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 935, col: 5, offset: 29300},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 782, col: 5, offset: 25066},
																					run: (*parser).callonDocumentFragment607,
																					expr: &seqExpr{
																						pos: position{line: 782, col: 5, offset: 25066},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 782, col: 5, offset: 25066},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 782, col: 16, offset: 25077},
																									run: (*parser).callonDocumentFragment610,
																									expr: &seqExpr{
																										pos: position{line: 782, col: 16, offset: 25077},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 782, col: 16, offset: 25077},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 782, col: 23, offset: 25084},
																												expr: &litMatcher{
																													pos:        position{line: 782, col: 23, offset: 25084},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 784, col: 8, offset: 25168},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment616,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment619,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 936, col: 5, offset: 29331},
																				run: (*parser).callonDocumentFragment626,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 974, col: 5, offset: 30372},
											run: (*parser).callonDocumentFragment629,
											expr: &seqExpr{
												pos: position{line: 974, col: 5, offset: 30372},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 974, col: 5, offset: 30372},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 981, col: 5, offset: 30631},
															run: (*parser).callonDocumentFragment632,
															expr: &seqExpr{
																pos: position{line: 981, col: 5, offset: 30631},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 981, col: 5, offset: 30631},
																		expr: &actionExpr{
																			pos: position{line: 676, col: 14, offset: 21465},
																			run: (*parser).callonDocumentFragment635,
																			expr: &seqExpr{
																				pos: position{line: 676, col: 14, offset: 21465},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 676, col: 14, offset: 21465},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 676, col: 19, offset: 21470},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDocumentFragment641,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDocumentFragment644,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 982, col: 5, offset: 30646},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 983, col: 5, offset: 30656},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2861, col: 14, offset: 90687},
																			run: (*parser).callonDocumentFragment653,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2861, col: 14, offset: 90687},
																				expr: &charClassMatcher{
																					pos:        position{line: 2861, col: 14, offset: 90687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment657,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 975, col: 5, offset: 30409},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 975, col: 16, offset: 30420},
															expr: &choiceExpr{
																pos: position{line: 975, col: 17, offset: 30421},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 981, col: 5, offset: 30631},
																		run: (*parser).callonDocumentFragment667,
																		expr: &seqExpr{
																			pos: position{line: 981, col: 5, offset: 30631},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 981, col: 5, offset: 30631},
																					expr: &actionExpr{
																						pos: position{line: 676, col: 14, offset: 21465},
																						run: (*parser).callonDocumentFragment670,
																						expr: &seqExpr{
																							pos: position{line: 676, col: 14, offset: 21465},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 676, col: 14, offset: 21465},
																									expr: &notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 676, col: 19, offset: 21470},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDocumentFragment676,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDocumentFragment679,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 982, col: 5, offset: 30646},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 983, col: 5, offset: 30656},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2861, col: 14, offset: 90687},
																						run: (*parser).callonDocumentFragment688,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2861, col: 14, offset: 90687},
																							expr: &charClassMatcher{
																								pos:        position{line: 2861, col: 14, offset: 90687},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonDocumentFragment692,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1793, col: 5, offset: 57924},
																		run: (*parser).callonDocumentFragment699,
																		expr: &seqExpr{
																			pos: position{line: 1793, col: 5, offset: 57924},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1793, col: 5, offset: 57924},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2861, col: 14, offset: 90687},
																						run: (*parser).callonDocumentFragment702,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2861, col: 14, offset: 90687},
																							expr: &charClassMatcher{
																								pos:        position{line: 2861, col: 14, offset: 90687},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1794, col: 5, offset: 57948},
																					run: (*parser).callonDocumentFragment705,
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonDocumentFragment707,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 996, col: 5, offset: 30921},
											run: (*parser).callonDocumentFragment714,
											expr: &seqExpr{
												pos: position{line: 996, col: 5, offset: 30921},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 996, col: 5, offset: 30921},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 775, col: 5, offset: 24835},
															run: (*parser).callonDocumentFragment717,
															expr: &seqExpr{
																pos: position{line: 775, col: 5, offset: 24835},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 775, col: 5, offset: 24835},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 775, col: 16, offset: 24846},
																			run: (*parser).callonDocumentFragment720,
																			expr: &litMatcher{
																				pos:        position{line: 775, col: 16, offset: 24846},
																				val:        "--",
																				ignoreCase: false,
																				want:       "\"--\"",
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 777, col: 8, offset: 24923},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment723,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment726,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 997, col: 5, offset: 30957},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1007, col: 5, offset: 31225},
															expr: &actionExpr{
																pos: position{line: 1007, col: 6, offset: 31226},
																run: (*parser).callonDocumentFragment735,
																expr: &seqExpr{
																	pos: position{line: 1007, col: 6, offset: 31226},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1007, col: 6, offset: 31226},
																			expr: &choiceExpr{
																				pos: position{line: 1004, col: 26, offset: 31174},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 775, col: 5, offset: 24835},
																						run: (*parser).callonDocumentFragment739,
																						expr: &seqExpr{
																							pos: position{line: 775, col: 5, offset: 24835},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 775, col: 5, offset: 24835},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 775, col: 16, offset: 24846},
																										run: (*parser).callonDocumentFragment742,
																										expr: &litMatcher{
																											pos:        position{line: 775, col: 16, offset: 24846},
																											val:        "--",
																											ignoreCase: false,
																											want:       "\"--\"",
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 777, col: 8, offset: 24923},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDocumentFragment745,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDocumentFragment748,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1008, col: 5, offset: 31253},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment758,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment764,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment768,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 998, col: 5, offset: 30988},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 998, col: 9, offset: 30992},
															expr: &choiceExpr{
																pos: position{line: 1004, col: 26, offset: 31174},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 775, col: 5, offset: 24835},
																		run: (*parser).callonDocumentFragment778,
																		expr: &seqExpr{
																			pos: position{line: 775, col: 5, offset: 24835},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 775, col: 5, offset: 24835},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 775, col: 16, offset: 24846},
																						run: (*parser).callonDocumentFragment781,
																						expr: &litMatcher{
																							pos:        position{line: 775, col: 16, offset: 24846},
																							val:        "--",
																							ignoreCase: false,
																							want:       "\"--\"",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 777, col: 8, offset: 24923},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonDocumentFragment784,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonDocumentFragment787,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1016, col: 5, offset: 31416},
											run: (*parser).callonDocumentFragment796,
											expr: &seqExpr{
												pos: position{line: 1016, col: 5, offset: 31416},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1016, col: 5, offset: 31416},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 789, col: 5, offset: 25318},
															run: (*parser).callonDocumentFragment799,
															expr: &seqExpr{
																pos: position{line: 789, col: 5, offset: 25318},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 789, col: 5, offset: 25318},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 789, col: 16, offset: 25329},
																			run: (*parser).callonDocumentFragment802,
																			expr: &seqExpr{
																				pos: position{line: 789, col: 16, offset: 25329},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 789, col: 16, offset: 25329},
																						val:        "++++",
																						ignoreCase: false,
																						want:       "\"++++\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 789, col: 23, offset: 25336},
																						expr: &litMatcher{
																							pos:        position{line: 789, col: 23, offset: 25336},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 791, col: 8, offset: 25420},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment808,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment811,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1017, col: 5, offset: 31459},
														run: (*parser).callonDocumentFragment818,
													},
													&labeledExpr{
														pos:   position{line: 1020, col: 5, offset: 31551},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1035, col: 5, offset: 31981},
															expr: &actionExpr{
																pos: position{line: 1035, col: 6, offset: 31982},
																run: (*parser).callonDocumentFragment821,
																expr: &seqExpr{
																	pos: position{line: 1035, col: 6, offset: 31982},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1035, col: 6, offset: 31982},
																			expr: &choiceExpr{
																				pos: position{line: 1028, col: 5, offset: 31815},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1028, col: 5, offset: 31815},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1028, col: 5, offset: 31815},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 789, col: 5, offset: 25318},
																									run: (*parser).callonDocumentFragment827,
																									expr: &seqExpr{
																										pos: position{line: 789, col: 5, offset: 25318},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 789, col: 5, offset: 25318},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 789, col: 16, offset: 25329},
																													run: (*parser).callonDocumentFragment830,
																													expr: &seqExpr{
																														pos: position{line: 789, col: 16, offset: 25329},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 789, col: 16, offset: 25329},
																																val:        "++++",
																																ignoreCase: false,
																																want:       "\"++++\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 789, col: 23, offset: 25336},
																																expr: &litMatcher{
																																	pos:        position{line: 789, col: 23, offset: 25336},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 791, col: 8, offset: 25420},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment836,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment839,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1029, col: 5, offset: 31850},
																								run: (*parser).callonDocumentFragment846,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1036, col: 5, offset: 32016},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment850,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment856,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment860,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1021, col: 5, offset: 31589},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1021, col: 9, offset: 31593},
															expr: &choiceExpr{
																pos: position{line: 1028, col: 5, offset: 31815},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1028, col: 5, offset: 31815},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1028, col: 5, offset: 31815},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 789, col: 5, offset: 25318},
																					run: (*parser).callonDocumentFragment872,
																					expr: &seqExpr{
																						pos: position{line: 789, col: 5, offset: 25318},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 789, col: 5, offset: 25318},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 789, col: 16, offset: 25329},
																									run: (*parser).callonDocumentFragment875,
																									expr: &seqExpr{
																										pos: position{line: 789, col: 16, offset: 25329},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 789, col: 16, offset: 25329},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 789, col: 23, offset: 25336},
																												expr: &litMatcher{
																													pos:        position{line: 789, col: 23, offset: 25336},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 791, col: 8, offset: 25420},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment881,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment884,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1029, col: 5, offset: 31850},
																				run: (*parser).callonDocumentFragment891,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1044, col: 5, offset: 32167},
											run: (*parser).callonDocumentFragment894,
											expr: &seqExpr{
												pos: position{line: 1044, col: 5, offset: 32167},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1044, col: 5, offset: 32167},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 796, col: 5, offset: 25568},
															run: (*parser).callonDocumentFragment897,
															expr: &seqExpr{
																pos: position{line: 796, col: 5, offset: 25568},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 796, col: 5, offset: 25568},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 796, col: 16, offset: 25579},
																			run: (*parser).callonDocumentFragment900,
																			expr: &seqExpr{
																				pos: position{line: 796, col: 16, offset: 25579},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 796, col: 16, offset: 25579},
																						val:        "____",
																						ignoreCase: false,
																						want:       "\"____\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 796, col: 23, offset: 25586},
																						expr: &litMatcher{
																							pos:        position{line: 796, col: 23, offset: 25586},
																							val:        "_",
																							ignoreCase: false,
																							want:       "\"_\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 798, col: 8, offset: 25670},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment906,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment909,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1045, col: 5, offset: 32204},
														run: (*parser).callonDocumentFragment916,
													},
													&labeledExpr{
														pos:   position{line: 1048, col: 5, offset: 32296},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1063, col: 4, offset: 32677},
															expr: &actionExpr{
																pos: position{line: 1063, col: 5, offset: 32678},
																run: (*parser).callonDocumentFragment919,
																expr: &seqExpr{
																	pos: position{line: 1063, col: 5, offset: 32678},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1063, col: 5, offset: 32678},
																			expr: &choiceExpr{
																				pos: position{line: 1056, col: 5, offset: 32524},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1056, col: 5, offset: 32524},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1056, col: 5, offset: 32524},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 796, col: 5, offset: 25568},
																									run: (*parser).callonDocumentFragment925,
																									expr: &seqExpr{
																										pos: position{line: 796, col: 5, offset: 25568},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 796, col: 5, offset: 25568},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 796, col: 16, offset: 25579},
																													run: (*parser).callonDocumentFragment928,
																													expr: &seqExpr{
																														pos: position{line: 796, col: 16, offset: 25579},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 796, col: 16, offset: 25579},
																																val:        "____",
																																ignoreCase: false,
																																want:       "\"____\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 796, col: 23, offset: 25586},
																																expr: &litMatcher{
																																	pos:        position{line: 796, col: 23, offset: 25586},
																																	val:        "_",
																																	ignoreCase: false,
																																	want:       "\"_\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 798, col: 8, offset: 25670},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment934,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment937,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1057, col: 5, offset: 32553},
																								run: (*parser).callonDocumentFragment944,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1064, col: 5, offset: 32706},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment948,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment954,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment958,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1049, col: 5, offset: 32328},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1049, col: 9, offset: 32332},
															expr: &choiceExpr{
																pos: position{line: 1056, col: 5, offset: 32524},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1056, col: 5, offset: 32524},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1056, col: 5, offset: 32524},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 796, col: 5, offset: 25568},
																					run: (*parser).callonDocumentFragment970,
																					expr: &seqExpr{
																						pos: position{line: 796, col: 5, offset: 25568},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 796, col: 5, offset: 25568},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 796, col: 16, offset: 25579},
																									run: (*parser).callonDocumentFragment973,
																									expr: &seqExpr{
																										pos: position{line: 796, col: 16, offset: 25579},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 796, col: 16, offset: 25579},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 796, col: 23, offset: 25586},
																												expr: &litMatcher{
																													pos:        position{line: 796, col: 23, offset: 25586},
																													val:        "_",
																													ignoreCase: false,
																													want:       "\"_\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 798, col: 8, offset: 25670},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment979,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment982,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1057, col: 5, offset: 32553},
																				run: (*parser).callonDocumentFragment989,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1072, col: 5, offset: 32861},
											run: (*parser).callonDocumentFragment992,
											expr: &seqExpr{
												pos: position{line: 1072, col: 5, offset: 32861},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1072, col: 5, offset: 32861},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 803, col: 5, offset: 25814},
															run: (*parser).callonDocumentFragment995,
															expr: &seqExpr{
																pos: position{line: 803, col: 5, offset: 25814},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 803, col: 5, offset: 25814},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 803, col: 16, offset: 25825},
																			run: (*parser).callonDocumentFragment998,
																			expr: &seqExpr{
																				pos: position{line: 803, col: 16, offset: 25825},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 803, col: 16, offset: 25825},
																						val:        "****",
																						ignoreCase: false,
																						want:       "\"****\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 803, col: 23, offset: 25832},
																						expr: &litMatcher{
																							pos:        position{line: 803, col: 23, offset: 25832},
																							val:        "*",
																							ignoreCase: false,
																							want:       "\"*\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 805, col: 8, offset: 25916},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment1004,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment1007,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1073, col: 5, offset: 32900},
														run: (*parser).callonDocumentFragment1014,
													},
													&labeledExpr{
														pos:   position{line: 1076, col: 5, offset: 32992},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1091, col: 4, offset: 33389},
															expr: &actionExpr{
																pos: position{line: 1091, col: 5, offset: 33390},
																run: (*parser).callonDocumentFragment1017,
																expr: &seqExpr{
																	pos: position{line: 1091, col: 5, offset: 33390},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1091, col: 5, offset: 33390},
																			expr: &choiceExpr{
																				pos: position{line: 1084, col: 5, offset: 33232},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1084, col: 5, offset: 33232},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1084, col: 5, offset: 33232},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 803, col: 5, offset: 25814},
																									run: (*parser).callonDocumentFragment1023,
																									expr: &seqExpr{
																										pos: position{line: 803, col: 5, offset: 25814},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 803, col: 5, offset: 25814},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 803, col: 16, offset: 25825},
																													run: (*parser).callonDocumentFragment1026,
																													expr: &seqExpr{
																														pos: position{line: 803, col: 16, offset: 25825},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 803, col: 16, offset: 25825},
																																val:        "****",
																																ignoreCase: false,
																																want:       "\"****\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 803, col: 23, offset: 25832},
																																expr: &litMatcher{
																																	pos:        position{line: 803, col: 23, offset: 25832},
																																	val:        "*",
																																	ignoreCase: false,
																																	want:       "\"*\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 805, col: 8, offset: 25916},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment1032,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment1035,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1085, col: 5, offset: 33263},
																								run: (*parser).callonDocumentFragment1042,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1092, col: 5, offset: 33420},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentFragment1046,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentFragment1052,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentFragment1056,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1077, col: 5, offset: 33026},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1077, col: 9, offset: 33030},
															expr: &choiceExpr{
																pos: position{line: 1084, col: 5, offset: 33232},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1084, col: 5, offset: 33232},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1084, col: 5, offset: 33232},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 803, col: 5, offset: 25814},
																					run: (*parser).callonDocumentFragment1068,
																					expr: &seqExpr{
																						pos: position{line: 803, col: 5, offset: 25814},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 803, col: 5, offset: 25814},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 803, col: 16, offset: 25825},
																									run: (*parser).callonDocumentFragment1071,
																									expr: &seqExpr{
																										pos: position{line: 803, col: 16, offset: 25825},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 803, col: 16, offset: 25825},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 803, col: 23, offset: 25832},
																												expr: &litMatcher{
																													pos:        position{line: 803, col: 23, offset: 25832},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 805, col: 8, offset: 25916},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentFragment1077,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentFragment1080,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1085, col: 5, offset: 33263},
																				run: (*parser).callonDocumentFragment1087,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2786, col: 18, offset: 88507},
											run: (*parser).callonDocumentFragment1090,
											expr: &seqExpr{
												pos: position{line: 2786, col: 18, offset: 88507},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2787, col: 9, offset: 88517},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2787, col: 9, offset: 88517},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 11, offset: 88553},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 19, offset: 88561},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 29, offset: 88571},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 37, offset: 88579},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 47, offset: 88589},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2788, col: 55, offset: 88597},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2789, col: 11, offset: 88655},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentFragment1101,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment1104,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment1112,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 247, col: 11, offset: 7377},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2677, col: 5, offset: 85446},
											run: (*parser).callonDocumentFragment1120,
											expr: &seqExpr{
												pos: position{line: 2677, col: 5, offset: 85446},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2683, col: 19, offset: 85603},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2683, col: 26, offset: 85610},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentFragment1124,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment1127,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2678, col: 5, offset: 85470},
														label: "lines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2678, col: 11, offset: 85476},
															expr: &choiceExpr{
																pos: position{line: 2678, col: 12, offset: 85477},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 676, col: 14, offset: 21465},
																		run: (*parser).callonDocumentFragment1137,
																		expr: &seqExpr{
																			pos: position{line: 676, col: 14, offset: 21465},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					expr: &notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 676, col: 19, offset: 21470},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonDocumentFragment1143,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonDocumentFragment1146,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2690, col: 5, offset: 85722},
																		run: (*parser).callonDocumentFragment1153,
																		expr: &seqExpr{
																			pos: position{line: 2690, col: 5, offset: 85722},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2690, col: 5, offset: 85722},
																					expr: &choiceExpr{
																						pos: position{line: 2687, col: 22, offset: 85683},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2683, col: 19, offset: 85603},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2683, col: 19, offset: 85603},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2683, col: 26, offset: 85610},
																										expr: &actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonDocumentFragment1160,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2930, col: 8, offset: 92541},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2919, col: 12, offset: 92331},
																												run: (*parser).callonDocumentFragment1163,
																												expr: &choiceExpr{
																													pos: position{line: 2919, col: 13, offset: 92332},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2919, col: 13, offset: 92332},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2919, col: 20, offset: 92339},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2919, col: 29, offset: 92348},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2691, col: 5, offset: 85745},
																					label: "content",
																					expr: &choiceExpr{
																						pos: position{line: 2692, col: 9, offset: 85763},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2692, col: 10, offset: 85764},
																								run: (*parser).callonDocumentFragment1174,
																								expr: &labeledExpr{
																									pos:   position{line: 2692, col: 10, offset: 85764},
																									label: "cells",
																									expr: &choiceExpr{
																										pos: position{line: 2692, col: 17, offset: 85771},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2700, col: 21, offset: 85967},
																												run: (*parser).callonDocumentFragment1177,
																												expr: &seqExpr{
																													pos: position{line: 2700, col: 21, offset: 85967},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 2700, col: 21, offset: 85967},
																															label: "cells",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2700, col: 27, offset: 85973},
																																expr: &actionExpr{
																																	pos: position{line: 2705, col: 5, offset: 86048},
																																	run: (*parser).callonDocumentFragment1181,
																																	expr: &seqExpr{
																																		pos: position{line: 2705, col: 5, offset: 86048},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2705, col: 5, offset: 86048},
																																				val:        "|",
																																				ignoreCase: false,
																																				want:       "\"|\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2705, col: 9, offset: 86052},
																																				expr: &actionExpr{
																																					pos: position{line: 2910, col: 10, offset: 92147},
																																					run: (*parser).callonDocumentFragment1185,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2910, col: 11, offset: 92148},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 2705, col: 16, offset: 86059},
																																				label: "content",
																																				expr: &actionExpr{
																																					pos: position{line: 2711, col: 5, offset: 86258},
																																					run: (*parser).callonDocumentFragment1188,
																																					expr: &labeledExpr{
																																						pos:   position{line: 2711, col: 5, offset: 86258},
																																						label: "content",
																																						expr: &actionExpr{
																																							pos: position{line: 2711, col: 14, offset: 86267},
																																							run: (*parser).callonDocumentFragment1190,
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 2711, col: 14, offset: 86267},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2711, col: 14, offset: 86267},
																																									val:        "[^|\\r\\n]",
																																									chars:      []rune{'|', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2930, col: 8, offset: 92541},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2919, col: 12, offset: 92331},
																																	run: (*parser).callonDocumentFragment1194,
																																	expr: &choiceExpr{
																																		pos: position{line: 2919, col: 13, offset: 92332},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2919, col: 13, offset: 92332},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2919, col: 20, offset: 92339},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2919, col: 29, offset: 92348},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2927, col: 8, offset: 92491},
																																	expr: &anyMatcher{
																																		line: 2927, col: 9, offset: 92492,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2717, col: 24, offset: 86403},
																												run: (*parser).callonDocumentFragment1201,
																												expr: &labeledExpr{
																													pos:   position{line: 2717, col: 24, offset: 86403},
																													label: "cells",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2717, col: 30, offset: 86409},
																														expr: &actionExpr{
																															pos: position{line: 2722, col: 5, offset: 86485},
																															run: (*parser).callonDocumentFragment1204,
																															expr: &seqExpr{
																																pos: position{line: 2722, col: 5, offset: 86485},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 2722, col: 5, offset: 86485},
																																		expr: &choiceExpr{
																																			pos: position{line: 2687, col: 22, offset: 85683},
																																			alternatives: []interface{}{
																																				&seqExpr{
																																					pos: position{line: 2683, col: 19, offset: 85603},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2683, col: 19, offset: 85603},
																																							val:        "|===",
																																							ignoreCase: false,
																																							want:       "\"|===\"",
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 2683, col: 26, offset: 85610},
																																							expr: &actionExpr{
																																								pos: position{line: 2910, col: 10, offset: 92147},
																																								run: (*parser).callonDocumentFragment1211,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2910, col: 11, offset: 92148},
																																									val:        "[ \\t]",
																																									chars:      []rune{' ', '\t'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 2930, col: 8, offset: 92541},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 2919, col: 12, offset: 92331},
																																									run: (*parser).callonDocumentFragment1214,
																																									expr: &choiceExpr{
																																										pos: position{line: 2919, col: 13, offset: 92332},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 13, offset: 92332},
																																												val:        "\n",
																																												ignoreCase: false,
																																												want:       "\"\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 20, offset: 92339},
																																												val:        "\r\n",
																																												ignoreCase: false,
																																												want:       "\"\\r\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 29, offset: 92348},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2927, col: 8, offset: 92491},
																																									expr: &anyMatcher{
																																										line: 2927, col: 9, offset: 92492,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2927, col: 8, offset: 92491},
																																					expr: &anyMatcher{
																																						line: 2927, col: 9, offset: 92492,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2723, col: 5, offset: 86508},
																																		expr: &actionExpr{
																																			pos: position{line: 676, col: 14, offset: 21465},
																																			run: (*parser).callonDocumentFragment1224,
																																			expr: &seqExpr{
																																				pos: position{line: 676, col: 14, offset: 21465},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 676, col: 14, offset: 21465},
																																						expr: &notExpr{
																																							pos: position{line: 2927, col: 8, offset: 92491},
																																							expr: &anyMatcher{
																																								line: 2927, col: 9, offset: 92492,
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 676, col: 19, offset: 21470},
																																						expr: &actionExpr{
																																							pos: position{line: 2910, col: 10, offset: 92147},
																																							run: (*parser).callonDocumentFragment1230,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2910, col: 11, offset: 92148},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2930, col: 8, offset: 92541},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2919, col: 12, offset: 92331},
																																								run: (*parser).callonDocumentFragment1233,
																																								expr: &choiceExpr{
																																									pos: position{line: 2919, col: 13, offset: 92332},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 13, offset: 92332},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 20, offset: 92339},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 29, offset: 92348},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2927, col: 8, offset: 92491},
																																								expr: &anyMatcher{
																																									line: 2927, col: 9, offset: 92492,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 2724, col: 5, offset: 86523},
																																		label: "format",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 2724, col: 12, offset: 86530},
																																			expr: &actionExpr{
																																				pos: position{line: 2741, col: 20, offset: 86994},
																																				run: (*parser).callonDocumentFragment1242,
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 2741, col: 20, offset: 86994},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2741, col: 20, offset: 86994},
																																						val:        "[^ |\\r\\n]",
																																						chars:      []rune{' ', '|', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2724, col: 31, offset: 86549},
																																		val:        "|",
																																		ignoreCase: false,
																																		want:       "\"|\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2724, col: 35, offset: 86553},
																																		expr: &actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonDocumentFragment1247,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&zeroOrOneExpr{
																																		pos: position{line: 2724, col: 42, offset: 86560},
																																		expr: &actionExpr{
																																			pos: position{line: 2919, col: 12, offset: 92331},
																																			run: (*parser).callonDocumentFragment1250,
																																			expr: &choiceExpr{
																																				pos: position{line: 2919, col: 13, offset: 92332},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2919, col: 13, offset: 92332},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2919, col: 20, offset: 92339},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2919, col: 29, offset: 92348},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 2724, col: 51, offset: 86569},
																																		label: "content",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 2730, col: 5, offset: 86728},
																																			expr: &actionExpr{
																																				pos: position{line: 2731, col: 9, offset: 86738},
																																				run: (*parser).callonDocumentFragment1257,
																																				expr: &seqExpr{
																																					pos: position{line: 2731, col: 9, offset: 86738},
																																					exprs: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2731, col: 9, offset: 86738},
																																							expr: &choiceExpr{
																																								pos: position{line: 2687, col: 22, offset: 85683},
																																								alternatives: []interface{}{
																																									&seqExpr{
																																										pos: position{line: 2683, col: 19, offset: 85603},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2683, col: 19, offset: 85603},
																																												val:        "|===",
																																												ignoreCase: false,
																																												want:       "\"|===\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 2683, col: 26, offset: 85610},
																																												expr: &actionExpr{
																																													pos: position{line: 2910, col: 10, offset: 92147},
																																													run: (*parser).callonDocumentFragment1264,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 2910, col: 11, offset: 92148},
																																														val:        "[ \\t]",
																																														chars:      []rune{' ', '\t'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																											&choiceExpr{
																																												pos: position{line: 2930, col: 8, offset: 92541},
																																												alternatives: []interface{}{
																																													&actionExpr{
																																														pos: position{line: 2919, col: 12, offset: 92331},
																																														run: (*parser).callonDocumentFragment1267,
																																														expr: &choiceExpr{
																																															pos: position{line: 2919, col: 13, offset: 92332},
																																															alternatives: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																																	val:        "\n",
																																																	ignoreCase: false,
																																																	want:       "\"\\n\"",
																																																},
																																																&litMatcher{
																																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																																	val:        "\r\n",
																																																	ignoreCase: false,
																																																	want:       "\"\\r\\n\"",
																																																},
																																																&litMatcher{
																																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																																	val:        "\r",
																																																	ignoreCase: false,
																																																	want:       "\"\\r\"",
																																																},
																																															},
																																														},
																																													},
																																													&notExpr{
																																														pos: position{line: 2927, col: 8, offset: 92491},
																																														expr: &anyMatcher{
																																															line: 2927, col: 9, offset: 92492,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2927, col: 8, offset: 92491},
																																										expr: &anyMatcher{
																																											line: 2927, col: 9, offset: 92492,
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2732, col: 9, offset: 86765},
																																							expr: &actionExpr{
																																								pos: position{line: 676, col: 14, offset: 21465},
																																								run: (*parser).callonDocumentFragment1277,
																																								expr: &seqExpr{
																																									pos: position{line: 676, col: 14, offset: 21465},
																																									exprs: []interface{}{
																																										&notExpr{
																																											pos: position{line: 676, col: 14, offset: 21465},
																																											expr: &notExpr{
																																												pos: position{line: 2927, col: 8, offset: 92491},
																																												expr: &anyMatcher{
																																													line: 2927, col: 9, offset: 92492,
																																												},
																																											},
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 676, col: 19, offset: 21470},
																																											expr: &actionExpr{
																																												pos: position{line: 2910, col: 10, offset: 92147},
																																												run: (*parser).callonDocumentFragment1283,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2910, col: 11, offset: 92148},
																																													val:        "[ \\t]",
																																													chars:      []rune{' ', '\t'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																										&choiceExpr{
																																											pos: position{line: 2930, col: 8, offset: 92541},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 2919, col: 12, offset: 92331},
																																													run: (*parser).callonDocumentFragment1286,
																																													expr: &choiceExpr{
																																														pos: position{line: 2919, col: 13, offset: 92332},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 13, offset: 92332},
																																																val:        "\n",
																																																ignoreCase: false,
																																																want:       "\"\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 20, offset: 92339},
																																																val:        "\r\n",
																																																ignoreCase: false,
																																																want:       "\"\\r\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 29, offset: 92348},
																																																val:        "\r",
																																																ignoreCase: false,
																																																want:       "\"\\r\"",
																																															},
																																														},
																																													},
																																												},
																																												&notExpr{
																																													pos: position{line: 2927, col: 8, offset: 92491},
																																													expr: &anyMatcher{
																																														line: 2927, col: 9, offset: 92492,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2733, col: 9, offset: 86784},
																																							expr: &seqExpr{
																																								pos: position{line: 2733, col: 11, offset: 86786},
																																								exprs: []interface{}{
																																									&labeledExpr{
																																										pos:   position{line: 2733, col: 11, offset: 86786},
																																										label: "format",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 2733, col: 18, offset: 86793},
																																											expr: &actionExpr{
																																												pos: position{line: 2741, col: 20, offset: 86994},
																																												run: (*parser).callonDocumentFragment1297,
																																												expr: &zeroOrMoreExpr{
																																													pos: position{line: 2741, col: 20, offset: 86994},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 2741, col: 20, offset: 86994},
																																														val:        "[^ |\\r\\n]",
																																														chars:      []rune{' ', '|', '\r', '\n'},
																																														ignoreCase: false,
																																														inverted:   true,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2733, col: 37, offset: 86812},
																																										val:        "|",
																																										ignoreCase: false,
																																										want:       "\"|\"",
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 2734, col: 9, offset: 86825},
																																							label: "content",
																																							expr: &actionExpr{
																																								pos: position{line: 2734, col: 18, offset: 86834},
																																								run: (*parser).callonDocumentFragment1302,
																																								expr: &zeroOrMoreExpr{
																																									pos: position{line: 2734, col: 18, offset: 86834},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2734, col: 18, offset: 86834},
																																										val:        "[^|\\r\\n]",
																																										chars:      []rune{'|', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																						&zeroOrOneExpr{
																																							pos: position{line: 2736, col: 12, offset: 86896},
																																							expr: &choiceExpr{
																																								pos: position{line: 2930, col: 8, offset: 92541},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2919, col: 12, offset: 92331},
																																										run: (*parser).callonDocumentFragment1307,
																																										expr: &choiceExpr{
																																											pos: position{line: 2919, col: 13, offset: 92332},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2919, col: 13, offset: 92332},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2919, col: 20, offset: 92339},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2919, col: 29, offset: 92348},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2927, col: 8, offset: 92491},
																																										expr: &anyMatcher{
																																											line: 2927, col: 9, offset: 92492,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 676, col: 14, offset: 21465},
																								run: (*parser).callonDocumentFragment1314,
																								expr: &seqExpr{
																									pos: position{line: 676, col: 14, offset: 21465},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 676, col: 14, offset: 21465},
																											expr: &notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 676, col: 19, offset: 21470},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonDocumentFragment1320,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDocumentFragment1323,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2687, col: 22, offset: 85683},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2683, col: 19, offset: 85603},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2683, col: 19, offset: 85603},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2683, col: 26, offset: 85610},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment1334,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment1337,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											run: (*parser).callonDocumentFragment1346,
											expr: &seqExpr{
												pos: position{line: 2562, col: 22, offset: 82365},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2567, col: 31, offset: 82586},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2567, col: 36, offset: 82591},
														expr: &litMatcher{
															pos:        position{line: 2567, col: 37, offset: 82592},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2562, col: 49, offset: 82392},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															run: (*parser).callonDocumentFragment1352,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2857, col: 13, offset: 90620},
																expr: &charClassMatcher{
																	pos:        position{line: 2857, col: 13, offset: 90620},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentFragment1356,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1221, col: 5, offset: 37836},
											run: (*parser).callonDocumentFragment1363,
											expr: &seqExpr{
												pos: position{line: 1221, col: 5, offset: 37836},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1221, col: 5, offset: 37836},
														run: (*parser).callonDocumentFragment1365,
													},
													&labeledExpr{
														pos:   position{line: 1224, col: 5, offset: 37894},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1229, col: 20, offset: 37989},
															run: (*parser).callonDocumentFragment1367,
															expr: &seqExpr{
																pos: position{line: 1229, col: 20, offset: 37989},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1233, col: 30, offset: 38161},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1233, col: 36, offset: 38167},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment1371,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment1374,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1229, col: 45, offset: 38014},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1229, col: 53, offset: 38022},
																			expr: &actionExpr{
																				pos: position{line: 1235, col: 27, offset: 38205},
																				run: (*parser).callonDocumentFragment1383,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1235, col: 27, offset: 38205},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1235, col: 28, offset: 38206},
																						expr: &seqExpr{
																							pos: position{line: 1235, col: 29, offset: 38207},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1235, col: 29, offset: 38207},
																									expr: &seqExpr{
																										pos: position{line: 1233, col: 30, offset: 38161},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1233, col: 30, offset: 38161},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1233, col: 36, offset: 38167},
																												expr: &actionExpr{
																													pos: position{line: 2910, col: 10, offset: 92147},
																													run: (*parser).callonDocumentFragment1391,
																													expr: &charClassMatcher{
																														pos:        position{line: 2910, col: 11, offset: 92148},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2930, col: 8, offset: 92541},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2919, col: 12, offset: 92331},
																														run: (*parser).callonDocumentFragment1394,
																														expr: &choiceExpr{
																															pos: position{line: 2919, col: 13, offset: 92332},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2919, col: 13, offset: 92332},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 20, offset: 92339},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2919, col: 29, offset: 92348},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1235, col: 55, offset: 38233,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1233, col: 30, offset: 38161},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1233, col: 36, offset: 38167},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonDocumentFragment1404,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentFragment1407,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 11, offset: 7466},
											name: "Paragraph",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 253, col: 5, offset: 7554},
							run: (*parser).callonDocumentFragment1415,
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 276, col: 1, offset: 8254},
			expr: &actionExpr{
				pos: position{line: 277, col: 5, offset: 8285},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 277, col: 5, offset: 8285},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 277, col: 5, offset: 8285},
							run: (*parser).callonDelimitedBlockElements3,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 5, offset: 8366},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 14, offset: 8375},
								expr: &choiceExpr{
									pos: position{line: 282, col: 9, offset: 8385},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											run: (*parser).callonDelimitedBlockElements7,
											expr: &seqExpr{
												pos: position{line: 1197, col: 23, offset: 36942},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1195, col: 32, offset: 36910},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1197, col: 51, offset: 36970},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															run: (*parser).callonDelimitedBlockElements11,
															expr: &oneOrMoreExpr{
																pos: position{line: 1197, col: 56, offset: 36975},
																expr: &charClassMatcher{
																	pos:        position{line: 1197, col: 56, offset: 36975},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1195, col: 32, offset: 36910},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 11, offset: 8447},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 302, col: 1, offset: 9150},
			expr: &actionExpr{
				pos: position{line: 303, col: 5, offset: 9179},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 303, col: 5, offset: 9179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 5, offset: 9179},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 9, offset: 9183},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 318, col: 18, offset: 9733},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 318, col: 18, offset: 9733},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 318, col: 18, offset: 9733},
											val:        "[_\\pL\\pN]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 318, col: 28, offset: 9743},
											expr: &charClassMatcher{
												pos:        position{line: 318, col: 29, offset: 9744},
												val:        "[-\\pL\\pN]",
												chars:      []rune{'-'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 30, offset: 9204},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 304, col: 5, offset: 9213},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 11, offset: 9219},
								expr: &actionExpr{
									pos: position{line: 305, col: 9, offset: 9229},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 305, col: 9, offset: 9229},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2914, col: 11, offset: 92214},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 2914, col: 11, offset: 92214},
													expr: &charClassMatcher{
														pos:        position{line: 2914, col: 12, offset: 92215},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 306, col: 9, offset: 9321},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 306, col: 16, offset: 9328},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 322, col: 1, offset: 9800},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 9834},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 9834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 9834},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 15, offset: 9844},
								name: "AttributeDeclarationValueElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 5, offset: 9884},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 19, offset: 9898},
								expr: &actionExpr{
									pos: position{line: 325, col: 9, offset: 9908},
									run: (*parser).callonAttributeDeclarationValue7,
									expr: &seqExpr{
										pos: position{line: 325, col: 9, offset: 9908},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 325, col: 9, offset: 9908},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 2919, col: 12, offset: 92331},
												run: (*parser).callonAttributeDeclarationValue10,
												expr: &choiceExpr{
													pos: position{line: 2919, col: 13, offset: 92332},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2919, col: 13, offset: 92332},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2919, col: 20, offset: 92339},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2919, col: 29, offset: 92348},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 326, col: 9, offset: 9930},
												expr: &actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonAttributeDeclarationValue16,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 9, offset: 9945},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 19, offset: 9955},
													name: "AttributeDeclarationValueElements",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElements",
			pos:  position{line: 338, col: 1, offset: 10285},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 10327},
				run: (*parser).callonAttributeDeclarationValueElements1,
				expr: &labeledExpr{
					pos:   position{line: 339, col: 5, offset: 10327},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 339, col: 14, offset: 10336},
						expr: &ruleRefExpr{
							pos:  position{line: 339, col: 15, offset: 10337},
							name: "AttributeDeclarationValueElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 343, col: 1, offset: 10426},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10467},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10467},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 344, col: 5, offset: 10467},
							expr: &seqExpr{
								pos: position{line: 344, col: 7, offset: 10469},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 344, col: 7, offset: 10469},
										expr: &litMatcher{
											pos:        position{line: 344, col: 7, offset: 10469},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 344, col: 13, offset: 10475},
										expr: &actionExpr{
											pos: position{line: 2910, col: 10, offset: 92147},
											run: (*parser).callonAttributeDeclarationValueElement8,
											expr: &charClassMatcher{
												pos:        position{line: 2910, col: 11, offset: 92148},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2930, col: 8, offset: 92541},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2919, col: 12, offset: 92331},
												run: (*parser).callonAttributeDeclarationValueElement11,
												expr: &choiceExpr{
													pos: position{line: 2919, col: 13, offset: 92332},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2919, col: 13, offset: 92332},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2919, col: 20, offset: 92339},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2919, col: 29, offset: 92348},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2927, col: 8, offset: 92491},
												expr: &anyMatcher{
													line: 2927, col: 9, offset: 92492,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 5, offset: 10491},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 346, col: 9, offset: 10509},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 9, offset: 10509},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 347, col: 12, offset: 10538},
										run: (*parser).callonAttributeDeclarationValueElement21,
										expr: &oneOrMoreExpr{
											pos: position{line: 347, col: 12, offset: 10538},
											expr: &charClassMatcher{
												pos:        position{line: 347, col: 12, offset: 10538},
												val:        "[^\\r\\n<>&{ ]",
												chars:      []rune{'\r', '\n', '<', '>', '&', '{', ' '},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonAttributeDeclarationValueElement24,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonAttributeDeclarationValueElement26,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonAttributeDeclarationValueElement29,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonAttributeDeclarationValueElement31,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonAttributeDeclarationValueElement35,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonAttributeDeclarationValueElement39,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonAttributeDeclarationValueElement45,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonAttributeDeclarationValueElement50,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonAttributeDeclarationValueElement54,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonAttributeDeclarationValueElement60,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonAttributeDeclarationValueElement64,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonAttributeDeclarationValueElement70,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonAttributeDeclarationValueElement73,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonAttributeDeclarationValueElement77,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonAttributeDeclarationValueElement81,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2910, col: 10, offset: 92147},
										run: (*parser).callonAttributeDeclarationValueElement83,
										expr: &charClassMatcher{
											pos:        position{line: 2910, col: 11, offset: 92148},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonAttributeDeclarationValueElement85,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonAttributeDeclarationValueElement87,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonAttributeDeclarationValueElement90,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonAttributeDeclarationValueElement94,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonAttributeDeclarationValueElement101,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonAttributeDeclarationValueElement106,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonAttributeDeclarationValueElement108,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonAttributeDeclarationValueElement112,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonAttributeDeclarationValueElement116,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonAttributeDeclarationValueElement123,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonAttributeDeclarationValueElement128,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonAttributeDeclarationValueElement130,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonAttributeDeclarationValueElement134,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonAttributeDeclarationValueElement138,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonAttributeDeclarationValueElement144,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonAttributeDeclarationValueElement148,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 369, col: 1, offset: 11357},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 11380},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 5, offset: 11380},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 370, col: 16, offset: 11391},
						expr: &choiceExpr{
							pos: position{line: 372, col: 9, offset: 11458},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 372, col: 10, offset: 11459},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 372, col: 10, offset: 11459},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 372, col: 10, offset: 11459},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 404, col: 5, offset: 12334},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 404, col: 5, offset: 12334},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 404, col: 5, offset: 12334},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 405, col: 5, offset: 12344},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 406, col: 9, offset: 12357},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 406, col: 9, offset: 12357},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 406, col: 18, offset: 12366},
																			expr: &choiceExpr{
																				pos: position{line: 407, col: 13, offset: 12380},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 407, col: 14, offset: 12381},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 407, col: 14, offset: 12381},
																							expr: &charClassMatcher{
																								pos:        position{line: 407, col: 14, offset: 12381},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1197, col: 23, offset: 36942},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1197, col: 23, offset: 36942},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1195, col: 32, offset: 36910},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1197, col: 51, offset: 36970},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1197, col: 56, offset: 36975},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1197, col: 56, offset: 36975},
																											expr: &charClassMatcher{
																												pos:        position{line: 1197, col: 56, offset: 36975},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1195, col: 32, offset: 36910},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonBlockAttributes86,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonBlockAttributes90,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 412, col: 16, offset: 12614},
																						run: (*parser).callonBlockAttributes96,
																						expr: &litMatcher{
																							pos:        position{line: 412, col: 16, offset: 12614},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 418, col: 5, offset: 12800},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 372, col: 35, offset: 11484},
												expr: &actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonBlockAttributes100,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2930, col: 8, offset: 92541},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonBlockAttributes103,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 372, col: 46, offset: 11495},
												expr: &actionExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													run: (*parser).callonBlockAttributes111,
													expr: &seqExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 676, col: 14, offset: 21465},
																expr: &notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 676, col: 19, offset: 21470},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonBlockAttributes117,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonBlockAttributes120,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 376, col: 12, offset: 11616},
									run: (*parser).callonBlockAttributes127,
									expr: &seqExpr{
										pos: position{line: 376, col: 12, offset: 11616},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 376, col: 12, offset: 11616},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 423, col: 19, offset: 12919},
													run: (*parser).callonBlockAttributes130,
													expr: &seqExpr{
														pos: position{line: 423, col: 19, offset: 12919},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 423, col: 19, offset: 12919},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&notExpr{
																pos: position{line: 424, col: 5, offset: 12928},
																expr: &charClassMatcher{
																	pos:        position{line: 424, col: 6, offset: 12929},
																	val:        "[. ]",
																	chars:      []rune{'.', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 425, col: 5, offset: 13041},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 425, col: 14, offset: 13050},
																	expr: &choiceExpr{
																		pos: position{line: 426, col: 9, offset: 13060},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2840, col: 5, offset: 90159},
																				run: (*parser).callonBlockAttributes138,
																				expr: &seqExpr{
																					pos: position{line: 2840, col: 5, offset: 90159},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2840, col: 6, offset: 90160},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2841, col: 5, offset: 90205},
																							expr: &charClassMatcher{
																								pos:        position{line: 2841, col: 6, offset: 90206},
																								val:        "[,;?!\\pL\\pN]",
																								chars:      []rune{',', ';', '?', '!'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&andExpr{
																							pos: position{line: 2842, col: 5, offset: 90269},
																							expr: &choiceExpr{
																								pos: position{line: 2842, col: 7, offset: 90271},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonBlockAttributes145,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1195, col: 32, offset: 36910},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonBlockAttributes148,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonBlockAttributes155,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 644, col: 5, offset: 20295},
																				run: (*parser).callonBlockAttributes157,
																				expr: &seqExpr{
																					pos: position{line: 644, col: 5, offset: 20295},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 644, col: 5, offset: 20295},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 644, col: 13, offset: 20303},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonBlockAttributes161,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 644, col: 32, offset: 20322},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 651, col: 5, offset: 20563},
																				run: (*parser).callonBlockAttributes167,
																				expr: &seqExpr{
																					pos: position{line: 651, col: 5, offset: 20563},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 651, col: 5, offset: 20563},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 651, col: 9, offset: 20567},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9733},
																								run: (*parser).callonBlockAttributes171,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9733},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9743},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9744},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 651, col: 28, offset: 20586},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2853, col: 12, offset: 90555},
																				run: (*parser).callonBlockAttributes177,
																				expr: &charClassMatcher{
																					pos:        position{line: 2853, col: 12, offset: 90555},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 35, offset: 11639},
												expr: &actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonBlockAttributes180,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2930, col: 8, offset: 92541},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonBlockAttributes183,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 46, offset: 11650},
												expr: &actionExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													run: (*parser).callonBlockAttributes191,
													expr: &seqExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 676, col: 14, offset: 21465},
																expr: &notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 676, col: 19, offset: 21470},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonBlockAttributes197,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonBlockAttributes200,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 380, col: 12, offset: 11740},
									run: (*parser).callonBlockAttributes207,
									expr: &seqExpr{
										pos: position{line: 380, col: 12, offset: 11740},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 380, col: 12, offset: 11740},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 380, col: 24, offset: 11752},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 44, offset: 11772},
												expr: &actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonBlockAttributes212,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2930, col: 8, offset: 92541},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonBlockAttributes215,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 55, offset: 11783},
												expr: &actionExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													run: (*parser).callonBlockAttributes223,
													expr: &seqExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 676, col: 14, offset: 21465},
																expr: &notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 676, col: 19, offset: 21470},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonBlockAttributes229,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonBlockAttributes232,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 388, col: 1, offset: 11967},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11991},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11991},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11991},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 5, offset: 11999},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 390, col: 16, offset: 12010},
								expr: &actionExpr{
									pos: position{line: 391, col: 9, offset: 12020},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 392, col: 13, offset: 12034},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 392, col: 13, offset: 12034},
												expr: &litMatcher{
													pos:        position{line: 392, col: 14, offset: 12035},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 393, col: 13, offset: 12067},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 12078},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 12078},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 46, offset: 12100},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 398, col: 5, offset: 12183},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 436, col: 1, offset: 13420},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 13446},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 13446},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 437, col: 5, offset: 13446},
							expr: &litMatcher{
								pos:        position{line: 437, col: 6, offset: 13447},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 437, col: 10, offset: 13451},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 437, col: 14, offset: 13455},
							expr: &litMatcher{
								pos:        position{line: 437, col: 15, offset: 13456},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 5, offset: 13569},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 438, col: 31, offset: 13595},
								expr: &actionExpr{
									pos: position{line: 454, col: 5, offset: 14250},
									run: (*parser).callonLongHandAttributes10,
									expr: &seqExpr{
										pos: position{line: 454, col: 5, offset: 14250},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 454, col: 5, offset: 14250},
												label: "main",
												expr: &zeroOrOneExpr{
													pos: position{line: 454, col: 10, offset: 14255},
													expr: &actionExpr{
														pos: position{line: 486, col: 23, offset: 15065},
														run: (*parser).callonLongHandAttributes14,
														expr: &labeledExpr{
															pos:   position{line: 486, col: 23, offset: 15065},
															label: "value",
															expr: &choiceExpr{
																pos: position{line: 502, col: 5, offset: 15544},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 563, col: 5, offset: 17356},
																		run: (*parser).callonLongHandAttributes17,
																		expr: &seqExpr{
																			pos: position{line: 563, col: 5, offset: 17356},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 563, col: 5, offset: 17356},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&notExpr{
																					pos: position{line: 563, col: 9, offset: 17360},
																					expr: &litMatcher{
																						pos:        position{line: 563, col: 10, offset: 17361},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 564, col: 5, offset: 17440},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 570, col: 5, offset: 17571},
																						run: (*parser).callonLongHandAttributes23,
																						expr: &labeledExpr{
																							pos:   position{line: 570, col: 5, offset: 17571},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 570, col: 14, offset: 17580},
																								expr: &choiceExpr{
																									pos: position{line: 571, col: 9, offset: 17590},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2835, col: 14, offset: 90086},
																											run: (*parser).callonLongHandAttributes27,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2835, col: 14, offset: 90086},
																												expr: &charClassMatcher{
																													pos:        position{line: 2835, col: 14, offset: 90086},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonLongHandAttributes30,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2585, col: 5, offset: 83342},
																											run: (*parser).callonLongHandAttributes32,
																											expr: &litMatcher{
																												pos:        position{line: 2585, col: 5, offset: 83342},
																												val:        "\"`",
																												ignoreCase: false,
																												want:       "\"\\\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2588, col: 7, offset: 83400},
																											run: (*parser).callonLongHandAttributes34,
																											expr: &litMatcher{
																												pos:        position{line: 2588, col: 7, offset: 83400},
																												val:        "`\"",
																												ignoreCase: false,
																												want:       "\"`\\\"\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2591, col: 7, offset: 83458},
																											run: (*parser).callonLongHandAttributes36,
																											expr: &litMatcher{
																												pos:        position{line: 2591, col: 7, offset: 83458},
																												val:        "'`",
																												ignoreCase: false,
																												want:       "\"'`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2594, col: 7, offset: 83514},
																											run: (*parser).callonLongHandAttributes38,
																											expr: &litMatcher{
																												pos:        position{line: 2594, col: 7, offset: 83514},
																												val:        "`'",
																												ignoreCase: false,
																												want:       "\"`'\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 635, col: 5, offset: 20085},
																											run: (*parser).callonLongHandAttributes40,
																											expr: &seqExpr{
																												pos: position{line: 635, col: 5, offset: 20085},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 635, col: 5, offset: 20085},
																														run: (*parser).callonLongHandAttributes42,
																													},
																													&labeledExpr{
																														pos:   position{line: 638, col: 5, offset: 20157},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 638, col: 14, offset: 20166},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 657, col: 25, offset: 20767},
																																	run: (*parser).callonLongHandAttributes45,
																																	expr: &seqExpr{
																																		pos: position{line: 657, col: 25, offset: 20767},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 657, col: 25, offset: 20767},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 657, col: 37, offset: 20779},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes49,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 657, col: 56, offset: 20798},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 657, col: 62, offset: 20804},
																																					expr: &actionExpr{
																																						pos: position{line: 665, col: 17, offset: 21099},
																																						run: (*parser).callonLongHandAttributes56,
																																						expr: &seqExpr{
																																							pos: position{line: 665, col: 17, offset: 21099},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 665, col: 17, offset: 21099},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 665, col: 21, offset: 21103},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 665, col: 28, offset: 21110},
																																												run: (*parser).callonLongHandAttributes61,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 665, col: 28, offset: 21110},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 667, col: 9, offset: 21164},
																																												run: (*parser).callonLongHandAttributes63,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 667, col: 9, offset: 21164},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 667, col: 9, offset: 21164},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 657, col: 78, offset: 20820},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 661, col: 25, offset: 20938},
																																	run: (*parser).callonLongHandAttributes67,
																																	expr: &seqExpr{
																																		pos: position{line: 661, col: 25, offset: 20938},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 661, col: 25, offset: 20938},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 661, col: 38, offset: 20951},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes71,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 661, col: 57, offset: 20970},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 661, col: 63, offset: 20976},
																																					expr: &actionExpr{
																																						pos: position{line: 665, col: 17, offset: 21099},
																																						run: (*parser).callonLongHandAttributes78,
																																						expr: &seqExpr{
																																							pos: position{line: 665, col: 17, offset: 21099},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 665, col: 17, offset: 21099},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 665, col: 21, offset: 21103},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 665, col: 28, offset: 21110},
																																												run: (*parser).callonLongHandAttributes83,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 665, col: 28, offset: 21110},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 667, col: 9, offset: 21164},
																																												run: (*parser).callonLongHandAttributes85,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 667, col: 9, offset: 21164},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 667, col: 9, offset: 21164},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 661, col: 79, offset: 20992},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 644, col: 5, offset: 20295},
																																	run: (*parser).callonLongHandAttributes89,
																																	expr: &seqExpr{
																																		pos: position{line: 644, col: 5, offset: 20295},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 644, col: 5, offset: 20295},
																																				val:        "\\{",
																																				ignoreCase: false,
																																				want:       "\"\\\\{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 644, col: 13, offset: 20303},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes93,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 644, col: 32, offset: 20322},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 651, col: 5, offset: 20563},
																																	run: (*parser).callonLongHandAttributes99,
																																	expr: &seqExpr{
																																		pos: position{line: 651, col: 5, offset: 20563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 651, col: 5, offset: 20563},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 651, col: 9, offset: 20567},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes103,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 651, col: 28, offset: 20586},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 575, col: 12, offset: 17680},
																											run: (*parser).callonLongHandAttributes109,
																											expr: &litMatcher{
																												pos:        position{line: 575, col: 12, offset: 17680},
																												val:        "\\'",
																												ignoreCase: false,
																												want:       "\"\\\\'\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 578, col: 13, offset: 17782},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 578, col: 20, offset: 17789},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																										&actionExpr{
																											pos: position{line: 578, col: 27, offset: 17796},
																											run: (*parser).callonLongHandAttributes113,
																											expr: &litMatcher{
																												pos:        position{line: 578, col: 27, offset: 17796},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 581, col: 12, offset: 17956},
																											run: (*parser).callonLongHandAttributes115,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 581, col: 12, offset: 17956},
																												expr: &charClassMatcher{
																													pos:        position{line: 581, col: 12, offset: 17956},
																													val:        "[^\\r\\n\\\\\\ ]",
																													chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 565, col: 5, offset: 17488},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 589, col: 5, offset: 18188},
																		run: (*parser).callonLongHandAttributes119,
																		expr: &seqExpr{
																			pos: position{line: 589, col: 5, offset: 18188},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 589, col: 5, offset: 18188},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&notExpr{
																					pos: position{line: 589, col: 10, offset: 18193},
																					expr: &litMatcher{
																						pos:        position{line: 589, col: 11, offset: 18194},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 590, col: 5, offset: 18273},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 596, col: 5, offset: 18422},
																						run: (*parser).callonLongHandAttributes125,
																						expr: &labeledExpr{
																							pos:   position{line: 596, col: 5, offset: 18422},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 596, col: 14, offset: 18431},
																								expr: &choiceExpr{
																									pos: position{line: 597, col: 9, offset: 18441},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2835, col: 14, offset: 90086},
																											run: (*parser).callonLongHandAttributes129,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2835, col: 14, offset: 90086},
																												expr: &charClassMatcher{
																													pos:        position{line: 2835, col: 14, offset: 90086},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonLongHandAttributes132,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2585, col: 5, offset: 83342},
																											run: (*parser).callonLongHandAttributes134,
																											expr: &litMatcher{
																												pos:        position{line: 2585, col: 5, offset: 83342},
																												val:        "\"`",
																												ignoreCase: false,
																												want:       "\"\\\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2588, col: 7, offset: 83400},
																											run: (*parser).callonLongHandAttributes136,
																											expr: &litMatcher{
																												pos:        position{line: 2588, col: 7, offset: 83400},
																												val:        "`\"",
																												ignoreCase: false,
																												want:       "\"`\\\"\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2591, col: 7, offset: 83458},
																											run: (*parser).callonLongHandAttributes138,
																											expr: &litMatcher{
																												pos:        position{line: 2591, col: 7, offset: 83458},
																												val:        "'`",
																												ignoreCase: false,
																												want:       "\"'`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2594, col: 7, offset: 83514},
																											run: (*parser).callonLongHandAttributes140,
																											expr: &litMatcher{
																												pos:        position{line: 2594, col: 7, offset: 83514},
																												val:        "`'",
																												ignoreCase: false,
																												want:       "\"`'\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 635, col: 5, offset: 20085},
																											run: (*parser).callonLongHandAttributes142,
																											expr: &seqExpr{
																												pos: position{line: 635, col: 5, offset: 20085},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 635, col: 5, offset: 20085},
																														run: (*parser).callonLongHandAttributes144,
																													},
																													&labeledExpr{
																														pos:   position{line: 638, col: 5, offset: 20157},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 638, col: 14, offset: 20166},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 657, col: 25, offset: 20767},
																																	run: (*parser).callonLongHandAttributes147,
																																	expr: &seqExpr{
																																		pos: position{line: 657, col: 25, offset: 20767},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 657, col: 25, offset: 20767},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 657, col: 37, offset: 20779},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes151,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 657, col: 56, offset: 20798},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 657, col: 62, offset: 20804},
																																					expr: &actionExpr{
																																						pos: position{line: 665, col: 17, offset: 21099},
																																						run: (*parser).callonLongHandAttributes158,
																																						expr: &seqExpr{
																																							pos: position{line: 665, col: 17, offset: 21099},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 665, col: 17, offset: 21099},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 665, col: 21, offset: 21103},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 665, col: 28, offset: 21110},
																																												run: (*parser).callonLongHandAttributes163,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 665, col: 28, offset: 21110},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 667, col: 9, offset: 21164},
																																												run: (*parser).callonLongHandAttributes165,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 667, col: 9, offset: 21164},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 667, col: 9, offset: 21164},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 657, col: 78, offset: 20820},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 661, col: 25, offset: 20938},
																																	run: (*parser).callonLongHandAttributes169,
																																	expr: &seqExpr{
																																		pos: position{line: 661, col: 25, offset: 20938},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 661, col: 25, offset: 20938},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 661, col: 38, offset: 20951},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes173,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 661, col: 57, offset: 20970},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 661, col: 63, offset: 20976},
																																					expr: &actionExpr{
																																						pos: position{line: 665, col: 17, offset: 21099},
																																						run: (*parser).callonLongHandAttributes180,
																																						expr: &seqExpr{
																																							pos: position{line: 665, col: 17, offset: 21099},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 665, col: 17, offset: 21099},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 665, col: 21, offset: 21103},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 665, col: 28, offset: 21110},
																																												run: (*parser).callonLongHandAttributes185,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 665, col: 28, offset: 21110},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 667, col: 9, offset: 21164},
																																												run: (*parser).callonLongHandAttributes187,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 667, col: 9, offset: 21164},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 667, col: 9, offset: 21164},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 661, col: 79, offset: 20992},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 644, col: 5, offset: 20295},
																																	run: (*parser).callonLongHandAttributes191,
																																	expr: &seqExpr{
																																		pos: position{line: 644, col: 5, offset: 20295},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 644, col: 5, offset: 20295},
																																				val:        "\\{",
																																				ignoreCase: false,
																																				want:       "\"\\\\{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 644, col: 13, offset: 20303},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes195,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 644, col: 32, offset: 20322},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 651, col: 5, offset: 20563},
																																	run: (*parser).callonLongHandAttributes201,
																																	expr: &seqExpr{
																																		pos: position{line: 651, col: 5, offset: 20563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 651, col: 5, offset: 20563},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 651, col: 9, offset: 20567},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 318, col: 18, offset: 9733},
																																					run: (*parser).callonLongHandAttributes205,
																																					expr: &seqExpr{
																																						pos: position{line: 318, col: 18, offset: 9733},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 318, col: 18, offset: 9733},
																																								val:        "[_\\pL\\pN]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 318, col: 28, offset: 9743},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 318, col: 29, offset: 9744},
																																									val:        "[-\\pL\\pN]",
																																									chars:      []rune{'-'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 651, col: 28, offset: 20586},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 601, col: 12, offset: 18532},
																											run: (*parser).callonLongHandAttributes211,
																											expr: &litMatcher{
																												pos:        position{line: 601, col: 12, offset: 18532},
																												val:        "\\\"",
																												ignoreCase: false,
																												want:       "\"\\\\\\\"\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 604, col: 13, offset: 18634},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 604, col: 21, offset: 18642},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																										&litMatcher{
																											pos:        position{line: 604, col: 29, offset: 18650},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&actionExpr{
																											pos: position{line: 604, col: 35, offset: 18656},
																											run: (*parser).callonLongHandAttributes216,
																											expr: &litMatcher{
																												pos:        position{line: 604, col: 35, offset: 18656},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 607, col: 12, offset: 18839},
																											run: (*parser).callonLongHandAttributes218,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 607, col: 12, offset: 18839},
																												expr: &charClassMatcher{
																													pos:        position{line: 607, col: 12, offset: 18839},
																													val:        "[^\\r\\n\\\\\"` ]",
																													chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 591, col: 5, offset: 18321},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andExpr{
																					pos: position{line: 591, col: 10, offset: 18326},
																					expr: &notExpr{
																						pos: position{line: 591, col: 12, offset: 18328},
																						expr: &seqExpr{
																							pos: position{line: 591, col: 14, offset: 18330},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 591, col: 14, offset: 18330},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonLongHandAttributes226,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 591, col: 21, offset: 18337},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 504, col: 7, offset: 15612},
																		run: (*parser).callonLongHandAttributes229,
																		expr: &seqExpr{
																			pos: position{line: 504, col: 7, offset: 15612},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 504, col: 7, offset: 15612},
																					label: "elements",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 504, col: 16, offset: 15621},
																						expr: &choiceExpr{
																							pos: position{line: 507, col: 9, offset: 15803},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2585, col: 5, offset: 83342},
																									run: (*parser).callonLongHandAttributes234,
																									expr: &litMatcher{
																										pos:        position{line: 2585, col: 5, offset: 83342},
																										val:        "\"`",
																										ignoreCase: false,
																										want:       "\"\\\"`\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2588, col: 7, offset: 83400},
																									run: (*parser).callonLongHandAttributes236,
																									expr: &litMatcher{
																										pos:        position{line: 2588, col: 7, offset: 83400},
																										val:        "`\"",
																										ignoreCase: false,
																										want:       "\"`\\\"\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2591, col: 7, offset: 83458},
																									run: (*parser).callonLongHandAttributes238,
																									expr: &litMatcher{
																										pos:        position{line: 2591, col: 7, offset: 83458},
																										val:        "'`",
																										ignoreCase: false,
																										want:       "\"'`\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2594, col: 7, offset: 83514},
																									run: (*parser).callonLongHandAttributes240,
																									expr: &litMatcher{
																										pos:        position{line: 2594, col: 7, offset: 83514},
																										val:        "`'",
																										ignoreCase: false,
																										want:       "\"`'\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 508, col: 12, offset: 15829},
																									run: (*parser).callonLongHandAttributes242,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 508, col: 12, offset: 15829},
																										expr: &charClassMatcher{
																											pos:        position{line: 508, col: 12, offset: 15829},
																											val:        "[^,=.%# \\r\\n�{]]",
																											chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonLongHandAttributes245,
																									expr: &seqExpr{
																										pos: position{line: 635, col: 5, offset: 20085},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 635, col: 5, offset: 20085},
																												run: (*parser).callonLongHandAttributes247,
																											},
																											&labeledExpr{
																												pos:   position{line: 638, col: 5, offset: 20157},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 638, col: 14, offset: 20166},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 657, col: 25, offset: 20767},
																															run: (*parser).callonLongHandAttributes250,
																															expr: &seqExpr{
																																pos: position{line: 657, col: 25, offset: 20767},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 657, col: 25, offset: 20767},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 657, col: 37, offset: 20779},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonLongHandAttributes254,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 657, col: 56, offset: 20798},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 657, col: 62, offset: 20804},
																																			expr: &actionExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				run: (*parser).callonLongHandAttributes261,
																																				expr: &seqExpr{
																																					pos: position{line: 665, col: 17, offset: 21099},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 665, col: 17, offset: 21099},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 665, col: 21, offset: 21103},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 665, col: 28, offset: 21110},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										run: (*parser).callonLongHandAttributes266,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 665, col: 28, offset: 21110},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										run: (*parser).callonLongHandAttributes268,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 667, col: 9, offset: 21164},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 667, col: 9, offset: 21164},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 657, col: 78, offset: 20820},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 661, col: 25, offset: 20938},
																															run: (*parser).callonLongHandAttributes272,
																															expr: &seqExpr{
																																pos: position{line: 661, col: 25, offset: 20938},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 661, col: 25, offset: 20938},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 661, col: 38, offset: 20951},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonLongHandAttributes276,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 661, col: 57, offset: 20970},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 661, col: 63, offset: 20976},
																																			expr: &actionExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				run: (*parser).callonLongHandAttributes283,
																																				expr: &seqExpr{
																																					pos: position{line: 665, col: 17, offset: 21099},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 665, col: 17, offset: 21099},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 665, col: 21, offset: 21103},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 665, col: 28, offset: 21110},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 665, col: 28, offset: 21110},
																																										run: (*parser).callonLongHandAttributes288,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 665, col: 28, offset: 21110},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										run: (*parser).callonLongHandAttributes290,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 667, col: 9, offset: 21164},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 667, col: 9, offset: 21164},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 661, col: 79, offset: 20992},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 644, col: 5, offset: 20295},
																															run: (*parser).callonLongHandAttributes294,
																															expr: &seqExpr{
																																pos: position{line: 644, col: 5, offset: 20295},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 644, col: 5, offset: 20295},
																																		val:        "\\{",
																																		ignoreCase: false,
																																		want:       "\"\\\\{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 644, col: 13, offset: 20303},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonLongHandAttributes298,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 644, col: 32, offset: 20322},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 651, col: 5, offset: 20563},
																															run: (*parser).callonLongHandAttributes304,
																															expr: &seqExpr{
																																pos: position{line: 651, col: 5, offset: 20563},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 651, col: 5, offset: 20563},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 651, col: 9, offset: 20567},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonLongHandAttributes308,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 651, col: 28, offset: 20586},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 513, col: 12, offset: 15997},
																									run: (*parser).callonLongHandAttributes314,
																									expr: &litMatcher{
																										pos:        position{line: 513, col: 12, offset: 15997},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 517, col: 5, offset: 16085},
																					expr: &notExpr{
																						pos: position{line: 517, col: 7, offset: 16087},
																						expr: &seqExpr{
																							pos: position{line: 517, col: 9, offset: 16089},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 517, col: 9, offset: 16089},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonLongHandAttributes320,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 517, col: 16, offset: 16096},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 457, col: 5, offset: 14295},
												label: "extras",
												expr: &zeroOrMoreExpr{
													pos: position{line: 457, col: 12, offset: 14302},
													expr: &actionExpr{
														pos: position{line: 458, col: 9, offset: 14313},
														run: (*parser).callonLongHandAttributes325,
														expr: &seqExpr{
															pos: position{line: 458, col: 9, offset: 14313},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 458, col: 9, offset: 14313},
																	expr: &litMatcher{
																		pos:        position{line: 458, col: 10, offset: 14314},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																},
																&notExpr{
																	pos: position{line: 458, col: 14, offset: 14318},
																	expr: &litMatcher{
																		pos:        position{line: 458, col: 15, offset: 14319},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 459, col: 9, offset: 14331},
																	label: "extra",
																	expr: &choiceExpr{
																		pos: position{line: 460, col: 13, offset: 14351},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 482, col: 25, offset: 14961},
																				run: (*parser).callonLongHandAttributes333,
																				expr: &seqExpr{
																					pos: position{line: 482, col: 25, offset: 14961},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 482, col: 25, offset: 14961},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 482, col: 29, offset: 14965},
																							label: "id",
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 15544},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 563, col: 5, offset: 17356},
																										run: (*parser).callonLongHandAttributes338,
																										expr: &seqExpr{
																											pos: position{line: 563, col: 5, offset: 17356},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 563, col: 5, offset: 17356},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 563, col: 9, offset: 17360},
																													expr: &litMatcher{
																														pos:        position{line: 563, col: 10, offset: 17361},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 564, col: 5, offset: 17440},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 570, col: 5, offset: 17571},
																														run: (*parser).callonLongHandAttributes344,
																														expr: &labeledExpr{
																															pos:   position{line: 570, col: 5, offset: 17571},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 570, col: 14, offset: 17580},
																																expr: &choiceExpr{
																																	pos: position{line: 571, col: 9, offset: 17590},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes348,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes351,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes353,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes355,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes357,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes359,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes361,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes363,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes366,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes370,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes377,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes382,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes384,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes388,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes392,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes399,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes404,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes406,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes410,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes414,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes420,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes424,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 575, col: 12, offset: 17680},
																																			run: (*parser).callonLongHandAttributes430,
																																			expr: &litMatcher{
																																				pos:        position{line: 575, col: 12, offset: 17680},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 13, offset: 17782},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 20, offset: 17789},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 578, col: 27, offset: 17796},
																																			run: (*parser).callonLongHandAttributes434,
																																			expr: &litMatcher{
																																				pos:        position{line: 578, col: 27, offset: 17796},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 581, col: 12, offset: 17956},
																																			run: (*parser).callonLongHandAttributes436,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 581, col: 12, offset: 17956},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 581, col: 12, offset: 17956},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 565, col: 5, offset: 17488},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 589, col: 5, offset: 18188},
																										run: (*parser).callonLongHandAttributes440,
																										expr: &seqExpr{
																											pos: position{line: 589, col: 5, offset: 18188},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 589, col: 5, offset: 18188},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 589, col: 10, offset: 18193},
																													expr: &litMatcher{
																														pos:        position{line: 589, col: 11, offset: 18194},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 590, col: 5, offset: 18273},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 596, col: 5, offset: 18422},
																														run: (*parser).callonLongHandAttributes446,
																														expr: &labeledExpr{
																															pos:   position{line: 596, col: 5, offset: 18422},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 596, col: 14, offset: 18431},
																																expr: &choiceExpr{
																																	pos: position{line: 597, col: 9, offset: 18441},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes450,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes453,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes455,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes457,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes459,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes461,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes463,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes465,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes468,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes472,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes479,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes484,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes486,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes490,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes494,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes501,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes506,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes508,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes512,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes516,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes522,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes526,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 601, col: 12, offset: 18532},
																																			run: (*parser).callonLongHandAttributes532,
																																			expr: &litMatcher{
																																				pos:        position{line: 601, col: 12, offset: 18532},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 13, offset: 18634},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 21, offset: 18642},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 29, offset: 18650},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 604, col: 35, offset: 18656},
																																			run: (*parser).callonLongHandAttributes537,
																																			expr: &litMatcher{
																																				pos:        position{line: 604, col: 35, offset: 18656},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 607, col: 12, offset: 18839},
																																			run: (*parser).callonLongHandAttributes539,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 607, col: 12, offset: 18839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 607, col: 12, offset: 18839},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 591, col: 5, offset: 18321},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 591, col: 10, offset: 18326},
																													expr: &notExpr{
																														pos: position{line: 591, col: 12, offset: 18328},
																														expr: &seqExpr{
																															pos: position{line: 591, col: 14, offset: 18330},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 591, col: 14, offset: 18330},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes547,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 591, col: 21, offset: 18337},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 504, col: 7, offset: 15612},
																										run: (*parser).callonLongHandAttributes550,
																										expr: &seqExpr{
																											pos: position{line: 504, col: 7, offset: 15612},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 504, col: 7, offset: 15612},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 504, col: 16, offset: 15621},
																														expr: &choiceExpr{
																															pos: position{line: 507, col: 9, offset: 15803},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2585, col: 5, offset: 83342},
																																	run: (*parser).callonLongHandAttributes555,
																																	expr: &litMatcher{
																																		pos:        position{line: 2585, col: 5, offset: 83342},
																																		val:        "\"`",
																																		ignoreCase: false,
																																		want:       "\"\\\"`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2588, col: 7, offset: 83400},
																																	run: (*parser).callonLongHandAttributes557,
																																	expr: &litMatcher{
																																		pos:        position{line: 2588, col: 7, offset: 83400},
																																		val:        "`\"",
																																		ignoreCase: false,
																																		want:       "\"`\\\"\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2591, col: 7, offset: 83458},
																																	run: (*parser).callonLongHandAttributes559,
																																	expr: &litMatcher{
																																		pos:        position{line: 2591, col: 7, offset: 83458},
																																		val:        "'`",
																																		ignoreCase: false,
																																		want:       "\"'`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 7, offset: 83514},
																																	run: (*parser).callonLongHandAttributes561,
																																	expr: &litMatcher{
																																		pos:        position{line: 2594, col: 7, offset: 83514},
																																		val:        "`'",
																																		ignoreCase: false,
																																		want:       "\"`'\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 508, col: 12, offset: 15829},
																																	run: (*parser).callonLongHandAttributes563,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 508, col: 12, offset: 15829},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 508, col: 12, offset: 15829},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 635, col: 5, offset: 20085},
																																	run: (*parser).callonLongHandAttributes566,
																																	expr: &seqExpr{
																																		pos: position{line: 635, col: 5, offset: 20085},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				run: (*parser).callonLongHandAttributes568,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 638, col: 5, offset: 20157},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 638, col: 14, offset: 20166},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 657, col: 25, offset: 20767},
																																							run: (*parser).callonLongHandAttributes571,
																																							expr: &seqExpr{
																																								pos: position{line: 657, col: 25, offset: 20767},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 657, col: 25, offset: 20767},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 37, offset: 20779},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes575,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 56, offset: 20798},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 657, col: 62, offset: 20804},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes582,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes587,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes589,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 657, col: 78, offset: 20820},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 661, col: 25, offset: 20938},
																																							run: (*parser).callonLongHandAttributes593,
																																							expr: &seqExpr{
																																								pos: position{line: 661, col: 25, offset: 20938},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 661, col: 25, offset: 20938},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 38, offset: 20951},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes597,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 57, offset: 20970},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 661, col: 63, offset: 20976},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes604,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes609,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes611,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 661, col: 79, offset: 20992},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 644, col: 5, offset: 20295},
																																							run: (*parser).callonLongHandAttributes615,
																																							expr: &seqExpr{
																																								pos: position{line: 644, col: 5, offset: 20295},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 644, col: 5, offset: 20295},
																																										val:        "\\{",
																																										ignoreCase: false,
																																										want:       "\"\\\\{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 644, col: 13, offset: 20303},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes619,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 644, col: 32, offset: 20322},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 651, col: 5, offset: 20563},
																																							run: (*parser).callonLongHandAttributes625,
																																							expr: &seqExpr{
																																								pos: position{line: 651, col: 5, offset: 20563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 651, col: 5, offset: 20563},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 651, col: 9, offset: 20567},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes629,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 651, col: 28, offset: 20586},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 513, col: 12, offset: 15997},
																																	run: (*parser).callonLongHandAttributes635,
																																	expr: &litMatcher{
																																		pos:        position{line: 513, col: 12, offset: 15997},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 517, col: 5, offset: 16085},
																													expr: &notExpr{
																														pos: position{line: 517, col: 7, offset: 16087},
																														expr: &seqExpr{
																															pos: position{line: 517, col: 9, offset: 16089},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 517, col: 9, offset: 16089},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes641,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 517, col: 16, offset: 16096},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 496, col: 29, offset: 15387},
																				run: (*parser).callonLongHandAttributes644,
																				expr: &seqExpr{
																					pos: position{line: 496, col: 29, offset: 15387},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 496, col: 29, offset: 15387},
																							val:        "%",
																							ignoreCase: false,
																							want:       "\"%\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 496, col: 33, offset: 15391},
																							label: "option",
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 15544},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 563, col: 5, offset: 17356},
																										run: (*parser).callonLongHandAttributes649,
																										expr: &seqExpr{
																											pos: position{line: 563, col: 5, offset: 17356},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 563, col: 5, offset: 17356},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 563, col: 9, offset: 17360},
																													expr: &litMatcher{
																														pos:        position{line: 563, col: 10, offset: 17361},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 564, col: 5, offset: 17440},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 570, col: 5, offset: 17571},
																														run: (*parser).callonLongHandAttributes655,
																														expr: &labeledExpr{
																															pos:   position{line: 570, col: 5, offset: 17571},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 570, col: 14, offset: 17580},
																																expr: &choiceExpr{
																																	pos: position{line: 571, col: 9, offset: 17590},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes659,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes662,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes664,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes666,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes668,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes670,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes672,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes674,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes677,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes681,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes688,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes693,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes695,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes699,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes703,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes710,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes715,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes717,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes721,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes725,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes731,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes735,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 575, col: 12, offset: 17680},
																																			run: (*parser).callonLongHandAttributes741,
																																			expr: &litMatcher{
																																				pos:        position{line: 575, col: 12, offset: 17680},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 13, offset: 17782},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 20, offset: 17789},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 578, col: 27, offset: 17796},
																																			run: (*parser).callonLongHandAttributes745,
																																			expr: &litMatcher{
																																				pos:        position{line: 578, col: 27, offset: 17796},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 581, col: 12, offset: 17956},
																																			run: (*parser).callonLongHandAttributes747,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 581, col: 12, offset: 17956},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 581, col: 12, offset: 17956},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 565, col: 5, offset: 17488},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 589, col: 5, offset: 18188},
																										run: (*parser).callonLongHandAttributes751,
																										expr: &seqExpr{
																											pos: position{line: 589, col: 5, offset: 18188},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 589, col: 5, offset: 18188},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 589, col: 10, offset: 18193},
																													expr: &litMatcher{
																														pos:        position{line: 589, col: 11, offset: 18194},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 590, col: 5, offset: 18273},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 596, col: 5, offset: 18422},
																														run: (*parser).callonLongHandAttributes757,
																														expr: &labeledExpr{
																															pos:   position{line: 596, col: 5, offset: 18422},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 596, col: 14, offset: 18431},
																																expr: &choiceExpr{
																																	pos: position{line: 597, col: 9, offset: 18441},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes761,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes764,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes766,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes768,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes770,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes772,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes774,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes776,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes779,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes783,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes790,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes795,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes797,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes801,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes805,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes812,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes817,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes819,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes823,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes827,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes833,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes837,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 601, col: 12, offset: 18532},
																																			run: (*parser).callonLongHandAttributes843,
																																			expr: &litMatcher{
																																				pos:        position{line: 601, col: 12, offset: 18532},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 13, offset: 18634},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 21, offset: 18642},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 29, offset: 18650},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 604, col: 35, offset: 18656},
																																			run: (*parser).callonLongHandAttributes848,
																																			expr: &litMatcher{
																																				pos:        position{line: 604, col: 35, offset: 18656},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 607, col: 12, offset: 18839},
																																			run: (*parser).callonLongHandAttributes850,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 607, col: 12, offset: 18839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 607, col: 12, offset: 18839},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 591, col: 5, offset: 18321},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 591, col: 10, offset: 18326},
																													expr: &notExpr{
																														pos: position{line: 591, col: 12, offset: 18328},
																														expr: &seqExpr{
																															pos: position{line: 591, col: 14, offset: 18330},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 591, col: 14, offset: 18330},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes858,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 591, col: 21, offset: 18337},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 504, col: 7, offset: 15612},
																										run: (*parser).callonLongHandAttributes861,
																										expr: &seqExpr{
																											pos: position{line: 504, col: 7, offset: 15612},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 504, col: 7, offset: 15612},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 504, col: 16, offset: 15621},
																														expr: &choiceExpr{
																															pos: position{line: 507, col: 9, offset: 15803},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2585, col: 5, offset: 83342},
																																	run: (*parser).callonLongHandAttributes866,
																																	expr: &litMatcher{
																																		pos:        position{line: 2585, col: 5, offset: 83342},
																																		val:        "\"`",
																																		ignoreCase: false,
																																		want:       "\"\\\"`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2588, col: 7, offset: 83400},
																																	run: (*parser).callonLongHandAttributes868,
																																	expr: &litMatcher{
																																		pos:        position{line: 2588, col: 7, offset: 83400},
																																		val:        "`\"",
																																		ignoreCase: false,
																																		want:       "\"`\\\"\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2591, col: 7, offset: 83458},
																																	run: (*parser).callonLongHandAttributes870,
																																	expr: &litMatcher{
																																		pos:        position{line: 2591, col: 7, offset: 83458},
																																		val:        "'`",
																																		ignoreCase: false,
																																		want:       "\"'`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 7, offset: 83514},
																																	run: (*parser).callonLongHandAttributes872,
																																	expr: &litMatcher{
																																		pos:        position{line: 2594, col: 7, offset: 83514},
																																		val:        "`'",
																																		ignoreCase: false,
																																		want:       "\"`'\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 508, col: 12, offset: 15829},
																																	run: (*parser).callonLongHandAttributes874,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 508, col: 12, offset: 15829},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 508, col: 12, offset: 15829},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 635, col: 5, offset: 20085},
																																	run: (*parser).callonLongHandAttributes877,
																																	expr: &seqExpr{
																																		pos: position{line: 635, col: 5, offset: 20085},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				run: (*parser).callonLongHandAttributes879,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 638, col: 5, offset: 20157},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 638, col: 14, offset: 20166},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 657, col: 25, offset: 20767},
																																							run: (*parser).callonLongHandAttributes882,
																																							expr: &seqExpr{
																																								pos: position{line: 657, col: 25, offset: 20767},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 657, col: 25, offset: 20767},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 37, offset: 20779},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes886,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 56, offset: 20798},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 657, col: 62, offset: 20804},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes893,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes898,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes900,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 657, col: 78, offset: 20820},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 661, col: 25, offset: 20938},
																																							run: (*parser).callonLongHandAttributes904,
																																							expr: &seqExpr{
																																								pos: position{line: 661, col: 25, offset: 20938},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 661, col: 25, offset: 20938},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 38, offset: 20951},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes908,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 57, offset: 20970},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 661, col: 63, offset: 20976},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes915,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes920,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes922,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 661, col: 79, offset: 20992},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 644, col: 5, offset: 20295},
																																							run: (*parser).callonLongHandAttributes926,
																																							expr: &seqExpr{
																																								pos: position{line: 644, col: 5, offset: 20295},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 644, col: 5, offset: 20295},
																																										val:        "\\{",
																																										ignoreCase: false,
																																										want:       "\"\\\\{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 644, col: 13, offset: 20303},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes930,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 644, col: 32, offset: 20322},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 651, col: 5, offset: 20563},
																																							run: (*parser).callonLongHandAttributes936,
																																							expr: &seqExpr{
																																								pos: position{line: 651, col: 5, offset: 20563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 651, col: 5, offset: 20563},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 651, col: 9, offset: 20567},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes940,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 651, col: 28, offset: 20586},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 513, col: 12, offset: 15997},
																																	run: (*parser).callonLongHandAttributes946,
																																	expr: &litMatcher{
																																		pos:        position{line: 513, col: 12, offset: 15997},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 517, col: 5, offset: 16085},
																													expr: &notExpr{
																														pos: position{line: 517, col: 7, offset: 16087},
																														expr: &seqExpr{
																															pos: position{line: 517, col: 9, offset: 16089},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 517, col: 9, offset: 16089},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes952,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 517, col: 16, offset: 16096},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 491, col: 30, offset: 15227},
																				run: (*parser).callonLongHandAttributes955,
																				expr: &seqExpr{
																					pos: position{line: 491, col: 30, offset: 15227},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 491, col: 30, offset: 15227},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 491, col: 34, offset: 15231},
																							label: "role",
																							expr: &choiceExpr{
																								pos: position{line: 502, col: 5, offset: 15544},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 563, col: 5, offset: 17356},
																										run: (*parser).callonLongHandAttributes960,
																										expr: &seqExpr{
																											pos: position{line: 563, col: 5, offset: 17356},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 563, col: 5, offset: 17356},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 563, col: 9, offset: 17360},
																													expr: &litMatcher{
																														pos:        position{line: 563, col: 10, offset: 17361},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 564, col: 5, offset: 17440},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 570, col: 5, offset: 17571},
																														run: (*parser).callonLongHandAttributes966,
																														expr: &labeledExpr{
																															pos:   position{line: 570, col: 5, offset: 17571},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 570, col: 14, offset: 17580},
																																expr: &choiceExpr{
																																	pos: position{line: 571, col: 9, offset: 17590},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes970,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes973,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes975,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes977,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes979,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes981,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes983,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes985,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes988,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes992,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes999,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes1004,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes1006,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes1010,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1014,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes1021,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes1026,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes1028,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes1032,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1036,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes1042,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1046,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 575, col: 12, offset: 17680},
																																			run: (*parser).callonLongHandAttributes1052,
																																			expr: &litMatcher{
																																				pos:        position{line: 575, col: 12, offset: 17680},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 13, offset: 17782},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 578, col: 20, offset: 17789},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 578, col: 27, offset: 17796},
																																			run: (*parser).callonLongHandAttributes1056,
																																			expr: &litMatcher{
																																				pos:        position{line: 578, col: 27, offset: 17796},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 581, col: 12, offset: 17956},
																																			run: (*parser).callonLongHandAttributes1058,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 581, col: 12, offset: 17956},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 581, col: 12, offset: 17956},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 565, col: 5, offset: 17488},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 589, col: 5, offset: 18188},
																										run: (*parser).callonLongHandAttributes1062,
																										expr: &seqExpr{
																											pos: position{line: 589, col: 5, offset: 18188},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 589, col: 5, offset: 18188},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 589, col: 10, offset: 18193},
																													expr: &litMatcher{
																														pos:        position{line: 589, col: 11, offset: 18194},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 590, col: 5, offset: 18273},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 596, col: 5, offset: 18422},
																														run: (*parser).callonLongHandAttributes1068,
																														expr: &labeledExpr{
																															pos:   position{line: 596, col: 5, offset: 18422},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 596, col: 14, offset: 18431},
																																expr: &choiceExpr{
																																	pos: position{line: 597, col: 9, offset: 18441},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2835, col: 14, offset: 90086},
																																			run: (*parser).callonLongHandAttributes1072,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2835, col: 14, offset: 90086},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2835, col: 14, offset: 90086},
																																					val:        "[\\pL\\pN]",
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2910, col: 10, offset: 92147},
																																			run: (*parser).callonLongHandAttributes1075,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2910, col: 11, offset: 92148},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2585, col: 5, offset: 83342},
																																			run: (*parser).callonLongHandAttributes1077,
																																			expr: &litMatcher{
																																				pos:        position{line: 2585, col: 5, offset: 83342},
																																				val:        "\"`",
																																				ignoreCase: false,
																																				want:       "\"\\\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2588, col: 7, offset: 83400},
																																			run: (*parser).callonLongHandAttributes1079,
																																			expr: &litMatcher{
																																				pos:        position{line: 2588, col: 7, offset: 83400},
																																				val:        "`\"",
																																				ignoreCase: false,
																																				want:       "\"`\\\"\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2591, col: 7, offset: 83458},
																																			run: (*parser).callonLongHandAttributes1081,
																																			expr: &litMatcher{
																																				pos:        position{line: 2591, col: 7, offset: 83458},
																																				val:        "'`",
																																				ignoreCase: false,
																																				want:       "\"'`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2594, col: 7, offset: 83514},
																																			run: (*parser).callonLongHandAttributes1083,
																																			expr: &litMatcher{
																																				pos:        position{line: 2594, col: 7, offset: 83514},
																																				val:        "`'",
																																				ignoreCase: false,
																																				want:       "\"`'\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 635, col: 5, offset: 20085},
																																			run: (*parser).callonLongHandAttributes1085,
																																			expr: &seqExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 635, col: 5, offset: 20085},
																																						run: (*parser).callonLongHandAttributes1087,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 638, col: 5, offset: 20157},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 638, col: 14, offset: 20166},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 657, col: 25, offset: 20767},
																																									run: (*parser).callonLongHandAttributes1090,
																																									expr: &seqExpr{
																																										pos: position{line: 657, col: 25, offset: 20767},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 657, col: 25, offset: 20767},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 37, offset: 20779},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1094,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 657, col: 56, offset: 20798},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 657, col: 62, offset: 20804},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes1101,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes1106,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes1108,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 657, col: 78, offset: 20820},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 661, col: 25, offset: 20938},
																																									run: (*parser).callonLongHandAttributes1112,
																																									expr: &seqExpr{
																																										pos: position{line: 661, col: 25, offset: 20938},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 661, col: 25, offset: 20938},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 38, offset: 20951},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1116,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 661, col: 57, offset: 20970},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 661, col: 63, offset: 20976},
																																													expr: &actionExpr{
																																														pos: position{line: 665, col: 17, offset: 21099},
																																														run: (*parser).callonLongHandAttributes1123,
																																														expr: &seqExpr{
																																															pos: position{line: 665, col: 17, offset: 21099},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 665, col: 17, offset: 21099},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 665, col: 21, offset: 21103},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 665, col: 28, offset: 21110},
																																																				run: (*parser).callonLongHandAttributes1128,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 665, col: 28, offset: 21110},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 667, col: 9, offset: 21164},
																																																				run: (*parser).callonLongHandAttributes1130,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 667, col: 9, offset: 21164},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 667, col: 9, offset: 21164},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 661, col: 79, offset: 20992},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 644, col: 5, offset: 20295},
																																									run: (*parser).callonLongHandAttributes1134,
																																									expr: &seqExpr{
																																										pos: position{line: 644, col: 5, offset: 20295},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 644, col: 5, offset: 20295},
																																												val:        "\\{",
																																												ignoreCase: false,
																																												want:       "\"\\\\{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 644, col: 13, offset: 20303},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1138,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 644, col: 32, offset: 20322},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 651, col: 5, offset: 20563},
																																									run: (*parser).callonLongHandAttributes1144,
																																									expr: &seqExpr{
																																										pos: position{line: 651, col: 5, offset: 20563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 651, col: 5, offset: 20563},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 651, col: 9, offset: 20567},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 318, col: 18, offset: 9733},
																																													run: (*parser).callonLongHandAttributes1148,
																																													expr: &seqExpr{
																																														pos: position{line: 318, col: 18, offset: 9733},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 318, col: 18, offset: 9733},
																																																val:        "[_\\pL\\pN]",
																																																chars:      []rune{'_'},
																																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 318, col: 28, offset: 9743},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 318, col: 29, offset: 9744},
																																																	val:        "[-\\pL\\pN]",
																																																	chars:      []rune{'-'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 651, col: 28, offset: 20586},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 601, col: 12, offset: 18532},
																																			run: (*parser).callonLongHandAttributes1154,
																																			expr: &litMatcher{
																																				pos:        position{line: 601, col: 12, offset: 18532},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 13, offset: 18634},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 21, offset: 18642},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 604, col: 29, offset: 18650},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 604, col: 35, offset: 18656},
																																			run: (*parser).callonLongHandAttributes1159,
																																			expr: &litMatcher{
																																				pos:        position{line: 604, col: 35, offset: 18656},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 607, col: 12, offset: 18839},
																																			run: (*parser).callonLongHandAttributes1161,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 607, col: 12, offset: 18839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 607, col: 12, offset: 18839},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 591, col: 5, offset: 18321},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 591, col: 10, offset: 18326},
																													expr: &notExpr{
																														pos: position{line: 591, col: 12, offset: 18328},
																														expr: &seqExpr{
																															pos: position{line: 591, col: 14, offset: 18330},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 591, col: 14, offset: 18330},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes1169,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 591, col: 21, offset: 18337},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 504, col: 7, offset: 15612},
																										run: (*parser).callonLongHandAttributes1172,
																										expr: &seqExpr{
																											pos: position{line: 504, col: 7, offset: 15612},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 504, col: 7, offset: 15612},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 504, col: 16, offset: 15621},
																														expr: &choiceExpr{
																															pos: position{line: 507, col: 9, offset: 15803},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2585, col: 5, offset: 83342},
																																	run: (*parser).callonLongHandAttributes1177,
																																	expr: &litMatcher{
																																		pos:        position{line: 2585, col: 5, offset: 83342},
																																		val:        "\"`",
																																		ignoreCase: false,
																																		want:       "\"\\\"`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2588, col: 7, offset: 83400},
																																	run: (*parser).callonLongHandAttributes1179,
																																	expr: &litMatcher{
																																		pos:        position{line: 2588, col: 7, offset: 83400},
																																		val:        "`\"",
																																		ignoreCase: false,
																																		want:       "\"`\\\"\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2591, col: 7, offset: 83458},
																																	run: (*parser).callonLongHandAttributes1181,
																																	expr: &litMatcher{
																																		pos:        position{line: 2591, col: 7, offset: 83458},
																																		val:        "'`",
																																		ignoreCase: false,
																																		want:       "\"'`\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 7, offset: 83514},
																																	run: (*parser).callonLongHandAttributes1183,
																																	expr: &litMatcher{
																																		pos:        position{line: 2594, col: 7, offset: 83514},
																																		val:        "`'",
																																		ignoreCase: false,
																																		want:       "\"`'\"",
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 508, col: 12, offset: 15829},
																																	run: (*parser).callonLongHandAttributes1185,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 508, col: 12, offset: 15829},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 508, col: 12, offset: 15829},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 635, col: 5, offset: 20085},
																																	run: (*parser).callonLongHandAttributes1188,
																																	expr: &seqExpr{
																																		pos: position{line: 635, col: 5, offset: 20085},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 635, col: 5, offset: 20085},
																																				run: (*parser).callonLongHandAttributes1190,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 638, col: 5, offset: 20157},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 638, col: 14, offset: 20166},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 657, col: 25, offset: 20767},
																																							run: (*parser).callonLongHandAttributes1193,
																																							expr: &seqExpr{
																																								pos: position{line: 657, col: 25, offset: 20767},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 657, col: 25, offset: 20767},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 37, offset: 20779},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes1197,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 657, col: 56, offset: 20798},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 657, col: 62, offset: 20804},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes1204,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes1209,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes1211,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 657, col: 78, offset: 20820},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 661, col: 25, offset: 20938},
																																							run: (*parser).callonLongHandAttributes1215,
																																							expr: &seqExpr{
																																								pos: position{line: 661, col: 25, offset: 20938},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 661, col: 25, offset: 20938},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 38, offset: 20951},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes1219,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 661, col: 57, offset: 20970},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 661, col: 63, offset: 20976},
																																											expr: &actionExpr{
																																												pos: position{line: 665, col: 17, offset: 21099},
																																												run: (*parser).callonLongHandAttributes1226,
																																												expr: &seqExpr{
																																													pos: position{line: 665, col: 17, offset: 21099},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 665, col: 17, offset: 21099},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 665, col: 21, offset: 21103},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 665, col: 28, offset: 21110},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 665, col: 28, offset: 21110},
																																																		run: (*parser).callonLongHandAttributes1231,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 665, col: 28, offset: 21110},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 667, col: 9, offset: 21164},
																																																		run: (*parser).callonLongHandAttributes1233,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 667, col: 9, offset: 21164},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 667, col: 9, offset: 21164},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 661, col: 79, offset: 20992},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 644, col: 5, offset: 20295},
																																							run: (*parser).callonLongHandAttributes1237,
																																							expr: &seqExpr{
																																								pos: position{line: 644, col: 5, offset: 20295},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 644, col: 5, offset: 20295},
																																										val:        "\\{",
																																										ignoreCase: false,
																																										want:       "\"\\\\{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 644, col: 13, offset: 20303},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes1241,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 644, col: 32, offset: 20322},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 651, col: 5, offset: 20563},
																																							run: (*parser).callonLongHandAttributes1247,
																																							expr: &seqExpr{
																																								pos: position{line: 651, col: 5, offset: 20563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 651, col: 5, offset: 20563},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 651, col: 9, offset: 20567},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 318, col: 18, offset: 9733},
																																											run: (*parser).callonLongHandAttributes1251,
																																											expr: &seqExpr{
																																												pos: position{line: 318, col: 18, offset: 9733},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 318, col: 18, offset: 9733},
																																														val:        "[_\\pL\\pN]",
																																														chars:      []rune{'_'},
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 318, col: 28, offset: 9743},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 318, col: 29, offset: 9744},
																																															val:        "[-\\pL\\pN]",
																																															chars:      []rune{'-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 651, col: 28, offset: 20586},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 513, col: 12, offset: 15997},
																																	run: (*parser).callonLongHandAttributes1257,
																																	expr: &litMatcher{
																																		pos:        position{line: 513, col: 12, offset: 15997},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 517, col: 5, offset: 16085},
																													expr: &notExpr{
																														pos: position{line: 517, col: 7, offset: 16087},
																														expr: &seqExpr{
																															pos: position{line: 517, col: 9, offset: 16089},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 517, col: 9, offset: 16089},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonLongHandAttributes1263,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 517, col: 16, offset: 16096},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 465, col: 8, offset: 14502},
												expr: &seqExpr{
													pos: position{line: 465, col: 9, offset: 14503},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 465, col: 9, offset: 14503},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 465, col: 13, offset: 14507},
															expr: &actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonLongHandAttributes1270,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 466, col: 5, offset: 14521},
												run: (*parser).callonLongHandAttributes1272,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 13628},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 439, col: 21, offset: 13644},
								expr: &choiceExpr{
									pos: position{line: 439, col: 22, offset: 13645},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 439, col: 22, offset: 13645},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 439, col: 44, offset: 13667},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13688},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 522, col: 1, offset: 16174},
			expr: &choiceExpr{
				pos: position{line: 522, col: 24, offset: 16197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 523, col: 5, offset: 16203},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 523, col: 5, offset: 16203},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 523, col: 5, offset: 16203},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 12, offset: 16210},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 523, col: 29, offset: 16227},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 523, col: 29, offset: 16227},
											expr: &seqExpr{
												pos: position{line: 523, col: 30, offset: 16228},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 523, col: 30, offset: 16228},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 523, col: 34, offset: 16232},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 523, col: 45, offset: 16243},
											expr: &litMatcher{
												pos:        position{line: 523, col: 46, offset: 16244},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 6, offset: 16389},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 528, col: 6, offset: 16389},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 528, col: 6, offset: 16389},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 528, col: 13, offset: 16396},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 528, col: 13, offset: 16396},
												expr: &actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 528, col: 21, offset: 16404},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 528, col: 22, offset: 16405},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 528, col: 22, offset: 16405},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 528, col: 26, offset: 16409},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 528, col: 36, offset: 16419},
														expr: &litMatcher{
															pos:        position{line: 528, col: 37, offset: 16420},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 529, col: 5, offset: 16430},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 539, col: 1, offset: 16745},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 16768},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 16768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 16768},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 548, col: 22, offset: 17056},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 548, col: 22, offset: 17056},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 548, col: 22, offset: 17056},
											expr: &actionExpr{
												pos: position{line: 2910, col: 10, offset: 92147},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2910, col: 11, offset: 92148},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 548, col: 29, offset: 17063},
											expr: &charClassMatcher{
												pos:        position{line: 548, col: 29, offset: 17063},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 16797},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 9, offset: 16801},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonNamedAttribute13,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 542, col: 5, offset: 16813},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 12, offset: 16820},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 542, col: 28, offset: 16836},
							expr: &seqExpr{
								pos: position{line: 542, col: 29, offset: 16837},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 542, col: 29, offset: 16837},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 542, col: 33, offset: 16841},
										expr: &actionExpr{
											pos: position{line: 2910, col: 10, offset: 92147},
											run: (*parser).callonNamedAttribute21,
											expr: &charClassMatcher{
												pos:        position{line: 2910, col: 11, offset: 92148},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 552, col: 1, offset: 17120},
			expr: &actionExpr{
				pos: position{line: 553, col: 5, offset: 17143},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 553, col: 5, offset: 17143},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 17143},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 554, col: 9, offset: 17159},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 563, col: 5, offset: 17356},
										run: (*parser).callonAttributeValue5,
										expr: &seqExpr{
											pos: position{line: 563, col: 5, offset: 17356},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 563, col: 5, offset: 17356},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&notExpr{
													pos: position{line: 563, col: 9, offset: 17360},
													expr: &litMatcher{
														pos:        position{line: 563, col: 10, offset: 17361},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 564, col: 5, offset: 17440},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 570, col: 5, offset: 17571},
														run: (*parser).callonAttributeValue11,
														expr: &labeledExpr{
															pos:   position{line: 570, col: 5, offset: 17571},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 570, col: 14, offset: 17580},
																expr: &choiceExpr{
																	pos: position{line: 571, col: 9, offset: 17590},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2835, col: 14, offset: 90086},
																			run: (*parser).callonAttributeValue15,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2835, col: 14, offset: 90086},
																				expr: &charClassMatcher{
																					pos:        position{line: 2835, col: 14, offset: 90086},
																					val:        "[\\pL\\pN]",
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonAttributeValue18,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2585, col: 5, offset: 83342},
																			run: (*parser).callonAttributeValue20,
																			expr: &litMatcher{
																				pos:        position{line: 2585, col: 5, offset: 83342},
																				val:        "\"`",
																				ignoreCase: false,
																				want:       "\"\\\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2588, col: 7, offset: 83400},
																			run: (*parser).callonAttributeValue22,
																			expr: &litMatcher{
																				pos:        position{line: 2588, col: 7, offset: 83400},
																				val:        "`\"",
																				ignoreCase: false,
																				want:       "\"`\\\"\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2591, col: 7, offset: 83458},
																			run: (*parser).callonAttributeValue24,
																			expr: &litMatcher{
																				pos:        position{line: 2591, col: 7, offset: 83458},
																				val:        "'`",
																				ignoreCase: false,
																				want:       "\"'`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2594, col: 7, offset: 83514},
																			run: (*parser).callonAttributeValue26,
																			expr: &litMatcher{
																				pos:        position{line: 2594, col: 7, offset: 83514},
																				val:        "`'",
																				ignoreCase: false,
																				want:       "\"`'\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 635, col: 5, offset: 20085},
																			run: (*parser).callonAttributeValue28,
																			expr: &seqExpr{
																				pos: position{line: 635, col: 5, offset: 20085},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonAttributeValue30,
																					},
																					&labeledExpr{
																						pos:   position{line: 638, col: 5, offset: 20157},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 638, col: 14, offset: 20166},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 657, col: 25, offset: 20767},
																									run: (*parser).callonAttributeValue33,
																									expr: &seqExpr{
																										pos: position{line: 657, col: 25, offset: 20767},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 657, col: 25, offset: 20767},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 37, offset: 20779},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue37,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 56, offset: 20798},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 657, col: 62, offset: 20804},
																													expr: &actionExpr{
																														pos: position{line: 665, col: 17, offset: 21099},
																														run: (*parser).callonAttributeValue44,
																														expr: &seqExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 665, col: 17, offset: 21099},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 665, col: 21, offset: 21103},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 665, col: 28, offset: 21110},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 665, col: 28, offset: 21110},
																																				run: (*parser).callonAttributeValue49,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 665, col: 28, offset: 21110},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 667, col: 9, offset: 21164},
																																				run: (*parser).callonAttributeValue51,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 667, col: 9, offset: 21164},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 657, col: 78, offset: 20820},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20938},
																									run: (*parser).callonAttributeValue55,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20938},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20938},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 38, offset: 20951},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue59,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 57, offset: 20970},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 63, offset: 20976},
																													expr: &actionExpr{
																														pos: position{line: 665, col: 17, offset: 21099},
																														run: (*parser).callonAttributeValue66,
																														expr: &seqExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 665, col: 17, offset: 21099},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 665, col: 21, offset: 21103},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 665, col: 28, offset: 21110},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 665, col: 28, offset: 21110},
																																				run: (*parser).callonAttributeValue71,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 665, col: 28, offset: 21110},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 667, col: 9, offset: 21164},
																																				run: (*parser).callonAttributeValue73,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 667, col: 9, offset: 21164},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 79, offset: 20992},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 644, col: 5, offset: 20295},
																									run: (*parser).callonAttributeValue77,
																									expr: &seqExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 644, col: 5, offset: 20295},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 644, col: 13, offset: 20303},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue81,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 644, col: 32, offset: 20322},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 651, col: 5, offset: 20563},
																									run: (*parser).callonAttributeValue87,
																									expr: &seqExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 651, col: 5, offset: 20563},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 651, col: 9, offset: 20567},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue91,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 651, col: 28, offset: 20586},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 575, col: 12, offset: 17680},
																			run: (*parser).callonAttributeValue97,
																			expr: &litMatcher{
																				pos:        position{line: 575, col: 12, offset: 17680},
																				val:        "\\'",
																				ignoreCase: false,
																				want:       "\"\\\\'\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 578, col: 13, offset: 17782},
																			val:        "'`",
																			ignoreCase: false,
																			want:       "\"'`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 578, col: 20, offset: 17789},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																		&actionExpr{
																			pos: position{line: 578, col: 27, offset: 17796},
																			run: (*parser).callonAttributeValue101,
																			expr: &litMatcher{
																				pos:        position{line: 578, col: 27, offset: 17796},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 581, col: 12, offset: 17956},
																			run: (*parser).callonAttributeValue103,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 581, col: 12, offset: 17956},
																				expr: &charClassMatcher{
																					pos:        position{line: 581, col: 12, offset: 17956},
																					val:        "[^\\r\\n\\\\\\ ]",
																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 565, col: 5, offset: 17488},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 589, col: 5, offset: 18188},
										run: (*parser).callonAttributeValue107,
										expr: &seqExpr{
											pos: position{line: 589, col: 5, offset: 18188},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 589, col: 5, offset: 18188},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&notExpr{
													pos: position{line: 589, col: 10, offset: 18193},
													expr: &litMatcher{
														pos:        position{line: 589, col: 11, offset: 18194},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 590, col: 5, offset: 18273},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 596, col: 5, offset: 18422},
														run: (*parser).callonAttributeValue113,
														expr: &labeledExpr{
															pos:   position{line: 596, col: 5, offset: 18422},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 596, col: 14, offset: 18431},
																expr: &choiceExpr{
																	pos: position{line: 597, col: 9, offset: 18441},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2835, col: 14, offset: 90086},
																			run: (*parser).callonAttributeValue117,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2835, col: 14, offset: 90086},
																				expr: &charClassMatcher{
																					pos:        position{line: 2835, col: 14, offset: 90086},
																					val:        "[\\pL\\pN]",
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonAttributeValue120,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2585, col: 5, offset: 83342},
																			run: (*parser).callonAttributeValue122,
																			expr: &litMatcher{
																				pos:        position{line: 2585, col: 5, offset: 83342},
																				val:        "\"`",
																				ignoreCase: false,
																				want:       "\"\\\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2588, col: 7, offset: 83400},
																			run: (*parser).callonAttributeValue124,
																			expr: &litMatcher{
																				pos:        position{line: 2588, col: 7, offset: 83400},
																				val:        "`\"",
																				ignoreCase: false,
																				want:       "\"`\\\"\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2591, col: 7, offset: 83458},
																			run: (*parser).callonAttributeValue126,
																			expr: &litMatcher{
																				pos:        position{line: 2591, col: 7, offset: 83458},
																				val:        "'`",
																				ignoreCase: false,
																				want:       "\"'`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2594, col: 7, offset: 83514},
																			run: (*parser).callonAttributeValue128,
																			expr: &litMatcher{
																				pos:        position{line: 2594, col: 7, offset: 83514},
																				val:        "`'",
																				ignoreCase: false,
																				want:       "\"`'\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 635, col: 5, offset: 20085},
																			run: (*parser).callonAttributeValue130,
																			expr: &seqExpr{
																				pos: position{line: 635, col: 5, offset: 20085},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonAttributeValue132,
																					},
																					&labeledExpr{
																						pos:   position{line: 638, col: 5, offset: 20157},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 638, col: 14, offset: 20166},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 657, col: 25, offset: 20767},
																									run: (*parser).callonAttributeValue135,
																									expr: &seqExpr{
																										pos: position{line: 657, col: 25, offset: 20767},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 657, col: 25, offset: 20767},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 37, offset: 20779},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue139,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 56, offset: 20798},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 657, col: 62, offset: 20804},
																													expr: &actionExpr{
																														pos: position{line: 665, col: 17, offset: 21099},
																														run: (*parser).callonAttributeValue146,
																														expr: &seqExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 665, col: 17, offset: 21099},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 665, col: 21, offset: 21103},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 665, col: 28, offset: 21110},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 665, col: 28, offset: 21110},
																																				run: (*parser).callonAttributeValue151,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 665, col: 28, offset: 21110},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 667, col: 9, offset: 21164},
																																				run: (*parser).callonAttributeValue153,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 667, col: 9, offset: 21164},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 657, col: 78, offset: 20820},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20938},
																									run: (*parser).callonAttributeValue157,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20938},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20938},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 38, offset: 20951},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue161,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 57, offset: 20970},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 63, offset: 20976},
																													expr: &actionExpr{
																														pos: position{line: 665, col: 17, offset: 21099},
																														run: (*parser).callonAttributeValue168,
																														expr: &seqExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 665, col: 17, offset: 21099},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 665, col: 21, offset: 21103},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 665, col: 28, offset: 21110},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 665, col: 28, offset: 21110},
																																				run: (*parser).callonAttributeValue173,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 665, col: 28, offset: 21110},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 667, col: 9, offset: 21164},
																																				run: (*parser).callonAttributeValue175,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 667, col: 9, offset: 21164},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 79, offset: 20992},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 644, col: 5, offset: 20295},
																									run: (*parser).callonAttributeValue179,
																									expr: &seqExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 644, col: 5, offset: 20295},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 644, col: 13, offset: 20303},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue183,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 644, col: 32, offset: 20322},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 651, col: 5, offset: 20563},
																									run: (*parser).callonAttributeValue189,
																									expr: &seqExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 651, col: 5, offset: 20563},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 651, col: 9, offset: 20567},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonAttributeValue193,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 651, col: 28, offset: 20586},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 601, col: 12, offset: 18532},
																			run: (*parser).callonAttributeValue199,
																			expr: &litMatcher{
																				pos:        position{line: 601, col: 12, offset: 18532},
																				val:        "\\\"",
																				ignoreCase: false,
																				want:       "\"\\\\\\\"\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 604, col: 13, offset: 18634},
																			val:        "\"`",
																			ignoreCase: false,
																			want:       "\"\\\"`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 604, col: 21, offset: 18642},
																			val:        "`\"",
																			ignoreCase: false,
																			want:       "\"`\\\"\"",
																		},
																		&litMatcher{
																			pos:        position{line: 604, col: 29, offset: 18650},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&actionExpr{
																			pos: position{line: 604, col: 35, offset: 18656},
																			run: (*parser).callonAttributeValue204,
																			expr: &litMatcher{
																				pos:        position{line: 604, col: 35, offset: 18656},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 607, col: 12, offset: 18839},
																			run: (*parser).callonAttributeValue206,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 607, col: 12, offset: 18839},
																				expr: &charClassMatcher{
																					pos:        position{line: 607, col: 12, offset: 18839},
																					val:        "[^\\r\\n\\\\\"` ]",
																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 591, col: 5, offset: 18321},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&andExpr{
													pos: position{line: 591, col: 10, offset: 18326},
													expr: &notExpr{
														pos: position{line: 591, col: 12, offset: 18328},
														expr: &seqExpr{
															pos: position{line: 591, col: 14, offset: 18330},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 591, col: 14, offset: 18330},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonAttributeValue214,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 591, col: 21, offset: 18337},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 17235},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 558, col: 5, offset: 17269},
							expr: &notExpr{
								pos: position{line: 558, col: 7, offset: 17271},
								expr: &seqExpr{
									pos: position{line: 558, col: 9, offset: 17273},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 558, col: 9, offset: 17273},
											expr: &actionExpr{
												pos: position{line: 2910, col: 10, offset: 92147},
												run: (*parser).callonAttributeValue222,
												expr: &charClassMatcher{
													pos:        position{line: 2910, col: 11, offset: 92148},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 558, col: 16, offset: 17280},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 615, col: 1, offset: 19113},
			expr: &actionExpr{
				pos: position{line: 618, col: 5, offset: 19297},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 618, col: 5, offset: 19297},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 618, col: 5, offset: 19297},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 19366},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 619, col: 14, offset: 19375},
								expr: &choiceExpr{
									pos: position{line: 620, col: 9, offset: 19385},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 620, col: 10, offset: 19386},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 620, col: 10, offset: 19386},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 620, col: 14, offset: 19390},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 620, col: 37, offset: 19413},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &seqExpr{
												pos: position{line: 635, col: 5, offset: 20085},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 635, col: 5, offset: 20085},
														run: (*parser).callonUnquotedAttributeValue15,
													},
													&labeledExpr{
														pos:   position{line: 638, col: 5, offset: 20157},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 638, col: 14, offset: 20166},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	run: (*parser).callonUnquotedAttributeValue18,
																	expr: &seqExpr{
																		pos: position{line: 657, col: 25, offset: 20767},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 657, col: 25, offset: 20767},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 657, col: 37, offset: 20779},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					run: (*parser).callonUnquotedAttributeValue22,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9733},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9733},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9743},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9744},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 657, col: 56, offset: 20798},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 657, col: 62, offset: 20804},
																					expr: &actionExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						run: (*parser).callonUnquotedAttributeValue29,
																						expr: &seqExpr{
																							pos: position{line: 665, col: 17, offset: 21099},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 665, col: 17, offset: 21099},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 665, col: 21, offset: 21103},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 665, col: 28, offset: 21110},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 665, col: 28, offset: 21110},
																												run: (*parser).callonUnquotedAttributeValue34,
																												expr: &charClassMatcher{
																													pos:        position{line: 665, col: 28, offset: 21110},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												run: (*parser).callonUnquotedAttributeValue36,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 667, col: 9, offset: 21164},
																													expr: &charClassMatcher{
																														pos:        position{line: 667, col: 9, offset: 21164},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 657, col: 78, offset: 20820},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	run: (*parser).callonUnquotedAttributeValue40,
																	expr: &seqExpr{
																		pos: position{line: 661, col: 25, offset: 20938},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 661, col: 25, offset: 20938},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 38, offset: 20951},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					run: (*parser).callonUnquotedAttributeValue44,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9733},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9733},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9743},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9744},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 57, offset: 20970},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 661, col: 63, offset: 20976},
																					expr: &actionExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						run: (*parser).callonUnquotedAttributeValue51,
																						expr: &seqExpr{
																							pos: position{line: 665, col: 17, offset: 21099},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 665, col: 17, offset: 21099},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 665, col: 21, offset: 21103},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 665, col: 28, offset: 21110},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 665, col: 28, offset: 21110},
																												run: (*parser).callonUnquotedAttributeValue56,
																												expr: &charClassMatcher{
																													pos:        position{line: 665, col: 28, offset: 21110},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												run: (*parser).callonUnquotedAttributeValue58,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 667, col: 9, offset: 21164},
																													expr: &charClassMatcher{
																														pos:        position{line: 667, col: 9, offset: 21164},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 661, col: 79, offset: 20992},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	run: (*parser).callonUnquotedAttributeValue62,
																	expr: &seqExpr{
																		pos: position{line: 644, col: 5, offset: 20295},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 644, col: 5, offset: 20295},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 644, col: 13, offset: 20303},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					run: (*parser).callonUnquotedAttributeValue66,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9733},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9733},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9743},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9744},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 644, col: 32, offset: 20322},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	run: (*parser).callonUnquotedAttributeValue72,
																	expr: &seqExpr{
																		pos: position{line: 651, col: 5, offset: 20563},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 651, col: 5, offset: 20563},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 651, col: 9, offset: 20567},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					run: (*parser).callonUnquotedAttributeValue76,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9733},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9733},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9743},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9744},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 651, col: 28, offset: 20586},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 621, col: 32, offset: 19500},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 2910, col: 10, offset: 92147},
											run: (*parser).callonUnquotedAttributeValue83,
											expr: &charClassMatcher{
												pos:        position{line: 2910, col: 11, offset: 92148},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 623, col: 12, offset: 19585},
											run: (*parser).callonUnquotedAttributeValue85,
											expr: &oneOrMoreExpr{
												pos: position{line: 623, col: 12, offset: 19585},
												expr: &charClassMatcher{
													pos:        position{line: 623, col: 12, offset: 19585},
													val:        "[^=,]{ ]",
													chars:      []rune{'=', ',', ']', '{', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 683, col: 1, offset: 21724},
			expr: &choiceExpr{
				pos: position{line: 683, col: 19, offset: 21742},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 685, col: 27, offset: 21818},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 685, col: 27, offset: 21818},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 685, col: 27, offset: 21818},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 685, col: 32, offset: 21823},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2895, col: 7, offset: 91799},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2895, col: 7, offset: 91799},
											expr: &charClassMatcher{
												pos:        position{line: 2895, col: 7, offset: 91799},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 685, col: 40, offset: 21831},
									expr: &actionExpr{
										pos: position{line: 2910, col: 10, offset: 92147},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2910, col: 11, offset: 92148},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 685, col: 47, offset: 21838},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 685, col: 51, offset: 21842},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 24, offset: 22243},
										expr: &choiceExpr{
											pos: position{line: 696, col: 5, offset: 22249},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 696, col: 6, offset: 22250},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 696, col: 6, offset: 22250},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 696, col: 6, offset: 22250},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 696, col: 14, offset: 22258},
																expr: &charClassMatcher{
																	pos:        position{line: 696, col: 14, offset: 22258},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 644, col: 5, offset: 20295},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 644, col: 5, offset: 20295},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 644, col: 5, offset: 20295},
																val:        "\\{",
																ignoreCase: false,
																want:       "\"\\\\{\"",
															},
															&labeledExpr{
																pos:   position{line: 644, col: 13, offset: 20303},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 318, col: 18, offset: 9733},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 318, col: 18, offset: 9733},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 318, col: 28, offset: 9743},
																				expr: &charClassMatcher{
																					pos:        position{line: 318, col: 29, offset: 9744},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 644, col: 32, offset: 20322},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 651, col: 5, offset: 20563},
													run: (*parser).callonCrossReference31,
													expr: &seqExpr{
														pos: position{line: 651, col: 5, offset: 20563},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 651, col: 5, offset: 20563},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 651, col: 9, offset: 20567},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 318, col: 18, offset: 9733},
																	run: (*parser).callonCrossReference35,
																	expr: &seqExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 318, col: 18, offset: 9733},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 318, col: 28, offset: 9743},
																				expr: &charClassMatcher{
																					pos:        position{line: 318, col: 29, offset: 9744},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 651, col: 28, offset: 20586},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 700, col: 8, offset: 22484},
													run: (*parser).callonCrossReference41,
													expr: &litMatcher{
														pos:        position{line: 700, col: 8, offset: 22484},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 685, col: 79, offset: 21870},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 9, offset: 21943},
						run: (*parser).callonCrossReference44,
						expr: &seqExpr{
							pos: position{line: 687, col: 9, offset: 21943},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 687, col: 9, offset: 21943},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 687, col: 14, offset: 21948},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2895, col: 7, offset: 91799},
										run: (*parser).callonCrossReference48,
										expr: &oneOrMoreExpr{
											pos: position{line: 2895, col: 7, offset: 91799},
											expr: &charClassMatcher{
												pos:        position{line: 2895, col: 7, offset: 91799},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 687, col: 22, offset: 21956},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 44, offset: 21767},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 691, col: 1, offset: 22027},
			expr: &actionExpr{
				pos: position{line: 691, col: 27, offset: 22053},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 691, col: 27, offset: 22053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 691, col: 27, offset: 22053},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 35, offset: 22061},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2865, col: 17, offset: 90757},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2865, col: 17, offset: 90757},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2865, col: 22, offset: 90762},
										expr: &choiceExpr{
											pos: position{line: 2865, col: 23, offset: 90763},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2882, col: 5, offset: 91256},
													run: (*parser).callonExternalCrossReference9,
													expr: &seqExpr{
														pos: position{line: 2882, col: 5, offset: 91256},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																expr: &litMatcher{
																	pos:        position{line: 2882, col: 6, offset: 91257},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 2883, col: 5, offset: 91281},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2883, col: 14, offset: 91290},
																	expr: &choiceExpr{
																		pos: position{line: 2884, col: 9, offset: 91300},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				run: (*parser).callonExternalCrossReference16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2884, col: 9, offset: 91300},
																					expr: &charClassMatcher{
																						pos:        position{line: 2884, col: 10, offset: 91301},
																						val:        "[^\\r\\n[]�{.,;?! ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2887, col: 11, offset: 91564},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2848, col: 25, offset: 90406},
																						run: (*parser).callonExternalCrossReference20,
																						expr: &charClassMatcher{
																							pos:        position{line: 2848, col: 25, offset: 90406},
																							val:        "[.,;?!]",
																							chars:      []rune{'.', ',', ';', '?', '!'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&andExpr{
																						pos: position{line: 2887, col: 32, offset: 91585},
																						expr: &notExpr{
																							pos: position{line: 2887, col: 34, offset: 91587},
																							expr: &choiceExpr{
																								pos: position{line: 2887, col: 36, offset: 91589},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonExternalCrossReference27,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 635, col: 5, offset: 20085},
																				run: (*parser).callonExternalCrossReference29,
																				expr: &seqExpr{
																					pos: position{line: 635, col: 5, offset: 20085},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							run: (*parser).callonExternalCrossReference31,
																						},
																						&labeledExpr{
																							pos:   position{line: 638, col: 5, offset: 20157},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 638, col: 14, offset: 20166},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 657, col: 25, offset: 20767},
																										run: (*parser).callonExternalCrossReference34,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 25, offset: 20767},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 25, offset: 20767},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 37, offset: 20779},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonExternalCrossReference38,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 56, offset: 20798},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 657, col: 62, offset: 20804},
																														expr: &actionExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															run: (*parser).callonExternalCrossReference45,
																															expr: &seqExpr{
																																pos: position{line: 665, col: 17, offset: 21099},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 665, col: 17, offset: 21099},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 665, col: 21, offset: 21103},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 665, col: 28, offset: 21110},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					run: (*parser).callonExternalCrossReference50,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 665, col: 28, offset: 21110},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					run: (*parser).callonExternalCrossReference52,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 667, col: 9, offset: 21164},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 667, col: 9, offset: 21164},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 78, offset: 20820},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 661, col: 25, offset: 20938},
																										run: (*parser).callonExternalCrossReference56,
																										expr: &seqExpr{
																											pos: position{line: 661, col: 25, offset: 20938},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 661, col: 25, offset: 20938},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 661, col: 38, offset: 20951},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonExternalCrossReference60,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 661, col: 57, offset: 20970},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 661, col: 63, offset: 20976},
																														expr: &actionExpr{
																															pos: position{line: 665, col: 17, offset: 21099},
																															run: (*parser).callonExternalCrossReference67,
																															expr: &seqExpr{
																																pos: position{line: 665, col: 17, offset: 21099},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 665, col: 17, offset: 21099},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 665, col: 21, offset: 21103},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 665, col: 28, offset: 21110},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					run: (*parser).callonExternalCrossReference72,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 665, col: 28, offset: 21110},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 667, col: 9, offset: 21164},
																																					run: (*parser).callonExternalCrossReference74,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 667, col: 9, offset: 21164},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 667, col: 9, offset: 21164},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 661, col: 79, offset: 20992},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonExternalCrossReference78,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonExternalCrossReference82,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonExternalCrossReference88,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonExternalCrossReference92,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2889, col: 11, offset: 91643},
																				run: (*parser).callonExternalCrossReference98,
																				expr: &litMatcher{
																					pos:        position{line: 2889, col: 11, offset: 91643},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1197, col: 23, offset: 36942},
													run: (*parser).callonExternalCrossReference100,
													expr: &seqExpr{
														pos: position{line: 1197, col: 23, offset: 36942},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1195, col: 32, offset: 36910},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1197, col: 51, offset: 36970},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1197, col: 56, offset: 36975},
																	run: (*parser).callonExternalCrossReference104,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1197, col: 56, offset: 36975},
																		expr: &charClassMatcher{
																			pos:        position{line: 1197, col: 56, offset: 36975},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1195, col: 32, offset: 36910},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 54, offset: 22080},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 66, offset: 22092},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 987, col: 1, offset: 30739},
			expr: &actionExpr{
				pos: position{line: 988, col: 5, offset: 30772},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 988, col: 5, offset: 30772},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 988, col: 5, offset: 30772},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 988, col: 11, offset: 30778},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 2861, col: 14, offset: 90687},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2861, col: 14, offset: 90687},
									expr: &charClassMatcher{
										pos:        position{line: 2861, col: 14, offset: 90687},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1099, col: 1, offset: 33695},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 33718},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 5, offset: 33718},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1100, col: 5, offset: 33718},
							run: (*parser).callonDocumentHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1103, col: 5, offset: 33779},
							expr: &choiceExpr{
								pos: position{line: 1103, col: 6, offset: 33780},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2562, col: 22, offset: 82365},
										run: (*parser).callonDocumentHeader6,
										expr: &seqExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2567, col: 31, offset: 82586},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2567, col: 36, offset: 82591},
													expr: &litMatcher{
														pos:        position{line: 2567, col: 37, offset: 82592},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2562, col: 49, offset: 82392},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2857, col: 13, offset: 90620},
														run: (*parser).callonDocumentHeader12,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															expr: &charClassMatcher{
																pos:        position{line: 2857, col: 13, offset: 90620},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonDocumentHeader16,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 819, col: 5, offset: 26296},
										run: (*parser).callonDocumentHeader23,
										expr: &seqExpr{
											pos: position{line: 819, col: 5, offset: 26296},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 739, col: 5, offset: 23558},
													run: (*parser).callonDocumentHeader25,
													expr: &seqExpr{
														pos: position{line: 739, col: 5, offset: 23558},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 739, col: 5, offset: 23558},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 739, col: 16, offset: 23569},
																	run: (*parser).callonDocumentHeader28,
																	expr: &seqExpr{
																		pos: position{line: 739, col: 16, offset: 23569},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 739, col: 16, offset: 23569},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 739, col: 23, offset: 23576},
																				expr: &litMatcher{
																					pos:        position{line: 739, col: 23, offset: 23576},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 741, col: 8, offset: 23660},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonDocumentHeader34,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonDocumentHeader37,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 820, col: 5, offset: 26327},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 830, col: 5, offset: 26613},
														expr: &actionExpr{
															pos: position{line: 830, col: 6, offset: 26614},
															run: (*parser).callonDocumentHeader46,
															expr: &seqExpr{
																pos: position{line: 830, col: 6, offset: 26614},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 830, col: 6, offset: 26614},
																		expr: &choiceExpr{
																			pos: position{line: 827, col: 29, offset: 26556},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 739, col: 5, offset: 23558},
																					run: (*parser).callonDocumentHeader50,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 739, col: 5, offset: 23558},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 739, col: 16, offset: 23569},
																									run: (*parser).callonDocumentHeader53,
																									expr: &seqExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 739, col: 16, offset: 23569},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 739, col: 23, offset: 23576},
																												expr: &litMatcher{
																													pos:        position{line: 739, col: 23, offset: 23576},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 741, col: 8, offset: 23660},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentHeader59,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentHeader62,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 831, col: 5, offset: 26644},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonDocumentHeader72,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonDocumentHeader78,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDocumentHeader82,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 821, col: 5, offset: 26361},
													expr: &choiceExpr{
														pos: position{line: 827, col: 29, offset: 26556},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 739, col: 5, offset: 23558},
																run: (*parser).callonDocumentHeader91,
																expr: &seqExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 739, col: 5, offset: 23558},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 739, col: 16, offset: 23569},
																				run: (*parser).callonDocumentHeader94,
																				expr: &seqExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 739, col: 16, offset: 23569},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 739, col: 23, offset: 23576},
																							expr: &litMatcher{
																								pos:        position{line: 739, col: 23, offset: 23576},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 741, col: 8, offset: 23660},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentHeader100,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentHeader103,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 5, offset: 33876},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 12, offset: 33883},
								name: "DocumentTitle",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1105, col: 5, offset: 33902},
							expr: &choiceExpr{
								pos: position{line: 1105, col: 6, offset: 33903},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2562, col: 22, offset: 82365},
										run: (*parser).callonDocumentHeader116,
										expr: &seqExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2567, col: 31, offset: 82586},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2567, col: 36, offset: 82591},
													expr: &litMatcher{
														pos:        position{line: 2567, col: 37, offset: 82592},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2562, col: 49, offset: 82392},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2857, col: 13, offset: 90620},
														run: (*parser).callonDocumentHeader122,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															expr: &charClassMatcher{
																pos:        position{line: 2857, col: 13, offset: 90620},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonDocumentHeader126,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 819, col: 5, offset: 26296},
										run: (*parser).callonDocumentHeader133,
										expr: &seqExpr{
											pos: position{line: 819, col: 5, offset: 26296},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 739, col: 5, offset: 23558},
													run: (*parser).callonDocumentHeader135,
													expr: &seqExpr{
														pos: position{line: 739, col: 5, offset: 23558},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 739, col: 5, offset: 23558},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 739, col: 16, offset: 23569},
																	run: (*parser).callonDocumentHeader138,
																	expr: &seqExpr{
																		pos: position{line: 739, col: 16, offset: 23569},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 739, col: 16, offset: 23569},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 739, col: 23, offset: 23576},
																				expr: &litMatcher{
																					pos:        position{line: 739, col: 23, offset: 23576},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 741, col: 8, offset: 23660},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonDocumentHeader144,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonDocumentHeader147,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 820, col: 5, offset: 26327},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 830, col: 5, offset: 26613},
														expr: &actionExpr{
															pos: position{line: 830, col: 6, offset: 26614},
															run: (*parser).callonDocumentHeader156,
															expr: &seqExpr{
																pos: position{line: 830, col: 6, offset: 26614},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 830, col: 6, offset: 26614},
																		expr: &choiceExpr{
																			pos: position{line: 827, col: 29, offset: 26556},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 739, col: 5, offset: 23558},
																					run: (*parser).callonDocumentHeader160,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 739, col: 5, offset: 23558},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 739, col: 16, offset: 23569},
																									run: (*parser).callonDocumentHeader163,
																									expr: &seqExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 739, col: 16, offset: 23569},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 739, col: 23, offset: 23576},
																												expr: &litMatcher{
																													pos:        position{line: 739, col: 23, offset: 23576},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 741, col: 8, offset: 23660},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentHeader169,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentHeader172,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 831, col: 5, offset: 26644},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonDocumentHeader182,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonDocumentHeader188,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDocumentHeader192,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 821, col: 5, offset: 26361},
													expr: &choiceExpr{
														pos: position{line: 827, col: 29, offset: 26556},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 739, col: 5, offset: 23558},
																run: (*parser).callonDocumentHeader201,
																expr: &seqExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 739, col: 5, offset: 23558},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 739, col: 16, offset: 23569},
																				run: (*parser).callonDocumentHeader204,
																				expr: &seqExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 739, col: 16, offset: 23569},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 739, col: 23, offset: 23576},
																							expr: &litMatcher{
																								pos:        position{line: 739, col: 23, offset: 23576},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 741, col: 8, offset: 23660},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonDocumentHeader210,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonDocumentHeader213,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 5, offset: 33999},
							label: "authorsAndRevision",
							expr: &zeroOrOneExpr{
								pos: position{line: 1106, col: 24, offset: 34018},
								expr: &actionExpr{
									pos: position{line: 1117, col: 5, offset: 34393},
									run: (*parser).callonDocumentHeader224,
									expr: &seqExpr{
										pos: position{line: 1117, col: 5, offset: 34393},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1117, col: 5, offset: 34393},
												expr: &litMatcher{
													pos:        position{line: 1117, col: 6, offset: 34394},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1118, col: 5, offset: 34402},
												label: "authors",
												expr: &actionExpr{
													pos: position{line: 1124, col: 20, offset: 34658},
													run: (*parser).callonDocumentHeader229,
													expr: &seqExpr{
														pos: position{line: 1124, col: 20, offset: 34658},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1124, col: 20, offset: 34658},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonDocumentHeader232,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1124, col: 27, offset: 34665},
																label: "authors",
																expr: &oneOrMoreExpr{
																	pos: position{line: 1124, col: 36, offset: 34674},
																	expr: &actionExpr{
																		pos: position{line: 1129, col: 5, offset: 34787},
																		run: (*parser).callonDocumentHeader236,
																		expr: &seqExpr{
																			pos: position{line: 1129, col: 5, offset: 34787},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1129, col: 5, offset: 34787},
																					label: "fullName",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1129, col: 14, offset: 34796},
																						expr: &actionExpr{
																							pos: position{line: 1140, col: 5, offset: 35176},
																							run: (*parser).callonDocumentHeader240,
																							expr: &seqExpr{
																								pos: position{line: 1140, col: 5, offset: 35176},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1140, col: 5, offset: 35176},
																										label: "part1",
																										expr: &actionExpr{
																											pos: position{line: 1140, col: 12, offset: 35183},
																											run: (*parser).callonDocumentHeader243,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1140, col: 12, offset: 35183},
																												expr: &charClassMatcher{
																													pos:        position{line: 1140, col: 12, offset: 35183},
																													val:        "[^<;\\r\\n ]",
																													chars:      []rune{'<', ';', '\r', '\n', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1143, col: 5, offset: 35263},
																										expr: &actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonDocumentHeader247,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1144, col: 5, offset: 35274},
																										label: "part2",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1144, col: 11, offset: 35280},
																											expr: &actionExpr{
																												pos: position{line: 1144, col: 12, offset: 35281},
																												run: (*parser).callonDocumentHeader251,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1144, col: 12, offset: 35281},
																													expr: &charClassMatcher{
																														pos:        position{line: 1144, col: 12, offset: 35281},
																														val:        "[^<;\\r\\n ]",
																														chars:      []rune{'<', ';', '\r', '\n', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1147, col: 5, offset: 35362},
																										expr: &actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonDocumentHeader255,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1148, col: 5, offset: 35373},
																										label: "part3",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1148, col: 11, offset: 35379},
																											expr: &actionExpr{
																												pos: position{line: 1148, col: 12, offset: 35380},
																												run: (*parser).callonDocumentHeader259,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1148, col: 12, offset: 35380},
																													expr: &charClassMatcher{
																														pos:        position{line: 1148, col: 12, offset: 35380},
																														val:        "[^<;\\r\\n]",
																														chars:      []rune{'<', ';', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1151, col: 5, offset: 35459},
																										expr: &actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonDocumentHeader263,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1129, col: 40, offset: 34822},
																					label: "email",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1129, col: 46, offset: 34828},
																						expr: &actionExpr{
																							pos: position{line: 1157, col: 5, offset: 35581},
																							run: (*parser).callonDocumentHeader267,
																							expr: &seqExpr{
																								pos: position{line: 1157, col: 5, offset: 35581},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1157, col: 5, offset: 35581},
																										expr: &notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1158, col: 5, offset: 35591},
																										val:        "<",
																										ignoreCase: false,
																										want:       "\"<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1159, col: 5, offset: 35600},
																										label: "email",
																										expr: &actionExpr{
																											pos: position{line: 1159, col: 12, offset: 35607},
																											run: (*parser).callonDocumentHeader274,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1159, col: 13, offset: 35608},
																												expr: &charClassMatcher{
																													pos:        position{line: 1159, col: 13, offset: 35608},
																													val:        "[^>\\r\\n]",
																													chars:      []rune{'>', '\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1162, col: 5, offset: 35668},
																										val:        ">",
																										ignoreCase: false,
																										want:       "\">\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1129, col: 69, offset: 34851},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonDocumentHeader279,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 1129, col: 76, offset: 34858},
																					expr: &litMatcher{
																						pos:        position{line: 1129, col: 76, offset: 34858},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1129, col: 81, offset: 34863},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonDocumentHeader284,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1130, col: 5, offset: 34875},
																					run: (*parser).callonDocumentHeader286,
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonDocumentHeader288,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1119, col: 5, offset: 34432},
												expr: &choiceExpr{
													pos: position{line: 1119, col: 6, offset: 34433},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2562, col: 22, offset: 82365},
															run: (*parser).callonDocumentHeader297,
															expr: &seqExpr{
																pos: position{line: 2562, col: 22, offset: 82365},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2567, col: 31, offset: 82586},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2567, col: 36, offset: 82591},
																		expr: &litMatcher{
																			pos:        position{line: 2567, col: 37, offset: 82592},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2562, col: 49, offset: 82392},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2857, col: 13, offset: 90620},
																			run: (*parser).callonDocumentHeader303,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2857, col: 13, offset: 90620},
																				expr: &charClassMatcher{
																					pos:        position{line: 2857, col: 13, offset: 90620},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonDocumentHeader307,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 819, col: 5, offset: 26296},
															run: (*parser).callonDocumentHeader314,
															expr: &seqExpr{
																pos: position{line: 819, col: 5, offset: 26296},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 739, col: 5, offset: 23558},
																		run: (*parser).callonDocumentHeader316,
																		expr: &seqExpr{
																			pos: position{line: 739, col: 5, offset: 23558},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 739, col: 5, offset: 23558},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 739, col: 16, offset: 23569},
																						run: (*parser).callonDocumentHeader319,
																						expr: &seqExpr{
																							pos: position{line: 739, col: 16, offset: 23569},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 739, col: 16, offset: 23569},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 739, col: 23, offset: 23576},
																									expr: &litMatcher{
																										pos:        position{line: 739, col: 23, offset: 23576},
																										val:        "/",
																										ignoreCase: false,
																										want:       "\"/\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 741, col: 8, offset: 23660},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonDocumentHeader325,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonDocumentHeader328,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 820, col: 5, offset: 26327},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 830, col: 5, offset: 26613},
																			expr: &actionExpr{
																				pos: position{line: 830, col: 6, offset: 26614},
																				run: (*parser).callonDocumentHeader337,
																				expr: &seqExpr{
																					pos: position{line: 830, col: 6, offset: 26614},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 830, col: 6, offset: 26614},
																							expr: &choiceExpr{
																								pos: position{line: 827, col: 29, offset: 26556},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 739, col: 5, offset: 23558},
																										run: (*parser).callonDocumentHeader341,
																										expr: &seqExpr{
																											pos: position{line: 739, col: 5, offset: 23558},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 739, col: 5, offset: 23558},
																													label: "delimiter",
																													expr: &actionExpr{
																														pos: position{line: 739, col: 16, offset: 23569},
																														run: (*parser).callonDocumentHeader344,
																														expr: &seqExpr{
																															pos: position{line: 739, col: 16, offset: 23569},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 739, col: 16, offset: 23569},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 739, col: 23, offset: 23576},
																																	expr: &litMatcher{
																																		pos:        position{line: 739, col: 23, offset: 23576},
																																		val:        "/",
																																		ignoreCase: false,
																																		want:       "\"/\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 741, col: 8, offset: 23660},
																													expr: &actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonDocumentHeader350,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2930, col: 8, offset: 92541},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2919, col: 12, offset: 92331},
																															run: (*parser).callonDocumentHeader353,
																															expr: &choiceExpr{
																																pos: position{line: 2919, col: 13, offset: 92332},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 13, offset: 92332},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 20, offset: 92339},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 29, offset: 92348},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2927, col: 8, offset: 92491},
																															expr: &anyMatcher{
																																line: 2927, col: 9, offset: 92492,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 831, col: 5, offset: 26644},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 810, col: 5, offset: 26062},
																								run: (*parser).callonDocumentHeader363,
																								expr: &seqExpr{
																									pos: position{line: 810, col: 5, offset: 26062},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 810, col: 5, offset: 26062},
																											expr: &notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 811, col: 5, offset: 26135},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2857, col: 13, offset: 90620},
																												run: (*parser).callonDocumentHeader369,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2857, col: 13, offset: 90620},
																													expr: &charClassMatcher{
																														pos:        position{line: 2857, col: 13, offset: 90620},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDocumentHeader373,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 821, col: 5, offset: 26361},
																		expr: &choiceExpr{
																			pos: position{line: 827, col: 29, offset: 26556},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 739, col: 5, offset: 23558},
																					run: (*parser).callonDocumentHeader382,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 739, col: 5, offset: 23558},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 739, col: 16, offset: 23569},
																									run: (*parser).callonDocumentHeader385,
																									expr: &seqExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 739, col: 16, offset: 23569},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 739, col: 23, offset: 23576},
																												expr: &litMatcher{
																													pos:        position{line: 739, col: 23, offset: 23576},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 741, col: 8, offset: 23660},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonDocumentHeader391,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonDocumentHeader394,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1120, col: 5, offset: 34507},
												label: "revision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1120, col: 14, offset: 34516},
													expr: &actionExpr{
														pos: position{line: 1168, col: 21, offset: 35857},
														run: (*parser).callonDocumentHeader405,
														expr: &seqExpr{
															pos: position{line: 1168, col: 21, offset: 35857},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1168, col: 21, offset: 35857},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonDocumentHeader408,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1168, col: 28, offset: 35864},
																	expr: &litMatcher{
																		pos:        position{line: 1168, col: 29, offset: 35865},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1168, col: 33, offset: 35869},
																	label: "revision",
																	expr: &choiceExpr{
																		pos: position{line: 1169, col: 9, offset: 35888},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1169, col: 10, offset: 35889},
																				run: (*parser).callonDocumentHeader414,
																				expr: &seqExpr{
																					pos: position{line: 1169, col: 10, offset: 35889},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1169, col: 10, offset: 35889},
																							label: "revnumber",
																							expr: &choiceExpr{
																								pos: position{line: 1178, col: 27, offset: 36406},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1178, col: 27, offset: 36406},
																										run: (*parser).callonDocumentHeader418,
																										expr: &seqExpr{
																											pos: position{line: 1178, col: 27, offset: 36406},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1178, col: 27, offset: 36406},
																													val:        "v",
																													ignoreCase: true,
																													want:       "\"v\"i",
																												},
																												&charClassMatcher{
																													pos:        position{line: 1178, col: 32, offset: 36411},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1178, col: 38, offset: 36417},
																													expr: &charClassMatcher{
																														pos:        position{line: 1178, col: 38, offset: 36417},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1180, col: 5, offset: 36465},
																										run: (*parser).callonDocumentHeader424,
																										expr: &seqExpr{
																											pos: position{line: 1180, col: 5, offset: 36465},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 1180, col: 5, offset: 36465},
																													expr: &litMatcher{
																														pos:        position{line: 1180, col: 5, offset: 36465},
																														val:        "v",
																														ignoreCase: true,
																														want:       "\"v\"i",
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 1180, col: 11, offset: 36471},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1180, col: 17, offset: 36477},
																													expr: &charClassMatcher{
																														pos:        position{line: 1180, col: 17, offset: 36477},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1180, col: 28, offset: 36488},
																													expr: &actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonDocumentHeader432,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 1180, col: 35, offset: 36495},
																													expr: &litMatcher{
																														pos:        position{line: 1180, col: 36, offset: 36496},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1169, col: 45, offset: 35924},
																							expr: &litMatcher{
																								pos:        position{line: 1169, col: 45, offset: 35924},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1169, col: 50, offset: 35929},
																							label: "revdate",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1169, col: 58, offset: 35937},
																								expr: &actionExpr{
																									pos: position{line: 1184, col: 25, offset: 36560},
																									run: (*parser).callonDocumentHeader440,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1184, col: 25, offset: 36560},
																										expr: &charClassMatcher{
																											pos:        position{line: 1184, col: 25, offset: 36560},
																											val:        "[^:\\r\\n]",
																											chars:      []rune{':', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1169, col: 82, offset: 35961},
																							expr: &litMatcher{
																								pos:        position{line: 1169, col: 82, offset: 35961},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1169, col: 87, offset: 35966},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1169, col: 97, offset: 35976},
																								expr: &actionExpr{
																									pos: position{line: 1188, col: 27, offset: 36632},
																									run: (*parser).callonDocumentHeader447,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1188, col: 27, offset: 36632},
																										expr: &charClassMatcher{
																											pos:        position{line: 1188, col: 27, offset: 36632},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1171, col: 15, offset: 36094},
																				run: (*parser).callonDocumentHeader450,
																				expr: &seqExpr{
																					pos: position{line: 1171, col: 15, offset: 36094},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1171, col: 15, offset: 36094},
																							label: "revdate",
																							expr: &actionExpr{
																								pos: position{line: 1184, col: 25, offset: 36560},
																								run: (*parser).callonDocumentHeader453,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1184, col: 25, offset: 36560},
																									expr: &charClassMatcher{
																										pos:        position{line: 1184, col: 25, offset: 36560},
																										val:        "[^:\\r\\n]",
																										chars:      []rune{':', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1171, col: 46, offset: 36125},
																							expr: &litMatcher{
																								pos:        position{line: 1171, col: 46, offset: 36125},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1171, col: 51, offset: 36130},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1171, col: 61, offset: 36140},
																								expr: &actionExpr{
																									pos: position{line: 1188, col: 27, offset: 36632},
																									run: (*parser).callonDocumentHeader460,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1188, col: 27, offset: 36632},
																										expr: &charClassMatcher{
																											pos:        position{line: 1188, col: 27, offset: 36632},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonDocumentHeader464,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 5, offset: 34053},
							label: "extraElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1107, col: 19, offset: 34067},
								expr: &choiceExpr{
									pos: position{line: 1107, col: 20, offset: 34068},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1107, col: 20, offset: 34068},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 360, col: 19, offset: 10907},
											run: (*parser).callonDocumentHeader475,
											expr: &seqExpr{
												pos: position{line: 360, col: 19, offset: 10907},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 360, col: 19, offset: 10907},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 360, col: 24, offset: 10912},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															run: (*parser).callonDocumentHeader479,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9733},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9733},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9743},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9744},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 360, col: 45, offset: 10933},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 360, col: 49, offset: 10937},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentHeader486,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentHeader489,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 362, col: 9, offset: 11028},
											run: (*parser).callonDocumentHeader496,
											expr: &seqExpr{
												pos: position{line: 362, col: 9, offset: 11028},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 362, col: 9, offset: 11028},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 362, col: 13, offset: 11032},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															run: (*parser).callonDocumentHeader500,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9733},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9733},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9743},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9744},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 362, col: 34, offset: 11053},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 362, col: 39, offset: 11058},
														expr: &actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonDocumentHeader507,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentHeader510,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											run: (*parser).callonDocumentHeader517,
											expr: &seqExpr{
												pos: position{line: 2562, col: 22, offset: 82365},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2567, col: 31, offset: 82586},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2567, col: 36, offset: 82591},
														expr: &litMatcher{
															pos:        position{line: 2567, col: 37, offset: 82592},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2562, col: 49, offset: 82392},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															run: (*parser).callonDocumentHeader523,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2857, col: 13, offset: 90620},
																expr: &charClassMatcher{
																	pos:        position{line: 2857, col: 13, offset: 90620},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonDocumentHeader527,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 819, col: 5, offset: 26296},
											run: (*parser).callonDocumentHeader534,
											expr: &seqExpr{
												pos: position{line: 819, col: 5, offset: 26296},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 739, col: 5, offset: 23558},
														run: (*parser).callonDocumentHeader536,
														expr: &seqExpr{
															pos: position{line: 739, col: 5, offset: 23558},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 739, col: 5, offset: 23558},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 739, col: 16, offset: 23569},
																		run: (*parser).callonDocumentHeader539,
																		expr: &seqExpr{
																			pos: position{line: 739, col: 16, offset: 23569},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 739, col: 16, offset: 23569},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 739, col: 23, offset: 23576},
																					expr: &litMatcher{
																						pos:        position{line: 739, col: 23, offset: 23576},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 741, col: 8, offset: 23660},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonDocumentHeader545,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonDocumentHeader548,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 820, col: 5, offset: 26327},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 830, col: 5, offset: 26613},
															expr: &actionExpr{
																pos: position{line: 830, col: 6, offset: 26614},
																run: (*parser).callonDocumentHeader557,
																expr: &seqExpr{
																	pos: position{line: 830, col: 6, offset: 26614},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 830, col: 6, offset: 26614},
																			expr: &choiceExpr{
																				pos: position{line: 827, col: 29, offset: 26556},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						run: (*parser).callonDocumentHeader561,
																						expr: &seqExpr{
																							pos: position{line: 739, col: 5, offset: 23558},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 739, col: 5, offset: 23558},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										run: (*parser).callonDocumentHeader564,
																										expr: &seqExpr{
																											pos: position{line: 739, col: 16, offset: 23569},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 739, col: 16, offset: 23569},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 739, col: 23, offset: 23576},
																													expr: &litMatcher{
																														pos:        position{line: 739, col: 23, offset: 23576},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 741, col: 8, offset: 23660},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDocumentHeader570,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDocumentHeader573,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 831, col: 5, offset: 26644},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				run: (*parser).callonDocumentHeader583,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 5, offset: 26062},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 5, offset: 26062},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26135},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								run: (*parser).callonDocumentHeader589,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2857, col: 13, offset: 90620},
																									expr: &charClassMatcher{
																										pos:        position{line: 2857, col: 13, offset: 90620},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonDocumentHeader593,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 821, col: 5, offset: 26361},
														expr: &choiceExpr{
															pos: position{line: 827, col: 29, offset: 26556},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	run: (*parser).callonDocumentHeader602,
																	expr: &seqExpr{
																		pos: position{line: 739, col: 5, offset: 23558},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 739, col: 5, offset: 23558},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					run: (*parser).callonDocumentHeader605,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 16, offset: 23569},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 739, col: 16, offset: 23569},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 739, col: 23, offset: 23576},
																								expr: &litMatcher{
																									pos:        position{line: 739, col: 23, offset: 23576},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 741, col: 8, offset: 23660},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDocumentHeader611,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDocumentHeader614,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 1111, col: 1, offset: 34265},
			expr: &actionExpr{
				pos: position{line: 1112, col: 5, offset: 34287},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 5, offset: 34287},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1112, col: 5, offset: 34287},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&actionExpr{
							pos: position{line: 2914, col: 11, offset: 92214},
							run: (*parser).callonDocumentTitle4,
							expr: &oneOrMoreExpr{
								pos: position{line: 2914, col: 11, offset: 92214},
								expr: &charClassMatcher{
									pos:        position{line: 2914, col: 12, offset: 92215},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 16, offset: 34298},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 23, offset: 34305},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonDocumentTitle10,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorFullName",
			pos:  position{line: 1139, col: 1, offset: 35145},
			expr: &actionExpr{
				pos: position{line: 1140, col: 5, offset: 35176},
				run: (*parser).callonDocumentAuthorFullName1,
				expr: &seqExpr{
					pos: position{line: 1140, col: 5, offset: 35176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1140, col: 5, offset: 35176},
							label: "part1",
							expr: &actionExpr{
								pos: position{line: 1140, col: 12, offset: 35183},
								run: (*parser).callonDocumentAuthorFullName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1140, col: 12, offset: 35183},
									expr: &charClassMatcher{
										pos:        position{line: 1140, col: 12, offset: 35183},
										val:        "[^<;\\r\\n ]",
										chars:      []rune{'<', ';', '\r', '\n', ' '},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1143, col: 5, offset: 35263},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonDocumentAuthorFullName8,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 35274},
							label: "part2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1144, col: 11, offset: 35280},
								expr: &actionExpr{
									pos: position{line: 1144, col: 12, offset: 35281},
									run: (*parser).callonDocumentAuthorFullName12,
									expr: &oneOrMoreExpr{
										pos: position{line: 1144, col: 12, offset: 35281},
										expr: &charClassMatcher{
											pos:        position{line: 1144, col: 12, offset: 35281},
											val:        "[^<;\\r\\n ]",
											chars:      []rune{'<', ';', '\r', '\n', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1147, col: 5, offset: 35362},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonDocumentAuthorFullName16,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 5, offset: 35373},
							label: "part3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1148, col: 11, offset: 35379},
								expr: &actionExpr{
									pos: position{line: 1148, col: 12, offset: 35380},
									run: (*parser).callonDocumentAuthorFullName20,
									expr: &oneOrMoreExpr{
										pos: position{line: 1148, col: 12, offset: 35380},
										expr: &charClassMatcher{
											pos:        position{line: 1148, col: 12, offset: 35380},
											val:        "[^<;\\r\\n]",
											chars:      []rune{'<', ';', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1151, col: 5, offset: 35459},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonDocumentAuthorFullName24,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1260, col: 1, offset: 38867},
			expr: &actionExpr{
				pos: position{line: 1261, col: 5, offset: 38890},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1261, col: 5, offset: 38890},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1262, col: 9, offset: 38908},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2914, col: 11, offset: 92214},
								run: (*parser).callonInlineElement4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2914, col: 11, offset: 92214},
									expr: &charClassMatcher{
										pos:        position{line: 2914, col: 12, offset: 92215},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 2840, col: 5, offset: 90159},
								run: (*parser).callonInlineElement7,
								expr: &seqExpr{
									pos: position{line: 2840, col: 5, offset: 90159},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 2840, col: 6, offset: 90160},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 2841, col: 5, offset: 90205},
											expr: &charClassMatcher{
												pos:        position{line: 2841, col: 6, offset: 90206},
												val:        "[,;?!\\pL\\pN]",
												chars:      []rune{',', ';', '?', '!'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2842, col: 5, offset: 90269},
											expr: &choiceExpr{
												pos: position{line: 2842, col: 7, offset: 90271},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonInlineElement14,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&litMatcher{
														pos:        position{line: 1195, col: 32, offset: 36910},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonInlineElement17,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1264, col: 11, offset: 38948},
								name: "InlineMacro",
							},
							&actionExpr{
								pos: position{line: 1205, col: 5, offset: 37388},
								run: (*parser).callonInlineElement25,
								expr: &seqExpr{
									pos: position{line: 1205, col: 5, offset: 37388},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1205, col: 5, offset: 37388},
											run: (*parser).callonInlineElement27,
										},
										&litMatcher{
											pos:        position{line: 1208, col: 5, offset: 37464},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&andCodeExpr{
											pos: position{line: 1209, col: 5, offset: 37472},
											run: (*parser).callonInlineElement29,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1213, col: 5, offset: 37559},
											expr: &actionExpr{
												pos: position{line: 2910, col: 10, offset: 92147},
												run: (*parser).callonInlineElement31,
												expr: &charClassMatcher{
													pos:        position{line: 2910, col: 11, offset: 92148},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 1213, col: 12, offset: 37566},
											expr: &choiceExpr{
												pos: position{line: 2930, col: 8, offset: 92541},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonInlineElement35,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2576, col: 5, offset: 82884},
								run: (*parser).callonInlineElement42,
								expr: &seqExpr{
									pos: position{line: 2576, col: 5, offset: 82884},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2576, col: 5, offset: 82884},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
										&choiceExpr{
											pos: position{line: 2576, col: 10, offset: 82889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2585, col: 5, offset: 83342},
													run: (*parser).callonInlineElement46,
													expr: &litMatcher{
														pos:        position{line: 2585, col: 5, offset: 83342},
														val:        "\"`",
														ignoreCase: false,
														want:       "\"\\\"`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2588, col: 7, offset: 83400},
													run: (*parser).callonInlineElement48,
													expr: &litMatcher{
														pos:        position{line: 2588, col: 7, offset: 83400},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&actionExpr{
													pos: position{line: 2591, col: 7, offset: 83458},
													run: (*parser).callonInlineElement50,
													expr: &litMatcher{
														pos:        position{line: 2591, col: 7, offset: 83458},
														val:        "'`",
														ignoreCase: false,
														want:       "\"'`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2594, col: 7, offset: 83514},
													run: (*parser).callonInlineElement52,
													expr: &litMatcher{
														pos:        position{line: 2594, col: 7, offset: 83514},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&actionExpr{
													pos: position{line: 2598, col: 14, offset: 83579},
													run: (*parser).callonInlineElement54,
													expr: &litMatcher{
														pos:        position{line: 2598, col: 14, offset: 83579},
														val:        "(C)",
														ignoreCase: false,
														want:       "\"(C)\"",
													},
												},
												&actionExpr{
													pos: position{line: 2602, col: 14, offset: 83645},
													run: (*parser).callonInlineElement56,
													expr: &litMatcher{
														pos:        position{line: 2602, col: 14, offset: 83645},
														val:        "(TM)",
														ignoreCase: false,
														want:       "\"(TM)\"",
													},
												},
												&actionExpr{
													pos: position{line: 2606, col: 15, offset: 83714},
													run: (*parser).callonInlineElement58,
													expr: &litMatcher{
														pos:        position{line: 2606, col: 15, offset: 83714},
														val:        "(R)",
														ignoreCase: false,
														want:       "\"(R)\"",
													},
												},
												&actionExpr{
													pos: position{line: 2610, col: 13, offset: 83779},
													run: (*parser).callonInlineElement60,
													expr: &litMatcher{
														pos:        position{line: 2610, col: 13, offset: 83779},
														val:        "...",
														ignoreCase: false,
														want:       "\"...\"",
													},
												},
												&actionExpr{
													pos: position{line: 2638, col: 21, offset: 84349},
													run: (*parser).callonInlineElement62,
													expr: &litMatcher{
														pos:        position{line: 2638, col: 21, offset: 84349},
														val:        "->",
														ignoreCase: false,
														want:       "\"->\"",
													},
												},
												&actionExpr{
													pos: position{line: 2617, col: 5, offset: 83935},
													run: (*parser).callonInlineElement64,
													expr: &seqExpr{
														pos: position{line: 2617, col: 5, offset: 83935},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2617, col: 5, offset: 83935},
																val:        "--",
																ignoreCase: false,
																want:       "\"--\"",
															},
															&andCodeExpr{
																pos: position{line: 2618, col: 5, offset: 83945},
																run: (*parser).callonInlineElement67,
															},
															&choiceExpr{
																pos: position{line: 2622, col: 6, offset: 84032},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonInlineElement69,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 2622, col: 14, offset: 84040},
																		expr: &choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonInlineElement73,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2627, col: 5, offset: 84160},
													run: (*parser).callonInlineElement80,
													expr: &seqExpr{
														pos: position{line: 2627, col: 5, offset: 84160},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2627, col: 5, offset: 84160},
																val:        "--",
																ignoreCase: false,
																want:       "\"--\"",
															},
															&andCodeExpr{
																pos: position{line: 2628, col: 5, offset: 84170},
																run: (*parser).callonInlineElement83,
															},
															&andExpr{
																pos: position{line: 2632, col: 5, offset: 84259},
																expr: &choiceExpr{
																	pos: position{line: 2632, col: 7, offset: 84261},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2831, col: 13, offset: 90012},
																			val:        "[\\pL\\pN]",
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonInlineElement87,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2642, col: 20, offset: 84419},
													run: (*parser).callonInlineElement94,
													expr: &litMatcher{
														pos:        position{line: 2642, col: 20, offset: 84419},
														val:        "<-",
														ignoreCase: false,
														want:       "\"<-\"",
													},
												},
												&actionExpr{
													pos: position{line: 2646, col: 21, offset: 84490},
													run: (*parser).callonInlineElement96,
													expr: &litMatcher{
														pos:        position{line: 2646, col: 21, offset: 84490},
														val:        "=>",
														ignoreCase: false,
														want:       "\"=>\"",
													},
												},
												&actionExpr{
													pos: position{line: 2650, col: 20, offset: 84560},
													run: (*parser).callonInlineElement98,
													expr: &litMatcher{
														pos:        position{line: 2650, col: 20, offset: 84560},
														val:        "<=",
														ignoreCase: false,
														want:       "\"<=\"",
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2585, col: 5, offset: 83342},
								run: (*parser).callonInlineElement100,
								expr: &litMatcher{
									pos:        position{line: 2585, col: 5, offset: 83342},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
							},
							&actionExpr{
								pos: position{line: 2588, col: 7, offset: 83400},
								run: (*parser).callonInlineElement102,
								expr: &litMatcher{
									pos:        position{line: 2588, col: 7, offset: 83400},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
							},
							&actionExpr{
								pos: position{line: 2591, col: 7, offset: 83458},
								run: (*parser).callonInlineElement104,
								expr: &litMatcher{
									pos:        position{line: 2591, col: 7, offset: 83458},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
							},
							&actionExpr{
								pos: position{line: 2594, col: 7, offset: 83514},
								run: (*parser).callonInlineElement106,
								expr: &litMatcher{
									pos:        position{line: 2594, col: 7, offset: 83514},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
							},
							&actionExpr{
								pos: position{line: 2598, col: 14, offset: 83579},
								run: (*parser).callonInlineElement108,
								expr: &litMatcher{
									pos:        position{line: 2598, col: 14, offset: 83579},
									val:        "(C)",
									ignoreCase: false,
									want:       "\"(C)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2602, col: 14, offset: 83645},
								run: (*parser).callonInlineElement110,
								expr: &litMatcher{
									pos:        position{line: 2602, col: 14, offset: 83645},
									val:        "(TM)",
									ignoreCase: false,
									want:       "\"(TM)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2606, col: 15, offset: 83714},
								run: (*parser).callonInlineElement112,
								expr: &litMatcher{
									pos:        position{line: 2606, col: 15, offset: 83714},
									val:        "(R)",
									ignoreCase: false,
									want:       "\"(R)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2610, col: 13, offset: 83779},
								run: (*parser).callonInlineElement114,
								expr: &litMatcher{
									pos:        position{line: 2610, col: 13, offset: 83779},
									val:        "...",
									ignoreCase: false,
									want:       "\"...\"",
								},
							},
							&actionExpr{
								pos: position{line: 2617, col: 5, offset: 83935},
								run: (*parser).callonInlineElement116,
								expr: &seqExpr{
									pos: position{line: 2617, col: 5, offset: 83935},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2617, col: 5, offset: 83935},
											val:        "--",
											ignoreCase: false,
											want:       "\"--\"",
										},
										&andCodeExpr{
											pos: position{line: 2618, col: 5, offset: 83945},
											run: (*parser).callonInlineElement119,
										},
										&choiceExpr{
											pos: position{line: 2622, col: 6, offset: 84032},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2910, col: 10, offset: 92147},
													run: (*parser).callonInlineElement121,
													expr: &charClassMatcher{
														pos:        position{line: 2910, col: 11, offset: 92148},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2622, col: 14, offset: 84040},
													expr: &choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonInlineElement125,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2627, col: 5, offset: 84160},
								run: (*parser).callonInlineElement132,
								expr: &seqExpr{
									pos: position{line: 2627, col: 5, offset: 84160},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2627, col: 5, offset: 84160},
											val:        "--",
											ignoreCase: false,
											want:       "\"--\"",
										},
										&andCodeExpr{
											pos: position{line: 2628, col: 5, offset: 84170},
											run: (*parser).callonInlineElement135,
										},
										&andExpr{
											pos: position{line: 2632, col: 5, offset: 84259},
											expr: &choiceExpr{
												pos: position{line: 2632, col: 7, offset: 84261},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2831, col: 13, offset: 90012},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
													&actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonInlineElement139,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2638, col: 21, offset: 84349},
								run: (*parser).callonInlineElement146,
								expr: &litMatcher{
									pos:        position{line: 2638, col: 21, offset: 84349},
									val:        "->",
									ignoreCase: false,
									want:       "\"->\"",
								},
							},
							&actionExpr{
								pos: position{line: 2642, col: 20, offset: 84419},
								run: (*parser).callonInlineElement148,
								expr: &litMatcher{
									pos:        position{line: 2642, col: 20, offset: 84419},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
							},
							&actionExpr{
								pos: position{line: 2646, col: 21, offset: 84490},
								run: (*parser).callonInlineElement150,
								expr: &litMatcher{
									pos:        position{line: 2646, col: 21, offset: 84490},
									val:        "=>",
									ignoreCase: false,
									want:       "\"=>\"",
								},
							},
							&actionExpr{
								pos: position{line: 2650, col: 20, offset: 84560},
								run: (*parser).callonInlineElement152,
								expr: &litMatcher{
									pos:        position{line: 2650, col: 20, offset: 84560},
									val:        "<=",
									ignoreCase: false,
									want:       "\"<=\"",
								},
							},
							&actionExpr{
								pos: position{line: 2659, col: 5, offset: 84866},
								run: (*parser).callonInlineElement154,
								expr: &seqExpr{
									pos: position{line: 2659, col: 5, offset: 84866},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2659, col: 5, offset: 84866},
											val:        "\\'",
											ignoreCase: false,
											want:       "\"\\\\'\"",
										},
										&andExpr{
											pos: position{line: 2659, col: 10, offset: 84871},
											expr: &charClassMatcher{
												pos:        position{line: 2659, col: 11, offset: 84872},
												val:        "[\\pL]",
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2665, col: 6, offset: 85063},
								run: (*parser).callonInlineElement159,
								expr: &seqExpr{
									pos: position{line: 2665, col: 6, offset: 85063},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2665, col: 6, offset: 85063},
											run: (*parser).callonInlineElement161,
										},
										&litMatcher{
											pos:        position{line: 2669, col: 6, offset: 85187},
											val:        "'",
											ignoreCase: false,
											want:       "\"'\"",
										},
										&andExpr{
											pos: position{line: 2669, col: 10, offset: 85191},
											expr: &charClassMatcher{
												pos:        position{line: 2669, col: 11, offset: 85192},
												val:        "[\\pL]",
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1267, col: 11, offset: 39035},
								name: "Quote",
							},
							&actionExpr{
								pos: position{line: 635, col: 5, offset: 20085},
								run: (*parser).callonInlineElement166,
								expr: &seqExpr{
									pos: position{line: 635, col: 5, offset: 20085},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											run: (*parser).callonInlineElement168,
										},
										&labeledExpr{
											pos:   position{line: 638, col: 5, offset: 20157},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 638, col: 14, offset: 20166},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 657, col: 25, offset: 20767},
														run: (*parser).callonInlineElement171,
														expr: &seqExpr{
															pos: position{line: 657, col: 25, offset: 20767},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 657, col: 25, offset: 20767},
																	val:        "{counter:",
																	ignoreCase: false,
																	want:       "\"{counter:\"",
																},
																&labeledExpr{
																	pos:   position{line: 657, col: 37, offset: 20779},
																	label: "name",
																	expr: &actionExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		run: (*parser).callonInlineElement175,
																		expr: &seqExpr{
																			pos: position{line: 318, col: 18, offset: 9733},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 318, col: 18, offset: 9733},
																					val:        "[_\\pL\\pN]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 318, col: 28, offset: 9743},
																					expr: &charClassMatcher{
																						pos:        position{line: 318, col: 29, offset: 9744},
																						val:        "[-\\pL\\pN]",
																						chars:      []rune{'-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 657, col: 56, offset: 20798},
																	label: "start",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 657, col: 62, offset: 20804},
																		expr: &actionExpr{
																			pos: position{line: 665, col: 17, offset: 21099},
																			run: (*parser).callonInlineElement182,
																			expr: &seqExpr{
																				pos: position{line: 665, col: 17, offset: 21099},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 665, col: 17, offset: 21099},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 665, col: 21, offset: 21103},
																						label: "start",
																						expr: &choiceExpr{
																							pos: position{line: 665, col: 28, offset: 21110},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									run: (*parser).callonInlineElement187,
																									expr: &charClassMatcher{
																										pos:        position{line: 665, col: 28, offset: 21110},
																										val:        "[A-Za-z]",
																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 667, col: 9, offset: 21164},
																									run: (*parser).callonInlineElement189,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 667, col: 9, offset: 21164},
																										expr: &charClassMatcher{
																											pos:        position{line: 667, col: 9, offset: 21164},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 657, col: 78, offset: 20820},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 661, col: 25, offset: 20938},
														run: (*parser).callonInlineElement193,
														expr: &seqExpr{
															pos: position{line: 661, col: 25, offset: 20938},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 661, col: 25, offset: 20938},
																	val:        "{counter2:",
																	ignoreCase: false,
																	want:       "\"{counter2:\"",
																},
																&labeledExpr{
																	pos:   position{line: 661, col: 38, offset: 20951},
																	label: "name",
																	expr: &actionExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		run: (*parser).callonInlineElement197,
																		expr: &seqExpr{
																			pos: position{line: 318, col: 18, offset: 9733},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 318, col: 18, offset: 9733},
																					val:        "[_\\pL\\pN]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 318, col: 28, offset: 9743},
																					expr: &charClassMatcher{
																						pos:        position{line: 318, col: 29, offset: 9744},
																						val:        "[-\\pL\\pN]",
																						chars:      []rune{'-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 661, col: 57, offset: 20970},
																	label: "start",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 661, col: 63, offset: 20976},
																		expr: &actionExpr{
																			pos: position{line: 665, col: 17, offset: 21099},
																			run: (*parser).callonInlineElement204,
																			expr: &seqExpr{
																				pos: position{line: 665, col: 17, offset: 21099},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 665, col: 17, offset: 21099},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 665, col: 21, offset: 21103},
																						label: "start",
																						expr: &choiceExpr{
																							pos: position{line: 665, col: 28, offset: 21110},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									run: (*parser).callonInlineElement209,
																									expr: &charClassMatcher{
																										pos:        position{line: 665, col: 28, offset: 21110},
																										val:        "[A-Za-z]",
																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 667, col: 9, offset: 21164},
																									run: (*parser).callonInlineElement211,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 667, col: 9, offset: 21164},
																										expr: &charClassMatcher{
																											pos:        position{line: 667, col: 9, offset: 21164},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 661, col: 79, offset: 20992},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 644, col: 5, offset: 20295},
														run: (*parser).callonInlineElement215,
														expr: &seqExpr{
															pos: position{line: 644, col: 5, offset: 20295},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 644, col: 5, offset: 20295},
																	val:        "\\{",
																	ignoreCase: false,
																	want:       "\"\\\\{\"",
																},
																&labeledExpr{
																	pos:   position{line: 644, col: 13, offset: 20303},
																	label: "name",
																	expr: &actionExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		run: (*parser).callonInlineElement219,
																		expr: &seqExpr{
																			pos: position{line: 318, col: 18, offset: 9733},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 318, col: 18, offset: 9733},
																					val:        "[_\\pL\\pN]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 318, col: 28, offset: 9743},
																					expr: &charClassMatcher{
																						pos:        position{line: 318, col: 29, offset: 9744},
																						val:        "[-\\pL\\pN]",
																						chars:      []rune{'-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 644, col: 32, offset: 20322},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 651, col: 5, offset: 20563},
														run: (*parser).callonInlineElement225,
														expr: &seqExpr{
															pos: position{line: 651, col: 5, offset: 20563},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 651, col: 5, offset: 20563},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
																&labeledExpr{
																	pos:   position{line: 651, col: 9, offset: 20567},
																	label: "name",
																	expr: &actionExpr{
																		pos: position{line: 318, col: 18, offset: 9733},
																		run: (*parser).callonInlineElement229,
																		expr: &seqExpr{
																			pos: position{line: 318, col: 18, offset: 9733},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 318, col: 18, offset: 9733},
																					val:        "[_\\pL\\pN]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 318, col: 28, offset: 9743},
																					expr: &charClassMatcher{
																						pos:        position{line: 318, col: 29, offset: 9744},
																						val:        "[-\\pL\\pN]",
																						chars:      []rune{'-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 651, col: 28, offset: 20586},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2545, col: 5, offset: 81727},
								run: (*parser).callonInlineElement235,
								expr: &seqExpr{
									pos: position{line: 2545, col: 5, offset: 81727},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											run: (*parser).callonInlineElement237,
										},
										&labeledExpr{
											pos:   position{line: 2548, col: 5, offset: 81803},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 2550, col: 9, offset: 81901},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														run: (*parser).callonInlineElement240,
														expr: &choiceExpr{
															pos: position{line: 685, col: 27, offset: 21818},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	run: (*parser).callonInlineElement242,
																	expr: &seqExpr{
																		pos: position{line: 685, col: 27, offset: 21818},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 685, col: 27, offset: 21818},
																				val:        "<<",
																				ignoreCase: false,
																				want:       "\"<<\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 685, col: 32, offset: 21823},
																				label: "id",
																				expr: &actionExpr{
																					pos: position{line: 2895, col: 7, offset: 91799},
																					run: (*parser).callonInlineElement246,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2895, col: 7, offset: 91799},
																						expr: &charClassMatcher{
																							pos:        position{line: 2895, col: 7, offset: 91799},
																							val:        "[^[]<>,]",
																							chars:      []rune{'[', ']', '<', '>', ','},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 685, col: 40, offset: 21831},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonInlineElement250,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 685, col: 47, offset: 21838},
																				val:        ",",
																				ignoreCase: false,
																				want:       "\",\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 685, col: 51, offset: 21842},
																				label: "label",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 695, col: 24, offset: 22243},
																					expr: &choiceExpr{
																						pos: position{line: 696, col: 5, offset: 22249},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 696, col: 6, offset: 22250},
																								run: (*parser).callonInlineElement256,
																								expr: &seqExpr{
																									pos: position{line: 696, col: 6, offset: 22250},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 696, col: 6, offset: 22250},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 696, col: 14, offset: 22258},
																											expr: &charClassMatcher{
																												pos:        position{line: 696, col: 14, offset: 22258},
																												val:        "[^\\r\\n{<>]",
																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 644, col: 5, offset: 20295},
																								run: (*parser).callonInlineElement261,
																								expr: &seqExpr{
																									pos: position{line: 644, col: 5, offset: 20295},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 644, col: 5, offset: 20295},
																											val:        "\\{",
																											ignoreCase: false,
																											want:       "\"\\\\{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 644, col: 13, offset: 20303},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 318, col: 18, offset: 9733},
																												run: (*parser).callonInlineElement265,
																												expr: &seqExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 318, col: 18, offset: 9733},
																															val:        "[_\\pL\\pN]",
																															chars:      []rune{'_'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 318, col: 28, offset: 9743},
																															expr: &charClassMatcher{
																																pos:        position{line: 318, col: 29, offset: 9744},
																																val:        "[-\\pL\\pN]",
																																chars:      []rune{'-'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 644, col: 32, offset: 20322},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 651, col: 5, offset: 20563},
																								run: (*parser).callonInlineElement271,
																								expr: &seqExpr{
																									pos: position{line: 651, col: 5, offset: 20563},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 651, col: 5, offset: 20563},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 651, col: 9, offset: 20567},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 318, col: 18, offset: 9733},
																												run: (*parser).callonInlineElement275,
																												expr: &seqExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 318, col: 18, offset: 9733},
																															val:        "[_\\pL\\pN]",
																															chars:      []rune{'_'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 318, col: 28, offset: 9743},
																															expr: &charClassMatcher{
																																pos:        position{line: 318, col: 29, offset: 9744},
																																val:        "[-\\pL\\pN]",
																																chars:      []rune{'-'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 651, col: 28, offset: 20586},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 700, col: 8, offset: 22484},
																								run: (*parser).callonInlineElement281,
																								expr: &litMatcher{
																									pos:        position{line: 700, col: 8, offset: 22484},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 685, col: 79, offset: 21870},
																				val:        ">>",
																				ignoreCase: false,
																				want:       "\">>\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 687, col: 9, offset: 21943},
																	run: (*parser).callonInlineElement284,
																	expr: &seqExpr{
																		pos: position{line: 687, col: 9, offset: 21943},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 687, col: 9, offset: 21943},
																				val:        "<<",
																				ignoreCase: false,
																				want:       "\"<<\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 687, col: 14, offset: 21948},
																				label: "id",
																				expr: &actionExpr{
																					pos: position{line: 2895, col: 7, offset: 91799},
																					run: (*parser).callonInlineElement288,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2895, col: 7, offset: 91799},
																						expr: &charClassMatcher{
																							pos:        position{line: 2895, col: 7, offset: 91799},
																							val:        "[^[]<>,]",
																							chars:      []rune{'[', ']', '<', '>', ','},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 687, col: 22, offset: 21956},
																				val:        ">>",
																				ignoreCase: false,
																				want:       "\">>\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2553, col: 11, offset: 82005},
														run: (*parser).callonInlineElement292,
														expr: &charClassMatcher{
															pos:        position{line: 2553, col: 12, offset: 82006},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2853, col: 12, offset: 90555},
								run: (*parser).callonInlineElement294,
								expr: &charClassMatcher{
									pos:        position{line: 2853, col: 12, offset: 90555},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineButton",
			pos:  position{line: 1294, col: 1, offset: 40053},
			expr: &actionExpr{
				pos: position{line: 1295, col: 5, offset: 40074},
				run: (*parser).callonInlineButton1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 5, offset: 40074},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1295, col: 5, offset: 40074},
							run: (*parser).callonInlineButton3,
						},
						&litMatcher{
							pos:        position{line: 1298, col: 5, offset: 40133},
							val:        "btn:",
							ignoreCase: false,
							want:       "\"btn:\"",
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 12, offset: 40140},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 24, offset: 40152},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMenu",
			pos:  position{line: 1305, col: 1, offset: 40440},
			expr: &actionExpr{
				pos: position{line: 1306, col: 5, offset: 40459},
				run: (*parser).callonInlineMenu1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 5, offset: 40459},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1306, col: 5, offset: 40459},
							run: (*parser).callonInlineMenu3,
						},
						&litMatcher{
							pos:        position{line: 1309, col: 5, offset: 40518},
							val:        "menu:",
							ignoreCase: false,
							want:       "\"menu:\"",
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 13, offset: 40526},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 2895, col: 7, offset: 91799},
								run: (*parser).callonInlineMenu6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2895, col: 7, offset: 91799},
									expr: &charClassMatcher{
										pos:        position{line: 2895, col: 7, offset: 91799},
										val:        "[^[]<>,]",
										chars:      []rune{'[', ']', '<', '>', ','},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 21, offset: 40534},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 33, offset: 40546},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1316, col: 1, offset: 40845},
			expr: &actionExpr{
				pos: position{line: 1316, col: 14, offset: 40858},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 14, offset: 40858},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1316, col: 14, offset: 40858},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1316, col: 19, offset: 40863},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1316, col: 25, offset: 40869},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1316, col: 43, offset: 40887},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1320, col: 1, offset: 40956},
			expr: &actionExpr{
				pos: position{line: 1320, col: 21, offset: 40976},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1320, col: 21, offset: 40976},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1320, col: 30, offset: 40985},
						expr: &choiceExpr{
							pos: position{line: 1320, col: 31, offset: 40986},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2840, col: 5, offset: 90159},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2840, col: 5, offset: 90159},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2840, col: 6, offset: 90160},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2841, col: 5, offset: 90205},
												expr: &charClassMatcher{
													pos:        position{line: 2841, col: 6, offset: 90206},
													val:        "[,;?!\\pL\\pN]",
													chars:      []rune{',', ';', '?', '!'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2842, col: 5, offset: 90269},
												expr: &choiceExpr{
													pos: position{line: 2842, col: 7, offset: 90271},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonIndexTermContent12,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 1195, col: 32, offset: 36910},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonIndexTermContent15,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 44, offset: 40999},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2910, col: 10, offset: 92147},
									run: (*parser).callonIndexTermContent23,
									expr: &charClassMatcher{
										pos:        position{line: 2910, col: 11, offset: 92148},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2545, col: 5, offset: 81727},
									run: (*parser).callonIndexTermContent25,
									expr: &seqExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2545, col: 5, offset: 81727},
												run: (*parser).callonIndexTermContent27,
											},
											&labeledExpr{
												pos:   position{line: 2548, col: 5, offset: 81803},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2550, col: 9, offset: 81901},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2550, col: 9, offset: 81901},
															run: (*parser).callonIndexTermContent30,
															expr: &choiceExpr{
																pos: position{line: 685, col: 27, offset: 21818},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 685, col: 27, offset: 21818},
																		run: (*parser).callonIndexTermContent32,
																		expr: &seqExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 685, col: 27, offset: 21818},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 685, col: 32, offset: 21823},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2895, col: 7, offset: 91799},
																						run: (*parser).callonIndexTermContent36,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							expr: &charClassMatcher{
																								pos:        position{line: 2895, col: 7, offset: 91799},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 685, col: 40, offset: 21831},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonIndexTermContent40,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 685, col: 47, offset: 21838},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 685, col: 51, offset: 21842},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 695, col: 24, offset: 22243},
																						expr: &choiceExpr{
																							pos: position{line: 696, col: 5, offset: 22249},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 696, col: 6, offset: 22250},
																									run: (*parser).callonIndexTermContent46,
																									expr: &seqExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 696, col: 6, offset: 22250},
																												val:        "[\\pL\\pN]",
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 696, col: 14, offset: 22258},
																												expr: &charClassMatcher{
																													pos:        position{line: 696, col: 14, offset: 22258},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 644, col: 5, offset: 20295},
																									run: (*parser).callonIndexTermContent51,
																									expr: &seqExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 644, col: 5, offset: 20295},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 644, col: 13, offset: 20303},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonIndexTermContent55,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 644, col: 32, offset: 20322},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 651, col: 5, offset: 20563},
																									run: (*parser).callonIndexTermContent61,
																									expr: &seqExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 651, col: 5, offset: 20563},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 651, col: 9, offset: 20567},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 318, col: 18, offset: 9733},
																													run: (*parser).callonIndexTermContent65,
																													expr: &seqExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 318, col: 18, offset: 9733},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 318, col: 28, offset: 9743},
																																expr: &charClassMatcher{
																																	pos:        position{line: 318, col: 29, offset: 9744},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 651, col: 28, offset: 20586},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 700, col: 8, offset: 22484},
																									run: (*parser).callonIndexTermContent71,
																									expr: &litMatcher{
																										pos:        position{line: 700, col: 8, offset: 22484},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 685, col: 79, offset: 21870},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 687, col: 9, offset: 21943},
																		run: (*parser).callonIndexTermContent74,
																		expr: &seqExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 687, col: 9, offset: 21943},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 687, col: 14, offset: 21948},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2895, col: 7, offset: 91799},
																						run: (*parser).callonIndexTermContent78,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							expr: &charClassMatcher{
																								pos:        position{line: 2895, col: 7, offset: 91799},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 687, col: 22, offset: 21956},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2553, col: 11, offset: 82005},
															run: (*parser).callonIndexTermContent82,
															expr: &charClassMatcher{
																pos:        position{line: 2553, col: 12, offset: 82006},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1197, col: 23, offset: 36942},
									run: (*parser).callonIndexTermContent84,
									expr: &seqExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1195, col: 32, offset: 36910},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1197, col: 51, offset: 36970},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1197, col: 56, offset: 36975},
													run: (*parser).callonIndexTermContent88,
													expr: &oneOrMoreExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														expr: &charClassMatcher{
															pos:        position{line: 1197, col: 56, offset: 36975},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1195, col: 32, offset: 36910},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1320, col: 105, offset: 41060},
									run: (*parser).callonIndexTermContent92,
									expr: &seqExpr{
										pos: position{line: 1320, col: 106, offset: 41061},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1320, col: 106, offset: 41061},
												expr: &litMatcher{
													pos:        position{line: 1320, col: 107, offset: 41062},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1320, col: 112, offset: 41067,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1340, col: 1, offset: 41776},
			expr: &actionExpr{
				pos: position{line: 1341, col: 5, offset: 41795},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 5, offset: 41795},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1341, col: 5, offset: 41795},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 15, offset: 41805},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2869, col: 13, offset: 90875},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 2869, col: 13, offset: 90875},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2869, col: 13, offset: 90875},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2869, col: 20, offset: 90882},
												expr: &actionExpr{
													pos: position{line: 2877, col: 11, offset: 91144},
													run: (*parser).callonImageBlock9,
													expr: &choiceExpr{
														pos: position{line: 2877, col: 12, offset: 91145},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2877, col: 12, offset: 91145},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 24, offset: 91157},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 37, offset: 91170},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 48, offset: 91181},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 59, offset: 91192},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2869, col: 30, offset: 90892},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2869, col: 35, offset: 90897},
												expr: &choiceExpr{
													pos: position{line: 2869, col: 36, offset: 90898},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2882, col: 5, offset: 91256},
															run: (*parser).callonImageBlock19,
															expr: &seqExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		expr: &litMatcher{
																			pos:        position{line: 2882, col: 6, offset: 91257},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2883, col: 5, offset: 91281},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2883, col: 14, offset: 91290},
																			expr: &choiceExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						run: (*parser).callonImageBlock26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 9, offset: 91300},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 10, offset: 91301},
																								val:        "[^\\r\\n[]�{.,;?! ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2887, col: 11, offset: 91564},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2848, col: 25, offset: 90406},
																								run: (*parser).callonImageBlock30,
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 25, offset: 90406},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2887, col: 32, offset: 91585},
																								expr: &notExpr{
																									pos: position{line: 2887, col: 34, offset: 91587},
																									expr: &choiceExpr{
																										pos: position{line: 2887, col: 36, offset: 91589},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonImageBlock37,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonImageBlock39,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonImageBlock41,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonImageBlock44,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonImageBlock48,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonImageBlock55,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonImageBlock60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonImageBlock62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonImageBlock66,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonImageBlock70,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonImageBlock77,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonImageBlock82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonImageBlock84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonImageBlock88,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonImageBlock92,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonImageBlock98,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonImageBlock102,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2889, col: 11, offset: 91643},
																						run: (*parser).callonImageBlock108,
																						expr: &litMatcher{
																							pos:        position{line: 2889, col: 11, offset: 91643},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1197, col: 23, offset: 36942},
															run: (*parser).callonImageBlock110,
															expr: &seqExpr{
																pos: position{line: 1197, col: 23, offset: 36942},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1197, col: 51, offset: 36970},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1197, col: 56, offset: 36975},
																			run: (*parser).callonImageBlock114,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1197, col: 56, offset: 36975},
																				expr: &charClassMatcher{
																					pos:        position{line: 1197, col: 56, offset: 36975},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 31, offset: 41821},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 43, offset: 41833},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1341, col: 61, offset: 41851},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonImageBlock121,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonImageBlock124,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1346, col: 1, offset: 42068},
			expr: &actionExpr{
				pos: position{line: 1346, col: 16, offset: 42083},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1346, col: 16, offset: 42083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1346, col: 16, offset: 42083},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1346, col: 25, offset: 42092},
							expr: &litMatcher{
								pos:        position{line: 1346, col: 26, offset: 42093},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1346, col: 30, offset: 42097},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2869, col: 13, offset: 90875},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2869, col: 13, offset: 90875},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2869, col: 13, offset: 90875},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2869, col: 20, offset: 90882},
												expr: &actionExpr{
													pos: position{line: 2877, col: 11, offset: 91144},
													run: (*parser).callonInlineImage11,
													expr: &choiceExpr{
														pos: position{line: 2877, col: 12, offset: 91145},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2877, col: 12, offset: 91145},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 24, offset: 91157},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 37, offset: 91170},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 48, offset: 91181},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2877, col: 59, offset: 91192},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2869, col: 30, offset: 90892},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2869, col: 35, offset: 90897},
												expr: &choiceExpr{
													pos: position{line: 2869, col: 36, offset: 90898},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2882, col: 5, offset: 91256},
															run: (*parser).callonInlineImage21,
															expr: &seqExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		expr: &litMatcher{
																			pos:        position{line: 2882, col: 6, offset: 91257},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2883, col: 5, offset: 91281},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2883, col: 14, offset: 91290},
																			expr: &choiceExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						run: (*parser).callonInlineImage28,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 9, offset: 91300},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 10, offset: 91301},
																								val:        "[^\\r\\n[]�{.,;?! ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2887, col: 11, offset: 91564},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2848, col: 25, offset: 90406},
																								run: (*parser).callonInlineImage32,
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 25, offset: 90406},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2887, col: 32, offset: 91585},
																								expr: &notExpr{
																									pos: position{line: 2887, col: 34, offset: 91587},
																									expr: &choiceExpr{
																										pos: position{line: 2887, col: 36, offset: 91589},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonInlineImage39,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonInlineImage41,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonInlineImage43,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonInlineImage46,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonInlineImage50,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonInlineImage57,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonInlineImage62,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonInlineImage64,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonInlineImage68,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonInlineImage72,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonInlineImage79,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonInlineImage84,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonInlineImage86,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonInlineImage90,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonInlineImage94,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonInlineImage100,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonInlineImage104,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2889, col: 11, offset: 91643},
																						run: (*parser).callonInlineImage110,
																						expr: &litMatcher{
																							pos:        position{line: 2889, col: 11, offset: 91643},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1197, col: 23, offset: 36942},
															run: (*parser).callonInlineImage112,
															expr: &seqExpr{
																pos: position{line: 1197, col: 23, offset: 36942},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1197, col: 51, offset: 36970},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1197, col: 56, offset: 36975},
																			run: (*parser).callonInlineImage116,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1197, col: 56, offset: 36975},
																				expr: &charClassMatcher{
																					pos:        position{line: 1197, col: 56, offset: 36975},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1346, col: 46, offset: 42113},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1346, col: 58, offset: 42125},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1353, col: 1, offset: 42521},
			expr: &actionExpr{
				pos: position{line: 1353, col: 15, offset: 42535},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 15, offset: 42535},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1353, col: 15, offset: 42535},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 23, offset: 42543},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1353, col: 29, offset: 42549},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1353, col: 29, offset: 42549},
									expr: &charClassMatcher{
										pos:        position{line: 1353, col: 29, offset: 42549},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 73, offset: 42593},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 85, offset: 42605},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1360, col: 1, offset: 42971},
			expr: &actionExpr{
				pos: position{line: 1360, col: 19, offset: 42989},
				run: (*parser).callonInlineFootnote1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 19, offset: 42989},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1360, col: 19, offset: 42989},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 31, offset: 43001},
							label: "ref",
							expr: &zeroOrOneExpr{
								pos: position{line: 1360, col: 35, offset: 43005},
								expr: &actionExpr{
									pos: position{line: 2835, col: 14, offset: 90086},
									run: (*parser).callonInlineFootnote6,
									expr: &oneOrMoreExpr{
										pos: position{line: 2835, col: 14, offset: 90086},
										expr: &charClassMatcher{
											pos:        position{line: 2835, col: 14, offset: 90086},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1360, col: 50, offset: 43020},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 54, offset: 43024},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 64, offset: 43034},
								name: "FootnoteElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1360, col: 82, offset: 43052},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElements",
			pos:  position{line: 1366, col: 1, offset: 43209},
			expr: &actionExpr{
				pos: position{line: 1366, col: 21, offset: 43229},
				run: (*parser).callonFootnoteElements1,
				expr: &labeledExpr{
					pos:   position{line: 1366, col: 21, offset: 43229},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1366, col: 30, offset: 43238},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 31, offset: 43239},
							name: "FootnoteElement",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElement",
			pos:  position{line: 1370, col: 1, offset: 43331},
			expr: &actionExpr{
				pos: position{line: 1371, col: 5, offset: 43355},
				run: (*parser).callonFootnoteElement1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 5, offset: 43355},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1371, col: 5, offset: 43355},
							expr: &litMatcher{
								pos:        position{line: 1371, col: 6, offset: 43356},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 5, offset: 43365},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1373, col: 9, offset: 43383},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1373, col: 9, offset: 43383},
										name: "InlineElement",
									},
									&actionExpr{
										pos: position{line: 2919, col: 12, offset: 92331},
										run: (*parser).callonFootnoteElement8,
										expr: &choiceExpr{
											pos: position{line: 2919, col: 13, offset: 92332},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2919, col: 13, offset: 92332},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 20, offset: 92339},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 29, offset: 92348},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1406, col: 1, offset: 45007},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 21, offset: 45027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1406, col: 21, offset: 45027},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1406, col: 21, offset: 45027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1406, col: 21, offset: 45027},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1406, col: 30, offset: 45036},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1406, col: 38, offset: 45044},
										expr: &actionExpr{
											pos: position{line: 1412, col: 30, offset: 45370},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1412, col: 30, offset: 45370},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1406, col: 67, offset: 45073},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1408, col: 9, offset: 45177},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1408, col: 9, offset: 45177},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1408, col: 9, offset: 45177},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1408, col: 19, offset: 45187},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1408, col: 27, offset: 45195},
										expr: &choiceExpr{
											pos: position{line: 1408, col: 28, offset: 45196},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1408, col: 28, offset: 45196},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1412, col: 30, offset: 45370},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1412, col: 30, offset: 45370},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1408, col: 69, offset: 45237},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1419, col: 1, offset: 45626},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 9, offset: 45634},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1422, col: 5, offset: 45703},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1422, col: 5, offset: 45703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1422, col: 5, offset: 45703},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 5, offset: 45712},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2873, col: 23, offset: 91024},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 2873, col: 23, offset: 91024},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2873, col: 23, offset: 91024},
													expr: &litMatcher{
														pos:        position{line: 2873, col: 24, offset: 91025},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 28, offset: 91029},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2877, col: 11, offset: 91144},
														run: (*parser).callonLink11,
														expr: &choiceExpr{
															pos: position{line: 2877, col: 12, offset: 91145},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2877, col: 12, offset: 91145},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 24, offset: 91157},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 37, offset: 91170},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 48, offset: 91181},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 59, offset: 91192},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 44, offset: 91045},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2873, col: 49, offset: 91050},
														expr: &actionExpr{
															pos: position{line: 2882, col: 5, offset: 91256},
															run: (*parser).callonLink20,
															expr: &seqExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		expr: &litMatcher{
																			pos:        position{line: 2882, col: 6, offset: 91257},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2883, col: 5, offset: 91281},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2883, col: 14, offset: 91290},
																			expr: &choiceExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						run: (*parser).callonLink27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 9, offset: 91300},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 10, offset: 91301},
																								val:        "[^\\r\\n[]�{.,;?! ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2887, col: 11, offset: 91564},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2848, col: 25, offset: 90406},
																								run: (*parser).callonLink31,
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 25, offset: 90406},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2887, col: 32, offset: 91585},
																								expr: &notExpr{
																									pos: position{line: 2887, col: 34, offset: 91587},
																									expr: &choiceExpr{
																										pos: position{line: 2887, col: 36, offset: 91589},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonLink38,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonLink40,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonLink42,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonLink45,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonLink49,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonLink56,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonLink61,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonLink63,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonLink67,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonLink71,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonLink78,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonLink83,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonLink85,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonLink89,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonLink93,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonLink99,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonLink103,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2889, col: 11, offset: 91643},
																						run: (*parser).callonLink109,
																						expr: &litMatcher{
																							pos:        position{line: 2889, col: 11, offset: 91643},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1424, col: 5, offset: 45779},
									run: (*parser).callonLink111,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 19, offset: 45644},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 34, offset: 45659},
						name: "ExternalLink",
					},
					&actionExpr{
						pos: position{line: 1456, col: 17, offset: 46904},
						run: (*parser).callonLink114,
						expr: &seqExpr{
							pos: position{line: 1456, col: 17, offset: 46904},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1456, col: 17, offset: 46904},
									label: "local",
									expr: &actionExpr{
										pos: position{line: 1460, col: 22, offset: 47064},
										run: (*parser).callonLink117,
										expr: &seqExpr{
											pos: position{line: 1460, col: 22, offset: 47064},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1460, col: 22, offset: 47064},
													expr: &charClassMatcher{
														pos:        position{line: 1460, col: 22, offset: 47064},
														val:        "[!#$%&\\*=?^_`{|}~.a-zA-Z0-9+-/]",
														chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '+', '/'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andCodeExpr{
													pos: position{line: 1461, col: 5, offset: 47107},
													run: (*parser).callonLink121,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 43, offset: 46930},
									val:        "@",
									ignoreCase: false,
									want:       "\"@\"",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 47, offset: 46934},
									label: "domain",
									expr: &actionExpr{
										pos: position{line: 1472, col: 23, offset: 47451},
										run: (*parser).callonLink124,
										expr: &seqExpr{
											pos: position{line: 1472, col: 23, offset: 47451},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1472, col: 23, offset: 47451},
													expr: &charClassMatcher{
														pos:        position{line: 1472, col: 23, offset: 47451},
														val:        "[-a-zA-Z0-9]",
														chars:      []rune{'-'},
														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 1472, col: 37, offset: 47465},
													expr: &seqExpr{
														pos: position{line: 1472, col: 38, offset: 47466},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1472, col: 38, offset: 47466},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 1472, col: 42, offset: 47470},
																expr: &charClassMatcher{
																	pos:        position{line: 1472, col: 42, offset: 47470},
																	val:        "[-a-zA-Z0-9]",
																	chars:      []rune{'-'},
																	ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1433, col: 1, offset: 46059},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 5, offset: 46095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1435, col: 5, offset: 46095},
						run: (*parser).callonRelativeLink2,
						expr: &seqExpr{
							pos: position{line: 1435, col: 5, offset: 46095},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 5, offset: 46095},
									val:        "\\link:",
									ignoreCase: false,
									want:       "\"\\\\link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1435, col: 17, offset: 46107},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2869, col: 13, offset: 90875},
										run: (*parser).callonRelativeLink6,
										expr: &seqExpr{
											pos: position{line: 2869, col: 13, offset: 90875},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2869, col: 13, offset: 90875},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2869, col: 20, offset: 90882},
														expr: &actionExpr{
															pos: position{line: 2877, col: 11, offset: 91144},
															run: (*parser).callonRelativeLink10,
															expr: &choiceExpr{
																pos: position{line: 2877, col: 12, offset: 91145},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2877, col: 12, offset: 91145},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 24, offset: 91157},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 37, offset: 91170},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 48, offset: 91181},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 59, offset: 91192},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2869, col: 30, offset: 90892},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2869, col: 35, offset: 90897},
														expr: &choiceExpr{
															pos: position{line: 2869, col: 36, offset: 90898},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2882, col: 5, offset: 91256},
																	run: (*parser).callonRelativeLink20,
																	expr: &seqExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2882, col: 5, offset: 91256},
																				expr: &litMatcher{
																					pos:        position{line: 2882, col: 6, offset: 91257},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2883, col: 5, offset: 91281},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2883, col: 14, offset: 91290},
																					expr: &choiceExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2884, col: 9, offset: 91300},
																								run: (*parser).callonRelativeLink27,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2884, col: 9, offset: 91300},
																									expr: &charClassMatcher{
																										pos:        position{line: 2884, col: 10, offset: 91301},
																										val:        "[^\\r\\n[]�{.,;?! ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2887, col: 11, offset: 91564},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2848, col: 25, offset: 90406},
																										run: (*parser).callonRelativeLink31,
																										expr: &charClassMatcher{
																											pos:        position{line: 2848, col: 25, offset: 90406},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2887, col: 32, offset: 91585},
																										expr: &notExpr{
																											pos: position{line: 2887, col: 34, offset: 91587},
																											expr: &choiceExpr{
																												pos: position{line: 2887, col: 36, offset: 91589},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonRelativeLink38,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 635, col: 5, offset: 20085},
																								run: (*parser).callonRelativeLink40,
																								expr: &seqExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 635, col: 5, offset: 20085},
																											run: (*parser).callonRelativeLink42,
																										},
																										&labeledExpr{
																											pos:   position{line: 638, col: 5, offset: 20157},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 638, col: 14, offset: 20166},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 657, col: 25, offset: 20767},
																														run: (*parser).callonRelativeLink45,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 25, offset: 20767},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 25, offset: 20767},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 37, offset: 20779},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink49,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 56, offset: 20798},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 657, col: 62, offset: 20804},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonRelativeLink56,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonRelativeLink61,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonRelativeLink63,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 78, offset: 20820},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 661, col: 25, offset: 20938},
																														run: (*parser).callonRelativeLink67,
																														expr: &seqExpr{
																															pos: position{line: 661, col: 25, offset: 20938},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 661, col: 25, offset: 20938},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 38, offset: 20951},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink71,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 57, offset: 20970},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 661, col: 63, offset: 20976},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonRelativeLink78,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonRelativeLink83,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonRelativeLink85,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 661, col: 79, offset: 20992},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 644, col: 5, offset: 20295},
																														run: (*parser).callonRelativeLink89,
																														expr: &seqExpr{
																															pos: position{line: 644, col: 5, offset: 20295},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 644, col: 5, offset: 20295},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 644, col: 13, offset: 20303},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink93,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 644, col: 32, offset: 20322},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 651, col: 5, offset: 20563},
																														run: (*parser).callonRelativeLink99,
																														expr: &seqExpr{
																															pos: position{line: 651, col: 5, offset: 20563},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 651, col: 5, offset: 20563},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 651, col: 9, offset: 20567},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink103,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 651, col: 28, offset: 20586},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2889, col: 11, offset: 91643},
																								run: (*parser).callonRelativeLink109,
																								expr: &litMatcher{
																									pos:        position{line: 2889, col: 11, offset: 91643},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1197, col: 23, offset: 36942},
																	run: (*parser).callonRelativeLink111,
																	expr: &seqExpr{
																		pos: position{line: 1197, col: 23, offset: 36942},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1197, col: 51, offset: 36970},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1197, col: 56, offset: 36975},
																					run: (*parser).callonRelativeLink115,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1197, col: 56, offset: 36975},
																						expr: &charClassMatcher{
																							pos:        position{line: 1197, col: 56, offset: 36975},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1435, col: 32, offset: 46122},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1435, col: 44, offset: 46134},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1440, col: 5, offset: 46266},
						run: (*parser).callonRelativeLink121,
						expr: &seqExpr{
							pos: position{line: 1440, col: 5, offset: 46266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1440, col: 5, offset: 46266},
									val:        "link:",
									ignoreCase: false,
									want:       "\"link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1440, col: 13, offset: 46274},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2869, col: 13, offset: 90875},
										run: (*parser).callonRelativeLink125,
										expr: &seqExpr{
											pos: position{line: 2869, col: 13, offset: 90875},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2869, col: 13, offset: 90875},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2869, col: 20, offset: 90882},
														expr: &actionExpr{
															pos: position{line: 2877, col: 11, offset: 91144},
															run: (*parser).callonRelativeLink129,
															expr: &choiceExpr{
																pos: position{line: 2877, col: 12, offset: 91145},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2877, col: 12, offset: 91145},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 24, offset: 91157},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 37, offset: 91170},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 48, offset: 91181},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2877, col: 59, offset: 91192},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2869, col: 30, offset: 90892},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2869, col: 35, offset: 90897},
														expr: &choiceExpr{
															pos: position{line: 2869, col: 36, offset: 90898},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2882, col: 5, offset: 91256},
																	run: (*parser).callonRelativeLink139,
																	expr: &seqExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2882, col: 5, offset: 91256},
																				expr: &litMatcher{
																					pos:        position{line: 2882, col: 6, offset: 91257},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2883, col: 5, offset: 91281},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2883, col: 14, offset: 91290},
																					expr: &choiceExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2884, col: 9, offset: 91300},
																								run: (*parser).callonRelativeLink146,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2884, col: 9, offset: 91300},
																									expr: &charClassMatcher{
																										pos:        position{line: 2884, col: 10, offset: 91301},
																										val:        "[^\\r\\n[]�{.,;?! ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2887, col: 11, offset: 91564},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2848, col: 25, offset: 90406},
																										run: (*parser).callonRelativeLink150,
																										expr: &charClassMatcher{
																											pos:        position{line: 2848, col: 25, offset: 90406},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2887, col: 32, offset: 91585},
																										expr: &notExpr{
																											pos: position{line: 2887, col: 34, offset: 91587},
																											expr: &choiceExpr{
																												pos: position{line: 2887, col: 36, offset: 91589},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonRelativeLink157,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 635, col: 5, offset: 20085},
																								run: (*parser).callonRelativeLink159,
																								expr: &seqExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 635, col: 5, offset: 20085},
																											run: (*parser).callonRelativeLink161,
																										},
																										&labeledExpr{
																											pos:   position{line: 638, col: 5, offset: 20157},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 638, col: 14, offset: 20166},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 657, col: 25, offset: 20767},
																														run: (*parser).callonRelativeLink164,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 25, offset: 20767},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 25, offset: 20767},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 37, offset: 20779},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink168,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 56, offset: 20798},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 657, col: 62, offset: 20804},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonRelativeLink175,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonRelativeLink180,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonRelativeLink182,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 78, offset: 20820},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 661, col: 25, offset: 20938},
																														run: (*parser).callonRelativeLink186,
																														expr: &seqExpr{
																															pos: position{line: 661, col: 25, offset: 20938},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 661, col: 25, offset: 20938},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 38, offset: 20951},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink190,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 661, col: 57, offset: 20970},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 661, col: 63, offset: 20976},
																																		expr: &actionExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			run: (*parser).callonRelativeLink197,
																																			expr: &seqExpr{
																																				pos: position{line: 665, col: 17, offset: 21099},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 665, col: 17, offset: 21099},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 665, col: 21, offset: 21103},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 665, col: 28, offset: 21110},
																																									run: (*parser).callonRelativeLink202,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 665, col: 28, offset: 21110},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									run: (*parser).callonRelativeLink204,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 667, col: 9, offset: 21164},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 667, col: 9, offset: 21164},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 661, col: 79, offset: 20992},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 644, col: 5, offset: 20295},
																														run: (*parser).callonRelativeLink208,
																														expr: &seqExpr{
																															pos: position{line: 644, col: 5, offset: 20295},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 644, col: 5, offset: 20295},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 644, col: 13, offset: 20303},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink212,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 644, col: 32, offset: 20322},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 651, col: 5, offset: 20563},
																														run: (*parser).callonRelativeLink218,
																														expr: &seqExpr{
																															pos: position{line: 651, col: 5, offset: 20563},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 651, col: 5, offset: 20563},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 651, col: 9, offset: 20567},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		run: (*parser).callonRelativeLink222,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9733},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9743},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9744},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 651, col: 28, offset: 20586},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2889, col: 11, offset: 91643},
																								run: (*parser).callonRelativeLink228,
																								expr: &litMatcher{
																									pos:        position{line: 2889, col: 11, offset: 91643},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1197, col: 23, offset: 36942},
																	run: (*parser).callonRelativeLink230,
																	expr: &seqExpr{
																		pos: position{line: 1197, col: 23, offset: 36942},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1197, col: 51, offset: 36970},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1197, col: 56, offset: 36975},
																					run: (*parser).callonRelativeLink234,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1197, col: 56, offset: 36975},
																						expr: &charClassMatcher{
																							pos:        position{line: 1197, col: 56, offset: 36975},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1195, col: 32, offset: 36910},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1440, col: 28, offset: 46289},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1440, col: 40, offset: 46301},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1444, col: 1, offset: 46417},
			expr: &choiceExpr{
				pos: position{line: 1447, col: 5, offset: 46579},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1447, col: 5, offset: 46579},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1447, col: 5, offset: 46579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1447, col: 5, offset: 46579},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1447, col: 9, offset: 46583},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2873, col: 23, offset: 91024},
										run: (*parser).callonExternalLink6,
										expr: &seqExpr{
											pos: position{line: 2873, col: 23, offset: 91024},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2873, col: 23, offset: 91024},
													expr: &litMatcher{
														pos:        position{line: 2873, col: 24, offset: 91025},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 28, offset: 91029},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2877, col: 11, offset: 91144},
														run: (*parser).callonExternalLink11,
														expr: &choiceExpr{
															pos: position{line: 2877, col: 12, offset: 91145},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2877, col: 12, offset: 91145},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 24, offset: 91157},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 37, offset: 91170},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 48, offset: 91181},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 59, offset: 91192},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 44, offset: 91045},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2873, col: 49, offset: 91050},
														expr: &actionExpr{
															pos: position{line: 2882, col: 5, offset: 91256},
															run: (*parser).callonExternalLink20,
															expr: &seqExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		expr: &litMatcher{
																			pos:        position{line: 2882, col: 6, offset: 91257},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2883, col: 5, offset: 91281},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2883, col: 14, offset: 91290},
																			expr: &choiceExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						run: (*parser).callonExternalLink27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 9, offset: 91300},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 10, offset: 91301},
																								val:        "[^\\r\\n[]�{.,;?! ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2887, col: 11, offset: 91564},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2848, col: 25, offset: 90406},
																								run: (*parser).callonExternalLink31,
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 25, offset: 90406},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2887, col: 32, offset: 91585},
																								expr: &notExpr{
																									pos: position{line: 2887, col: 34, offset: 91587},
																									expr: &choiceExpr{
																										pos: position{line: 2887, col: 36, offset: 91589},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonExternalLink38,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonExternalLink40,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonExternalLink42,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonExternalLink45,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink49,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonExternalLink56,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonExternalLink61,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonExternalLink63,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonExternalLink67,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink71,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonExternalLink78,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonExternalLink83,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonExternalLink85,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonExternalLink89,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink93,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonExternalLink99,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink103,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2889, col: 11, offset: 91643},
																						run: (*parser).callonExternalLink109,
																						expr: &litMatcher{
																							pos:        position{line: 2889, col: 11, offset: 91643},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1447, col: 34, offset: 46608},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1447, col: 45, offset: 46619},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 46, offset: 46620},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1452, col: 5, offset: 46753},
						run: (*parser).callonExternalLink114,
						expr: &seqExpr{
							pos: position{line: 1452, col: 5, offset: 46753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1452, col: 5, offset: 46753},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2873, col: 23, offset: 91024},
										run: (*parser).callonExternalLink117,
										expr: &seqExpr{
											pos: position{line: 2873, col: 23, offset: 91024},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2873, col: 23, offset: 91024},
													expr: &litMatcher{
														pos:        position{line: 2873, col: 24, offset: 91025},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 28, offset: 91029},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2877, col: 11, offset: 91144},
														run: (*parser).callonExternalLink122,
														expr: &choiceExpr{
															pos: position{line: 2877, col: 12, offset: 91145},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2877, col: 12, offset: 91145},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 24, offset: 91157},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 37, offset: 91170},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 48, offset: 91181},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2877, col: 59, offset: 91192},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2873, col: 44, offset: 91045},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2873, col: 49, offset: 91050},
														expr: &actionExpr{
															pos: position{line: 2882, col: 5, offset: 91256},
															run: (*parser).callonExternalLink131,
															expr: &seqExpr{
																pos: position{line: 2882, col: 5, offset: 91256},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2882, col: 5, offset: 91256},
																		expr: &litMatcher{
																			pos:        position{line: 2882, col: 6, offset: 91257},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2883, col: 5, offset: 91281},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2883, col: 14, offset: 91290},
																			expr: &choiceExpr{
																				pos: position{line: 2884, col: 9, offset: 91300},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2884, col: 9, offset: 91300},
																						run: (*parser).callonExternalLink138,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 9, offset: 91300},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 10, offset: 91301},
																								val:        "[^\\r\\n[]�{.,;?! ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2887, col: 11, offset: 91564},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2848, col: 25, offset: 90406},
																								run: (*parser).callonExternalLink142,
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 25, offset: 90406},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2887, col: 32, offset: 91585},
																								expr: &notExpr{
																									pos: position{line: 2887, col: 34, offset: 91587},
																									expr: &choiceExpr{
																										pos: position{line: 2887, col: 36, offset: 91589},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonExternalLink149,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 635, col: 5, offset: 20085},
																						run: (*parser).callonExternalLink151,
																						expr: &seqExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 635, col: 5, offset: 20085},
																									run: (*parser).callonExternalLink153,
																								},
																								&labeledExpr{
																									pos:   position{line: 638, col: 5, offset: 20157},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 638, col: 14, offset: 20166},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 657, col: 25, offset: 20767},
																												run: (*parser).callonExternalLink156,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 25, offset: 20767},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 37, offset: 20779},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink160,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 56, offset: 20798},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 657, col: 62, offset: 20804},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonExternalLink167,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonExternalLink172,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonExternalLink174,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 78, offset: 20820},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20938},
																												run: (*parser).callonExternalLink178,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20938},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 38, offset: 20951},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink182,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 57, offset: 20970},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 63, offset: 20976},
																																expr: &actionExpr{
																																	pos: position{line: 665, col: 17, offset: 21099},
																																	run: (*parser).callonExternalLink189,
																																	expr: &seqExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 665, col: 17, offset: 21099},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 665, col: 21, offset: 21103},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 665, col: 28, offset: 21110},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 665, col: 28, offset: 21110},
																																							run: (*parser).callonExternalLink194,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 665, col: 28, offset: 21110},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 667, col: 9, offset: 21164},
																																							run: (*parser).callonExternalLink196,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 667, col: 9, offset: 21164},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 79, offset: 20992},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 644, col: 5, offset: 20295},
																												run: (*parser).callonExternalLink200,
																												expr: &seqExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 644, col: 5, offset: 20295},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 644, col: 13, offset: 20303},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink204,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 644, col: 32, offset: 20322},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 651, col: 5, offset: 20563},
																												run: (*parser).callonExternalLink210,
																												expr: &seqExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 651, col: 5, offset: 20563},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 651, col: 9, offset: 20567},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9733},
																																run: (*parser).callonExternalLink214,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9733},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9743},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9744},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 651, col: 28, offset: 20586},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2889, col: 11, offset: 91643},
																						run: (*parser).callonExternalLink220,
																						expr: &litMatcher{
																							pos:        position{line: 2889, col: 11, offset: 91643},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 30, offset: 46778},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1452, col: 41, offset: 46789},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 42, offset: 46790},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1479, col: 1, offset: 47785},
			expr: &actionExpr{
				pos: position{line: 1480, col: 5, offset: 47806},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 5, offset: 47806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1480, col: 5, offset: 47806},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1486, col: 5, offset: 48008},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1579, col: 5, offset: 50938},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1579, col: 5, offset: 50938},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1579, col: 5, offset: 50938},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1586, col: 5, offset: 51146},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1586, col: 5, offset: 51146},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1586, col: 5, offset: 51146},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1586, col: 12, offset: 51153},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1588, col: 9, offset: 51216},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1588, col: 9, offset: 51216},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1588, col: 9, offset: 51216},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1588, col: 9, offset: 51216},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1588, col: 16, offset: 51223},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1588, col: 16, offset: 51223},
																									expr: &litMatcher{
																										pos:        position{line: 1588, col: 17, offset: 51224},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1592, col: 9, offset: 51324},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 11, offset: 52041},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 11, offset: 52041},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 11, offset: 52041},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 12, offset: 52042},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 20, offset: 52050},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52167},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52167},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1613, col: 14, offset: 52168},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 21, offset: 52175},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1615, col: 13, offset: 52295},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1615, col: 13, offset: 52295},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1615, col: 14, offset: 52296},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1615, col: 21, offset: 52303},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1617, col: 13, offset: 52423},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1617, col: 13, offset: 52423},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1617, col: 13, offset: 52423},
																							expr: &charClassMatcher{
																								pos:        position{line: 1617, col: 14, offset: 52424},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1617, col: 26, offset: 52436},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1619, col: 13, offset: 52556},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1619, col: 13, offset: 52556},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1619, col: 13, offset: 52556},
																							expr: &charClassMatcher{
																								pos:        position{line: 1619, col: 14, offset: 52557},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1619, col: 26, offset: 52569},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1580, col: 5, offset: 50977},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListElements53,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListElements57,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1629, col: 5, offset: 52835},
										run: (*parser).callonListElements64,
										expr: &seqExpr{
											pos: position{line: 1629, col: 5, offset: 52835},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1629, col: 5, offset: 52835},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1636, col: 5, offset: 53108},
														run: (*parser).callonListElements67,
														expr: &seqExpr{
															pos: position{line: 1636, col: 5, offset: 53108},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1636, col: 5, offset: 53108},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListElements70,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1637, col: 5, offset: 53120},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 9, offset: 53136},
																		run: (*parser).callonListElements73,
																		expr: &choiceExpr{
																			pos: position{line: 1638, col: 10, offset: 53137},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1638, col: 11, offset: 53138},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1638, col: 18, offset: 53145},
																					expr: &litMatcher{
																						pos:        position{line: 1638, col: 19, offset: 53146},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1641, col: 7, offset: 53236},
																	run: (*parser).callonListElements78,
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListElements79,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1630, col: 5, offset: 52876},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1630, col: 16, offset: 52887},
														expr: &actionExpr{
															pos: position{line: 1651, col: 5, offset: 53501},
															run: (*parser).callonListElements84,
															expr: &seqExpr{
																pos: position{line: 1651, col: 5, offset: 53501},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1651, col: 5, offset: 53501},
																		expr: &litMatcher{
																			pos:        position{line: 1651, col: 6, offset: 53502},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1651, col: 10, offset: 53506},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1652, col: 7, offset: 53520},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1652, col: 7, offset: 53520},
																					run: (*parser).callonListElements90,
																					expr: &litMatcher{
																						pos:        position{line: 1652, col: 7, offset: 53520},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1653, col: 7, offset: 53565},
																					run: (*parser).callonListElements92,
																					expr: &litMatcher{
																						pos:        position{line: 1653, col: 7, offset: 53565},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1654, col: 7, offset: 53608},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1654, col: 7, offset: 53608},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		run: (*parser).callonListElements96,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2914, col: 11, offset: 92214},
																			expr: &charClassMatcher{
																				pos:        position{line: 2914, col: 12, offset: 92215},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1631, col: 5, offset: 52926},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListElements100,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListElements104,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListElements108,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1719, col: 5, offset: 55448},
										run: (*parser).callonListElements115,
										expr: &seqExpr{
											pos: position{line: 1719, col: 5, offset: 55448},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1719, col: 5, offset: 55448},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1725, col: 5, offset: 55645},
														run: (*parser).callonListElements118,
														expr: &seqExpr{
															pos: position{line: 1725, col: 5, offset: 55645},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1725, col: 5, offset: 55645},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1725, col: 9, offset: 55649},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1725, col: 14, offset: 55654},
																		run: (*parser).callonListElements122,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1725, col: 14, offset: 55654},
																			expr: &charClassMatcher{
																				pos:        position{line: 1725, col: 14, offset: 55654},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1725, col: 62, offset: 55702},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListElements126,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1720, col: 5, offset: 55484},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListElements130,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListElements134,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListElements138,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1663, col: 5, offset: 53801},
										run: (*parser).callonListElements145,
										expr: &seqExpr{
											pos: position{line: 1663, col: 5, offset: 53801},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1663, col: 5, offset: 53801},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1671, col: 5, offset: 54127},
														run: (*parser).callonListElements148,
														expr: &oneOrMoreExpr{
															pos: position{line: 1671, col: 5, offset: 54127},
															expr: &seqExpr{
																pos: position{line: 1671, col: 6, offset: 54128},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1671, col: 6, offset: 54128},
																		expr: &actionExpr{
																			pos: position{line: 1676, col: 5, offset: 54278},
																			run: (*parser).callonListElements152,
																			expr: &seqExpr{
																				pos: position{line: 1676, col: 5, offset: 54278},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1676, col: 5, offset: 54278},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1676, col: 16, offset: 54289},
																							run: (*parser).callonListElements155,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1676, col: 16, offset: 54289},
																								expr: &litMatcher{
																									pos:        position{line: 1676, col: 17, offset: 54290},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1679, col: 5, offset: 54347},
																						run: (*parser).callonListElements158,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1671, col: 35, offset: 54157},
																		expr: &choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListElements161,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1671, col: 40, offset: 54162,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1664, col: 5, offset: 53836},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1676, col: 5, offset: 54278},
														run: (*parser).callonListElements170,
														expr: &seqExpr{
															pos: position{line: 1676, col: 5, offset: 54278},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1676, col: 5, offset: 54278},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1676, col: 16, offset: 54289},
																		run: (*parser).callonListElements173,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1676, col: 16, offset: 54289},
																			expr: &litMatcher{
																				pos:        position{line: 1676, col: 17, offset: 54290},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1679, col: 5, offset: 54347},
																	run: (*parser).callonListElements176,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1665, col: 5, offset: 53881},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1687, col: 5, offset: 54596},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1689, col: 9, offset: 54662},
																run: (*parser).callonListElements179,
																expr: &seqExpr{
																	pos: position{line: 1689, col: 9, offset: 54662},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1689, col: 9, offset: 54662},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonListElements182,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListElements185,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1690, col: 9, offset: 54681},
																			expr: &actionExpr{
																				pos: position{line: 676, col: 14, offset: 21465},
																				run: (*parser).callonListElements193,
																				expr: &seqExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 676, col: 14, offset: 21465},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 676, col: 19, offset: 21470},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListElements199,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListElements202,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1696, col: 9, offset: 54810},
																run: (*parser).callonListElements209,
																expr: &seqExpr{
																	pos: position{line: 1696, col: 9, offset: 54810},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2914, col: 11, offset: 92214},
																			run: (*parser).callonListElements211,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2914, col: 11, offset: 92214},
																				expr: &charClassMatcher{
																					pos:        position{line: 2914, col: 12, offset: 92215},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1697, col: 9, offset: 54883},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1697, col: 18, offset: 54892},
																				run: (*parser).callonListElements215,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1697, col: 18, offset: 54892},
																					expr: &charClassMatcher{
																						pos:        position{line: 1697, col: 18, offset: 54892},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListElements219,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 47837},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 20, offset: 47852},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1491, col: 1, offset: 48107},
			expr: &actionExpr{
				pos: position{line: 1491, col: 22, offset: 48128},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1491, col: 22, offset: 48128},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1491, col: 31, offset: 48137},
						expr: &ruleRefExpr{
							pos:  position{line: 1491, col: 32, offset: 48138},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1495, col: 1, offset: 48218},
			expr: &actionExpr{
				pos: position{line: 1496, col: 5, offset: 48357},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 5, offset: 48357},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1496, col: 5, offset: 48357},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 5, offset: 48367},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1498, col: 9, offset: 48385},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1498, col: 13, offset: 48389},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1498, col: 13, offset: 48389},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1498, col: 13, offset: 48389},
													expr: &actionExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 676, col: 14, offset: 21465},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 676, col: 14, offset: 21465},
																	expr: &notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 676, col: 19, offset: 21470},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1499, col: 13, offset: 48413},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1499, col: 22, offset: 48422},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1579, col: 5, offset: 50938},
																run: (*parser).callonExtraListElement29,
																expr: &seqExpr{
																	pos: position{line: 1579, col: 5, offset: 50938},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1579, col: 5, offset: 50938},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1586, col: 5, offset: 51146},
																				run: (*parser).callonExtraListElement32,
																				expr: &seqExpr{
																					pos: position{line: 1586, col: 5, offset: 51146},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1586, col: 5, offset: 51146},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement35,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1586, col: 12, offset: 51153},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1588, col: 9, offset: 51216},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1588, col: 9, offset: 51216},
																										run: (*parser).callonExtraListElement39,
																										expr: &seqExpr{
																											pos: position{line: 1588, col: 9, offset: 51216},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 1588, col: 9, offset: 51216},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1588, col: 16, offset: 51223},
																														run: (*parser).callonExtraListElement42,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1588, col: 16, offset: 51223},
																															expr: &litMatcher{
																																pos:        position{line: 1588, col: 17, offset: 51224},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1592, col: 9, offset: 51324},
																													run: (*parser).callonExtraListElement45,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 11, offset: 52041},
																										run: (*parser).callonExtraListElement46,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 11, offset: 52041},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 11, offset: 52041},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 12, offset: 52042},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 20, offset: 52050},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1613, col: 13, offset: 52167},
																										run: (*parser).callonExtraListElement51,
																										expr: &seqExpr{
																											pos: position{line: 1613, col: 13, offset: 52167},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1613, col: 14, offset: 52168},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1613, col: 21, offset: 52175},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1615, col: 13, offset: 52295},
																										run: (*parser).callonExtraListElement55,
																										expr: &seqExpr{
																											pos: position{line: 1615, col: 13, offset: 52295},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1615, col: 14, offset: 52296},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1615, col: 21, offset: 52303},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1617, col: 13, offset: 52423},
																										run: (*parser).callonExtraListElement59,
																										expr: &seqExpr{
																											pos: position{line: 1617, col: 13, offset: 52423},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1617, col: 13, offset: 52423},
																													expr: &charClassMatcher{
																														pos:        position{line: 1617, col: 14, offset: 52424},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1617, col: 26, offset: 52436},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1619, col: 13, offset: 52556},
																										run: (*parser).callonExtraListElement64,
																										expr: &seqExpr{
																											pos: position{line: 1619, col: 13, offset: 52556},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1619, col: 13, offset: 52556},
																													expr: &charClassMatcher{
																														pos:        position{line: 1619, col: 14, offset: 52557},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1619, col: 26, offset: 52569},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement69,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1580, col: 5, offset: 50977},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement73,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement77,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement81,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1629, col: 5, offset: 52835},
																run: (*parser).callonExtraListElement88,
																expr: &seqExpr{
																	pos: position{line: 1629, col: 5, offset: 52835},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1629, col: 5, offset: 52835},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1636, col: 5, offset: 53108},
																				run: (*parser).callonExtraListElement91,
																				expr: &seqExpr{
																					pos: position{line: 1636, col: 5, offset: 53108},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1636, col: 5, offset: 53108},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement94,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1637, col: 5, offset: 53120},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1638, col: 9, offset: 53136},
																								run: (*parser).callonExtraListElement97,
																								expr: &choiceExpr{
																									pos: position{line: 1638, col: 10, offset: 53137},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1638, col: 11, offset: 53138},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1638, col: 18, offset: 53145},
																											expr: &litMatcher{
																												pos:        position{line: 1638, col: 19, offset: 53146},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1641, col: 7, offset: 53236},
																							run: (*parser).callonExtraListElement102,
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement103,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1630, col: 5, offset: 52876},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1630, col: 16, offset: 52887},
																				expr: &actionExpr{
																					pos: position{line: 1651, col: 5, offset: 53501},
																					run: (*parser).callonExtraListElement108,
																					expr: &seqExpr{
																						pos: position{line: 1651, col: 5, offset: 53501},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 1651, col: 5, offset: 53501},
																								expr: &litMatcher{
																									pos:        position{line: 1651, col: 6, offset: 53502},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1651, col: 10, offset: 53506},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1652, col: 7, offset: 53520},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1652, col: 7, offset: 53520},
																											run: (*parser).callonExtraListElement114,
																											expr: &litMatcher{
																												pos:        position{line: 1652, col: 7, offset: 53520},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1653, col: 7, offset: 53565},
																											run: (*parser).callonExtraListElement116,
																											expr: &litMatcher{
																												pos:        position{line: 1653, col: 7, offset: 53565},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1654, col: 7, offset: 53608},
																											run: (*parser).callonExtraListElement118,
																											expr: &litMatcher{
																												pos:        position{line: 1654, col: 7, offset: 53608},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								run: (*parser).callonExtraListElement120,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2914, col: 11, offset: 92214},
																									expr: &charClassMatcher{
																										pos:        position{line: 2914, col: 12, offset: 92215},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1631, col: 5, offset: 52926},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement124,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement128,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement132,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1719, col: 5, offset: 55448},
																run: (*parser).callonExtraListElement139,
																expr: &seqExpr{
																	pos: position{line: 1719, col: 5, offset: 55448},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1719, col: 5, offset: 55448},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1725, col: 5, offset: 55645},
																				run: (*parser).callonExtraListElement142,
																				expr: &seqExpr{
																					pos: position{line: 1725, col: 5, offset: 55645},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1725, col: 5, offset: 55645},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1725, col: 9, offset: 55649},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1725, col: 14, offset: 55654},
																								run: (*parser).callonExtraListElement146,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1725, col: 14, offset: 55654},
																									expr: &charClassMatcher{
																										pos:        position{line: 1725, col: 14, offset: 55654},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1725, col: 62, offset: 55702},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement150,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1720, col: 5, offset: 55484},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement154,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement158,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement162,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1663, col: 5, offset: 53801},
																run: (*parser).callonExtraListElement169,
																expr: &seqExpr{
																	pos: position{line: 1663, col: 5, offset: 53801},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1663, col: 5, offset: 53801},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1671, col: 5, offset: 54127},
																				run: (*parser).callonExtraListElement172,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1671, col: 5, offset: 54127},
																					expr: &seqExpr{
																						pos: position{line: 1671, col: 6, offset: 54128},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1671, col: 6, offset: 54128},
																								expr: &actionExpr{
																									pos: position{line: 1676, col: 5, offset: 54278},
																									run: (*parser).callonExtraListElement176,
																									expr: &seqExpr{
																										pos: position{line: 1676, col: 5, offset: 54278},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1676, col: 5, offset: 54278},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1676, col: 16, offset: 54289},
																													run: (*parser).callonExtraListElement179,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1676, col: 16, offset: 54289},
																														expr: &litMatcher{
																															pos:        position{line: 1676, col: 17, offset: 54290},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1679, col: 5, offset: 54347},
																												run: (*parser).callonExtraListElement182,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1671, col: 35, offset: 54157},
																								expr: &choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement185,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1671, col: 40, offset: 54162,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1664, col: 5, offset: 53836},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1676, col: 5, offset: 54278},
																				run: (*parser).callonExtraListElement194,
																				expr: &seqExpr{
																					pos: position{line: 1676, col: 5, offset: 54278},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1676, col: 5, offset: 54278},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1676, col: 16, offset: 54289},
																								run: (*parser).callonExtraListElement197,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1676, col: 16, offset: 54289},
																									expr: &litMatcher{
																										pos:        position{line: 1676, col: 17, offset: 54290},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1679, col: 5, offset: 54347},
																							run: (*parser).callonExtraListElement200,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1665, col: 5, offset: 53881},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1687, col: 5, offset: 54596},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1689, col: 9, offset: 54662},
																						run: (*parser).callonExtraListElement203,
																						expr: &seqExpr{
																							pos: position{line: 1689, col: 9, offset: 54662},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 1689, col: 9, offset: 54662},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonExtraListElement206,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement209,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1690, col: 9, offset: 54681},
																									expr: &actionExpr{
																										pos: position{line: 676, col: 14, offset: 21465},
																										run: (*parser).callonExtraListElement217,
																										expr: &seqExpr{
																											pos: position{line: 676, col: 14, offset: 21465},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 676, col: 14, offset: 21465},
																													expr: &notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 676, col: 19, offset: 21470},
																													expr: &actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonExtraListElement223,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2930, col: 8, offset: 92541},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2919, col: 12, offset: 92331},
																															run: (*parser).callonExtraListElement226,
																															expr: &choiceExpr{
																																pos: position{line: 2919, col: 13, offset: 92332},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 13, offset: 92332},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 20, offset: 92339},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 29, offset: 92348},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2927, col: 8, offset: 92491},
																															expr: &anyMatcher{
																																line: 2927, col: 9, offset: 92492,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1696, col: 9, offset: 54810},
																						run: (*parser).callonExtraListElement233,
																						expr: &seqExpr{
																							pos: position{line: 1696, col: 9, offset: 54810},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2914, col: 11, offset: 92214},
																									run: (*parser).callonExtraListElement235,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2914, col: 11, offset: 92214},
																										expr: &charClassMatcher{
																											pos:        position{line: 2914, col: 12, offset: 92215},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1697, col: 9, offset: 54883},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1697, col: 18, offset: 54892},
																										run: (*parser).callonExtraListElement239,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1697, col: 18, offset: 54892},
																											expr: &charClassMatcher{
																												pos:        position{line: 1697, col: 18, offset: 54892},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement243,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1502, col: 13, offset: 48573},
										run: (*parser).callonExtraListElement250,
										expr: &seqExpr{
											pos: position{line: 1502, col: 13, offset: 48573},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1502, col: 13, offset: 48573},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1502, col: 24, offset: 48584},
														expr: &ruleRefExpr{
															pos:  position{line: 1502, col: 25, offset: 48585},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1503, col: 13, offset: 48616},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1503, col: 22, offset: 48625},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1579, col: 5, offset: 50938},
																run: (*parser).callonExtraListElement257,
																expr: &seqExpr{
																	pos: position{line: 1579, col: 5, offset: 50938},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1579, col: 5, offset: 50938},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1586, col: 5, offset: 51146},
																				run: (*parser).callonExtraListElement260,
																				expr: &seqExpr{
																					pos: position{line: 1586, col: 5, offset: 51146},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1586, col: 5, offset: 51146},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement263,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1586, col: 12, offset: 51153},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1588, col: 9, offset: 51216},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1588, col: 9, offset: 51216},
																										run: (*parser).callonExtraListElement267,
																										expr: &seqExpr{
																											pos: position{line: 1588, col: 9, offset: 51216},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 1588, col: 9, offset: 51216},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1588, col: 16, offset: 51223},
																														run: (*parser).callonExtraListElement270,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1588, col: 16, offset: 51223},
																															expr: &litMatcher{
																																pos:        position{line: 1588, col: 17, offset: 51224},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1592, col: 9, offset: 51324},
																													run: (*parser).callonExtraListElement273,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 11, offset: 52041},
																										run: (*parser).callonExtraListElement274,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 11, offset: 52041},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 11, offset: 52041},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 12, offset: 52042},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 20, offset: 52050},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1613, col: 13, offset: 52167},
																										run: (*parser).callonExtraListElement279,
																										expr: &seqExpr{
																											pos: position{line: 1613, col: 13, offset: 52167},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1613, col: 14, offset: 52168},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1613, col: 21, offset: 52175},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1615, col: 13, offset: 52295},
																										run: (*parser).callonExtraListElement283,
																										expr: &seqExpr{
																											pos: position{line: 1615, col: 13, offset: 52295},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1615, col: 14, offset: 52296},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1615, col: 21, offset: 52303},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1617, col: 13, offset: 52423},
																										run: (*parser).callonExtraListElement287,
																										expr: &seqExpr{
																											pos: position{line: 1617, col: 13, offset: 52423},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1617, col: 13, offset: 52423},
																													expr: &charClassMatcher{
																														pos:        position{line: 1617, col: 14, offset: 52424},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1617, col: 26, offset: 52436},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1619, col: 13, offset: 52556},
																										run: (*parser).callonExtraListElement292,
																										expr: &seqExpr{
																											pos: position{line: 1619, col: 13, offset: 52556},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1619, col: 13, offset: 52556},
																													expr: &charClassMatcher{
																														pos:        position{line: 1619, col: 14, offset: 52557},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1619, col: 26, offset: 52569},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement297,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1580, col: 5, offset: 50977},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement301,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement305,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement309,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1629, col: 5, offset: 52835},
																run: (*parser).callonExtraListElement316,
																expr: &seqExpr{
																	pos: position{line: 1629, col: 5, offset: 52835},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1629, col: 5, offset: 52835},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1636, col: 5, offset: 53108},
																				run: (*parser).callonExtraListElement319,
																				expr: &seqExpr{
																					pos: position{line: 1636, col: 5, offset: 53108},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1636, col: 5, offset: 53108},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement322,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1637, col: 5, offset: 53120},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1638, col: 9, offset: 53136},
																								run: (*parser).callonExtraListElement325,
																								expr: &choiceExpr{
																									pos: position{line: 1638, col: 10, offset: 53137},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1638, col: 11, offset: 53138},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1638, col: 18, offset: 53145},
																											expr: &litMatcher{
																												pos:        position{line: 1638, col: 19, offset: 53146},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1641, col: 7, offset: 53236},
																							run: (*parser).callonExtraListElement330,
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement331,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1630, col: 5, offset: 52876},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1630, col: 16, offset: 52887},
																				expr: &actionExpr{
																					pos: position{line: 1651, col: 5, offset: 53501},
																					run: (*parser).callonExtraListElement336,
																					expr: &seqExpr{
																						pos: position{line: 1651, col: 5, offset: 53501},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 1651, col: 5, offset: 53501},
																								expr: &litMatcher{
																									pos:        position{line: 1651, col: 6, offset: 53502},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1651, col: 10, offset: 53506},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1652, col: 7, offset: 53520},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1652, col: 7, offset: 53520},
																											run: (*parser).callonExtraListElement342,
																											expr: &litMatcher{
																												pos:        position{line: 1652, col: 7, offset: 53520},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1653, col: 7, offset: 53565},
																											run: (*parser).callonExtraListElement344,
																											expr: &litMatcher{
																												pos:        position{line: 1653, col: 7, offset: 53565},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1654, col: 7, offset: 53608},
																											run: (*parser).callonExtraListElement346,
																											expr: &litMatcher{
																												pos:        position{line: 1654, col: 7, offset: 53608},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								run: (*parser).callonExtraListElement348,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2914, col: 11, offset: 92214},
																									expr: &charClassMatcher{
																										pos:        position{line: 2914, col: 12, offset: 92215},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1631, col: 5, offset: 52926},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement352,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement356,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement360,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1719, col: 5, offset: 55448},
																run: (*parser).callonExtraListElement367,
																expr: &seqExpr{
																	pos: position{line: 1719, col: 5, offset: 55448},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1719, col: 5, offset: 55448},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1725, col: 5, offset: 55645},
																				run: (*parser).callonExtraListElement370,
																				expr: &seqExpr{
																					pos: position{line: 1725, col: 5, offset: 55645},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1725, col: 5, offset: 55645},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1725, col: 9, offset: 55649},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1725, col: 14, offset: 55654},
																								run: (*parser).callonExtraListElement374,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1725, col: 14, offset: 55654},
																									expr: &charClassMatcher{
																										pos:        position{line: 1725, col: 14, offset: 55654},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1725, col: 62, offset: 55702},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonExtraListElement378,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1720, col: 5, offset: 55484},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1527, col: 5, offset: 49446},
																				run: (*parser).callonExtraListElement382,
																				expr: &seqExpr{
																					pos: position{line: 1527, col: 5, offset: 49446},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1527, col: 5, offset: 49446},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1527, col: 14, offset: 49455},
																								expr: &actionExpr{
																									pos: position{line: 1527, col: 15, offset: 49456},
																									run: (*parser).callonExtraListElement386,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1527, col: 15, offset: 49456},
																										expr: &charClassMatcher{
																											pos:        position{line: 1527, col: 15, offset: 49456},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement390,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1663, col: 5, offset: 53801},
																run: (*parser).callonExtraListElement397,
																expr: &seqExpr{
																	pos: position{line: 1663, col: 5, offset: 53801},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1663, col: 5, offset: 53801},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1671, col: 5, offset: 54127},
																				run: (*parser).callonExtraListElement400,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1671, col: 5, offset: 54127},
																					expr: &seqExpr{
																						pos: position{line: 1671, col: 6, offset: 54128},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1671, col: 6, offset: 54128},
																								expr: &actionExpr{
																									pos: position{line: 1676, col: 5, offset: 54278},
																									run: (*parser).callonExtraListElement404,
																									expr: &seqExpr{
																										pos: position{line: 1676, col: 5, offset: 54278},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1676, col: 5, offset: 54278},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1676, col: 16, offset: 54289},
																													run: (*parser).callonExtraListElement407,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1676, col: 16, offset: 54289},
																														expr: &litMatcher{
																															pos:        position{line: 1676, col: 17, offset: 54290},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1679, col: 5, offset: 54347},
																												run: (*parser).callonExtraListElement410,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1671, col: 35, offset: 54157},
																								expr: &choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement413,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1671, col: 40, offset: 54162,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1664, col: 5, offset: 53836},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1676, col: 5, offset: 54278},
																				run: (*parser).callonExtraListElement422,
																				expr: &seqExpr{
																					pos: position{line: 1676, col: 5, offset: 54278},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1676, col: 5, offset: 54278},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1676, col: 16, offset: 54289},
																								run: (*parser).callonExtraListElement425,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1676, col: 16, offset: 54289},
																									expr: &litMatcher{
																										pos:        position{line: 1676, col: 17, offset: 54290},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1679, col: 5, offset: 54347},
																							run: (*parser).callonExtraListElement428,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1665, col: 5, offset: 53881},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1687, col: 5, offset: 54596},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1689, col: 9, offset: 54662},
																						run: (*parser).callonExtraListElement431,
																						expr: &seqExpr{
																							pos: position{line: 1689, col: 9, offset: 54662},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 1689, col: 9, offset: 54662},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonExtraListElement434,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement437,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1690, col: 9, offset: 54681},
																									expr: &actionExpr{
																										pos: position{line: 676, col: 14, offset: 21465},
																										run: (*parser).callonExtraListElement445,
																										expr: &seqExpr{
																											pos: position{line: 676, col: 14, offset: 21465},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 676, col: 14, offset: 21465},
																													expr: &notExpr{
																														pos: position{line: 2927, col: 8, offset: 92491},
																														expr: &anyMatcher{
																															line: 2927, col: 9, offset: 92492,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 676, col: 19, offset: 21470},
																													expr: &actionExpr{
																														pos: position{line: 2910, col: 10, offset: 92147},
																														run: (*parser).callonExtraListElement451,
																														expr: &charClassMatcher{
																															pos:        position{line: 2910, col: 11, offset: 92148},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2930, col: 8, offset: 92541},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2919, col: 12, offset: 92331},
																															run: (*parser).callonExtraListElement454,
																															expr: &choiceExpr{
																																pos: position{line: 2919, col: 13, offset: 92332},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 13, offset: 92332},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 20, offset: 92339},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2919, col: 29, offset: 92348},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2927, col: 8, offset: 92491},
																															expr: &anyMatcher{
																																line: 2927, col: 9, offset: 92492,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1696, col: 9, offset: 54810},
																						run: (*parser).callonExtraListElement461,
																						expr: &seqExpr{
																							pos: position{line: 1696, col: 9, offset: 54810},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2914, col: 11, offset: 92214},
																									run: (*parser).callonExtraListElement463,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2914, col: 11, offset: 92214},
																										expr: &charClassMatcher{
																											pos:        position{line: 2914, col: 12, offset: 92215},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1697, col: 9, offset: 54883},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1697, col: 18, offset: 54892},
																										run: (*parser).callonExtraListElement467,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1697, col: 18, offset: 54892},
																											expr: &charClassMatcher{
																												pos:        position{line: 1697, col: 18, offset: 54892},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonExtraListElement471,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1506, col: 11, offset: 48810},
										name: "ListContinuation",
									},
									&actionExpr{
										pos: position{line: 2562, col: 22, offset: 82365},
										run: (*parser).callonExtraListElement479,
										expr: &seqExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2567, col: 31, offset: 82586},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2567, col: 36, offset: 82591},
													expr: &litMatcher{
														pos:        position{line: 2567, col: 37, offset: 82592},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2562, col: 49, offset: 82392},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2857, col: 13, offset: 90620},
														run: (*parser).callonExtraListElement485,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															expr: &charClassMatcher{
																pos:        position{line: 2857, col: 13, offset: 90620},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonExtraListElement489,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1514, col: 5, offset: 49088},
										run: (*parser).callonExtraListElement496,
										expr: &seqExpr{
											pos: position{line: 1514, col: 5, offset: 49088},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1514, col: 5, offset: 49088},
													expr: &actionExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														run: (*parser).callonExtraListElement499,
														expr: &seqExpr{
															pos: position{line: 676, col: 14, offset: 21465},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 676, col: 14, offset: 21465},
																	expr: &notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 676, col: 19, offset: 21470},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonExtraListElement505,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonExtraListElement508,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1515, col: 5, offset: 49103},
													expr: &seqExpr{
														pos: position{line: 1545, col: 27, offset: 49929},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1545, col: 27, offset: 49929},
																val:        "+",
																ignoreCase: false,
																want:       "\"+\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1545, col: 31, offset: 49933},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonExtraListElement519,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonExtraListElement521,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1516, col: 5, offset: 49131},
													expr: &actionExpr{
														pos: position{line: 1586, col: 5, offset: 51146},
														run: (*parser).callonExtraListElement527,
														expr: &seqExpr{
															pos: position{line: 1586, col: 5, offset: 51146},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1586, col: 5, offset: 51146},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonExtraListElement530,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1586, col: 12, offset: 51153},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1588, col: 9, offset: 51216},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1588, col: 9, offset: 51216},
																				run: (*parser).callonExtraListElement534,
																				expr: &seqExpr{
																					pos: position{line: 1588, col: 9, offset: 51216},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1588, col: 9, offset: 51216},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1588, col: 16, offset: 51223},
																								run: (*parser).callonExtraListElement537,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1588, col: 16, offset: 51223},
																									expr: &litMatcher{
																										pos:        position{line: 1588, col: 17, offset: 51224},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1592, col: 9, offset: 51324},
																							run: (*parser).callonExtraListElement540,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 11, offset: 52041},
																				run: (*parser).callonExtraListElement541,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 11, offset: 52041},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 11, offset: 52041},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 12, offset: 52042},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 20, offset: 52050},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52167},
																				run: (*parser).callonExtraListElement546,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52167},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1613, col: 14, offset: 52168},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 21, offset: 52175},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1615, col: 13, offset: 52295},
																				run: (*parser).callonExtraListElement550,
																				expr: &seqExpr{
																					pos: position{line: 1615, col: 13, offset: 52295},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1615, col: 14, offset: 52296},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1615, col: 21, offset: 52303},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1617, col: 13, offset: 52423},
																				run: (*parser).callonExtraListElement554,
																				expr: &seqExpr{
																					pos: position{line: 1617, col: 13, offset: 52423},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1617, col: 13, offset: 52423},
																							expr: &charClassMatcher{
																								pos:        position{line: 1617, col: 14, offset: 52424},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1617, col: 26, offset: 52436},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1619, col: 13, offset: 52556},
																				run: (*parser).callonExtraListElement559,
																				expr: &seqExpr{
																					pos: position{line: 1619, col: 13, offset: 52556},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1619, col: 13, offset: 52556},
																							expr: &charClassMatcher{
																								pos:        position{line: 1619, col: 14, offset: 52557},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1619, col: 26, offset: 52569},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonExtraListElement564,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1517, col: 5, offset: 49161},
													expr: &actionExpr{
														pos: position{line: 1636, col: 5, offset: 53108},
														run: (*parser).callonExtraListElement568,
														expr: &seqExpr{
															pos: position{line: 1636, col: 5, offset: 53108},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1636, col: 5, offset: 53108},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonExtraListElement571,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1637, col: 5, offset: 53120},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 9, offset: 53136},
																		run: (*parser).callonExtraListElement574,
																		expr: &choiceExpr{
																			pos: position{line: 1638, col: 10, offset: 53137},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1638, col: 11, offset: 53138},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1638, col: 18, offset: 53145},
																					expr: &litMatcher{
																						pos:        position{line: 1638, col: 19, offset: 53146},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1641, col: 7, offset: 53236},
																	run: (*parser).callonExtraListElement579,
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonExtraListElement580,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 5, offset: 49193},
													expr: &actionExpr{
														pos: position{line: 1725, col: 5, offset: 55645},
														run: (*parser).callonExtraListElement584,
														expr: &seqExpr{
															pos: position{line: 1725, col: 5, offset: 55645},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1725, col: 5, offset: 55645},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1725, col: 9, offset: 55649},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1725, col: 14, offset: 55654},
																		run: (*parser).callonExtraListElement588,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1725, col: 14, offset: 55654},
																			expr: &charClassMatcher{
																				pos:        position{line: 1725, col: 14, offset: 55654},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1725, col: 62, offset: 55702},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonExtraListElement592,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1519, col: 5, offset: 49223},
													expr: &seqExpr{
														pos: position{line: 1519, col: 7, offset: 49225},
														exprs: []interface{}{
															&actionExpr{
																pos: position{line: 1671, col: 5, offset: 54127},
																run: (*parser).callonExtraListElement597,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1671, col: 5, offset: 54127},
																	expr: &seqExpr{
																		pos: position{line: 1671, col: 6, offset: 54128},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1671, col: 6, offset: 54128},
																				expr: &actionExpr{
																					pos: position{line: 1676, col: 5, offset: 54278},
																					run: (*parser).callonExtraListElement601,
																					expr: &seqExpr{
																						pos: position{line: 1676, col: 5, offset: 54278},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1676, col: 5, offset: 54278},
																								label: "separator",
																								expr: &actionExpr{
																									pos: position{line: 1676, col: 16, offset: 54289},
																									run: (*parser).callonExtraListElement604,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1676, col: 16, offset: 54289},
																										expr: &litMatcher{
																											pos:        position{line: 1676, col: 17, offset: 54290},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1679, col: 5, offset: 54347},
																								run: (*parser).callonExtraListElement607,
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1671, col: 35, offset: 54157},
																				expr: &choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonExtraListElement610,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																			&anyMatcher{
																				line: 1671, col: 40, offset: 54162,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1676, col: 5, offset: 54278},
																run: (*parser).callonExtraListElement618,
																expr: &seqExpr{
																	pos: position{line: 1676, col: 5, offset: 54278},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1676, col: 5, offset: 54278},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1676, col: 16, offset: 54289},
																				run: (*parser).callonExtraListElement621,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1676, col: 16, offset: 54289},
																					expr: &litMatcher{
																						pos:        position{line: 1676, col: 17, offset: 54290},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1679, col: 5, offset: 54347},
																			run: (*parser).callonExtraListElement624,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1520, col: 5, offset: 49281},
													expr: &actionExpr{
														pos: position{line: 723, col: 5, offset: 23016},
														run: (*parser).callonExtraListElement626,
														expr: &seqExpr{
															pos: position{line: 723, col: 5, offset: 23016},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 723, col: 5, offset: 23016},
																	expr: &charClassMatcher{
																		pos:        position{line: 2831, col: 13, offset: 90012},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 724, col: 5, offset: 23046},
																	label: "delimiter",
																	expr: &choiceExpr{
																		pos: position{line: 725, col: 9, offset: 23066},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 739, col: 5, offset: 23558},
																				run: (*parser).callonExtraListElement632,
																				expr: &seqExpr{
																					pos: position{line: 739, col: 5, offset: 23558},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 739, col: 5, offset: 23558},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 739, col: 16, offset: 23569},
																								run: (*parser).callonExtraListElement635,
																								expr: &seqExpr{
																									pos: position{line: 739, col: 16, offset: 23569},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 739, col: 16, offset: 23569},
																											val:        "////",
																											ignoreCase: false,
																											want:       "\"////\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 739, col: 23, offset: 23576},
																											expr: &litMatcher{
																												pos:        position{line: 739, col: 23, offset: 23576},
																												val:        "/",
																												ignoreCase: false,
																												want:       "\"/\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 741, col: 8, offset: 23660},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement641,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement644,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 746, col: 5, offset: 23806},
																				run: (*parser).callonExtraListElement651,
																				expr: &seqExpr{
																					pos: position{line: 746, col: 5, offset: 23806},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 746, col: 5, offset: 23806},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 746, col: 16, offset: 23817},
																								run: (*parser).callonExtraListElement654,
																								expr: &seqExpr{
																									pos: position{line: 746, col: 16, offset: 23817},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 746, col: 16, offset: 23817},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 746, col: 23, offset: 23824},
																											expr: &litMatcher{
																												pos:        position{line: 746, col: 23, offset: 23824},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 748, col: 8, offset: 23908},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement660,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement663,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 759, col: 26, offset: 24294},
																				run: (*parser).callonExtraListElement670,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 26, offset: 24294},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 759, col: 26, offset: 24294},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 759, col: 32, offset: 24300},
																							label: "language",
																							expr: &actionExpr{
																								pos: position{line: 763, col: 13, offset: 24430},
																								run: (*parser).callonExtraListElement674,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 763, col: 14, offset: 24431},
																									expr: &charClassMatcher{
																										pos:        position{line: 763, col: 14, offset: 24431},
																										val:        "[^\\r\\n` ]",
																										chars:      []rune{'\r', '\n', '`', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 759, col: 52, offset: 24320},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement678,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement681,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 753, col: 5, offset: 24053},
																				run: (*parser).callonExtraListElement688,
																				expr: &seqExpr{
																					pos: position{line: 753, col: 5, offset: 24053},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 753, col: 5, offset: 24053},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 753, col: 16, offset: 24064},
																								run: (*parser).callonExtraListElement691,
																								expr: &seqExpr{
																									pos: position{line: 753, col: 16, offset: 24064},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 753, col: 16, offset: 24064},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 753, col: 22, offset: 24070},
																											expr: &litMatcher{
																												pos:        position{line: 753, col: 22, offset: 24070},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 755, col: 8, offset: 24154},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement697,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement700,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 768, col: 5, offset: 24590},
																				run: (*parser).callonExtraListElement707,
																				expr: &seqExpr{
																					pos: position{line: 768, col: 5, offset: 24590},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 768, col: 5, offset: 24590},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 768, col: 16, offset: 24601},
																								run: (*parser).callonExtraListElement710,
																								expr: &seqExpr{
																									pos: position{line: 768, col: 16, offset: 24601},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 768, col: 16, offset: 24601},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 768, col: 23, offset: 24608},
																											expr: &litMatcher{
																												pos:        position{line: 768, col: 23, offset: 24608},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 770, col: 8, offset: 24692},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement716,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement719,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 782, col: 5, offset: 25066},
																				run: (*parser).callonExtraListElement726,
																				expr: &seqExpr{
																					pos: position{line: 782, col: 5, offset: 25066},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 782, col: 5, offset: 25066},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 782, col: 16, offset: 25077},
																								run: (*parser).callonExtraListElement729,
																								expr: &seqExpr{
																									pos: position{line: 782, col: 16, offset: 25077},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 782, col: 16, offset: 25077},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 782, col: 23, offset: 25084},
																											expr: &litMatcher{
																												pos:        position{line: 782, col: 23, offset: 25084},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 784, col: 8, offset: 25168},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement735,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement738,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 789, col: 5, offset: 25318},
																				run: (*parser).callonExtraListElement745,
																				expr: &seqExpr{
																					pos: position{line: 789, col: 5, offset: 25318},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 789, col: 5, offset: 25318},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 789, col: 16, offset: 25329},
																								run: (*parser).callonExtraListElement748,
																								expr: &seqExpr{
																									pos: position{line: 789, col: 16, offset: 25329},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 789, col: 16, offset: 25329},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 789, col: 23, offset: 25336},
																											expr: &litMatcher{
																												pos:        position{line: 789, col: 23, offset: 25336},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 791, col: 8, offset: 25420},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement754,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement757,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 796, col: 5, offset: 25568},
																				run: (*parser).callonExtraListElement764,
																				expr: &seqExpr{
																					pos: position{line: 796, col: 5, offset: 25568},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 796, col: 5, offset: 25568},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 796, col: 16, offset: 25579},
																								run: (*parser).callonExtraListElement767,
																								expr: &seqExpr{
																									pos: position{line: 796, col: 16, offset: 25579},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 796, col: 16, offset: 25579},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 796, col: 23, offset: 25586},
																											expr: &litMatcher{
																												pos:        position{line: 796, col: 23, offset: 25586},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 798, col: 8, offset: 25670},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement773,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement776,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 803, col: 5, offset: 25814},
																				run: (*parser).callonExtraListElement783,
																				expr: &seqExpr{
																					pos: position{line: 803, col: 5, offset: 25814},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 803, col: 5, offset: 25814},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 803, col: 16, offset: 25825},
																								run: (*parser).callonExtraListElement786,
																								expr: &seqExpr{
																									pos: position{line: 803, col: 16, offset: 25825},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 803, col: 16, offset: 25825},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 803, col: 23, offset: 25832},
																											expr: &litMatcher{
																												pos:        position{line: 803, col: 23, offset: 25832},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 805, col: 8, offset: 25916},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonExtraListElement792,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonExtraListElement795,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1521, col: 5, offset: 49301},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2861, col: 14, offset: 90687},
														run: (*parser).callonExtraListElement803,
														expr: &oneOrMoreExpr{
															pos: position{line: 2861, col: 14, offset: 90687},
															expr: &charClassMatcher{
																pos:        position{line: 2861, col: 14, offset: 90687},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonExtraListElement807,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1537, col: 1, offset: 49692},
			expr: &actionExpr{
				pos: position{line: 1538, col: 5, offset: 49717},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1538, col: 5, offset: 49717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1538, col: 5, offset: 49717},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1538, col: 12, offset: 49724},
								expr: &seqExpr{
									pos: position{line: 1538, col: 13, offset: 49725},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1538, col: 13, offset: 49725},
											expr: &actionExpr{
												pos: position{line: 2910, col: 10, offset: 92147},
												run: (*parser).callonListContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2910, col: 11, offset: 92148},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2919, col: 12, offset: 92331},
											run: (*parser).callonListContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2919, col: 13, offset: 92332},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2919, col: 13, offset: 92332},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2919, col: 20, offset: 92339},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2919, col: 29, offset: 92348},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1545, col: 27, offset: 49929},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1545, col: 31, offset: 49933},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonListContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2919, col: 12, offset: 92331},
							run: (*parser).callonListContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2919, col: 13, offset: 92332},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2919, col: 13, offset: 92332},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2919, col: 20, offset: 92339},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2919, col: 29, offset: 92348},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 49774},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1540, col: 13, offset: 49782},
								expr: &ruleRefExpr{
									pos:  position{line: 1540, col: 13, offset: 49782},
									name: "ListContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuationElement",
			pos:  position{line: 1547, col: 1, offset: 49949},
			expr: &actionExpr{
				pos: position{line: 1548, col: 5, offset: 50020},
				run: (*parser).callonListContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 5, offset: 50020},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1548, col: 5, offset: 50020},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 1549, col: 5, offset: 50046},
							expr: &choiceExpr{
								pos: position{line: 1486, col: 5, offset: 48008},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1579, col: 5, offset: 50938},
										run: (*parser).callonListContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1579, col: 5, offset: 50938},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1579, col: 5, offset: 50938},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1586, col: 5, offset: 51146},
														run: (*parser).callonListContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1586, col: 5, offset: 51146},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1586, col: 5, offset: 51146},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1586, col: 12, offset: 51153},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1588, col: 9, offset: 51216},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1588, col: 9, offset: 51216},
																				run: (*parser).callonListContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1588, col: 9, offset: 51216},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1588, col: 9, offset: 51216},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1588, col: 16, offset: 51223},
																								run: (*parser).callonListContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1588, col: 16, offset: 51223},
																									expr: &litMatcher{
																										pos:        position{line: 1588, col: 17, offset: 51224},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1592, col: 9, offset: 51324},
																							run: (*parser).callonListContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 11, offset: 52041},
																				run: (*parser).callonListContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 11, offset: 52041},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 11, offset: 52041},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 12, offset: 52042},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 20, offset: 52050},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52167},
																				run: (*parser).callonListContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52167},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1613, col: 14, offset: 52168},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 21, offset: 52175},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1615, col: 13, offset: 52295},
																				run: (*parser).callonListContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1615, col: 13, offset: 52295},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1615, col: 14, offset: 52296},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1615, col: 21, offset: 52303},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1617, col: 13, offset: 52423},
																				run: (*parser).callonListContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1617, col: 13, offset: 52423},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1617, col: 13, offset: 52423},
																							expr: &charClassMatcher{
																								pos:        position{line: 1617, col: 14, offset: 52424},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1617, col: 26, offset: 52436},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1619, col: 13, offset: 52556},
																				run: (*parser).callonListContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1619, col: 13, offset: 52556},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1619, col: 13, offset: 52556},
																							expr: &charClassMatcher{
																								pos:        position{line: 1619, col: 14, offset: 52557},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1619, col: 26, offset: 52569},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1580, col: 5, offset: 50977},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListContinuationElement56,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement60,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1629, col: 5, offset: 52835},
										run: (*parser).callonListContinuationElement67,
										expr: &seqExpr{
											pos: position{line: 1629, col: 5, offset: 52835},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1629, col: 5, offset: 52835},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1636, col: 5, offset: 53108},
														run: (*parser).callonListContinuationElement70,
														expr: &seqExpr{
															pos: position{line: 1636, col: 5, offset: 53108},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1636, col: 5, offset: 53108},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement73,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1637, col: 5, offset: 53120},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 9, offset: 53136},
																		run: (*parser).callonListContinuationElement76,
																		expr: &choiceExpr{
																			pos: position{line: 1638, col: 10, offset: 53137},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1638, col: 11, offset: 53138},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1638, col: 18, offset: 53145},
																					expr: &litMatcher{
																						pos:        position{line: 1638, col: 19, offset: 53146},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1641, col: 7, offset: 53236},
																	run: (*parser).callonListContinuationElement81,
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListContinuationElement82,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1630, col: 5, offset: 52876},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1630, col: 16, offset: 52887},
														expr: &actionExpr{
															pos: position{line: 1651, col: 5, offset: 53501},
															run: (*parser).callonListContinuationElement87,
															expr: &seqExpr{
																pos: position{line: 1651, col: 5, offset: 53501},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1651, col: 5, offset: 53501},
																		expr: &litMatcher{
																			pos:        position{line: 1651, col: 6, offset: 53502},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1651, col: 10, offset: 53506},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1652, col: 7, offset: 53520},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1652, col: 7, offset: 53520},
																					run: (*parser).callonListContinuationElement93,
																					expr: &litMatcher{
																						pos:        position{line: 1652, col: 7, offset: 53520},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1653, col: 7, offset: 53565},
																					run: (*parser).callonListContinuationElement95,
																					expr: &litMatcher{
																						pos:        position{line: 1653, col: 7, offset: 53565},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1654, col: 7, offset: 53608},
																					run: (*parser).callonListContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1654, col: 7, offset: 53608},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		run: (*parser).callonListContinuationElement99,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2914, col: 11, offset: 92214},
																			expr: &charClassMatcher{
																				pos:        position{line: 2914, col: 12, offset: 92215},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1631, col: 5, offset: 52926},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListContinuationElement103,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListContinuationElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement111,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1719, col: 5, offset: 55448},
										run: (*parser).callonListContinuationElement118,
										expr: &seqExpr{
											pos: position{line: 1719, col: 5, offset: 55448},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1719, col: 5, offset: 55448},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1725, col: 5, offset: 55645},
														run: (*parser).callonListContinuationElement121,
														expr: &seqExpr{
															pos: position{line: 1725, col: 5, offset: 55645},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1725, col: 5, offset: 55645},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1725, col: 9, offset: 55649},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1725, col: 14, offset: 55654},
																		run: (*parser).callonListContinuationElement125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1725, col: 14, offset: 55654},
																			expr: &charClassMatcher{
																				pos:        position{line: 1725, col: 14, offset: 55654},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1725, col: 62, offset: 55702},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonListContinuationElement129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1720, col: 5, offset: 55484},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1527, col: 5, offset: 49446},
														run: (*parser).callonListContinuationElement133,
														expr: &seqExpr{
															pos: position{line: 1527, col: 5, offset: 49446},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49446},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1527, col: 14, offset: 49455},
																		expr: &actionExpr{
																			pos: position{line: 1527, col: 15, offset: 49456},
																			run: (*parser).callonListContinuationElement137,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1527, col: 15, offset: 49456},
																				expr: &charClassMatcher{
																					pos:        position{line: 1527, col: 15, offset: 49456},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement141,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1663, col: 5, offset: 53801},
										run: (*parser).callonListContinuationElement148,
										expr: &seqExpr{
											pos: position{line: 1663, col: 5, offset: 53801},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1663, col: 5, offset: 53801},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1671, col: 5, offset: 54127},
														run: (*parser).callonListContinuationElement151,
														expr: &oneOrMoreExpr{
															pos: position{line: 1671, col: 5, offset: 54127},
															expr: &seqExpr{
																pos: position{line: 1671, col: 6, offset: 54128},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1671, col: 6, offset: 54128},
																		expr: &actionExpr{
																			pos: position{line: 1676, col: 5, offset: 54278},
																			run: (*parser).callonListContinuationElement155,
																			expr: &seqExpr{
																				pos: position{line: 1676, col: 5, offset: 54278},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1676, col: 5, offset: 54278},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1676, col: 16, offset: 54289},
																							run: (*parser).callonListContinuationElement158,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1676, col: 16, offset: 54289},
																								expr: &litMatcher{
																									pos:        position{line: 1676, col: 17, offset: 54290},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1679, col: 5, offset: 54347},
																						run: (*parser).callonListContinuationElement161,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1671, col: 35, offset: 54157},
																		expr: &choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListContinuationElement164,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1671, col: 40, offset: 54162,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1664, col: 5, offset: 53836},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1676, col: 5, offset: 54278},
														run: (*parser).callonListContinuationElement173,
														expr: &seqExpr{
															pos: position{line: 1676, col: 5, offset: 54278},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1676, col: 5, offset: 54278},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1676, col: 16, offset: 54289},
																		run: (*parser).callonListContinuationElement176,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1676, col: 16, offset: 54289},
																			expr: &litMatcher{
																				pos:        position{line: 1676, col: 17, offset: 54290},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1679, col: 5, offset: 54347},
																	run: (*parser).callonListContinuationElement179,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1665, col: 5, offset: 53881},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1687, col: 5, offset: 54596},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1689, col: 9, offset: 54662},
																run: (*parser).callonListContinuationElement182,
																expr: &seqExpr{
																	pos: position{line: 1689, col: 9, offset: 54662},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1689, col: 9, offset: 54662},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonListContinuationElement185,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListContinuationElement188,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1690, col: 9, offset: 54681},
																			expr: &actionExpr{
																				pos: position{line: 676, col: 14, offset: 21465},
																				run: (*parser).callonListContinuationElement196,
																				expr: &seqExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 676, col: 14, offset: 21465},
																							expr: &notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 676, col: 19, offset: 21470},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement202,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement205,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1696, col: 9, offset: 54810},
																run: (*parser).callonListContinuationElement212,
																expr: &seqExpr{
																	pos: position{line: 1696, col: 9, offset: 54810},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2914, col: 11, offset: 92214},
																			run: (*parser).callonListContinuationElement214,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2914, col: 11, offset: 92214},
																				expr: &charClassMatcher{
																					pos:        position{line: 2914, col: 12, offset: 92215},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1697, col: 9, offset: 54883},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1697, col: 18, offset: 54892},
																				run: (*parser).callonListContinuationElement218,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1697, col: 18, offset: 54892},
																					expr: &charClassMatcher{
																						pos:        position{line: 1697, col: 18, offset: 54892},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListContinuationElement222,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 50063},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1550, col: 16, offset: 50074},
								expr: &ruleRefExpr{
									pos:  position{line: 1550, col: 17, offset: 50075},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 50097},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1552, col: 9, offset: 50115},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 676, col: 14, offset: 21465},
										run: (*parser).callonListContinuationElement234,
										expr: &seqExpr{
											pos: position{line: 676, col: 14, offset: 21465},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													expr: &notExpr{
														pos: position{line: 2927, col: 8, offset: 92491},
														expr: &anyMatcher{
															line: 2927, col: 9, offset: 92492,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 676, col: 19, offset: 21470},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonListContinuationElement240,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement243,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1553, col: 11, offset: 50135},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 360, col: 19, offset: 10907},
										run: (*parser).callonListContinuationElement251,
										expr: &seqExpr{
											pos: position{line: 360, col: 19, offset: 10907},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 360, col: 19, offset: 10907},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 360, col: 24, offset: 10912},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9733},
														run: (*parser).callonListContinuationElement255,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9733},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9743},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9744},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 360, col: 45, offset: 10933},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 360, col: 49, offset: 10937},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonListContinuationElement262,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement265,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 362, col: 9, offset: 11028},
										run: (*parser).callonListContinuationElement272,
										expr: &seqExpr{
											pos: position{line: 362, col: 9, offset: 11028},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 362, col: 9, offset: 11028},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 362, col: 13, offset: 11032},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9733},
														run: (*parser).callonListContinuationElement276,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9733},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9733},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9743},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9744},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 362, col: 34, offset: 11053},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 362, col: 39, offset: 11058},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonListContinuationElement283,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement286,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 819, col: 5, offset: 26296},
										run: (*parser).callonListContinuationElement293,
										expr: &seqExpr{
											pos: position{line: 819, col: 5, offset: 26296},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 739, col: 5, offset: 23558},
													run: (*parser).callonListContinuationElement295,
													expr: &seqExpr{
														pos: position{line: 739, col: 5, offset: 23558},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 739, col: 5, offset: 23558},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 739, col: 16, offset: 23569},
																	run: (*parser).callonListContinuationElement298,
																	expr: &seqExpr{
																		pos: position{line: 739, col: 16, offset: 23569},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 739, col: 16, offset: 23569},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 739, col: 23, offset: 23576},
																				expr: &litMatcher{
																					pos:        position{line: 739, col: 23, offset: 23576},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 741, col: 8, offset: 23660},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonListContinuationElement304,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonListContinuationElement307,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 820, col: 5, offset: 26327},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 830, col: 5, offset: 26613},
														expr: &actionExpr{
															pos: position{line: 830, col: 6, offset: 26614},
															run: (*parser).callonListContinuationElement316,
															expr: &seqExpr{
																pos: position{line: 830, col: 6, offset: 26614},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 830, col: 6, offset: 26614},
																		expr: &choiceExpr{
																			pos: position{line: 827, col: 29, offset: 26556},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 739, col: 5, offset: 23558},
																					run: (*parser).callonListContinuationElement320,
																					expr: &seqExpr{
																						pos: position{line: 739, col: 5, offset: 23558},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 739, col: 5, offset: 23558},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 739, col: 16, offset: 23569},
																									run: (*parser).callonListContinuationElement323,
																									expr: &seqExpr{
																										pos: position{line: 739, col: 16, offset: 23569},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 739, col: 16, offset: 23569},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 739, col: 23, offset: 23576},
																												expr: &litMatcher{
																													pos:        position{line: 739, col: 23, offset: 23576},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 741, col: 8, offset: 23660},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonListContinuationElement329,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonListContinuationElement332,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 831, col: 5, offset: 26644},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement342,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement348,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement352,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 821, col: 5, offset: 26361},
													expr: &choiceExpr{
														pos: position{line: 827, col: 29, offset: 26556},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 739, col: 5, offset: 23558},
																run: (*parser).callonListContinuationElement361,
																expr: &seqExpr{
																	pos: position{line: 739, col: 5, offset: 23558},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 739, col: 5, offset: 23558},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 739, col: 16, offset: 23569},
																				run: (*parser).callonListContinuationElement364,
																				expr: &seqExpr{
																					pos: position{line: 739, col: 16, offset: 23569},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 739, col: 16, offset: 23569},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 739, col: 23, offset: 23576},
																							expr: &litMatcher{
																								pos:        position{line: 739, col: 23, offset: 23576},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 741, col: 8, offset: 23660},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonListContinuationElement370,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonListContinuationElement373,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 839, col: 5, offset: 26797},
										run: (*parser).callonListContinuationElement382,
										expr: &seqExpr{
											pos: position{line: 839, col: 5, offset: 26797},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 839, col: 5, offset: 26797},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 746, col: 5, offset: 23806},
														run: (*parser).callonListContinuationElement385,
														expr: &seqExpr{
															pos: position{line: 746, col: 5, offset: 23806},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 746, col: 5, offset: 23806},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 746, col: 16, offset: 23817},
																		run: (*parser).callonListContinuationElement388,
																		expr: &seqExpr{
																			pos: position{line: 746, col: 16, offset: 23817},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 746, col: 16, offset: 23817},
																					val:        "====",
																					ignoreCase: false,
																					want:       "\"====\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 746, col: 23, offset: 23824},
																					expr: &litMatcher{
																						pos:        position{line: 746, col: 23, offset: 23824},
																						val:        "=",
																						ignoreCase: false,
																						want:       "\"=\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 748, col: 8, offset: 23908},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement394,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement397,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 840, col: 5, offset: 26836},
													run: (*parser).callonListContinuationElement404,
												},
												&labeledExpr{
													pos:   position{line: 843, col: 5, offset: 26928},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 858, col: 4, offset: 27325},
														expr: &actionExpr{
															pos: position{line: 858, col: 5, offset: 27326},
															run: (*parser).callonListContinuationElement407,
															expr: &seqExpr{
																pos: position{line: 858, col: 5, offset: 27326},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 858, col: 5, offset: 27326},
																		expr: &choiceExpr{
																			pos: position{line: 851, col: 5, offset: 27168},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 851, col: 5, offset: 27168},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 851, col: 5, offset: 27168},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 746, col: 5, offset: 23806},
																								run: (*parser).callonListContinuationElement413,
																								expr: &seqExpr{
																									pos: position{line: 746, col: 5, offset: 23806},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 746, col: 5, offset: 23806},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 746, col: 16, offset: 23817},
																												run: (*parser).callonListContinuationElement416,
																												expr: &seqExpr{
																													pos: position{line: 746, col: 16, offset: 23817},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 746, col: 16, offset: 23817},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 746, col: 23, offset: 23824},
																															expr: &litMatcher{
																																pos:        position{line: 746, col: 23, offset: 23824},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 748, col: 8, offset: 23908},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement422,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement425,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 852, col: 5, offset: 27199},
																							run: (*parser).callonListContinuationElement432,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 859, col: 5, offset: 27356},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement436,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement442,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement446,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 844, col: 5, offset: 26962},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 844, col: 9, offset: 26966},
														expr: &choiceExpr{
															pos: position{line: 851, col: 5, offset: 27168},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 851, col: 5, offset: 27168},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 851, col: 5, offset: 27168},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 746, col: 5, offset: 23806},
																				run: (*parser).callonListContinuationElement458,
																				expr: &seqExpr{
																					pos: position{line: 746, col: 5, offset: 23806},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 746, col: 5, offset: 23806},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 746, col: 16, offset: 23817},
																								run: (*parser).callonListContinuationElement461,
																								expr: &seqExpr{
																									pos: position{line: 746, col: 16, offset: 23817},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 746, col: 16, offset: 23817},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 746, col: 23, offset: 23824},
																											expr: &litMatcher{
																												pos:        position{line: 746, col: 23, offset: 23824},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 748, col: 8, offset: 23908},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement467,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement470,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 852, col: 5, offset: 27199},
																			run: (*parser).callonListContinuationElement477,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 951, col: 5, offset: 29648},
										run: (*parser).callonListContinuationElement480,
										expr: &seqExpr{
											pos: position{line: 951, col: 5, offset: 29648},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 951, col: 5, offset: 29648},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 759, col: 26, offset: 24294},
														run: (*parser).callonListContinuationElement483,
														expr: &seqExpr{
															pos: position{line: 759, col: 26, offset: 24294},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 759, col: 26, offset: 24294},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 32, offset: 24300},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 763, col: 13, offset: 24430},
																		run: (*parser).callonListContinuationElement487,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 763, col: 14, offset: 24431},
																			expr: &charClassMatcher{
																				pos:        position{line: 763, col: 14, offset: 24431},
																				val:        "[^\\r\\n` ]",
																				chars:      []rune{'\r', '\n', '`', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 759, col: 52, offset: 24320},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement491,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement494,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 952, col: 5, offset: 29694},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 965, col: 5, offset: 30167},
														expr: &actionExpr{
															pos: position{line: 965, col: 6, offset: 30168},
															run: (*parser).callonListContinuationElement503,
															expr: &seqExpr{
																pos: position{line: 965, col: 6, offset: 30168},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 965, col: 6, offset: 30168},
																		expr: &seqExpr{
																			pos: position{line: 962, col: 34, offset: 30115},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 962, col: 34, offset: 30115},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 962, col: 40, offset: 30121},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonListContinuationElement509,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonListContinuationElement512,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 966, col: 5, offset: 30203},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement520,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement526,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement530,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 953, col: 5, offset: 29733},
													expr: &seqExpr{
														pos: position{line: 962, col: 34, offset: 30115},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 962, col: 34, offset: 30115},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 962, col: 40, offset: 30121},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonListContinuationElement541,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonListContinuationElement544,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 867, col: 5, offset: 27509},
										run: (*parser).callonListContinuationElement551,
										expr: &seqExpr{
											pos: position{line: 867, col: 5, offset: 27509},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 867, col: 5, offset: 27509},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 753, col: 5, offset: 24053},
														run: (*parser).callonListContinuationElement554,
														expr: &seqExpr{
															pos: position{line: 753, col: 5, offset: 24053},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 753, col: 5, offset: 24053},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 753, col: 16, offset: 24064},
																		run: (*parser).callonListContinuationElement557,
																		expr: &seqExpr{
																			pos: position{line: 753, col: 16, offset: 24064},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 753, col: 16, offset: 24064},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 753, col: 22, offset: 24070},
																					expr: &litMatcher{
																						pos:        position{line: 753, col: 22, offset: 24070},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 755, col: 8, offset: 24154},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement563,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement566,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 868, col: 5, offset: 27547},
													run: (*parser).callonListContinuationElement573,
												},
												&labeledExpr{
													pos:   position{line: 871, col: 5, offset: 27639},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 886, col: 5, offset: 28029},
														expr: &actionExpr{
															pos: position{line: 886, col: 6, offset: 28030},
															run: (*parser).callonListContinuationElement576,
															expr: &seqExpr{
																pos: position{line: 886, col: 6, offset: 28030},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 886, col: 6, offset: 28030},
																		expr: &choiceExpr{
																			pos: position{line: 879, col: 5, offset: 27873},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 879, col: 5, offset: 27873},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 879, col: 5, offset: 27873},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 753, col: 5, offset: 24053},
																								run: (*parser).callonListContinuationElement582,
																								expr: &seqExpr{
																									pos: position{line: 753, col: 5, offset: 24053},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 753, col: 5, offset: 24053},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 753, col: 16, offset: 24064},
																												run: (*parser).callonListContinuationElement585,
																												expr: &seqExpr{
																													pos: position{line: 753, col: 16, offset: 24064},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 753, col: 16, offset: 24064},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 753, col: 22, offset: 24070},
																															expr: &litMatcher{
																																pos:        position{line: 753, col: 22, offset: 24070},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 755, col: 8, offset: 24154},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement591,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement594,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 880, col: 5, offset: 27903},
																							run: (*parser).callonListContinuationElement601,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 887, col: 5, offset: 28059},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement605,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement611,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement615,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 872, col: 5, offset: 27672},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 872, col: 9, offset: 27676},
														expr: &choiceExpr{
															pos: position{line: 879, col: 5, offset: 27873},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 879, col: 5, offset: 27873},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 879, col: 5, offset: 27873},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 753, col: 5, offset: 24053},
																				run: (*parser).callonListContinuationElement627,
																				expr: &seqExpr{
																					pos: position{line: 753, col: 5, offset: 24053},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 753, col: 5, offset: 24053},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 753, col: 16, offset: 24064},
																								run: (*parser).callonListContinuationElement630,
																								expr: &seqExpr{
																									pos: position{line: 753, col: 16, offset: 24064},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 753, col: 16, offset: 24064},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 753, col: 22, offset: 24070},
																											expr: &litMatcher{
																												pos:        position{line: 753, col: 22, offset: 24070},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 755, col: 8, offset: 24154},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement636,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement639,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 880, col: 5, offset: 27903},
																			run: (*parser).callonListContinuationElement646,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 895, col: 5, offset: 28214},
										run: (*parser).callonListContinuationElement649,
										expr: &seqExpr{
											pos: position{line: 895, col: 5, offset: 28214},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 895, col: 5, offset: 28214},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 768, col: 5, offset: 24590},
														run: (*parser).callonListContinuationElement652,
														expr: &seqExpr{
															pos: position{line: 768, col: 5, offset: 24590},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 768, col: 5, offset: 24590},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 768, col: 16, offset: 24601},
																		run: (*parser).callonListContinuationElement655,
																		expr: &seqExpr{
																			pos: position{line: 768, col: 16, offset: 24601},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 768, col: 16, offset: 24601},
																					val:        "----",
																					ignoreCase: false,
																					want:       "\"----\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 768, col: 23, offset: 24608},
																					expr: &litMatcher{
																						pos:        position{line: 768, col: 23, offset: 24608},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 770, col: 8, offset: 24692},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement661,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement664,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 896, col: 5, offset: 28253},
													run: (*parser).callonListContinuationElement671,
												},
												&labeledExpr{
													pos:   position{line: 899, col: 5, offset: 28345},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 914, col: 5, offset: 28743},
														expr: &actionExpr{
															pos: position{line: 914, col: 6, offset: 28744},
															run: (*parser).callonListContinuationElement674,
															expr: &seqExpr{
																pos: position{line: 914, col: 6, offset: 28744},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 914, col: 6, offset: 28744},
																		expr: &choiceExpr{
																			pos: position{line: 907, col: 5, offset: 28585},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 907, col: 5, offset: 28585},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 907, col: 5, offset: 28585},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 768, col: 5, offset: 24590},
																								run: (*parser).callonListContinuationElement680,
																								expr: &seqExpr{
																									pos: position{line: 768, col: 5, offset: 24590},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 768, col: 5, offset: 24590},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 768, col: 16, offset: 24601},
																												run: (*parser).callonListContinuationElement683,
																												expr: &seqExpr{
																													pos: position{line: 768, col: 16, offset: 24601},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 768, col: 16, offset: 24601},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 768, col: 23, offset: 24608},
																															expr: &litMatcher{
																																pos:        position{line: 768, col: 23, offset: 24608},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 770, col: 8, offset: 24692},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement689,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement692,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 908, col: 5, offset: 28616},
																							run: (*parser).callonListContinuationElement699,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 915, col: 5, offset: 28774},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement703,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement709,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement713,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 900, col: 5, offset: 28379},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 900, col: 9, offset: 28383},
														expr: &choiceExpr{
															pos: position{line: 907, col: 5, offset: 28585},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 907, col: 5, offset: 28585},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 907, col: 5, offset: 28585},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 768, col: 5, offset: 24590},
																				run: (*parser).callonListContinuationElement725,
																				expr: &seqExpr{
																					pos: position{line: 768, col: 5, offset: 24590},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 768, col: 5, offset: 24590},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 768, col: 16, offset: 24601},
																								run: (*parser).callonListContinuationElement728,
																								expr: &seqExpr{
																									pos: position{line: 768, col: 16, offset: 24601},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 768, col: 16, offset: 24601},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 768, col: 23, offset: 24608},
																											expr: &litMatcher{
																												pos:        position{line: 768, col: 23, offset: 24608},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 770, col: 8, offset: 24692},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement734,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement737,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 908, col: 5, offset: 28616},
																			run: (*parser).callonListContinuationElement744,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 923, col: 5, offset: 28929},
										run: (*parser).callonListContinuationElement747,
										expr: &seqExpr{
											pos: position{line: 923, col: 5, offset: 28929},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 923, col: 5, offset: 28929},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 782, col: 5, offset: 25066},
														run: (*parser).callonListContinuationElement750,
														expr: &seqExpr{
															pos: position{line: 782, col: 5, offset: 25066},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 782, col: 5, offset: 25066},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 782, col: 16, offset: 25077},
																		run: (*parser).callonListContinuationElement753,
																		expr: &seqExpr{
																			pos: position{line: 782, col: 16, offset: 25077},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 782, col: 16, offset: 25077},
																					val:        "....",
																					ignoreCase: false,
																					want:       "\"....\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 782, col: 23, offset: 25084},
																					expr: &litMatcher{
																						pos:        position{line: 782, col: 23, offset: 25084},
																						val:        ".",
																						ignoreCase: false,
																						want:       "\".\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 784, col: 8, offset: 25168},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement759,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement762,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 924, col: 5, offset: 28968},
													run: (*parser).callonListContinuationElement769,
												},
												&labeledExpr{
													pos:   position{line: 927, col: 5, offset: 29060},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 942, col: 5, offset: 29458},
														expr: &actionExpr{
															pos: position{line: 942, col: 6, offset: 29459},
															run: (*parser).callonListContinuationElement772,
															expr: &seqExpr{
																pos: position{line: 942, col: 6, offset: 29459},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 942, col: 6, offset: 29459},
																		expr: &choiceExpr{
																			pos: position{line: 935, col: 5, offset: 29300},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 935, col: 5, offset: 29300},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 935, col: 5, offset: 29300},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 782, col: 5, offset: 25066},
																								run: (*parser).callonListContinuationElement778,
																								expr: &seqExpr{
																									pos: position{line: 782, col: 5, offset: 25066},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 782, col: 5, offset: 25066},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 782, col: 16, offset: 25077},
																												run: (*parser).callonListContinuationElement781,
																												expr: &seqExpr{
																													pos: position{line: 782, col: 16, offset: 25077},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 782, col: 16, offset: 25077},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 782, col: 23, offset: 25084},
																															expr: &litMatcher{
																																pos:        position{line: 782, col: 23, offset: 25084},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 784, col: 8, offset: 25168},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement787,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement790,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 936, col: 5, offset: 29331},
																							run: (*parser).callonListContinuationElement797,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 943, col: 5, offset: 29489},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement801,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement807,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement811,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 928, col: 5, offset: 29094},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 928, col: 9, offset: 29098},
														expr: &choiceExpr{
															pos: position{line: 935, col: 5, offset: 29300},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 935, col: 5, offset: 29300},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 935, col: 5, offset: 29300},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 782, col: 5, offset: 25066},
																				run: (*parser).callonListContinuationElement823,
																				expr: &seqExpr{
																					pos: position{line: 782, col: 5, offset: 25066},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 782, col: 5, offset: 25066},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 782, col: 16, offset: 25077},
																								run: (*parser).callonListContinuationElement826,
																								expr: &seqExpr{
																									pos: position{line: 782, col: 16, offset: 25077},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 782, col: 16, offset: 25077},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 782, col: 23, offset: 25084},
																											expr: &litMatcher{
																												pos:        position{line: 782, col: 23, offset: 25084},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 784, col: 8, offset: 25168},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement832,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement835,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 936, col: 5, offset: 29331},
																			run: (*parser).callonListContinuationElement842,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 974, col: 5, offset: 30372},
										run: (*parser).callonListContinuationElement845,
										expr: &seqExpr{
											pos: position{line: 974, col: 5, offset: 30372},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 974, col: 5, offset: 30372},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 981, col: 5, offset: 30631},
														run: (*parser).callonListContinuationElement848,
														expr: &seqExpr{
															pos: position{line: 981, col: 5, offset: 30631},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 981, col: 5, offset: 30631},
																	expr: &actionExpr{
																		pos: position{line: 676, col: 14, offset: 21465},
																		run: (*parser).callonListContinuationElement851,
																		expr: &seqExpr{
																			pos: position{line: 676, col: 14, offset: 21465},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					expr: &notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 676, col: 19, offset: 21470},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonListContinuationElement857,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonListContinuationElement860,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 982, col: 5, offset: 30646},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 983, col: 5, offset: 30656},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2861, col: 14, offset: 90687},
																		run: (*parser).callonListContinuationElement869,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2861, col: 14, offset: 90687},
																			expr: &charClassMatcher{
																				pos:        position{line: 2861, col: 14, offset: 90687},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement873,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 975, col: 5, offset: 30409},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 975, col: 16, offset: 30420},
														expr: &choiceExpr{
															pos: position{line: 975, col: 17, offset: 30421},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 981, col: 5, offset: 30631},
																	run: (*parser).callonListContinuationElement883,
																	expr: &seqExpr{
																		pos: position{line: 981, col: 5, offset: 30631},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 981, col: 5, offset: 30631},
																				expr: &actionExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					run: (*parser).callonListContinuationElement886,
																					expr: &seqExpr{
																						pos: position{line: 676, col: 14, offset: 21465},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 676, col: 14, offset: 21465},
																								expr: &notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 676, col: 19, offset: 21470},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonListContinuationElement892,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonListContinuationElement895,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 982, col: 5, offset: 30646},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 983, col: 5, offset: 30656},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2861, col: 14, offset: 90687},
																					run: (*parser).callonListContinuationElement904,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2861, col: 14, offset: 90687},
																						expr: &charClassMatcher{
																							pos:        position{line: 2861, col: 14, offset: 90687},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonListContinuationElement908,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1793, col: 5, offset: 57924},
																	run: (*parser).callonListContinuationElement915,
																	expr: &seqExpr{
																		pos: position{line: 1793, col: 5, offset: 57924},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1793, col: 5, offset: 57924},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2861, col: 14, offset: 90687},
																					run: (*parser).callonListContinuationElement918,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2861, col: 14, offset: 90687},
																						expr: &charClassMatcher{
																							pos:        position{line: 2861, col: 14, offset: 90687},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1794, col: 5, offset: 57948},
																				run: (*parser).callonListContinuationElement921,
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonListContinuationElement923,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 996, col: 5, offset: 30921},
										run: (*parser).callonListContinuationElement930,
										expr: &seqExpr{
											pos: position{line: 996, col: 5, offset: 30921},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 996, col: 5, offset: 30921},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 775, col: 5, offset: 24835},
														run: (*parser).callonListContinuationElement933,
														expr: &seqExpr{
															pos: position{line: 775, col: 5, offset: 24835},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 775, col: 5, offset: 24835},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 775, col: 16, offset: 24846},
																		run: (*parser).callonListContinuationElement936,
																		expr: &litMatcher{
																			pos:        position{line: 775, col: 16, offset: 24846},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 777, col: 8, offset: 24923},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement939,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement942,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 997, col: 5, offset: 30957},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1007, col: 5, offset: 31225},
														expr: &actionExpr{
															pos: position{line: 1007, col: 6, offset: 31226},
															run: (*parser).callonListContinuationElement951,
															expr: &seqExpr{
																pos: position{line: 1007, col: 6, offset: 31226},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1007, col: 6, offset: 31226},
																		expr: &choiceExpr{
																			pos: position{line: 1004, col: 26, offset: 31174},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 775, col: 5, offset: 24835},
																					run: (*parser).callonListContinuationElement955,
																					expr: &seqExpr{
																						pos: position{line: 775, col: 5, offset: 24835},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 775, col: 5, offset: 24835},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 775, col: 16, offset: 24846},
																									run: (*parser).callonListContinuationElement958,
																									expr: &litMatcher{
																										pos:        position{line: 775, col: 16, offset: 24846},
																										val:        "--",
																										ignoreCase: false,
																										want:       "\"--\"",
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 777, col: 8, offset: 24923},
																								expr: &actionExpr{
																									pos: position{line: 2910, col: 10, offset: 92147},
																									run: (*parser).callonListContinuationElement961,
																									expr: &charClassMatcher{
																										pos:        position{line: 2910, col: 11, offset: 92148},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2930, col: 8, offset: 92541},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2919, col: 12, offset: 92331},
																										run: (*parser).callonListContinuationElement964,
																										expr: &choiceExpr{
																											pos: position{line: 2919, col: 13, offset: 92332},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2919, col: 13, offset: 92332},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 20, offset: 92339},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2919, col: 29, offset: 92348},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2927, col: 8, offset: 92491},
																										expr: &anyMatcher{
																											line: 2927, col: 9, offset: 92492,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1008, col: 5, offset: 31253},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement974,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement980,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement984,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 998, col: 5, offset: 30988},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 998, col: 9, offset: 30992},
														expr: &choiceExpr{
															pos: position{line: 1004, col: 26, offset: 31174},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 775, col: 5, offset: 24835},
																	run: (*parser).callonListContinuationElement994,
																	expr: &seqExpr{
																		pos: position{line: 775, col: 5, offset: 24835},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 775, col: 5, offset: 24835},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 775, col: 16, offset: 24846},
																					run: (*parser).callonListContinuationElement997,
																					expr: &litMatcher{
																						pos:        position{line: 775, col: 16, offset: 24846},
																						val:        "--",
																						ignoreCase: false,
																						want:       "\"--\"",
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 777, col: 8, offset: 24923},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonListContinuationElement1000,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonListContinuationElement1003,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1016, col: 5, offset: 31416},
										run: (*parser).callonListContinuationElement1012,
										expr: &seqExpr{
											pos: position{line: 1016, col: 5, offset: 31416},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1016, col: 5, offset: 31416},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 789, col: 5, offset: 25318},
														run: (*parser).callonListContinuationElement1015,
														expr: &seqExpr{
															pos: position{line: 789, col: 5, offset: 25318},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 789, col: 5, offset: 25318},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 789, col: 16, offset: 25329},
																		run: (*parser).callonListContinuationElement1018,
																		expr: &seqExpr{
																			pos: position{line: 789, col: 16, offset: 25329},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 789, col: 16, offset: 25329},
																					val:        "++++",
																					ignoreCase: false,
																					want:       "\"++++\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 789, col: 23, offset: 25336},
																					expr: &litMatcher{
																						pos:        position{line: 789, col: 23, offset: 25336},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 791, col: 8, offset: 25420},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement1024,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement1027,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1017, col: 5, offset: 31459},
													run: (*parser).callonListContinuationElement1034,
												},
												&labeledExpr{
													pos:   position{line: 1020, col: 5, offset: 31551},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1035, col: 5, offset: 31981},
														expr: &actionExpr{
															pos: position{line: 1035, col: 6, offset: 31982},
															run: (*parser).callonListContinuationElement1037,
															expr: &seqExpr{
																pos: position{line: 1035, col: 6, offset: 31982},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1035, col: 6, offset: 31982},
																		expr: &choiceExpr{
																			pos: position{line: 1028, col: 5, offset: 31815},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1028, col: 5, offset: 31815},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1028, col: 5, offset: 31815},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 789, col: 5, offset: 25318},
																								run: (*parser).callonListContinuationElement1043,
																								expr: &seqExpr{
																									pos: position{line: 789, col: 5, offset: 25318},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 789, col: 5, offset: 25318},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 789, col: 16, offset: 25329},
																												run: (*parser).callonListContinuationElement1046,
																												expr: &seqExpr{
																													pos: position{line: 789, col: 16, offset: 25329},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 789, col: 16, offset: 25329},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 789, col: 23, offset: 25336},
																															expr: &litMatcher{
																																pos:        position{line: 789, col: 23, offset: 25336},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 791, col: 8, offset: 25420},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1052,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1055,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1029, col: 5, offset: 31850},
																							run: (*parser).callonListContinuationElement1062,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1036, col: 5, offset: 32016},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement1066,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement1072,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement1076,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1021, col: 5, offset: 31589},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1021, col: 9, offset: 31593},
														expr: &choiceExpr{
															pos: position{line: 1028, col: 5, offset: 31815},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1028, col: 5, offset: 31815},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1028, col: 5, offset: 31815},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 789, col: 5, offset: 25318},
																				run: (*parser).callonListContinuationElement1088,
																				expr: &seqExpr{
																					pos: position{line: 789, col: 5, offset: 25318},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 789, col: 5, offset: 25318},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 789, col: 16, offset: 25329},
																								run: (*parser).callonListContinuationElement1091,
																								expr: &seqExpr{
																									pos: position{line: 789, col: 16, offset: 25329},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 789, col: 16, offset: 25329},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 789, col: 23, offset: 25336},
																											expr: &litMatcher{
																												pos:        position{line: 789, col: 23, offset: 25336},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 791, col: 8, offset: 25420},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement1097,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement1100,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1029, col: 5, offset: 31850},
																			run: (*parser).callonListContinuationElement1107,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1044, col: 5, offset: 32167},
										run: (*parser).callonListContinuationElement1110,
										expr: &seqExpr{
											pos: position{line: 1044, col: 5, offset: 32167},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1044, col: 5, offset: 32167},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 796, col: 5, offset: 25568},
														run: (*parser).callonListContinuationElement1113,
														expr: &seqExpr{
															pos: position{line: 796, col: 5, offset: 25568},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 796, col: 5, offset: 25568},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 796, col: 16, offset: 25579},
																		run: (*parser).callonListContinuationElement1116,
																		expr: &seqExpr{
																			pos: position{line: 796, col: 16, offset: 25579},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 796, col: 16, offset: 25579},
																					val:        "____",
																					ignoreCase: false,
																					want:       "\"____\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 796, col: 23, offset: 25586},
																					expr: &litMatcher{
																						pos:        position{line: 796, col: 23, offset: 25586},
																						val:        "_",
																						ignoreCase: false,
																						want:       "\"_\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 798, col: 8, offset: 25670},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement1122,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement1125,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1045, col: 5, offset: 32204},
													run: (*parser).callonListContinuationElement1132,
												},
												&labeledExpr{
													pos:   position{line: 1048, col: 5, offset: 32296},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1063, col: 4, offset: 32677},
														expr: &actionExpr{
															pos: position{line: 1063, col: 5, offset: 32678},
															run: (*parser).callonListContinuationElement1135,
															expr: &seqExpr{
																pos: position{line: 1063, col: 5, offset: 32678},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1063, col: 5, offset: 32678},
																		expr: &choiceExpr{
																			pos: position{line: 1056, col: 5, offset: 32524},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1056, col: 5, offset: 32524},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1056, col: 5, offset: 32524},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 796, col: 5, offset: 25568},
																								run: (*parser).callonListContinuationElement1141,
																								expr: &seqExpr{
																									pos: position{line: 796, col: 5, offset: 25568},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 796, col: 5, offset: 25568},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 796, col: 16, offset: 25579},
																												run: (*parser).callonListContinuationElement1144,
																												expr: &seqExpr{
																													pos: position{line: 796, col: 16, offset: 25579},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 796, col: 16, offset: 25579},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 796, col: 23, offset: 25586},
																															expr: &litMatcher{
																																pos:        position{line: 796, col: 23, offset: 25586},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 798, col: 8, offset: 25670},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1150,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1153,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1057, col: 5, offset: 32553},
																							run: (*parser).callonListContinuationElement1160,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1064, col: 5, offset: 32706},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement1164,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement1170,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement1174,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1049, col: 5, offset: 32328},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1049, col: 9, offset: 32332},
														expr: &choiceExpr{
															pos: position{line: 1056, col: 5, offset: 32524},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1056, col: 5, offset: 32524},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1056, col: 5, offset: 32524},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 796, col: 5, offset: 25568},
																				run: (*parser).callonListContinuationElement1186,
																				expr: &seqExpr{
																					pos: position{line: 796, col: 5, offset: 25568},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 796, col: 5, offset: 25568},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 796, col: 16, offset: 25579},
																								run: (*parser).callonListContinuationElement1189,
																								expr: &seqExpr{
																									pos: position{line: 796, col: 16, offset: 25579},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 796, col: 16, offset: 25579},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 796, col: 23, offset: 25586},
																											expr: &litMatcher{
																												pos:        position{line: 796, col: 23, offset: 25586},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 798, col: 8, offset: 25670},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement1195,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement1198,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1057, col: 5, offset: 32553},
																			run: (*parser).callonListContinuationElement1205,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1072, col: 5, offset: 32861},
										run: (*parser).callonListContinuationElement1208,
										expr: &seqExpr{
											pos: position{line: 1072, col: 5, offset: 32861},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1072, col: 5, offset: 32861},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 803, col: 5, offset: 25814},
														run: (*parser).callonListContinuationElement1211,
														expr: &seqExpr{
															pos: position{line: 803, col: 5, offset: 25814},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 803, col: 5, offset: 25814},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 803, col: 16, offset: 25825},
																		run: (*parser).callonListContinuationElement1214,
																		expr: &seqExpr{
																			pos: position{line: 803, col: 16, offset: 25825},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 803, col: 16, offset: 25825},
																					val:        "****",
																					ignoreCase: false,
																					want:       "\"****\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 803, col: 23, offset: 25832},
																					expr: &litMatcher{
																						pos:        position{line: 803, col: 23, offset: 25832},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 805, col: 8, offset: 25916},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement1220,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement1223,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1073, col: 5, offset: 32900},
													run: (*parser).callonListContinuationElement1230,
												},
												&labeledExpr{
													pos:   position{line: 1076, col: 5, offset: 32992},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1091, col: 4, offset: 33389},
														expr: &actionExpr{
															pos: position{line: 1091, col: 5, offset: 33390},
															run: (*parser).callonListContinuationElement1233,
															expr: &seqExpr{
																pos: position{line: 1091, col: 5, offset: 33390},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1091, col: 5, offset: 33390},
																		expr: &choiceExpr{
																			pos: position{line: 1084, col: 5, offset: 33232},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1084, col: 5, offset: 33232},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1084, col: 5, offset: 33232},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 803, col: 5, offset: 25814},
																								run: (*parser).callonListContinuationElement1239,
																								expr: &seqExpr{
																									pos: position{line: 803, col: 5, offset: 25814},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 803, col: 5, offset: 25814},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 803, col: 16, offset: 25825},
																												run: (*parser).callonListContinuationElement1242,
																												expr: &seqExpr{
																													pos: position{line: 803, col: 16, offset: 25825},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 803, col: 16, offset: 25825},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 803, col: 23, offset: 25832},
																															expr: &litMatcher{
																																pos:        position{line: 803, col: 23, offset: 25832},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 805, col: 8, offset: 25916},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1248,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1251,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1085, col: 5, offset: 33263},
																							run: (*parser).callonListContinuationElement1258,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1092, col: 5, offset: 33420},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 810, col: 5, offset: 26062},
																			run: (*parser).callonListContinuationElement1262,
																			expr: &seqExpr{
																				pos: position{line: 810, col: 5, offset: 26062},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 810, col: 5, offset: 26062},
																						expr: &notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 811, col: 5, offset: 26135},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2857, col: 13, offset: 90620},
																							run: (*parser).callonListContinuationElement1268,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2857, col: 13, offset: 90620},
																								expr: &charClassMatcher{
																									pos:        position{line: 2857, col: 13, offset: 90620},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonListContinuationElement1272,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1077, col: 5, offset: 33026},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1077, col: 9, offset: 33030},
														expr: &choiceExpr{
															pos: position{line: 1084, col: 5, offset: 33232},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1084, col: 5, offset: 33232},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1084, col: 5, offset: 33232},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 803, col: 5, offset: 25814},
																				run: (*parser).callonListContinuationElement1284,
																				expr: &seqExpr{
																					pos: position{line: 803, col: 5, offset: 25814},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 803, col: 5, offset: 25814},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 803, col: 16, offset: 25825},
																								run: (*parser).callonListContinuationElement1287,
																								expr: &seqExpr{
																									pos: position{line: 803, col: 16, offset: 25825},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 803, col: 16, offset: 25825},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 803, col: 23, offset: 25832},
																											expr: &litMatcher{
																												pos:        position{line: 803, col: 23, offset: 25832},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 805, col: 8, offset: 25916},
																							expr: &actionExpr{
																								pos: position{line: 2910, col: 10, offset: 92147},
																								run: (*parser).callonListContinuationElement1293,
																								expr: &charClassMatcher{
																									pos:        position{line: 2910, col: 11, offset: 92148},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2930, col: 8, offset: 92541},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2919, col: 12, offset: 92331},
																									run: (*parser).callonListContinuationElement1296,
																									expr: &choiceExpr{
																										pos: position{line: 2919, col: 13, offset: 92332},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2919, col: 13, offset: 92332},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 20, offset: 92339},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2919, col: 29, offset: 92348},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2927, col: 8, offset: 92491},
																									expr: &anyMatcher{
																										line: 2927, col: 9, offset: 92492,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1085, col: 5, offset: 33263},
																			run: (*parser).callonListContinuationElement1303,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2786, col: 18, offset: 88507},
										run: (*parser).callonListContinuationElement1306,
										expr: &seqExpr{
											pos: position{line: 2786, col: 18, offset: 88507},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2787, col: 9, offset: 88517},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2787, col: 9, offset: 88517},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 11, offset: 88553},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 19, offset: 88561},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 29, offset: 88571},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 37, offset: 88579},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 47, offset: 88589},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2788, col: 55, offset: 88597},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2789, col: 11, offset: 88655},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonListContinuationElement1317,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement1320,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement1328,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1557, col: 11, offset: 50277},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2677, col: 5, offset: 85446},
										run: (*parser).callonListContinuationElement1336,
										expr: &seqExpr{
											pos: position{line: 2677, col: 5, offset: 85446},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2683, col: 19, offset: 85603},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2683, col: 26, offset: 85610},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonListContinuationElement1340,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement1343,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2678, col: 5, offset: 85470},
													label: "lines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2678, col: 11, offset: 85476},
														expr: &choiceExpr{
															pos: position{line: 2678, col: 12, offset: 85477},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 676, col: 14, offset: 21465},
																	run: (*parser).callonListContinuationElement1353,
																	expr: &seqExpr{
																		pos: position{line: 676, col: 14, offset: 21465},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 676, col: 14, offset: 21465},
																				expr: &notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 676, col: 19, offset: 21470},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonListContinuationElement1359,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2930, col: 8, offset: 92541},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonListContinuationElement1362,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2690, col: 5, offset: 85722},
																	run: (*parser).callonListContinuationElement1369,
																	expr: &seqExpr{
																		pos: position{line: 2690, col: 5, offset: 85722},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2690, col: 5, offset: 85722},
																				expr: &choiceExpr{
																					pos: position{line: 2687, col: 22, offset: 85683},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2683, col: 19, offset: 85603},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2683, col: 19, offset: 85603},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2683, col: 26, offset: 85610},
																									expr: &actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonListContinuationElement1376,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonListContinuationElement1379,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2691, col: 5, offset: 85745},
																				label: "content",
																				expr: &choiceExpr{
																					pos: position{line: 2692, col: 9, offset: 85763},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2692, col: 10, offset: 85764},
																							run: (*parser).callonListContinuationElement1390,
																							expr: &labeledExpr{
																								pos:   position{line: 2692, col: 10, offset: 85764},
																								label: "cells",
																								expr: &choiceExpr{
																									pos: position{line: 2692, col: 17, offset: 85771},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2700, col: 21, offset: 85967},
																											run: (*parser).callonListContinuationElement1393,
																											expr: &seqExpr{
																												pos: position{line: 2700, col: 21, offset: 85967},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 2700, col: 21, offset: 85967},
																														label: "cells",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2700, col: 27, offset: 85973},
																															expr: &actionExpr{
																																pos: position{line: 2705, col: 5, offset: 86048},
																																run: (*parser).callonListContinuationElement1397,
																																expr: &seqExpr{
																																	pos: position{line: 2705, col: 5, offset: 86048},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2705, col: 5, offset: 86048},
																																			val:        "|",
																																			ignoreCase: false,
																																			want:       "\"|\"",
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2705, col: 9, offset: 86052},
																																			expr: &actionExpr{
																																				pos: position{line: 2910, col: 10, offset: 92147},
																																				run: (*parser).callonListContinuationElement1401,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2910, col: 11, offset: 92148},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 2705, col: 16, offset: 86059},
																																			label: "content",
																																			expr: &actionExpr{
																																				pos: position{line: 2711, col: 5, offset: 86258},
																																				run: (*parser).callonListContinuationElement1404,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2711, col: 5, offset: 86258},
																																					label: "content",
																																					expr: &actionExpr{
																																						pos: position{line: 2711, col: 14, offset: 86267},
																																						run: (*parser).callonListContinuationElement1406,
																																						expr: &zeroOrMoreExpr{
																																							pos: position{line: 2711, col: 14, offset: 86267},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2711, col: 14, offset: 86267},
																																								val:        "[^|\\r\\n]",
																																								chars:      []rune{'|', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2930, col: 8, offset: 92541},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2919, col: 12, offset: 92331},
																																run: (*parser).callonListContinuationElement1410,
																																expr: &choiceExpr{
																																	pos: position{line: 2919, col: 13, offset: 92332},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 13, offset: 92332},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 20, offset: 92339},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 29, offset: 92348},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2927, col: 8, offset: 92491},
																																expr: &anyMatcher{
																																	line: 2927, col: 9, offset: 92492,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2717, col: 24, offset: 86403},
																											run: (*parser).callonListContinuationElement1417,
																											expr: &labeledExpr{
																												pos:   position{line: 2717, col: 24, offset: 86403},
																												label: "cells",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2717, col: 30, offset: 86409},
																													expr: &actionExpr{
																														pos: position{line: 2722, col: 5, offset: 86485},
																														run: (*parser).callonListContinuationElement1420,
																														expr: &seqExpr{
																															pos: position{line: 2722, col: 5, offset: 86485},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 2722, col: 5, offset: 86485},
																																	expr: &choiceExpr{
																																		pos: position{line: 2687, col: 22, offset: 85683},
																																		alternatives: []interface{}{
																																			&seqExpr{
																																				pos: position{line: 2683, col: 19, offset: 85603},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2683, col: 19, offset: 85603},
																																						val:        "|===",
																																						ignoreCase: false,
																																						want:       "\"|===\"",
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 2683, col: 26, offset: 85610},
																																						expr: &actionExpr{
																																							pos: position{line: 2910, col: 10, offset: 92147},
																																							run: (*parser).callonListContinuationElement1427,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2910, col: 11, offset: 92148},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2930, col: 8, offset: 92541},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2919, col: 12, offset: 92331},
																																								run: (*parser).callonListContinuationElement1430,
																																								expr: &choiceExpr{
																																									pos: position{line: 2919, col: 13, offset: 92332},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 13, offset: 92332},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 20, offset: 92339},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2919, col: 29, offset: 92348},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2927, col: 8, offset: 92491},
																																								expr: &anyMatcher{
																																									line: 2927, col: 9, offset: 92492,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2927, col: 8, offset: 92491},
																																				expr: &anyMatcher{
																																					line: 2927, col: 9, offset: 92492,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2723, col: 5, offset: 86508},
																																	expr: &actionExpr{
																																		pos: position{line: 676, col: 14, offset: 21465},
																																		run: (*parser).callonListContinuationElement1440,
																																		expr: &seqExpr{
																																			pos: position{line: 676, col: 14, offset: 21465},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 676, col: 14, offset: 21465},
																																					expr: &notExpr{
																																						pos: position{line: 2927, col: 8, offset: 92491},
																																						expr: &anyMatcher{
																																							line: 2927, col: 9, offset: 92492,
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 676, col: 19, offset: 21470},
																																					expr: &actionExpr{
																																						pos: position{line: 2910, col: 10, offset: 92147},
																																						run: (*parser).callonListContinuationElement1446,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2910, col: 11, offset: 92148},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2930, col: 8, offset: 92541},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2919, col: 12, offset: 92331},
																																							run: (*parser).callonListContinuationElement1449,
																																							expr: &choiceExpr{
																																								pos: position{line: 2919, col: 13, offset: 92332},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2919, col: 13, offset: 92332},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2919, col: 20, offset: 92339},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2919, col: 29, offset: 92348},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2927, col: 8, offset: 92491},
																																							expr: &anyMatcher{
																																								line: 2927, col: 9, offset: 92492,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 2724, col: 5, offset: 86523},
																																	label: "format",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 2724, col: 12, offset: 86530},
																																		expr: &actionExpr{
																																			pos: position{line: 2741, col: 20, offset: 86994},
																																			run: (*parser).callonListContinuationElement1458,
																																			expr: &zeroOrMoreExpr{
																																				pos: position{line: 2741, col: 20, offset: 86994},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2741, col: 20, offset: 86994},
																																					val:        "[^ |\\r\\n]",
																																					chars:      []rune{' ', '|', '\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2724, col: 31, offset: 86549},
																																	val:        "|",
																																	ignoreCase: false,
																																	want:       "\"|\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2724, col: 35, offset: 86553},
																																	expr: &actionExpr{
																																		pos: position{line: 2910, col: 10, offset: 92147},
																																		run: (*parser).callonListContinuationElement1463,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2910, col: 11, offset: 92148},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&zeroOrOneExpr{
																																	pos: position{line: 2724, col: 42, offset: 86560},
																																	expr: &actionExpr{
																																		pos: position{line: 2919, col: 12, offset: 92331},
																																		run: (*parser).callonListContinuationElement1466,
																																		expr: &choiceExpr{
																																			pos: position{line: 2919, col: 13, offset: 92332},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 13, offset: 92332},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 20, offset: 92339},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 29, offset: 92348},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 2724, col: 51, offset: 86569},
																																	label: "content",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 2730, col: 5, offset: 86728},
																																		expr: &actionExpr{
																																			pos: position{line: 2731, col: 9, offset: 86738},
																																			run: (*parser).callonListContinuationElement1473,
																																			expr: &seqExpr{
																																				pos: position{line: 2731, col: 9, offset: 86738},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 2731, col: 9, offset: 86738},
																																						expr: &choiceExpr{
																																							pos: position{line: 2687, col: 22, offset: 85683},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 2683, col: 19, offset: 85603},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2683, col: 19, offset: 85603},
																																											val:        "|===",
																																											ignoreCase: false,
																																											want:       "\"|===\"",
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 2683, col: 26, offset: 85610},
																																											expr: &actionExpr{
																																												pos: position{line: 2910, col: 10, offset: 92147},
																																												run: (*parser).callonListContinuationElement1480,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2910, col: 11, offset: 92148},
																																													val:        "[ \\t]",
																																													chars:      []rune{' ', '\t'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																										&choiceExpr{
																																											pos: position{line: 2930, col: 8, offset: 92541},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 2919, col: 12, offset: 92331},
																																													run: (*parser).callonListContinuationElement1483,
																																													expr: &choiceExpr{
																																														pos: position{line: 2919, col: 13, offset: 92332},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 13, offset: 92332},
																																																val:        "\n",
																																																ignoreCase: false,
																																																want:       "\"\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 20, offset: 92339},
																																																val:        "\r\n",
																																																ignoreCase: false,
																																																want:       "\"\\r\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2919, col: 29, offset: 92348},
																																																val:        "\r",
																																																ignoreCase: false,
																																																want:       "\"\\r\"",
																																															},
																																														},
																																													},
																																												},
																																												&notExpr{
																																													pos: position{line: 2927, col: 8, offset: 92491},
																																													expr: &anyMatcher{
																																														line: 2927, col: 9, offset: 92492,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2927, col: 8, offset: 92491},
																																									expr: &anyMatcher{
																																										line: 2927, col: 9, offset: 92492,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2732, col: 9, offset: 86765},
																																						expr: &actionExpr{
																																							pos: position{line: 676, col: 14, offset: 21465},
																																							run: (*parser).callonListContinuationElement1493,
																																							expr: &seqExpr{
																																								pos: position{line: 676, col: 14, offset: 21465},
																																								exprs: []interface{}{
																																									&notExpr{
																																										pos: position{line: 676, col: 14, offset: 21465},
																																										expr: &notExpr{
																																											pos: position{line: 2927, col: 8, offset: 92491},
																																											expr: &anyMatcher{
																																												line: 2927, col: 9, offset: 92492,
																																											},
																																										},
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 676, col: 19, offset: 21470},
																																										expr: &actionExpr{
																																											pos: position{line: 2910, col: 10, offset: 92147},
																																											run: (*parser).callonListContinuationElement1499,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2910, col: 11, offset: 92148},
																																												val:        "[ \\t]",
																																												chars:      []rune{' ', '\t'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																									&choiceExpr{
																																										pos: position{line: 2930, col: 8, offset: 92541},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 2919, col: 12, offset: 92331},
																																												run: (*parser).callonListContinuationElement1502,
																																												expr: &choiceExpr{
																																													pos: position{line: 2919, col: 13, offset: 92332},
																																													alternatives: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 2919, col: 13, offset: 92332},
																																															val:        "\n",
																																															ignoreCase: false,
																																															want:       "\"\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2919, col: 20, offset: 92339},
																																															val:        "\r\n",
																																															ignoreCase: false,
																																															want:       "\"\\r\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2919, col: 29, offset: 92348},
																																															val:        "\r",
																																															ignoreCase: false,
																																															want:       "\"\\r\"",
																																														},
																																													},
																																												},
																																											},
																																											&notExpr{
																																												pos: position{line: 2927, col: 8, offset: 92491},
																																												expr: &anyMatcher{
																																													line: 2927, col: 9, offset: 92492,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2733, col: 9, offset: 86784},
																																						expr: &seqExpr{
																																							pos: position{line: 2733, col: 11, offset: 86786},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 2733, col: 11, offset: 86786},
																																									label: "format",
																																									expr: &zeroOrOneExpr{
																																										pos: position{line: 2733, col: 18, offset: 86793},
																																										expr: &actionExpr{
																																											pos: position{line: 2741, col: 20, offset: 86994},
																																											run: (*parser).callonListContinuationElement1513,
																																											expr: &zeroOrMoreExpr{
																																												pos: position{line: 2741, col: 20, offset: 86994},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2741, col: 20, offset: 86994},
																																													val:        "[^ |\\r\\n]",
																																													chars:      []rune{' ', '|', '\r', '\n'},
																																													ignoreCase: false,
																																													inverted:   true,
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2733, col: 37, offset: 86812},
																																									val:        "|",
																																									ignoreCase: false,
																																									want:       "\"|\"",
																																								},
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 2734, col: 9, offset: 86825},
																																						label: "content",
																																						expr: &actionExpr{
																																							pos: position{line: 2734, col: 18, offset: 86834},
																																							run: (*parser).callonListContinuationElement1518,
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 2734, col: 18, offset: 86834},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2734, col: 18, offset: 86834},
																																									val:        "[^|\\r\\n]",
																																									chars:      []rune{'|', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrOneExpr{
																																						pos: position{line: 2736, col: 12, offset: 86896},
																																						expr: &choiceExpr{
																																							pos: position{line: 2930, col: 8, offset: 92541},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 2919, col: 12, offset: 92331},
																																									run: (*parser).callonListContinuationElement1523,
																																									expr: &choiceExpr{
																																										pos: position{line: 2919, col: 13, offset: 92332},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 13, offset: 92332},
																																												val:        "\n",
																																												ignoreCase: false,
																																												want:       "\"\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 20, offset: 92339},
																																												val:        "\r\n",
																																												ignoreCase: false,
																																												want:       "\"\\r\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2919, col: 29, offset: 92348},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2927, col: 8, offset: 92491},
																																									expr: &anyMatcher{
																																										line: 2927, col: 9, offset: 92492,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 14, offset: 21465},
																							run: (*parser).callonListContinuationElement1530,
																							expr: &seqExpr{
																								pos: position{line: 676, col: 14, offset: 21465},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 676, col: 14, offset: 21465},
																										expr: &notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 676, col: 19, offset: 21470},
																										expr: &actionExpr{
																											pos: position{line: 2910, col: 10, offset: 92147},
																											run: (*parser).callonListContinuationElement1536,
																											expr: &charClassMatcher{
																												pos:        position{line: 2910, col: 11, offset: 92148},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2930, col: 8, offset: 92541},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2919, col: 12, offset: 92331},
																												run: (*parser).callonListContinuationElement1539,
																												expr: &choiceExpr{
																													pos: position{line: 2919, col: 13, offset: 92332},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2919, col: 13, offset: 92332},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2919, col: 20, offset: 92339},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2919, col: 29, offset: 92348},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2927, col: 8, offset: 92491},
																												expr: &anyMatcher{
																													line: 2927, col: 9, offset: 92492,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2687, col: 22, offset: 85683},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2683, col: 19, offset: 85603},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2683, col: 19, offset: 85603},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2683, col: 26, offset: 85610},
																	expr: &actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonListContinuationElement1550,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement1553,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2562, col: 22, offset: 82365},
										run: (*parser).callonListContinuationElement1562,
										expr: &seqExpr{
											pos: position{line: 2562, col: 22, offset: 82365},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2567, col: 31, offset: 82586},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2567, col: 36, offset: 82591},
													expr: &litMatcher{
														pos:        position{line: 2567, col: 37, offset: 82592},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2562, col: 49, offset: 82392},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2857, col: 13, offset: 90620},
														run: (*parser).callonListContinuationElement1568,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2857, col: 13, offset: 90620},
															expr: &charClassMatcher{
																pos:        position{line: 2857, col: 13, offset: 90620},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2930, col: 8, offset: 92541},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonListContinuationElement1572,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2927, col: 8, offset: 92491},
															expr: &anyMatcher{
																line: 2927, col: 9, offset: 92492,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1570, col: 5, offset: 50707},
										run: (*parser).callonListContinuationElement1579,
										expr: &seqExpr{
											pos: position{line: 1570, col: 5, offset: 50707},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1570, col: 5, offset: 50707},
													label: "style",
													expr: &zeroOrOneExpr{
														pos: position{line: 1570, col: 11, offset: 50713},
														expr: &actionExpr{
															pos: position{line: 1734, col: 5, offset: 56030},
															run: (*parser).callonListContinuationElement1583,
															expr: &seqExpr{
																pos: position{line: 1734, col: 5, offset: 56030},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1734, col: 5, offset: 56030},
																		run: (*parser).callonListContinuationElement1585,
																	},
																	&labeledExpr{
																		pos:   position{line: 1737, col: 5, offset: 56093},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1737, col: 12, offset: 56100},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1737, col: 12, offset: 56100},
																					run: (*parser).callonListContinuationElement1588,
																					expr: &litMatcher{
																						pos:        position{line: 1737, col: 12, offset: 56100},
																						val:        "TIP: ",
																						ignoreCase: false,
																						want:       "\"TIP: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1739, col: 13, offset: 56156},
																					run: (*parser).callonListContinuationElement1590,
																					expr: &litMatcher{
																						pos:        position{line: 1739, col: 13, offset: 56156},
																						val:        "NOTE: ",
																						ignoreCase: false,
																						want:       "\"NOTE: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1741, col: 13, offset: 56214},
																					run: (*parser).callonListContinuationElement1592,
																					expr: &litMatcher{
																						pos:        position{line: 1741, col: 13, offset: 56214},
																						val:        "IMPORTANT: ",
																						ignoreCase: false,
																						want:       "\"IMPORTANT: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1743, col: 13, offset: 56282},
																					run: (*parser).callonListContinuationElement1594,
																					expr: &litMatcher{
																						pos:        position{line: 1743, col: 13, offset: 56282},
																						val:        "WARNING: ",
																						ignoreCase: false,
																						want:       "\"WARNING: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1745, col: 13, offset: 56346},
																					run: (*parser).callonListContinuationElement1596,
																					expr: &litMatcher{
																						pos:        position{line: 1745, col: 13, offset: 56346},
																						val:        "CAUTION: ",
																						ignoreCase: false,
																						want:       "\"CAUTION: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1747, col: 13, offset: 56410},
																					run: (*parser).callonListContinuationElement1598,
																					expr: &andExpr{
																						pos: position{line: 1747, col: 13, offset: 56410},
																						expr: &actionExpr{
																							pos: position{line: 2914, col: 11, offset: 92214},
																							run: (*parser).callonListContinuationElement1600,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2914, col: 11, offset: 92214},
																								expr: &charClassMatcher{
																									pos:        position{line: 2914, col: 12, offset: 92215},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1571, col: 5, offset: 50736},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1514, col: 5, offset: 49088},
														run: (*parser).callonListContinuationElement1604,
														expr: &seqExpr{
															pos: position{line: 1514, col: 5, offset: 49088},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1514, col: 5, offset: 49088},
																	expr: &actionExpr{
																		pos: position{line: 676, col: 14, offset: 21465},
																		run: (*parser).callonListContinuationElement1607,
																		expr: &seqExpr{
																			pos: position{line: 676, col: 14, offset: 21465},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 676, col: 14, offset: 21465},
																					expr: &notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 676, col: 19, offset: 21470},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonListContinuationElement1613,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonListContinuationElement1616,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1515, col: 5, offset: 49103},
																	expr: &seqExpr{
																		pos: position{line: 1545, col: 27, offset: 49929},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1545, col: 27, offset: 49929},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1545, col: 31, offset: 49933},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonListContinuationElement1627,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonListContinuationElement1629,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1516, col: 5, offset: 49131},
																	expr: &actionExpr{
																		pos: position{line: 1586, col: 5, offset: 51146},
																		run: (*parser).callonListContinuationElement1635,
																		expr: &seqExpr{
																			pos: position{line: 1586, col: 5, offset: 51146},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1586, col: 5, offset: 51146},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonListContinuationElement1638,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1586, col: 12, offset: 51153},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1588, col: 9, offset: 51216},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1588, col: 9, offset: 51216},
																								run: (*parser).callonListContinuationElement1642,
																								expr: &seqExpr{
																									pos: position{line: 1588, col: 9, offset: 51216},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1588, col: 9, offset: 51216},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1588, col: 16, offset: 51223},
																												run: (*parser).callonListContinuationElement1645,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1588, col: 16, offset: 51223},
																													expr: &litMatcher{
																														pos:        position{line: 1588, col: 17, offset: 51224},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1592, col: 9, offset: 51324},
																											run: (*parser).callonListContinuationElement1648,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1611, col: 11, offset: 52041},
																								run: (*parser).callonListContinuationElement1649,
																								expr: &seqExpr{
																									pos: position{line: 1611, col: 11, offset: 52041},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1611, col: 11, offset: 52041},
																											expr: &charClassMatcher{
																												pos:        position{line: 1611, col: 12, offset: 52042},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1611, col: 20, offset: 52050},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1613, col: 13, offset: 52167},
																								run: (*parser).callonListContinuationElement1654,
																								expr: &seqExpr{
																									pos: position{line: 1613, col: 13, offset: 52167},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1613, col: 14, offset: 52168},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1613, col: 21, offset: 52175},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1615, col: 13, offset: 52295},
																								run: (*parser).callonListContinuationElement1658,
																								expr: &seqExpr{
																									pos: position{line: 1615, col: 13, offset: 52295},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1615, col: 14, offset: 52296},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1615, col: 21, offset: 52303},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1617, col: 13, offset: 52423},
																								run: (*parser).callonListContinuationElement1662,
																								expr: &seqExpr{
																									pos: position{line: 1617, col: 13, offset: 52423},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1617, col: 13, offset: 52423},
																											expr: &charClassMatcher{
																												pos:        position{line: 1617, col: 14, offset: 52424},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1617, col: 26, offset: 52436},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1619, col: 13, offset: 52556},
																								run: (*parser).callonListContinuationElement1667,
																								expr: &seqExpr{
																									pos: position{line: 1619, col: 13, offset: 52556},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1619, col: 13, offset: 52556},
																											expr: &charClassMatcher{
																												pos:        position{line: 1619, col: 14, offset: 52557},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1619, col: 26, offset: 52569},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2914, col: 11, offset: 92214},
																					run: (*parser).callonListContinuationElement1672,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2914, col: 11, offset: 92214},
																						expr: &charClassMatcher{
																							pos:        position{line: 2914, col: 12, offset: 92215},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1517, col: 5, offset: 49161},
																	expr: &actionExpr{
																		pos: position{line: 1636, col: 5, offset: 53108},
																		run: (*parser).callonListContinuationElement1676,
																		expr: &seqExpr{
																			pos: position{line: 1636, col: 5, offset: 53108},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1636, col: 5, offset: 53108},
																					expr: &actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonListContinuationElement1679,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1637, col: 5, offset: 53120},
																					label: "style",
																					expr: &actionExpr{
																						pos: position{line: 1638, col: 9, offset: 53136},
																						run: (*parser).callonListContinuationElement1682,
																						expr: &choiceExpr{
																							pos: position{line: 1638, col: 10, offset: 53137},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1638, col: 11, offset: 53138},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1638, col: 18, offset: 53145},
																									expr: &litMatcher{
																										pos:        position{line: 1638, col: 19, offset: 53146},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1641, col: 7, offset: 53236},
																					run: (*parser).callonListContinuationElement1687,
																				},
																				&actionExpr{
																					pos: position{line: 2914, col: 11, offset: 92214},
																					run: (*parser).callonListContinuationElement1688,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2914, col: 11, offset: 92214},
																						expr: &charClassMatcher{
																							pos:        position{line: 2914, col: 12, offset: 92215},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1518, col: 5, offset: 49193},
																	expr: &actionExpr{
																		pos: position{line: 1725, col: 5, offset: 55645},
																		run: (*parser).callonListContinuationElement1692,
																		expr: &seqExpr{
																			pos: position{line: 1725, col: 5, offset: 55645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1725, col: 5, offset: 55645},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1725, col: 9, offset: 55649},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1725, col: 14, offset: 55654},
																						run: (*parser).callonListContinuationElement1696,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1725, col: 14, offset: 55654},
																							expr: &charClassMatcher{
																								pos:        position{line: 1725, col: 14, offset: 55654},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1725, col: 62, offset: 55702},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2914, col: 11, offset: 92214},
																					run: (*parser).callonListContinuationElement1700,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2914, col: 11, offset: 92214},
																						expr: &charClassMatcher{
																							pos:        position{line: 2914, col: 12, offset: 92215},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1519, col: 5, offset: 49223},
																	expr: &seqExpr{
																		pos: position{line: 1519, col: 7, offset: 49225},
																		exprs: []interface{}{
																			&actionExpr{
																				pos: position{line: 1671, col: 5, offset: 54127},
																				run: (*parser).callonListContinuationElement1705,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1671, col: 5, offset: 54127},
																					expr: &seqExpr{
																						pos: position{line: 1671, col: 6, offset: 54128},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1671, col: 6, offset: 54128},
																								expr: &actionExpr{
																									pos: position{line: 1676, col: 5, offset: 54278},
																									run: (*parser).callonListContinuationElement1709,
																									expr: &seqExpr{
																										pos: position{line: 1676, col: 5, offset: 54278},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1676, col: 5, offset: 54278},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1676, col: 16, offset: 54289},
																													run: (*parser).callonListContinuationElement1712,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1676, col: 16, offset: 54289},
																														expr: &litMatcher{
																															pos:        position{line: 1676, col: 17, offset: 54290},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1679, col: 5, offset: 54347},
																												run: (*parser).callonListContinuationElement1715,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1671, col: 35, offset: 54157},
																								expr: &choiceExpr{
																									pos: position{line: 2930, col: 8, offset: 92541},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonListContinuationElement1718,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1671, col: 40, offset: 54162,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1676, col: 5, offset: 54278},
																				run: (*parser).callonListContinuationElement1726,
																				expr: &seqExpr{
																					pos: position{line: 1676, col: 5, offset: 54278},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1676, col: 5, offset: 54278},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1676, col: 16, offset: 54289},
																								run: (*parser).callonListContinuationElement1729,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1676, col: 16, offset: 54289},
																									expr: &litMatcher{
																										pos:        position{line: 1676, col: 17, offset: 54290},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1679, col: 5, offset: 54347},
																							run: (*parser).callonListContinuationElement1732,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1520, col: 5, offset: 49281},
																	expr: &actionExpr{
																		pos: position{line: 723, col: 5, offset: 23016},
																		run: (*parser).callonListContinuationElement1734,
																		expr: &seqExpr{
																			pos: position{line: 723, col: 5, offset: 23016},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 723, col: 5, offset: 23016},
																					expr: &charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 724, col: 5, offset: 23046},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 725, col: 9, offset: 23066},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 739, col: 5, offset: 23558},
																								run: (*parser).callonListContinuationElement1740,
																								expr: &seqExpr{
																									pos: position{line: 739, col: 5, offset: 23558},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 739, col: 5, offset: 23558},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 739, col: 16, offset: 23569},
																												run: (*parser).callonListContinuationElement1743,
																												expr: &seqExpr{
																													pos: position{line: 739, col: 16, offset: 23569},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 739, col: 16, offset: 23569},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 739, col: 23, offset: 23576},
																															expr: &litMatcher{
																																pos:        position{line: 739, col: 23, offset: 23576},
																																val:        "/",
																																ignoreCase: false,
																																want:       "\"/\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 741, col: 8, offset: 23660},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1749,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1752,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 746, col: 5, offset: 23806},
																								run: (*parser).callonListContinuationElement1759,
																								expr: &seqExpr{
																									pos: position{line: 746, col: 5, offset: 23806},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 746, col: 5, offset: 23806},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 746, col: 16, offset: 23817},
																												run: (*parser).callonListContinuationElement1762,
																												expr: &seqExpr{
																													pos: position{line: 746, col: 16, offset: 23817},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 746, col: 16, offset: 23817},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 746, col: 23, offset: 23824},
																															expr: &litMatcher{
																																pos:        position{line: 746, col: 23, offset: 23824},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 748, col: 8, offset: 23908},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1768,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1771,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 26, offset: 24294},
																								run: (*parser).callonListContinuationElement1778,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 26, offset: 24294},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 759, col: 26, offset: 24294},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 759, col: 32, offset: 24300},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 763, col: 13, offset: 24430},
																												run: (*parser).callonListContinuationElement1782,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 763, col: 14, offset: 24431},
																													expr: &charClassMatcher{
																														pos:        position{line: 763, col: 14, offset: 24431},
																														val:        "[^\\r\\n` ]",
																														chars:      []rune{'\r', '\n', '`', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 759, col: 52, offset: 24320},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1786,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1789,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 753, col: 5, offset: 24053},
																								run: (*parser).callonListContinuationElement1796,
																								expr: &seqExpr{
																									pos: position{line: 753, col: 5, offset: 24053},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 753, col: 5, offset: 24053},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 753, col: 16, offset: 24064},
																												run: (*parser).callonListContinuationElement1799,
																												expr: &seqExpr{
																													pos: position{line: 753, col: 16, offset: 24064},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 753, col: 16, offset: 24064},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 753, col: 22, offset: 24070},
																															expr: &litMatcher{
																																pos:        position{line: 753, col: 22, offset: 24070},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 755, col: 8, offset: 24154},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1805,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1808,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 768, col: 5, offset: 24590},
																								run: (*parser).callonListContinuationElement1815,
																								expr: &seqExpr{
																									pos: position{line: 768, col: 5, offset: 24590},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 768, col: 5, offset: 24590},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 768, col: 16, offset: 24601},
																												run: (*parser).callonListContinuationElement1818,
																												expr: &seqExpr{
																													pos: position{line: 768, col: 16, offset: 24601},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 768, col: 16, offset: 24601},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 768, col: 23, offset: 24608},
																															expr: &litMatcher{
																																pos:        position{line: 768, col: 23, offset: 24608},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 770, col: 8, offset: 24692},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1824,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1827,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 782, col: 5, offset: 25066},
																								run: (*parser).callonListContinuationElement1834,
																								expr: &seqExpr{
																									pos: position{line: 782, col: 5, offset: 25066},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 782, col: 5, offset: 25066},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 782, col: 16, offset: 25077},
																												run: (*parser).callonListContinuationElement1837,
																												expr: &seqExpr{
																													pos: position{line: 782, col: 16, offset: 25077},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 782, col: 16, offset: 25077},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 782, col: 23, offset: 25084},
																															expr: &litMatcher{
																																pos:        position{line: 782, col: 23, offset: 25084},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 784, col: 8, offset: 25168},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1843,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1846,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 789, col: 5, offset: 25318},
																								run: (*parser).callonListContinuationElement1853,
																								expr: &seqExpr{
																									pos: position{line: 789, col: 5, offset: 25318},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 789, col: 5, offset: 25318},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 789, col: 16, offset: 25329},
																												run: (*parser).callonListContinuationElement1856,
																												expr: &seqExpr{
																													pos: position{line: 789, col: 16, offset: 25329},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 789, col: 16, offset: 25329},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 789, col: 23, offset: 25336},
																															expr: &litMatcher{
																																pos:        position{line: 789, col: 23, offset: 25336},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 791, col: 8, offset: 25420},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1862,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1865,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 796, col: 5, offset: 25568},
																								run: (*parser).callonListContinuationElement1872,
																								expr: &seqExpr{
																									pos: position{line: 796, col: 5, offset: 25568},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 796, col: 5, offset: 25568},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 796, col: 16, offset: 25579},
																												run: (*parser).callonListContinuationElement1875,
																												expr: &seqExpr{
																													pos: position{line: 796, col: 16, offset: 25579},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 796, col: 16, offset: 25579},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 796, col: 23, offset: 25586},
																															expr: &litMatcher{
																																pos:        position{line: 796, col: 23, offset: 25586},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 798, col: 8, offset: 25670},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1881,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1884,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 803, col: 5, offset: 25814},
																								run: (*parser).callonListContinuationElement1891,
																								expr: &seqExpr{
																									pos: position{line: 803, col: 5, offset: 25814},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 803, col: 5, offset: 25814},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 803, col: 16, offset: 25825},
																												run: (*parser).callonListContinuationElement1894,
																												expr: &seqExpr{
																													pos: position{line: 803, col: 16, offset: 25825},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 803, col: 16, offset: 25825},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 803, col: 23, offset: 25832},
																															expr: &litMatcher{
																																pos:        position{line: 803, col: 23, offset: 25832},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 805, col: 8, offset: 25916},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonListContinuationElement1900,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonListContinuationElement1903,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49301},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2861, col: 14, offset: 90687},
																		run: (*parser).callonListContinuationElement1911,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2861, col: 14, offset: 90687},
																			expr: &charClassMatcher{
																				pos:        position{line: 2861, col: 14, offset: 90687},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2930, col: 8, offset: 92541},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2919, col: 12, offset: 92331},
																			run: (*parser).callonListContinuationElement1915,
																			expr: &choiceExpr{
																				pos: position{line: 2919, col: 13, offset: 92332},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2919, col: 13, offset: 92332},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 20, offset: 92339},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2919, col: 29, offset: 92348},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2927, col: 8, offset: 92491},
																			expr: &anyMatcher{
																				line: 2927, col: 9, offset: 92492,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1709, col: 1, offset: 55139},
			expr: &actionExpr{
				pos: position{line: 1711, col: 5, offset: 55217},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 5, offset: 55217},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1711, col: 5, offset: 55217},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1714, col: 5, offset: 55284},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 9, offset: 55288},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1714, col: 14, offset: 55293},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1714, col: 14, offset: 55293},
									expr: &charClassMatcher{
										pos:        position{line: 1714, col: 14, offset: 55293},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1714, col: 62, offset: 55341},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1714, col: 66, offset: 55345},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1714, col: 73, offset: 55352},
							expr: &choiceExpr{
								pos: position{line: 1714, col: 75, offset: 55354},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2919, col: 12, offset: 92331},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2919, col: 13, offset: 92332},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2919, col: 13, offset: 92332},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 20, offset: 92339},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 29, offset: 92348},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2927, col: 8, offset: 92491},
										expr: &anyMatcher{
											line: 2927, col: 9, offset: 92492,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1714, col: 81, offset: 55360},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1753, col: 1, offset: 56533},
			expr: &actionExpr{
				pos: position{line: 1755, col: 5, offset: 56607},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 5, offset: 56607},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1755, col: 5, offset: 56607},
							expr: &seqExpr{
								pos: position{line: 1755, col: 7, offset: 56609},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2831, col: 13, offset: 90012},
										val:        "[\\pL\\pN]",
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
									&notExpr{
										pos: position{line: 1755, col: 16, offset: 56618},
										expr: &seqExpr{
											pos: position{line: 1755, col: 18, offset: 56620},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1755, col: 19, offset: 56621},
													val:        "[.)]",
													chars:      []rune{'.', ')'},
													ignoreCase: false,
													inverted:   false,
												},
												&actionExpr{
													pos: position{line: 2914, col: 11, offset: 92214},
													run: (*parser).callonShortcutParagraph9,
													expr: &oneOrMoreExpr{
														pos: position{line: 2914, col: 11, offset: 92214},
														expr: &charClassMatcher{
															pos:        position{line: 2914, col: 12, offset: 92215},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1756, col: 5, offset: 56761},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1756, col: 11, offset: 56767},
								expr: &actionExpr{
									pos: position{line: 1734, col: 5, offset: 56030},
									run: (*parser).callonShortcutParagraph14,
									expr: &seqExpr{
										pos: position{line: 1734, col: 5, offset: 56030},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1734, col: 5, offset: 56030},
												run: (*parser).callonShortcutParagraph16,
											},
											&labeledExpr{
												pos:   position{line: 1737, col: 5, offset: 56093},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1737, col: 12, offset: 56100},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1737, col: 12, offset: 56100},
															run: (*parser).callonShortcutParagraph19,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 12, offset: 56100},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56156},
															run: (*parser).callonShortcutParagraph21,
															expr: &litMatcher{
																pos:        position{line: 1739, col: 13, offset: 56156},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1741, col: 13, offset: 56214},
															run: (*parser).callonShortcutParagraph23,
															expr: &litMatcher{
																pos:        position{line: 1741, col: 13, offset: 56214},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1743, col: 13, offset: 56282},
															run: (*parser).callonShortcutParagraph25,
															expr: &litMatcher{
																pos:        position{line: 1743, col: 13, offset: 56282},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1745, col: 13, offset: 56346},
															run: (*parser).callonShortcutParagraph27,
															expr: &litMatcher{
																pos:        position{line: 1745, col: 13, offset: 56346},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1747, col: 13, offset: 56410},
															run: (*parser).callonShortcutParagraph29,
															expr: &andExpr{
																pos: position{line: 1747, col: 13, offset: 56410},
																expr: &actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonShortcutParagraph31,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1757, col: 5, offset: 56789},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1793, col: 5, offset: 57924},
								run: (*parser).callonShortcutParagraph35,
								expr: &seqExpr{
									pos: position{line: 1793, col: 5, offset: 57924},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1793, col: 5, offset: 57924},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2861, col: 14, offset: 90687},
												run: (*parser).callonShortcutParagraph38,
												expr: &oneOrMoreExpr{
													pos: position{line: 2861, col: 14, offset: 90687},
													expr: &charClassMatcher{
														pos:        position{line: 2861, col: 14, offset: 90687},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1794, col: 5, offset: 57948},
											run: (*parser).callonShortcutParagraph41,
										},
										&choiceExpr{
											pos: position{line: 2930, col: 8, offset: 92541},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonShortcutParagraph43,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1758, col: 5, offset: 56823},
							run: (*parser).callonShortcutParagraph50,
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 5, offset: 57185},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1765, col: 16, offset: 57196},
								expr: &actionExpr{
									pos: position{line: 1766, col: 9, offset: 57206},
									run: (*parser).callonShortcutParagraph53,
									expr: &seqExpr{
										pos: position{line: 1766, col: 9, offset: 57206},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1766, col: 9, offset: 57206},
												expr: &notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
											&notExpr{
												pos: position{line: 1767, col: 9, offset: 57220},
												expr: &actionExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													run: (*parser).callonShortcutParagraph59,
													expr: &seqExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 676, col: 14, offset: 21465},
																expr: &notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 676, col: 19, offset: 21470},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonShortcutParagraph65,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonShortcutParagraph68,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1768, col: 9, offset: 57239},
												expr: &ruleRefExpr{
													pos:  position{line: 1768, col: 10, offset: 57240},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1769, col: 9, offset: 57264},
												expr: &actionExpr{
													pos: position{line: 723, col: 5, offset: 23016},
													run: (*parser).callonShortcutParagraph78,
													expr: &seqExpr{
														pos: position{line: 723, col: 5, offset: 23016},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 723, col: 5, offset: 23016},
																expr: &charClassMatcher{
																	pos:        position{line: 2831, col: 13, offset: 90012},
																	val:        "[\\pL\\pN]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 724, col: 5, offset: 23046},
																label: "delimiter",
																expr: &choiceExpr{
																	pos: position{line: 725, col: 9, offset: 23066},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 739, col: 5, offset: 23558},
																			run: (*parser).callonShortcutParagraph84,
																			expr: &seqExpr{
																				pos: position{line: 739, col: 5, offset: 23558},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 739, col: 5, offset: 23558},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 739, col: 16, offset: 23569},
																							run: (*parser).callonShortcutParagraph87,
																							expr: &seqExpr{
																								pos: position{line: 739, col: 16, offset: 23569},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 739, col: 16, offset: 23569},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 739, col: 23, offset: 23576},
																										expr: &litMatcher{
																											pos:        position{line: 739, col: 23, offset: 23576},
																											val:        "/",
																											ignoreCase: false,
																											want:       "\"/\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 741, col: 8, offset: 23660},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph93,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph96,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 746, col: 5, offset: 23806},
																			run: (*parser).callonShortcutParagraph103,
																			expr: &seqExpr{
																				pos: position{line: 746, col: 5, offset: 23806},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 746, col: 5, offset: 23806},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 746, col: 16, offset: 23817},
																							run: (*parser).callonShortcutParagraph106,
																							expr: &seqExpr{
																								pos: position{line: 746, col: 16, offset: 23817},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 746, col: 16, offset: 23817},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 746, col: 23, offset: 23824},
																										expr: &litMatcher{
																											pos:        position{line: 746, col: 23, offset: 23824},
																											val:        "=",
																											ignoreCase: false,
																											want:       "\"=\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 748, col: 8, offset: 23908},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph112,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph115,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 759, col: 26, offset: 24294},
																			run: (*parser).callonShortcutParagraph122,
																			expr: &seqExpr{
																				pos: position{line: 759, col: 26, offset: 24294},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 759, col: 26, offset: 24294},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 759, col: 32, offset: 24300},
																						label: "language",
																						expr: &actionExpr{
																							pos: position{line: 763, col: 13, offset: 24430},
																							run: (*parser).callonShortcutParagraph126,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 763, col: 14, offset: 24431},
																								expr: &charClassMatcher{
																									pos:        position{line: 763, col: 14, offset: 24431},
																									val:        "[^\\r\\n` ]",
																									chars:      []rune{'\r', '\n', '`', ' '},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 759, col: 52, offset: 24320},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph130,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph133,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 753, col: 5, offset: 24053},
																			run: (*parser).callonShortcutParagraph140,
																			expr: &seqExpr{
																				pos: position{line: 753, col: 5, offset: 24053},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 753, col: 5, offset: 24053},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 753, col: 16, offset: 24064},
																							run: (*parser).callonShortcutParagraph143,
																							expr: &seqExpr{
																								pos: position{line: 753, col: 16, offset: 24064},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 753, col: 16, offset: 24064},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 753, col: 22, offset: 24070},
																										expr: &litMatcher{
																											pos:        position{line: 753, col: 22, offset: 24070},
																											val:        "`",
																											ignoreCase: false,
																											want:       "\"`\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 755, col: 8, offset: 24154},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph149,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph152,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 768, col: 5, offset: 24590},
																			run: (*parser).callonShortcutParagraph159,
																			expr: &seqExpr{
																				pos: position{line: 768, col: 5, offset: 24590},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 768, col: 5, offset: 24590},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 768, col: 16, offset: 24601},
																							run: (*parser).callonShortcutParagraph162,
																							expr: &seqExpr{
																								pos: position{line: 768, col: 16, offset: 24601},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 768, col: 16, offset: 24601},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 768, col: 23, offset: 24608},
																										expr: &litMatcher{
																											pos:        position{line: 768, col: 23, offset: 24608},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 770, col: 8, offset: 24692},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph168,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph171,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 782, col: 5, offset: 25066},
																			run: (*parser).callonShortcutParagraph178,
																			expr: &seqExpr{
																				pos: position{line: 782, col: 5, offset: 25066},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 782, col: 5, offset: 25066},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 782, col: 16, offset: 25077},
																							run: (*parser).callonShortcutParagraph181,
																							expr: &seqExpr{
																								pos: position{line: 782, col: 16, offset: 25077},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 782, col: 16, offset: 25077},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 782, col: 23, offset: 25084},
																										expr: &litMatcher{
																											pos:        position{line: 782, col: 23, offset: 25084},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 784, col: 8, offset: 25168},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph187,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph190,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 789, col: 5, offset: 25318},
																			run: (*parser).callonShortcutParagraph197,
																			expr: &seqExpr{
																				pos: position{line: 789, col: 5, offset: 25318},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 789, col: 5, offset: 25318},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 789, col: 16, offset: 25329},
																							run: (*parser).callonShortcutParagraph200,
																							expr: &seqExpr{
																								pos: position{line: 789, col: 16, offset: 25329},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 789, col: 16, offset: 25329},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 789, col: 23, offset: 25336},
																										expr: &litMatcher{
																											pos:        position{line: 789, col: 23, offset: 25336},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 791, col: 8, offset: 25420},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph206,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph209,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 796, col: 5, offset: 25568},
																			run: (*parser).callonShortcutParagraph216,
																			expr: &seqExpr{
																				pos: position{line: 796, col: 5, offset: 25568},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 796, col: 5, offset: 25568},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 796, col: 16, offset: 25579},
																							run: (*parser).callonShortcutParagraph219,
																							expr: &seqExpr{
																								pos: position{line: 796, col: 16, offset: 25579},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 796, col: 16, offset: 25579},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 796, col: 23, offset: 25586},
																										expr: &litMatcher{
																											pos:        position{line: 796, col: 23, offset: 25586},
																											val:        "_",
																											ignoreCase: false,
																											want:       "\"_\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 798, col: 8, offset: 25670},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph225,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph228,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 803, col: 5, offset: 25814},
																			run: (*parser).callonShortcutParagraph235,
																			expr: &seqExpr{
																				pos: position{line: 803, col: 5, offset: 25814},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 803, col: 5, offset: 25814},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 803, col: 16, offset: 25825},
																							run: (*parser).callonShortcutParagraph238,
																							expr: &seqExpr{
																								pos: position{line: 803, col: 16, offset: 25825},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 803, col: 16, offset: 25825},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 803, col: 23, offset: 25832},
																										expr: &litMatcher{
																											pos:        position{line: 803, col: 23, offset: 25832},
																											val:        "*",
																											ignoreCase: false,
																											want:       "\"*\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 805, col: 8, offset: 25916},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonShortcutParagraph244,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonShortcutParagraph247,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1770, col: 9, offset: 57288},
												expr: &seqExpr{
													pos: position{line: 1545, col: 27, offset: 49929},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1545, col: 27, offset: 49929},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1545, col: 31, offset: 49933},
															expr: &actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonShortcutParagraph258,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonShortcutParagraph260,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1771, col: 9, offset: 57320},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1771, col: 15, offset: 57326},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2562, col: 22, offset: 82365},
															run: (*parser).callonShortcutParagraph267,
															expr: &seqExpr{
																pos: position{line: 2562, col: 22, offset: 82365},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2567, col: 31, offset: 82586},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2567, col: 36, offset: 82591},
																		expr: &litMatcher{
																			pos:        position{line: 2567, col: 37, offset: 82592},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2562, col: 49, offset: 82392},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2857, col: 13, offset: 90620},
																			run: (*parser).callonShortcutParagraph273,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2857, col: 13, offset: 90620},
																				expr: &charClassMatcher{
																					pos:        position{line: 2857, col: 13, offset: 90620},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonShortcutParagraph277,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1793, col: 5, offset: 57924},
															run: (*parser).callonShortcutParagraph284,
															expr: &seqExpr{
																pos: position{line: 1793, col: 5, offset: 57924},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1793, col: 5, offset: 57924},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2861, col: 14, offset: 90687},
																			run: (*parser).callonShortcutParagraph287,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2861, col: 14, offset: 90687},
																				expr: &charClassMatcher{
																					pos:        position{line: 2861, col: 14, offset: 90687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1794, col: 5, offset: 57948},
																		run: (*parser).callonShortcutParagraph290,
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonShortcutParagraph292,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1778, col: 1, offset: 57530},
			expr: &actionExpr{
				pos: position{line: 1779, col: 5, offset: 57548},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1779, col: 5, offset: 57548},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1779, col: 5, offset: 57548},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1779, col: 11, offset: 57554},
								expr: &actionExpr{
									pos: position{line: 1734, col: 5, offset: 56030},
									run: (*parser).callonParagraph5,
									expr: &seqExpr{
										pos: position{line: 1734, col: 5, offset: 56030},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1734, col: 5, offset: 56030},
												run: (*parser).callonParagraph7,
											},
											&labeledExpr{
												pos:   position{line: 1737, col: 5, offset: 56093},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1737, col: 12, offset: 56100},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1737, col: 12, offset: 56100},
															run: (*parser).callonParagraph10,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 12, offset: 56100},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56156},
															run: (*parser).callonParagraph12,
															expr: &litMatcher{
																pos:        position{line: 1739, col: 13, offset: 56156},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1741, col: 13, offset: 56214},
															run: (*parser).callonParagraph14,
															expr: &litMatcher{
																pos:        position{line: 1741, col: 13, offset: 56214},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1743, col: 13, offset: 56282},
															run: (*parser).callonParagraph16,
															expr: &litMatcher{
																pos:        position{line: 1743, col: 13, offset: 56282},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1745, col: 13, offset: 56346},
															run: (*parser).callonParagraph18,
															expr: &litMatcher{
																pos:        position{line: 1745, col: 13, offset: 56346},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1747, col: 13, offset: 56410},
															run: (*parser).callonParagraph20,
															expr: &andExpr{
																pos: position{line: 1747, col: 13, offset: 56410},
																expr: &actionExpr{
																	pos: position{line: 2914, col: 11, offset: 92214},
																	run: (*parser).callonParagraph22,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2914, col: 11, offset: 92214},
																		expr: &charClassMatcher{
																			pos:        position{line: 2914, col: 12, offset: 92215},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1780, col: 5, offset: 57577},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1793, col: 5, offset: 57924},
								run: (*parser).callonParagraph26,
								expr: &seqExpr{
									pos: position{line: 1793, col: 5, offset: 57924},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1793, col: 5, offset: 57924},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2861, col: 14, offset: 90687},
												run: (*parser).callonParagraph29,
												expr: &oneOrMoreExpr{
													pos: position{line: 2861, col: 14, offset: 90687},
													expr: &charClassMatcher{
														pos:        position{line: 2861, col: 14, offset: 90687},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1794, col: 5, offset: 57948},
											run: (*parser).callonParagraph32,
										},
										&choiceExpr{
											pos: position{line: 2930, col: 8, offset: 92541},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonParagraph34,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1781, col: 5, offset: 57611},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1781, col: 16, offset: 57622},
								expr: &actionExpr{
									pos: position{line: 1782, col: 9, offset: 57632},
									run: (*parser).callonParagraph43,
									expr: &seqExpr{
										pos: position{line: 1782, col: 9, offset: 57632},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1782, col: 9, offset: 57632},
												expr: &notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
											&notExpr{
												pos: position{line: 1783, col: 9, offset: 57645},
												expr: &actionExpr{
													pos: position{line: 676, col: 14, offset: 21465},
													run: (*parser).callonParagraph49,
													expr: &seqExpr{
														pos: position{line: 676, col: 14, offset: 21465},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 676, col: 14, offset: 21465},
																expr: &notExpr{
																	pos: position{line: 2927, col: 8, offset: 92491},
																	expr: &anyMatcher{
																		line: 2927, col: 9, offset: 92492,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 676, col: 19, offset: 21470},
																expr: &actionExpr{
																	pos: position{line: 2910, col: 10, offset: 92147},
																	run: (*parser).callonParagraph55,
																	expr: &charClassMatcher{
																		pos:        position{line: 2910, col: 11, offset: 92148},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonParagraph58,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1784, col: 9, offset: 57664},
												expr: &ruleRefExpr{
													pos:  position{line: 1784, col: 10, offset: 57665},
													name: "BlockAttributes",
												},
											},
											&labeledExpr{
												pos:   position{line: 1785, col: 9, offset: 57689},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1785, col: 15, offset: 57695},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2562, col: 22, offset: 82365},
															run: (*parser).callonParagraph69,
															expr: &seqExpr{
																pos: position{line: 2562, col: 22, offset: 82365},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2567, col: 31, offset: 82586},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2567, col: 36, offset: 82591},
																		expr: &litMatcher{
																			pos:        position{line: 2567, col: 37, offset: 82592},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2562, col: 49, offset: 82392},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2857, col: 13, offset: 90620},
																			run: (*parser).callonParagraph75,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2857, col: 13, offset: 90620},
																				expr: &charClassMatcher{
																					pos:        position{line: 2857, col: 13, offset: 90620},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonParagraph79,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1793, col: 5, offset: 57924},
															run: (*parser).callonParagraph86,
															expr: &seqExpr{
																pos: position{line: 1793, col: 5, offset: 57924},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1793, col: 5, offset: 57924},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2861, col: 14, offset: 90687},
																			run: (*parser).callonParagraph89,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2861, col: 14, offset: 90687},
																				expr: &charClassMatcher{
																					pos:        position{line: 2861, col: 14, offset: 90687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1794, col: 5, offset: 57948},
																		run: (*parser).callonParagraph92,
																	},
																	&choiceExpr{
																		pos: position{line: 2930, col: 8, offset: 92541},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonParagraph94,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2927, col: 8, offset: 92491},
																				expr: &anyMatcher{
																					line: 2927, col: 9, offset: 92492,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1804, col: 1, offset: 58434},
			expr: &choiceExpr{
				pos: position{line: 1804, col: 15, offset: 58448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1804, col: 15, offset: 58448},
						name: "EscapedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1804, col: 35, offset: 58468},
						name: "UnescapedQuotedText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1806, col: 1, offset: 58489},
			expr: &actionExpr{
				pos: position{line: 1807, col: 5, offset: 58514},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 5, offset: 58514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 5, offset: 58514},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1807, col: 16, offset: 58525},
								expr: &actionExpr{
									pos: position{line: 1807, col: 17, offset: 58526},
									run: (*parser).callonEscapedQuotedText5,
									expr: &ruleRefExpr{
										pos:  position{line: 1807, col: 17, offset: 58526},
										name: "LongHandAttributes",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1810, col: 5, offset: 58594},
							expr: &litMatcher{
								pos:        position{line: 1810, col: 7, offset: 58596},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1811, col: 5, offset: 58605},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1812, col: 9, offset: 58623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1812, col: 9, offset: 58623},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1813, col: 11, offset: 58650},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1814, col: 11, offset: 58678},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1815, col: 11, offset: 58709},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1816, col: 11, offset: 58737},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1817, col: 11, offset: 58768},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnescapedQuotedText",
			pos:  position{line: 1822, col: 1, offset: 58888},
			expr: &actionExpr{
				pos: position{line: 1823, col: 5, offset: 58930},
				run: (*parser).callonUnescapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 5, offset: 58930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1823, col: 5, offset: 58930},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 16, offset: 58941},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 17, offset: 58942},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 5, offset: 58967},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1824, col: 14, offset: 58976},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1824, col: 14, offset: 58976},
										name: "DoubleQuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1824, col: 33, offset: 58995},
										name: "SingleQuotedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedText",
			pos:  position{line: 1832, col: 1, offset: 59226},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 5, offset: 59251},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1833, col: 5, offset: 59251},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 7, offset: 59278},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 7, offset: 59306},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 7, offset: 59338},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 7, offset: 59366},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 7, offset: 59387},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "DoubleQuotedText",
			pos:  position{line: 1840, col: 1, offset: 59405},
			expr: &choiceExpr{
				pos: position{line: 1841, col: 5, offset: 59430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1841, col: 5, offset: 59430},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1842, col: 7, offset: 59456},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1843, col: 7, offset: 59484},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1844, col: 7, offset: 59515},
						name: "DoubleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1878, col: 1, offset: 60393},
			expr: &actionExpr{
				pos: position{line: 1879, col: 5, offset: 60421},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 5, offset: 60421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1874, col: 38, offset: 60346},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1880, col: 5, offset: 60460},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1880, col: 15, offset: 60470},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1876, col: 36, offset: 60387},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1885, col: 1, offset: 60630},
			expr: &oneOrMoreExpr{
				pos: position{line: 1885, col: 32, offset: 60661},
				expr: &ruleRefExpr{
					pos:  position{line: 1885, col: 32, offset: 60661},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1887, col: 1, offset: 60692},
			expr: &actionExpr{
				pos: position{line: 1888, col: 5, offset: 60727},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 5, offset: 60727},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1888, col: 5, offset: 60727},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 1889, col: 5, offset: 60736},
							expr: &litMatcher{
								pos:        position{line: 1876, col: 36, offset: 60387},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 5, offset: 60773},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1891, col: 9, offset: 60791},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1865, col: 5, offset: 60047},
										run: (*parser).callonDoubleQuoteBoldTextElement10,
										expr: &seqExpr{
											pos: position{line: 1865, col: 5, offset: 60047},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1865, col: 6, offset: 60048},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1866, col: 5, offset: 60093},
													expr: &charClassMatcher{
														pos:        position{line: 1866, col: 6, offset: 60094},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1867, col: 5, offset: 60113},
													expr: &choiceExpr{
														pos: position{line: 1867, col: 7, offset: 60115},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonDoubleQuoteBoldTextElement17,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1862, col: 22, offset: 60021},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonDoubleQuoteBoldTextElement20,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonDoubleQuoteBoldTextElement23,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonDoubleQuoteBoldTextElement25,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonDoubleQuoteBoldTextElement31,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonDoubleQuoteBoldTextElement36,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonDoubleQuoteBoldTextElement38,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonDoubleQuoteBoldTextElement41,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteBoldTextElement45,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteBoldTextElement52,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteBoldTextElement57,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteBoldTextElement59,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonDoubleQuoteBoldTextElement63,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteBoldTextElement67,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteBoldTextElement74,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteBoldTextElement79,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteBoldTextElement81,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonDoubleQuoteBoldTextElement85,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteBoldTextElement89,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonDoubleQuoteBoldTextElement95,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteBoldTextElement99,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1895, col: 11, offset: 60951},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonDoubleQuoteBoldTextElement106,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonDoubleQuoteBoldTextElement108,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonDoubleQuoteBoldTextElement111,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonDoubleQuoteBoldTextElement115,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonDoubleQuoteBoldTextElement117,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonDoubleQuoteBoldTextElement119,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonDoubleQuoteBoldTextElement121,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonDoubleQuoteBoldTextElement123,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonDoubleQuoteBoldTextElement125,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonDoubleQuoteBoldTextElement127,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonDoubleQuoteBoldTextElement129,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonDoubleQuoteBoldTextElement131,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonDoubleQuoteBoldTextElement133,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonDoubleQuoteBoldTextElement136,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDoubleQuoteBoldTextElement138,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDoubleQuoteBoldTextElement142,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonDoubleQuoteBoldTextElement149,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonDoubleQuoteBoldTextElement152,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDoubleQuoteBoldTextElement156,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonDoubleQuoteBoldTextElement163,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonDoubleQuoteBoldTextElement165,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonDoubleQuoteBoldTextElement167,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonDoubleQuoteBoldTextElement169,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonDoubleQuoteBoldTextElement171,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonDoubleQuoteBoldTextElement173,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonDoubleQuoteBoldTextElement175,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonDoubleQuoteBoldTextElement177,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonDoubleQuoteBoldTextElement179,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonDoubleQuoteBoldTextElement181,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonDoubleQuoteBoldTextElement183,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonDoubleQuoteBoldTextElement185,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonDoubleQuoteBoldTextElement188,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDoubleQuoteBoldTextElement190,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDoubleQuoteBoldTextElement194,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonDoubleQuoteBoldTextElement201,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonDoubleQuoteBoldTextElement204,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDoubleQuoteBoldTextElement208,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonDoubleQuoteBoldTextElement215,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonDoubleQuoteBoldTextElement217,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonDoubleQuoteBoldTextElement219,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonDoubleQuoteBoldTextElement221,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonDoubleQuoteBoldTextElement223,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonDoubleQuoteBoldTextElement228,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonDoubleQuoteBoldTextElement230,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonDoubleQuoteBoldTextElement234,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonDoubleQuoteBoldTextElement236,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonDoubleQuoteBoldTextElement239,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonDoubleQuoteBoldTextElement241,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteBoldTextElement245,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDoubleQuoteBoldTextElement249,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonDoubleQuoteBoldTextElement255,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonDoubleQuoteBoldTextElement260,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteBoldTextElement264,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonDoubleQuoteBoldTextElement270,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteBoldTextElement274,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonDoubleQuoteBoldTextElement280,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonDoubleQuoteBoldTextElement283,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteBoldTextElement287,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonDoubleQuoteBoldTextElement291,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 61072},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonDoubleQuoteBoldTextElement294,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonDoubleQuoteBoldTextElement298,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonDoubleQuoteBoldTextElement302,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1926, col: 1, offset: 61779},
			expr: &actionExpr{
				pos: position{line: 1927, col: 5, offset: 61807},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1927, col: 5, offset: 61807},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1910, col: 5, offset: 61351},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andCodeExpr{
							pos: position{line: 1911, col: 5, offset: 61360},
							run: (*parser).callonSingleQuoteBoldText4,
						},
						&andExpr{
							pos: position{line: 1915, col: 5, offset: 61478},
							expr: &notExpr{
								pos: position{line: 1915, col: 7, offset: 61480},
								expr: &litMatcher{
									pos:        position{line: 1915, col: 8, offset: 61481},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1928, col: 5, offset: 61845},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1928, col: 15, offset: 61855},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1918, col: 5, offset: 61584},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 1919, col: 5, offset: 61593},
							expr: &litMatcher{
								pos:        position{line: 1919, col: 6, offset: 61594},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 1920, col: 5, offset: 61656},
							run: (*parser).callonSingleQuoteBoldText13,
						},
						&andExpr{
							pos: position{line: 1924, col: 5, offset: 61765},
							expr: &notExpr{
								pos: position{line: 1924, col: 7, offset: 61767},
								expr: &charClassMatcher{
									pos:        position{line: 2831, col: 13, offset: 90012},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1933, col: 1, offset: 62015},
			expr: &actionExpr{
				pos: position{line: 1934, col: 5, offset: 62052},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1934, col: 5, offset: 62052},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1934, col: 5, offset: 62052},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonSingleQuoteBoldTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 5, offset: 62091},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1935, col: 14, offset: 62100},
								expr: &ruleRefExpr{
									pos:  position{line: 1935, col: 15, offset: 62101},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1936, col: 5, offset: 62135},
							run: (*parser).callonSingleQuoteBoldTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1942, col: 1, offset: 62276},
			expr: &actionExpr{
				pos: position{line: 1943, col: 5, offset: 62311},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 5, offset: 62311},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1943, col: 5, offset: 62311},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 1944, col: 5, offset: 62337},
							expr: &seqExpr{
								pos: position{line: 1918, col: 5, offset: 61584},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1918, col: 5, offset: 61584},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 1919, col: 5, offset: 61593},
										expr: &litMatcher{
											pos:        position{line: 1919, col: 6, offset: 61594},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 1920, col: 5, offset: 61656},
										run: (*parser).callonSingleQuoteBoldTextElement11,
									},
									&andExpr{
										pos: position{line: 1924, col: 5, offset: 61765},
										expr: &notExpr{
											pos: position{line: 1924, col: 7, offset: 61767},
											expr: &charClassMatcher{
												pos:        position{line: 2831, col: 13, offset: 90012},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1945, col: 5, offset: 62374},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1946, col: 9, offset: 62464},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1865, col: 5, offset: 60047},
										run: (*parser).callonSingleQuoteBoldTextElement17,
										expr: &seqExpr{
											pos: position{line: 1865, col: 5, offset: 60047},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1865, col: 6, offset: 60048},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1866, col: 5, offset: 60093},
													expr: &charClassMatcher{
														pos:        position{line: 1866, col: 6, offset: 60094},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1867, col: 5, offset: 60113},
													expr: &choiceExpr{
														pos: position{line: 1867, col: 7, offset: 60115},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonSingleQuoteBoldTextElement24,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1862, col: 22, offset: 60021},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonSingleQuoteBoldTextElement27,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonSingleQuoteBoldTextElement30,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonSingleQuoteBoldTextElement32,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonSingleQuoteBoldTextElement38,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1949, col: 11, offset: 62562},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonSingleQuoteBoldTextElement44,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonSingleQuoteBoldTextElement46,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonSingleQuoteBoldTextElement49,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteBoldTextElement53,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteBoldTextElement60,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteBoldTextElement65,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteBoldTextElement67,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonSingleQuoteBoldTextElement71,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteBoldTextElement75,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteBoldTextElement82,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteBoldTextElement87,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteBoldTextElement89,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonSingleQuoteBoldTextElement93,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteBoldTextElement97,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonSingleQuoteBoldTextElement103,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteBoldTextElement107,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonSingleQuoteBoldTextElement113,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonSingleQuoteBoldTextElement115,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonSingleQuoteBoldTextElement118,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonSingleQuoteBoldTextElement122,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonSingleQuoteBoldTextElement124,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonSingleQuoteBoldTextElement126,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonSingleQuoteBoldTextElement128,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonSingleQuoteBoldTextElement130,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonSingleQuoteBoldTextElement132,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonSingleQuoteBoldTextElement134,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonSingleQuoteBoldTextElement136,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonSingleQuoteBoldTextElement138,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonSingleQuoteBoldTextElement140,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonSingleQuoteBoldTextElement143,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonSingleQuoteBoldTextElement145,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonSingleQuoteBoldTextElement149,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonSingleQuoteBoldTextElement156,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonSingleQuoteBoldTextElement159,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonSingleQuoteBoldTextElement163,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonSingleQuoteBoldTextElement170,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonSingleQuoteBoldTextElement172,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonSingleQuoteBoldTextElement174,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonSingleQuoteBoldTextElement176,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonSingleQuoteBoldTextElement178,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonSingleQuoteBoldTextElement180,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonSingleQuoteBoldTextElement182,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonSingleQuoteBoldTextElement184,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonSingleQuoteBoldTextElement186,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonSingleQuoteBoldTextElement188,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonSingleQuoteBoldTextElement190,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonSingleQuoteBoldTextElement192,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonSingleQuoteBoldTextElement195,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonSingleQuoteBoldTextElement197,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonSingleQuoteBoldTextElement201,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonSingleQuoteBoldTextElement208,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonSingleQuoteBoldTextElement211,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonSingleQuoteBoldTextElement215,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonSingleQuoteBoldTextElement222,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonSingleQuoteBoldTextElement224,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonSingleQuoteBoldTextElement226,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonSingleQuoteBoldTextElement228,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonSingleQuoteBoldTextElement230,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonSingleQuoteBoldTextElement235,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonSingleQuoteBoldTextElement237,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonSingleQuoteBoldTextElement241,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonSingleQuoteBoldTextElement243,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonSingleQuoteBoldTextElement246,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonSingleQuoteBoldTextElement248,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteBoldTextElement252,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonSingleQuoteBoldTextElement256,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonSingleQuoteBoldTextElement262,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonSingleQuoteBoldTextElement267,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteBoldTextElement271,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonSingleQuoteBoldTextElement277,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteBoldTextElement281,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonSingleQuoteBoldTextElement287,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonSingleQuoteBoldTextElement290,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteBoldTextElement294,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonSingleQuoteBoldTextElement298,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1953, col: 11, offset: 62712},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonSingleQuoteBoldTextElement301,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonSingleQuoteBoldTextElement305,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonSingleQuoteBoldTextElement309,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1961, col: 1, offset: 62845},
			expr: &choiceExpr{
				pos: position{line: 1963, col: 5, offset: 62906},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1963, col: 5, offset: 62906},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1963, col: 5, offset: 62906},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1963, col: 5, offset: 62906},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1854, col: 25, offset: 59815},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1854, col: 25, offset: 59815},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1854, col: 25, offset: 59815},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1854, col: 30, offset: 59820},
													expr: &litMatcher{
														pos:        position{line: 1854, col: 30, offset: 59820},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1963, col: 40, offset: 62941},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1963, col: 45, offset: 62946},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1963, col: 55, offset: 62956},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1963, col: 84, offset: 62985},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1967, col: 7, offset: 63149},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1967, col: 7, offset: 63149},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1967, col: 7, offset: 63149},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1967, col: 42, offset: 63184},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1967, col: 47, offset: 63189},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1967, col: 57, offset: 63199},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1967, col: 86, offset: 63228},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1972, col: 7, offset: 63430},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1972, col: 7, offset: 63430},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1972, col: 7, offset: 63430},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1972, col: 42, offset: 63465},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1972, col: 46, offset: 63469},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1972, col: 56, offset: 63479},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1972, col: 85, offset: 63508},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1996, col: 1, offset: 64171},
			expr: &actionExpr{
				pos: position{line: 1997, col: 5, offset: 64201},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1997, col: 5, offset: 64201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1992, col: 40, offset: 64122},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1998, col: 5, offset: 64242},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 15, offset: 64252},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1994, col: 38, offset: 64165},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 2003, col: 1, offset: 64417},
			expr: &oneOrMoreExpr{
				pos: position{line: 2003, col: 34, offset: 64450},
				expr: &ruleRefExpr{
					pos:  position{line: 2003, col: 34, offset: 64450},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 2005, col: 1, offset: 64482},
			expr: &actionExpr{
				pos: position{line: 2006, col: 5, offset: 64519},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2006, col: 5, offset: 64519},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2006, col: 5, offset: 64519},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2007, col: 5, offset: 64528},
							expr: &litMatcher{
								pos:        position{line: 1994, col: 38, offset: 64165},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2008, col: 5, offset: 64567},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2009, col: 9, offset: 64585},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1983, col: 5, offset: 63813},
										run: (*parser).callonDoubleQuoteItalicTextElement10,
										expr: &seqExpr{
											pos: position{line: 1983, col: 5, offset: 63813},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1983, col: 6, offset: 63814},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1984, col: 5, offset: 63859},
													expr: &charClassMatcher{
														pos:        position{line: 1984, col: 6, offset: 63860},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1985, col: 5, offset: 63879},
													expr: &choiceExpr{
														pos: position{line: 1985, col: 7, offset: 63881},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonDoubleQuoteItalicTextElement17,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1980, col: 24, offset: 63785},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonDoubleQuoteItalicTextElement20,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonDoubleQuoteItalicTextElement23,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonDoubleQuoteItalicTextElement25,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonDoubleQuoteItalicTextElement31,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonDoubleQuoteItalicTextElement36,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonDoubleQuoteItalicTextElement38,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonDoubleQuoteItalicTextElement41,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteItalicTextElement45,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteItalicTextElement52,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteItalicTextElement57,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteItalicTextElement59,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonDoubleQuoteItalicTextElement63,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteItalicTextElement67,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteItalicTextElement74,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteItalicTextElement79,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteItalicTextElement81,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonDoubleQuoteItalicTextElement85,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteItalicTextElement89,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonDoubleQuoteItalicTextElement95,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteItalicTextElement99,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2013, col: 11, offset: 64747},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonDoubleQuoteItalicTextElement106,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonDoubleQuoteItalicTextElement108,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonDoubleQuoteItalicTextElement111,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonDoubleQuoteItalicTextElement115,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonDoubleQuoteItalicTextElement117,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonDoubleQuoteItalicTextElement119,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonDoubleQuoteItalicTextElement121,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonDoubleQuoteItalicTextElement123,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonDoubleQuoteItalicTextElement125,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonDoubleQuoteItalicTextElement127,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonDoubleQuoteItalicTextElement129,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonDoubleQuoteItalicTextElement131,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonDoubleQuoteItalicTextElement133,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonDoubleQuoteItalicTextElement136,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDoubleQuoteItalicTextElement138,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDoubleQuoteItalicTextElement142,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonDoubleQuoteItalicTextElement149,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonDoubleQuoteItalicTextElement152,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDoubleQuoteItalicTextElement156,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonDoubleQuoteItalicTextElement163,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonDoubleQuoteItalicTextElement165,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonDoubleQuoteItalicTextElement167,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonDoubleQuoteItalicTextElement169,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonDoubleQuoteItalicTextElement171,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonDoubleQuoteItalicTextElement173,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonDoubleQuoteItalicTextElement175,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonDoubleQuoteItalicTextElement177,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonDoubleQuoteItalicTextElement179,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonDoubleQuoteItalicTextElement181,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonDoubleQuoteItalicTextElement183,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonDoubleQuoteItalicTextElement185,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonDoubleQuoteItalicTextElement188,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDoubleQuoteItalicTextElement190,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDoubleQuoteItalicTextElement194,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonDoubleQuoteItalicTextElement201,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonDoubleQuoteItalicTextElement204,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDoubleQuoteItalicTextElement208,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonDoubleQuoteItalicTextElement215,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonDoubleQuoteItalicTextElement217,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonDoubleQuoteItalicTextElement219,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonDoubleQuoteItalicTextElement221,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonDoubleQuoteItalicTextElement223,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonDoubleQuoteItalicTextElement228,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonDoubleQuoteItalicTextElement230,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonDoubleQuoteItalicTextElement234,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonDoubleQuoteItalicTextElement236,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonDoubleQuoteItalicTextElement239,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonDoubleQuoteItalicTextElement241,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteItalicTextElement245,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDoubleQuoteItalicTextElement249,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonDoubleQuoteItalicTextElement255,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonDoubleQuoteItalicTextElement260,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteItalicTextElement264,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonDoubleQuoteItalicTextElement270,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteItalicTextElement274,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonDoubleQuoteItalicTextElement280,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonDoubleQuoteItalicTextElement283,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteItalicTextElement287,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonDoubleQuoteItalicTextElement291,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2016, col: 11, offset: 64868},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonDoubleQuoteItalicTextElement294,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonDoubleQuoteItalicTextElement298,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonDoubleQuoteItalicTextElement302,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 2045, col: 1, offset: 65596},
			expr: &actionExpr{
				pos: position{line: 2046, col: 5, offset: 65626},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2046, col: 5, offset: 65626},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2028, col: 5, offset: 65155},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andCodeExpr{
							pos: position{line: 2029, col: 5, offset: 65164},
							run: (*parser).callonSingleQuoteItalicText4,
						},
						&andExpr{
							pos: position{line: 2033, col: 5, offset: 65284},
							expr: &notExpr{
								pos: position{line: 2033, col: 7, offset: 65286},
								expr: &litMatcher{
									pos:        position{line: 2033, col: 8, offset: 65287},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2047, col: 5, offset: 65666},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2047, col: 15, offset: 65676},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2037, col: 5, offset: 65397},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 2038, col: 5, offset: 65406},
							expr: &litMatcher{
								pos:        position{line: 2038, col: 6, offset: 65407},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 2039, col: 5, offset: 65471},
							run: (*parser).callonSingleQuoteItalicText13,
						},
						&andExpr{
							pos: position{line: 2043, col: 5, offset: 65582},
							expr: &notExpr{
								pos: position{line: 2043, col: 7, offset: 65584},
								expr: &charClassMatcher{
									pos:        position{line: 2831, col: 13, offset: 90012},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 2052, col: 1, offset: 65843},
			expr: &actionExpr{
				pos: position{line: 2053, col: 5, offset: 65881},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 2053, col: 5, offset: 65881},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2053, col: 5, offset: 65881},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonSingleQuoteItalicTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2054, col: 5, offset: 65920},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2054, col: 14, offset: 65929},
								expr: &ruleRefExpr{
									pos:  position{line: 2054, col: 15, offset: 65930},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2055, col: 5, offset: 65965},
							run: (*parser).callonSingleQuoteItalicTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2061, col: 1, offset: 66106},
			expr: &actionExpr{
				pos: position{line: 2062, col: 5, offset: 66143},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2062, col: 5, offset: 66143},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2062, col: 5, offset: 66143},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2063, col: 5, offset: 66152},
							expr: &seqExpr{
								pos: position{line: 2037, col: 5, offset: 65397},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2037, col: 5, offset: 65397},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 2038, col: 5, offset: 65406},
										expr: &litMatcher{
											pos:        position{line: 2038, col: 6, offset: 65407},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 2039, col: 5, offset: 65471},
										run: (*parser).callonSingleQuoteItalicTextElement11,
									},
									&andExpr{
										pos: position{line: 2043, col: 5, offset: 65582},
										expr: &notExpr{
											pos: position{line: 2043, col: 7, offset: 65584},
											expr: &charClassMatcher{
												pos:        position{line: 2831, col: 13, offset: 90012},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2064, col: 5, offset: 66191},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2065, col: 9, offset: 66209},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1983, col: 5, offset: 63813},
										run: (*parser).callonSingleQuoteItalicTextElement17,
										expr: &seqExpr{
											pos: position{line: 1983, col: 5, offset: 63813},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1983, col: 6, offset: 63814},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1984, col: 5, offset: 63859},
													expr: &charClassMatcher{
														pos:        position{line: 1984, col: 6, offset: 63860},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1985, col: 5, offset: 63879},
													expr: &choiceExpr{
														pos: position{line: 1985, col: 7, offset: 63881},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonSingleQuoteItalicTextElement24,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1980, col: 24, offset: 63785},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonSingleQuoteItalicTextElement27,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonSingleQuoteItalicTextElement30,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonSingleQuoteItalicTextElement32,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonSingleQuoteItalicTextElement38,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonSingleQuoteItalicTextElement43,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonSingleQuoteItalicTextElement45,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonSingleQuoteItalicTextElement48,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteItalicTextElement52,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteItalicTextElement59,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteItalicTextElement64,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteItalicTextElement66,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonSingleQuoteItalicTextElement70,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteItalicTextElement74,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteItalicTextElement81,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteItalicTextElement86,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteItalicTextElement88,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonSingleQuoteItalicTextElement92,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteItalicTextElement96,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonSingleQuoteItalicTextElement102,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteItalicTextElement106,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2069, col: 11, offset: 66377},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonSingleQuoteItalicTextElement113,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonSingleQuoteItalicTextElement115,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonSingleQuoteItalicTextElement118,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonSingleQuoteItalicTextElement122,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonSingleQuoteItalicTextElement124,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonSingleQuoteItalicTextElement126,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonSingleQuoteItalicTextElement128,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonSingleQuoteItalicTextElement130,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonSingleQuoteItalicTextElement132,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonSingleQuoteItalicTextElement134,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonSingleQuoteItalicTextElement136,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonSingleQuoteItalicTextElement138,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonSingleQuoteItalicTextElement140,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonSingleQuoteItalicTextElement143,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonSingleQuoteItalicTextElement145,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonSingleQuoteItalicTextElement149,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonSingleQuoteItalicTextElement156,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonSingleQuoteItalicTextElement159,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonSingleQuoteItalicTextElement163,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonSingleQuoteItalicTextElement170,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonSingleQuoteItalicTextElement172,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonSingleQuoteItalicTextElement174,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonSingleQuoteItalicTextElement176,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonSingleQuoteItalicTextElement178,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonSingleQuoteItalicTextElement180,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonSingleQuoteItalicTextElement182,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonSingleQuoteItalicTextElement184,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonSingleQuoteItalicTextElement186,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonSingleQuoteItalicTextElement188,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonSingleQuoteItalicTextElement190,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonSingleQuoteItalicTextElement192,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonSingleQuoteItalicTextElement195,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonSingleQuoteItalicTextElement197,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonSingleQuoteItalicTextElement201,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonSingleQuoteItalicTextElement208,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonSingleQuoteItalicTextElement211,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonSingleQuoteItalicTextElement215,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonSingleQuoteItalicTextElement222,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonSingleQuoteItalicTextElement224,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonSingleQuoteItalicTextElement226,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonSingleQuoteItalicTextElement228,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonSingleQuoteItalicTextElement230,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonSingleQuoteItalicTextElement235,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonSingleQuoteItalicTextElement237,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonSingleQuoteItalicTextElement241,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonSingleQuoteItalicTextElement243,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonSingleQuoteItalicTextElement246,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonSingleQuoteItalicTextElement248,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteItalicTextElement252,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonSingleQuoteItalicTextElement256,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonSingleQuoteItalicTextElement262,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonSingleQuoteItalicTextElement267,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteItalicTextElement271,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonSingleQuoteItalicTextElement277,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteItalicTextElement281,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonSingleQuoteItalicTextElement287,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonSingleQuoteItalicTextElement290,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteItalicTextElement294,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonSingleQuoteItalicTextElement298,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2072, col: 11, offset: 66499},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonSingleQuoteItalicTextElement301,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonSingleQuoteItalicTextElement305,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonSingleQuoteItalicTextElement309,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2080, col: 1, offset: 66632},
			expr: &choiceExpr{
				pos: position{line: 2082, col: 5, offset: 66697},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2082, col: 5, offset: 66697},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2082, col: 5, offset: 66697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2082, col: 5, offset: 66697},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1854, col: 25, offset: 59815},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1854, col: 25, offset: 59815},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1854, col: 25, offset: 59815},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1854, col: 30, offset: 59820},
													expr: &litMatcher{
														pos:        position{line: 1854, col: 30, offset: 59820},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2082, col: 40, offset: 66732},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2082, col: 45, offset: 66737},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2082, col: 55, offset: 66747},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2082, col: 86, offset: 66778},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2086, col: 7, offset: 66943},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2086, col: 7, offset: 66943},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2086, col: 7, offset: 66943},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2086, col: 42, offset: 66978},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2086, col: 47, offset: 66983},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2086, col: 57, offset: 66993},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2086, col: 88, offset: 67024},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2091, col: 7, offset: 67265},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2091, col: 7, offset: 67265},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2091, col: 7, offset: 67265},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2091, col: 42, offset: 67300},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 46, offset: 67304},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2091, col: 56, offset: 67314},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2091, col: 87, offset: 67345},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2115, col: 1, offset: 68098},
			expr: &actionExpr{
				pos: position{line: 2116, col: 5, offset: 68131},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2116, col: 5, offset: 68131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2111, col: 43, offset: 68046},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2117, col: 5, offset: 68175},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2117, col: 15, offset: 68185},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2113, col: 41, offset: 68092},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2122, col: 1, offset: 68360},
			expr: &oneOrMoreExpr{
				pos: position{line: 2122, col: 37, offset: 68396},
				expr: &ruleRefExpr{
					pos:  position{line: 2122, col: 37, offset: 68396},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2124, col: 1, offset: 68463},
			expr: &actionExpr{
				pos: position{line: 2125, col: 5, offset: 68503},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2125, col: 5, offset: 68503},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2125, col: 5, offset: 68503},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2126, col: 5, offset: 68512},
							expr: &litMatcher{
								pos:        position{line: 2113, col: 41, offset: 68092},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2127, col: 5, offset: 68554},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2128, col: 9, offset: 68572},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2102, col: 5, offset: 67722},
										run: (*parser).callonDoubleQuoteMonospaceTextElement10,
										expr: &seqExpr{
											pos: position{line: 2102, col: 5, offset: 67722},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2102, col: 6, offset: 67723},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2103, col: 5, offset: 67768},
													expr: &charClassMatcher{
														pos:        position{line: 2103, col: 6, offset: 67769},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2104, col: 5, offset: 67788},
													expr: &choiceExpr{
														pos: position{line: 2104, col: 7, offset: 67790},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonDoubleQuoteMonospaceTextElement17,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2099, col: 27, offset: 67691},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonDoubleQuoteMonospaceTextElement20,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonDoubleQuoteMonospaceTextElement23,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonDoubleQuoteMonospaceTextElement25,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonDoubleQuoteMonospaceTextElement31,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonDoubleQuoteMonospaceTextElement36,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonDoubleQuoteMonospaceTextElement38,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonDoubleQuoteMonospaceTextElement41,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement45,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement57,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement59,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonDoubleQuoteMonospaceTextElement63,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement67,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement79,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement81,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonDoubleQuoteMonospaceTextElement85,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement89,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonDoubleQuoteMonospaceTextElement95,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement99,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2132, col: 11, offset: 68737},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonDoubleQuoteMonospaceTextElement106,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonDoubleQuoteMonospaceTextElement108,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonDoubleQuoteMonospaceTextElement111,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement115,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement117,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement119,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement121,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement123,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement125,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement127,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement129,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement131,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement133,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonDoubleQuoteMonospaceTextElement136,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement138,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDoubleQuoteMonospaceTextElement142,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement149,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonDoubleQuoteMonospaceTextElement152,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement156,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement163,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement165,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement167,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonDoubleQuoteMonospaceTextElement169,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonDoubleQuoteMonospaceTextElement171,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonDoubleQuoteMonospaceTextElement173,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonDoubleQuoteMonospaceTextElement175,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonDoubleQuoteMonospaceTextElement177,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonDoubleQuoteMonospaceTextElement179,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonDoubleQuoteMonospaceTextElement181,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonDoubleQuoteMonospaceTextElement183,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonDoubleQuoteMonospaceTextElement185,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement188,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement190,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDoubleQuoteMonospaceTextElement194,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonDoubleQuoteMonospaceTextElement201,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement204,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDoubleQuoteMonospaceTextElement208,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonDoubleQuoteMonospaceTextElement215,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonDoubleQuoteMonospaceTextElement217,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonDoubleQuoteMonospaceTextElement219,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonDoubleQuoteMonospaceTextElement221,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonDoubleQuoteMonospaceTextElement223,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonDoubleQuoteMonospaceTextElement228,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement230,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonDoubleQuoteMonospaceTextElement234,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonDoubleQuoteMonospaceTextElement236,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonDoubleQuoteMonospaceTextElement239,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement241,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement245,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement249,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement255,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement260,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement264,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement270,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement274,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement280,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement283,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement287,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonDoubleQuoteMonospaceTextElement291,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2135, col: 11, offset: 68858},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonDoubleQuoteMonospaceTextElement294,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonDoubleQuoteMonospaceTextElement298,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonDoubleQuoteMonospaceTextElement302,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2167, col: 1, offset: 69722},
			expr: &actionExpr{
				pos: position{line: 2168, col: 5, offset: 69755},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2168, col: 5, offset: 69755},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2149, col: 5, offset: 69247},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andCodeExpr{
							pos: position{line: 2150, col: 5, offset: 69256},
							run: (*parser).callonSingleQuoteMonospaceText4,
						},
						&andExpr{
							pos: position{line: 2154, col: 5, offset: 69379},
							expr: &notExpr{
								pos: position{line: 2154, col: 7, offset: 69381},
								expr: &litMatcher{
									pos:        position{line: 2154, col: 8, offset: 69382},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2169, col: 5, offset: 69799},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2169, col: 15, offset: 69809},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&notExpr{
							pos: position{line: 2157, col: 5, offset: 69490},
							expr: &choiceExpr{
								pos: position{line: 2585, col: 5, offset: 83342},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2585, col: 5, offset: 83342},
										run: (*parser).callonSingleQuoteMonospaceText12,
										expr: &litMatcher{
											pos:        position{line: 2585, col: 5, offset: 83342},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2588, col: 7, offset: 83400},
										run: (*parser).callonSingleQuoteMonospaceText14,
										expr: &litMatcher{
											pos:        position{line: 2588, col: 7, offset: 83400},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2591, col: 7, offset: 83458},
										run: (*parser).callonSingleQuoteMonospaceText16,
										expr: &litMatcher{
											pos:        position{line: 2591, col: 7, offset: 83458},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2594, col: 7, offset: 83514},
										run: (*parser).callonSingleQuoteMonospaceText18,
										expr: &litMatcher{
											pos:        position{line: 2594, col: 7, offset: 83514},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2158, col: 5, offset: 69510},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andCodeExpr{
							pos: position{line: 2160, col: 5, offset: 69589},
							run: (*parser).callonSingleQuoteMonospaceText21,
						},
						&andExpr{
							pos: position{line: 2164, col: 5, offset: 69703},
							expr: &notExpr{
								pos: position{line: 2164, col: 7, offset: 69705},
								expr: &charClassMatcher{
									pos:        position{line: 2831, col: 13, offset: 90012},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2174, col: 1, offset: 69985},
			expr: &actionExpr{
				pos: position{line: 2175, col: 5, offset: 70026},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2175, col: 5, offset: 70026},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2175, col: 5, offset: 70026},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonSingleQuoteMonospaceTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2176, col: 5, offset: 70065},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2176, col: 14, offset: 70074},
								expr: &ruleRefExpr{
									pos:  position{line: 2176, col: 15, offset: 70075},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2177, col: 5, offset: 70113},
							run: (*parser).callonSingleQuoteMonospaceTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2183, col: 1, offset: 70254},
			expr: &actionExpr{
				pos: position{line: 2184, col: 5, offset: 70294},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2184, col: 5, offset: 70294},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2184, col: 5, offset: 70294},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2185, col: 5, offset: 70303},
							expr: &seqExpr{
								pos: position{line: 2157, col: 5, offset: 69490},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 2157, col: 5, offset: 69490},
										expr: &choiceExpr{
											pos: position{line: 2585, col: 5, offset: 83342},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2585, col: 5, offset: 83342},
													run: (*parser).callonSingleQuoteMonospaceTextElement10,
													expr: &litMatcher{
														pos:        position{line: 2585, col: 5, offset: 83342},
														val:        "\"`",
														ignoreCase: false,
														want:       "\"\\\"`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2588, col: 7, offset: 83400},
													run: (*parser).callonSingleQuoteMonospaceTextElement12,
													expr: &litMatcher{
														pos:        position{line: 2588, col: 7, offset: 83400},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&actionExpr{
													pos: position{line: 2591, col: 7, offset: 83458},
													run: (*parser).callonSingleQuoteMonospaceTextElement14,
													expr: &litMatcher{
														pos:        position{line: 2591, col: 7, offset: 83458},
														val:        "'`",
														ignoreCase: false,
														want:       "\"'`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2594, col: 7, offset: 83514},
													run: (*parser).callonSingleQuoteMonospaceTextElement16,
													expr: &litMatcher{
														pos:        position{line: 2594, col: 7, offset: 83514},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2158, col: 5, offset: 69510},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
									&andCodeExpr{
										pos: position{line: 2160, col: 5, offset: 69589},
										run: (*parser).callonSingleQuoteMonospaceTextElement19,
									},
									&andExpr{
										pos: position{line: 2164, col: 5, offset: 69703},
										expr: &notExpr{
											pos: position{line: 2164, col: 7, offset: 69705},
											expr: &charClassMatcher{
												pos:        position{line: 2831, col: 13, offset: 90012},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2186, col: 5, offset: 70345},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2187, col: 9, offset: 70363},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2102, col: 5, offset: 67722},
										run: (*parser).callonSingleQuoteMonospaceTextElement25,
										expr: &seqExpr{
											pos: position{line: 2102, col: 5, offset: 67722},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2102, col: 6, offset: 67723},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2103, col: 5, offset: 67768},
													expr: &charClassMatcher{
														pos:        position{line: 2103, col: 6, offset: 67769},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2104, col: 5, offset: 67788},
													expr: &choiceExpr{
														pos: position{line: 2104, col: 7, offset: 67790},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonSingleQuoteMonospaceTextElement32,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2099, col: 27, offset: 67691},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonSingleQuoteMonospaceTextElement35,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonSingleQuoteMonospaceTextElement38,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonSingleQuoteMonospaceTextElement40,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonSingleQuoteMonospaceTextElement46,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonSingleQuoteMonospaceTextElement51,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonSingleQuoteMonospaceTextElement53,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonSingleQuoteMonospaceTextElement56,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMonospaceTextElement60,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteMonospaceTextElement67,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteMonospaceTextElement72,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteMonospaceTextElement74,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonSingleQuoteMonospaceTextElement78,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMonospaceTextElement82,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteMonospaceTextElement89,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteMonospaceTextElement94,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteMonospaceTextElement96,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonSingleQuoteMonospaceTextElement100,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMonospaceTextElement104,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonSingleQuoteMonospaceTextElement110,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMonospaceTextElement114,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2191, col: 11, offset: 70495},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonSingleQuoteMonospaceTextElement121,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonSingleQuoteMonospaceTextElement123,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonSingleQuoteMonospaceTextElement126,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonSingleQuoteMonospaceTextElement130,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonSingleQuoteMonospaceTextElement132,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonSingleQuoteMonospaceTextElement134,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonSingleQuoteMonospaceTextElement136,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonSingleQuoteMonospaceTextElement138,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonSingleQuoteMonospaceTextElement140,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonSingleQuoteMonospaceTextElement142,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonSingleQuoteMonospaceTextElement144,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonSingleQuoteMonospaceTextElement146,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonSingleQuoteMonospaceTextElement148,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonSingleQuoteMonospaceTextElement151,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonSingleQuoteMonospaceTextElement153,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonSingleQuoteMonospaceTextElement157,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonSingleQuoteMonospaceTextElement164,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonSingleQuoteMonospaceTextElement167,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonSingleQuoteMonospaceTextElement171,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonSingleQuoteMonospaceTextElement178,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonSingleQuoteMonospaceTextElement180,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonSingleQuoteMonospaceTextElement182,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonSingleQuoteMonospaceTextElement184,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonSingleQuoteMonospaceTextElement186,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonSingleQuoteMonospaceTextElement188,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonSingleQuoteMonospaceTextElement190,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonSingleQuoteMonospaceTextElement192,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonSingleQuoteMonospaceTextElement194,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonSingleQuoteMonospaceTextElement196,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonSingleQuoteMonospaceTextElement198,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonSingleQuoteMonospaceTextElement200,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonSingleQuoteMonospaceTextElement203,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonSingleQuoteMonospaceTextElement205,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonSingleQuoteMonospaceTextElement209,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonSingleQuoteMonospaceTextElement216,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonSingleQuoteMonospaceTextElement219,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonSingleQuoteMonospaceTextElement223,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonSingleQuoteMonospaceTextElement230,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonSingleQuoteMonospaceTextElement232,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonSingleQuoteMonospaceTextElement234,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonSingleQuoteMonospaceTextElement236,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonSingleQuoteMonospaceTextElement238,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonSingleQuoteMonospaceTextElement243,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonSingleQuoteMonospaceTextElement245,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonSingleQuoteMonospaceTextElement249,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonSingleQuoteMonospaceTextElement251,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonSingleQuoteMonospaceTextElement254,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonSingleQuoteMonospaceTextElement256,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteMonospaceTextElement260,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonSingleQuoteMonospaceTextElement264,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonSingleQuoteMonospaceTextElement270,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonSingleQuoteMonospaceTextElement275,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteMonospaceTextElement279,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonSingleQuoteMonospaceTextElement285,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteMonospaceTextElement289,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonSingleQuoteMonospaceTextElement295,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonSingleQuoteMonospaceTextElement298,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteMonospaceTextElement302,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonSingleQuoteMonospaceTextElement306,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2194, col: 11, offset: 70616},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonSingleQuoteMonospaceTextElement309,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonSingleQuoteMonospaceTextElement313,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonSingleQuoteMonospaceTextElement317,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2202, col: 1, offset: 70749},
			expr: &choiceExpr{
				pos: position{line: 2204, col: 5, offset: 70820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2204, col: 5, offset: 70820},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2204, col: 5, offset: 70820},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2204, col: 5, offset: 70820},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1854, col: 25, offset: 59815},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1854, col: 25, offset: 59815},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1854, col: 25, offset: 59815},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1854, col: 30, offset: 59820},
													expr: &litMatcher{
														pos:        position{line: 1854, col: 30, offset: 59820},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2204, col: 40, offset: 70855},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2204, col: 45, offset: 70860},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2204, col: 55, offset: 70870},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2204, col: 89, offset: 70904},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2208, col: 7, offset: 71073},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2208, col: 7, offset: 71073},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2208, col: 7, offset: 71073},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2208, col: 42, offset: 71108},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2208, col: 47, offset: 71113},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2208, col: 57, offset: 71123},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2208, col: 91, offset: 71157},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2213, col: 7, offset: 71363},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2213, col: 7, offset: 71363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2213, col: 7, offset: 71363},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2213, col: 42, offset: 71398},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2213, col: 46, offset: 71402},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2213, col: 56, offset: 71412},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2213, col: 90, offset: 71446},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2237, col: 1, offset: 72114},
			expr: &actionExpr{
				pos: position{line: 2238, col: 5, offset: 72144},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2238, col: 5, offset: 72144},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2233, col: 40, offset: 72065},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2239, col: 5, offset: 72185},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2239, col: 15, offset: 72195},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2235, col: 38, offset: 72108},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2244, col: 1, offset: 72361},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2244, col: 34, offset: 72394},
				expr: &ruleRefExpr{
					pos:  position{line: 2244, col: 34, offset: 72394},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2246, col: 1, offset: 72425},
			expr: &actionExpr{
				pos: position{line: 2247, col: 5, offset: 72494},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2247, col: 5, offset: 72494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2247, col: 5, offset: 72494},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2248, col: 5, offset: 72503},
							expr: &litMatcher{
								pos:        position{line: 2235, col: 38, offset: 72108},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2249, col: 5, offset: 72542},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2250, col: 9, offset: 72560},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2224, col: 5, offset: 71750},
										run: (*parser).callonDoubleQuoteMarkedTextElement10,
										expr: &seqExpr{
											pos: position{line: 2224, col: 5, offset: 71750},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2224, col: 6, offset: 71751},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2225, col: 5, offset: 71796},
													expr: &charClassMatcher{
														pos:        position{line: 2225, col: 6, offset: 71797},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2226, col: 5, offset: 71816},
													expr: &choiceExpr{
														pos: position{line: 2226, col: 7, offset: 71818},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonDoubleQuoteMarkedTextElement17,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2221, col: 24, offset: 71722},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonDoubleQuoteMarkedTextElement20,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonDoubleQuoteMarkedTextElement23,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonDoubleQuoteMarkedTextElement25,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonDoubleQuoteMarkedTextElement31,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonDoubleQuoteMarkedTextElement36,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonDoubleQuoteMarkedTextElement38,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonDoubleQuoteMarkedTextElement41,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMarkedTextElement45,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteMarkedTextElement52,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteMarkedTextElement57,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteMarkedTextElement59,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonDoubleQuoteMarkedTextElement63,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMarkedTextElement67,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonDoubleQuoteMarkedTextElement74,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonDoubleQuoteMarkedTextElement79,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonDoubleQuoteMarkedTextElement81,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonDoubleQuoteMarkedTextElement85,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMarkedTextElement89,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonDoubleQuoteMarkedTextElement95,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonDoubleQuoteMarkedTextElement99,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2254, col: 11, offset: 72722},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonDoubleQuoteMarkedTextElement106,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonDoubleQuoteMarkedTextElement108,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonDoubleQuoteMarkedTextElement111,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonDoubleQuoteMarkedTextElement115,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonDoubleQuoteMarkedTextElement117,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonDoubleQuoteMarkedTextElement119,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonDoubleQuoteMarkedTextElement121,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonDoubleQuoteMarkedTextElement123,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonDoubleQuoteMarkedTextElement125,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonDoubleQuoteMarkedTextElement127,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonDoubleQuoteMarkedTextElement129,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonDoubleQuoteMarkedTextElement131,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonDoubleQuoteMarkedTextElement133,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonDoubleQuoteMarkedTextElement136,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonDoubleQuoteMarkedTextElement138,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonDoubleQuoteMarkedTextElement142,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonDoubleQuoteMarkedTextElement149,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonDoubleQuoteMarkedTextElement152,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonDoubleQuoteMarkedTextElement156,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonDoubleQuoteMarkedTextElement163,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonDoubleQuoteMarkedTextElement165,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonDoubleQuoteMarkedTextElement167,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonDoubleQuoteMarkedTextElement169,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonDoubleQuoteMarkedTextElement171,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonDoubleQuoteMarkedTextElement173,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonDoubleQuoteMarkedTextElement175,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonDoubleQuoteMarkedTextElement177,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonDoubleQuoteMarkedTextElement179,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonDoubleQuoteMarkedTextElement181,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonDoubleQuoteMarkedTextElement183,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonDoubleQuoteMarkedTextElement185,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonDoubleQuoteMarkedTextElement188,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonDoubleQuoteMarkedTextElement190,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonDoubleQuoteMarkedTextElement194,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonDoubleQuoteMarkedTextElement201,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonDoubleQuoteMarkedTextElement204,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonDoubleQuoteMarkedTextElement208,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonDoubleQuoteMarkedTextElement215,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonDoubleQuoteMarkedTextElement217,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonDoubleQuoteMarkedTextElement219,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonDoubleQuoteMarkedTextElement221,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonDoubleQuoteMarkedTextElement223,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonDoubleQuoteMarkedTextElement228,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonDoubleQuoteMarkedTextElement230,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonDoubleQuoteMarkedTextElement234,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonDoubleQuoteMarkedTextElement236,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonDoubleQuoteMarkedTextElement239,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonDoubleQuoteMarkedTextElement241,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteMarkedTextElement245,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonDoubleQuoteMarkedTextElement249,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonDoubleQuoteMarkedTextElement255,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonDoubleQuoteMarkedTextElement260,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteMarkedTextElement264,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonDoubleQuoteMarkedTextElement270,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonDoubleQuoteMarkedTextElement274,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonDoubleQuoteMarkedTextElement280,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonDoubleQuoteMarkedTextElement283,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonDoubleQuoteMarkedTextElement287,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonDoubleQuoteMarkedTextElement291,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2257, col: 11, offset: 72843},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonDoubleQuoteMarkedTextElement294,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonDoubleQuoteMarkedTextElement298,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonDoubleQuoteMarkedTextElement302,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2285, col: 1, offset: 73569},
			expr: &actionExpr{
				pos: position{line: 2286, col: 5, offset: 73599},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2286, col: 5, offset: 73599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2269, col: 5, offset: 73136},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andCodeExpr{
							pos: position{line: 2270, col: 5, offset: 73145},
							run: (*parser).callonSingleQuoteMarkedText4,
						},
						&andExpr{
							pos: position{line: 2274, col: 5, offset: 73265},
							expr: &notExpr{
								pos: position{line: 2274, col: 7, offset: 73267},
								expr: &litMatcher{
									pos:        position{line: 2274, col: 8, offset: 73268},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2287, col: 5, offset: 73639},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2287, col: 15, offset: 73649},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2277, col: 5, offset: 73373},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 2278, col: 5, offset: 73381},
							expr: &litMatcher{
								pos:        position{line: 2278, col: 6, offset: 73382},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 2279, col: 5, offset: 73444},
							run: (*parser).callonSingleQuoteMarkedText13,
						},
						&andExpr{
							pos: position{line: 2283, col: 5, offset: 73555},
							expr: &notExpr{
								pos: position{line: 2283, col: 7, offset: 73557},
								expr: &charClassMatcher{
									pos:        position{line: 2831, col: 13, offset: 90012},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2292, col: 1, offset: 73816},
			expr: &actionExpr{
				pos: position{line: 2293, col: 5, offset: 73854},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2293, col: 5, offset: 73854},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2293, col: 5, offset: 73854},
							expr: &actionExpr{
								pos: position{line: 2910, col: 10, offset: 92147},
								run: (*parser).callonSingleQuoteMarkedTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2910, col: 11, offset: 92148},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2294, col: 5, offset: 73893},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2294, col: 14, offset: 73902},
								expr: &ruleRefExpr{
									pos:  position{line: 2294, col: 15, offset: 73903},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2295, col: 5, offset: 73939},
							run: (*parser).callonSingleQuoteMarkedTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2301, col: 1, offset: 74080},
			expr: &actionExpr{
				pos: position{line: 2302, col: 5, offset: 74117},
				run: (*parser).callonSingleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2302, col: 5, offset: 74117},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2302, col: 5, offset: 74117},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&notExpr{
							pos: position{line: 2303, col: 5, offset: 74126},
							expr: &seqExpr{
								pos: position{line: 2277, col: 5, offset: 73373},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2277, col: 5, offset: 73373},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 2278, col: 5, offset: 73381},
										expr: &litMatcher{
											pos:        position{line: 2278, col: 6, offset: 73382},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 2279, col: 5, offset: 73444},
										run: (*parser).callonSingleQuoteMarkedTextElement11,
									},
									&andExpr{
										pos: position{line: 2283, col: 5, offset: 73555},
										expr: &notExpr{
											pos: position{line: 2283, col: 7, offset: 73557},
											expr: &charClassMatcher{
												pos:        position{line: 2831, col: 13, offset: 90012},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2304, col: 5, offset: 74165},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2305, col: 9, offset: 74183},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2224, col: 5, offset: 71750},
										run: (*parser).callonSingleQuoteMarkedTextElement17,
										expr: &seqExpr{
											pos: position{line: 2224, col: 5, offset: 71750},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2224, col: 6, offset: 71751},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2225, col: 5, offset: 71796},
													expr: &charClassMatcher{
														pos:        position{line: 2225, col: 6, offset: 71797},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2226, col: 5, offset: 71816},
													expr: &choiceExpr{
														pos: position{line: 2226, col: 7, offset: 71818},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonSingleQuoteMarkedTextElement24,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2221, col: 24, offset: 71722},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2914, col: 11, offset: 92214},
										run: (*parser).callonSingleQuoteMarkedTextElement27,
										expr: &oneOrMoreExpr{
											pos: position{line: 2914, col: 11, offset: 92214},
											expr: &charClassMatcher{
												pos:        position{line: 2914, col: 12, offset: 92215},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2923, col: 18, offset: 92431},
										run: (*parser).callonSingleQuoteMarkedTextElement30,
										expr: &seqExpr{
											pos: position{line: 2923, col: 18, offset: 92431},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2919, col: 12, offset: 92331},
													run: (*parser).callonSingleQuoteMarkedTextElement32,
													expr: &choiceExpr{
														pos: position{line: 2919, col: 13, offset: 92332},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2919, col: 13, offset: 92332},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 20, offset: 92339},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2919, col: 29, offset: 92348},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2923, col: 26, offset: 92439},
													expr: &actionExpr{
														pos: position{line: 2919, col: 12, offset: 92331},
														run: (*parser).callonSingleQuoteMarkedTextElement38,
														expr: &choiceExpr{
															pos: position{line: 2919, col: 13, offset: 92332},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2919, col: 13, offset: 92332},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 20, offset: 92339},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2919, col: 29, offset: 92348},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonSingleQuoteMarkedTextElement43,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonSingleQuoteMarkedTextElement45,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonSingleQuoteMarkedTextElement48,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMarkedTextElement52,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteMarkedTextElement59,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteMarkedTextElement64,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteMarkedTextElement66,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonSingleQuoteMarkedTextElement70,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMarkedTextElement74,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSingleQuoteMarkedTextElement81,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSingleQuoteMarkedTextElement86,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSingleQuoteMarkedTextElement88,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonSingleQuoteMarkedTextElement92,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMarkedTextElement96,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonSingleQuoteMarkedTextElement102,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSingleQuoteMarkedTextElement106,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2309, col: 11, offset: 74312},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonSingleQuoteMarkedTextElement113,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonSingleQuoteMarkedTextElement115,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonSingleQuoteMarkedTextElement118,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonSingleQuoteMarkedTextElement122,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonSingleQuoteMarkedTextElement124,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonSingleQuoteMarkedTextElement126,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonSingleQuoteMarkedTextElement128,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonSingleQuoteMarkedTextElement130,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonSingleQuoteMarkedTextElement132,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonSingleQuoteMarkedTextElement134,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonSingleQuoteMarkedTextElement136,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonSingleQuoteMarkedTextElement138,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonSingleQuoteMarkedTextElement140,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonSingleQuoteMarkedTextElement143,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonSingleQuoteMarkedTextElement145,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonSingleQuoteMarkedTextElement149,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonSingleQuoteMarkedTextElement156,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonSingleQuoteMarkedTextElement159,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonSingleQuoteMarkedTextElement163,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonSingleQuoteMarkedTextElement170,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonSingleQuoteMarkedTextElement172,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonSingleQuoteMarkedTextElement174,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonSingleQuoteMarkedTextElement176,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonSingleQuoteMarkedTextElement178,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonSingleQuoteMarkedTextElement180,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonSingleQuoteMarkedTextElement182,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonSingleQuoteMarkedTextElement184,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonSingleQuoteMarkedTextElement186,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonSingleQuoteMarkedTextElement188,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonSingleQuoteMarkedTextElement190,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonSingleQuoteMarkedTextElement192,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonSingleQuoteMarkedTextElement195,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonSingleQuoteMarkedTextElement197,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonSingleQuoteMarkedTextElement201,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonSingleQuoteMarkedTextElement208,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonSingleQuoteMarkedTextElement211,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonSingleQuoteMarkedTextElement215,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonSingleQuoteMarkedTextElement222,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonSingleQuoteMarkedTextElement224,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonSingleQuoteMarkedTextElement226,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonSingleQuoteMarkedTextElement228,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonSingleQuoteMarkedTextElement230,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonSingleQuoteMarkedTextElement235,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonSingleQuoteMarkedTextElement237,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonSingleQuoteMarkedTextElement241,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonSingleQuoteMarkedTextElement243,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonSingleQuoteMarkedTextElement246,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonSingleQuoteMarkedTextElement248,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteMarkedTextElement252,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonSingleQuoteMarkedTextElement256,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonSingleQuoteMarkedTextElement262,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonSingleQuoteMarkedTextElement267,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteMarkedTextElement271,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonSingleQuoteMarkedTextElement277,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSingleQuoteMarkedTextElement281,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonSingleQuoteMarkedTextElement287,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonSingleQuoteMarkedTextElement290,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSingleQuoteMarkedTextElement294,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonSingleQuoteMarkedTextElement298,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2312, col: 11, offset: 74433},
										name: "QuotedText",
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonSingleQuoteMarkedTextElement301,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonSingleQuoteMarkedTextElement305,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonSingleQuoteMarkedTextElement309,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2320, col: 1, offset: 74566},
			expr: &choiceExpr{
				pos: position{line: 2322, col: 5, offset: 74630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2322, col: 5, offset: 74630},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2322, col: 5, offset: 74630},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2322, col: 5, offset: 74630},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1854, col: 25, offset: 59815},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1854, col: 25, offset: 59815},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1854, col: 25, offset: 59815},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1854, col: 30, offset: 59820},
													expr: &litMatcher{
														pos:        position{line: 1854, col: 30, offset: 59820},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2322, col: 40, offset: 74665},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2322, col: 45, offset: 74670},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2322, col: 55, offset: 74680},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2322, col: 86, offset: 74711},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2326, col: 7, offset: 74876},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2326, col: 7, offset: 74876},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2326, col: 7, offset: 74876},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2326, col: 42, offset: 74911},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2326, col: 47, offset: 74916},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2326, col: 57, offset: 74926},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2326, col: 88, offset: 74957},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2331, col: 7, offset: 75160},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2331, col: 7, offset: 75160},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2331, col: 7, offset: 75160},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1850, col: 25, offset: 59742},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1850, col: 25, offset: 59742},
											expr: &litMatcher{
												pos:        position{line: 1850, col: 25, offset: 59742},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2331, col: 42, offset: 75195},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2331, col: 46, offset: 75199},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2331, col: 56, offset: 75209},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2331, col: 87, offset: 75240},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2338, col: 1, offset: 75507},
			expr: &actionExpr{
				pos: position{line: 2339, col: 5, offset: 75529},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2339, col: 5, offset: 75529},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2345, col: 27, offset: 75744},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2340, col: 5, offset: 75556},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2340, col: 14, offset: 75565},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2345, col: 27, offset: 75744},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2347, col: 1, offset: 75749},
			expr: &choiceExpr{
				pos: position{line: 2347, col: 25, offset: 75773},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2347, col: 25, offset: 75773},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2349, col: 21, offset: 75825},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2349, col: 21, offset: 75825},
							expr: &charClassMatcher{
								pos:        position{line: 2349, col: 21, offset: 75825},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2353, col: 1, offset: 75910},
			expr: &actionExpr{
				pos: position{line: 2355, col: 5, offset: 75977},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2355, col: 5, offset: 75977},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2355, col: 5, offset: 75977},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1850, col: 25, offset: 59742},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1850, col: 25, offset: 59742},
									expr: &litMatcher{
										pos:        position{line: 1850, col: 25, offset: 59742},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2345, col: 27, offset: 75744},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2357, col: 5, offset: 76045},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2357, col: 14, offset: 76054},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2345, col: 27, offset: 75744},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2365, col: 1, offset: 76317},
			expr: &actionExpr{
				pos: position{line: 2366, col: 5, offset: 76341},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2366, col: 5, offset: 76341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2372, col: 29, offset: 76568},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2367, col: 5, offset: 76371},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2367, col: 14, offset: 76380},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2372, col: 29, offset: 76568},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2374, col: 1, offset: 76573},
			expr: &choiceExpr{
				pos: position{line: 2374, col: 27, offset: 76599},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2374, col: 27, offset: 76599},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2376, col: 23, offset: 76655},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2376, col: 23, offset: 76655},
							expr: &charClassMatcher{
								pos:        position{line: 2376, col: 23, offset: 76655},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2380, col: 1, offset: 76740},
			expr: &actionExpr{
				pos: position{line: 2382, col: 5, offset: 76812},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2382, col: 5, offset: 76812},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2382, col: 5, offset: 76812},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1850, col: 25, offset: 59742},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1850, col: 25, offset: 59742},
									expr: &litMatcher{
										pos:        position{line: 1850, col: 25, offset: 59742},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2372, col: 29, offset: 76568},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2384, col: 5, offset: 76882},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2384, col: 14, offset: 76891},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2372, col: 29, offset: 76568},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 2393, col: 1, offset: 77360},
			expr: &actionExpr{
				pos: position{line: 2394, col: 5, offset: 77376},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 2394, col: 5, offset: 77376},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2394, col: 5, offset: 77376},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 2397, col: 5, offset: 77439},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 2397, col: 12, offset: 77446},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2397, col: 12, offset: 77446},
									expr: &litMatcher{
										pos:        position{line: 2397, col: 13, offset: 77447},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2401, col: 5, offset: 77555},
							run: (*parser).callonSection8,
						},
						&actionExpr{
							pos: position{line: 2914, col: 11, offset: 92214},
							run: (*parser).callonSection9,
							expr: &oneOrMoreExpr{
								pos: position{line: 2914, col: 11, offset: 92214},
								expr: &charClassMatcher{
									pos:        position{line: 2914, col: 12, offset: 92215},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2405, col: 12, offset: 77714},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 2405, col: 19, offset: 77721},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonSection15,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 2409, col: 1, offset: 77817},
			expr: &actionExpr{
				pos: position{line: 2410, col: 5, offset: 77838},
				run: (*parser).callonSectionTitle1,
				expr: &seqExpr{
					pos: position{line: 2410, col: 5, offset: 77838},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 2410, col: 5, offset: 77838},
							run: (*parser).callonSectionTitle3,
						},
						&labeledExpr{
							pos:   position{line: 2415, col: 5, offset: 77953},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2415, col: 14, offset: 77962},
								expr: &ruleRefExpr{
									pos:  position{line: 2415, col: 15, offset: 77963},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 2419, col: 1, offset: 78044},
			expr: &actionExpr{
				pos: position{line: 2420, col: 5, offset: 78071},
				run: (*parser).callonSectionTitleElement1,
				expr: &seqExpr{
					pos: position{line: 2420, col: 5, offset: 78071},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2420, col: 5, offset: 78071},
							expr: &choiceExpr{
								pos: position{line: 2930, col: 8, offset: 92541},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2919, col: 12, offset: 92331},
										run: (*parser).callonSectionTitleElement5,
										expr: &choiceExpr{
											pos: position{line: 2919, col: 13, offset: 92332},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2919, col: 13, offset: 92332},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 20, offset: 92339},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2919, col: 29, offset: 92348},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2927, col: 8, offset: 92491},
										expr: &anyMatcher{
											line: 2927, col: 9, offset: 92492,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2421, col: 5, offset: 78080},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2422, col: 9, offset: 78098},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2840, col: 5, offset: 90159},
										run: (*parser).callonSectionTitleElement14,
										expr: &seqExpr{
											pos: position{line: 2840, col: 5, offset: 90159},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2840, col: 6, offset: 90160},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2841, col: 5, offset: 90205},
													expr: &charClassMatcher{
														pos:        position{line: 2841, col: 6, offset: 90206},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2842, col: 5, offset: 90269},
													expr: &choiceExpr{
														pos: position{line: 2842, col: 7, offset: 90271},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonSectionTitleElement21,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1195, col: 32, offset: 36910},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonSectionTitleElement24,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2423, col: 12, offset: 78120},
										run: (*parser).callonSectionTitleElement31,
										expr: &seqExpr{
											pos: position{line: 2423, col: 12, offset: 78120},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2423, col: 12, offset: 78120},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonSectionTitleElement34,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2423, col: 19, offset: 78127},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 404, col: 5, offset: 12334},
														run: (*parser).callonSectionTitleElement37,
														expr: &seqExpr{
															pos: position{line: 404, col: 5, offset: 12334},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 404, col: 5, offset: 12334},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 405, col: 5, offset: 12344},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 406, col: 9, offset: 12357},
																		run: (*parser).callonSectionTitleElement41,
																		expr: &labeledExpr{
																			pos:   position{line: 406, col: 9, offset: 12357},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 406, col: 18, offset: 12366},
																				expr: &choiceExpr{
																					pos: position{line: 407, col: 13, offset: 12380},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 407, col: 14, offset: 12381},
																							run: (*parser).callonSectionTitleElement45,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 407, col: 14, offset: 12381},
																								expr: &charClassMatcher{
																									pos:        position{line: 407, col: 14, offset: 12381},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1197, col: 23, offset: 36942},
																							run: (*parser).callonSectionTitleElement48,
																							expr: &seqExpr{
																								pos: position{line: 1197, col: 23, offset: 36942},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1195, col: 32, offset: 36910},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1197, col: 51, offset: 36970},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1197, col: 56, offset: 36975},
																											run: (*parser).callonSectionTitleElement52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1197, col: 56, offset: 36975},
																												expr: &charClassMatcher{
																													pos:        position{line: 1197, col: 56, offset: 36975},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1195, col: 32, offset: 36910},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 635, col: 5, offset: 20085},
																							run: (*parser).callonSectionTitleElement56,
																							expr: &seqExpr{
																								pos: position{line: 635, col: 5, offset: 20085},
																								exprs: []interface{}{
																									&andCodeExpr{
																										pos: position{line: 635, col: 5, offset: 20085},
																										run: (*parser).callonSectionTitleElement58,
																									},
																									&labeledExpr{
																										pos:   position{line: 638, col: 5, offset: 20157},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 638, col: 14, offset: 20166},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 657, col: 25, offset: 20767},
																													run: (*parser).callonSectionTitleElement61,
																													expr: &seqExpr{
																														pos: position{line: 657, col: 25, offset: 20767},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 657, col: 25, offset: 20767},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 657, col: 37, offset: 20779},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	run: (*parser).callonSectionTitleElement65,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9733},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9743},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9744},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 657, col: 56, offset: 20798},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 657, col: 62, offset: 20804},
																																	expr: &actionExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		run: (*parser).callonSectionTitleElement72,
																																		expr: &seqExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 665, col: 17, offset: 21099},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 665, col: 21, offset: 21103},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 665, col: 28, offset: 21110},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 665, col: 28, offset: 21110},
																																								run: (*parser).callonSectionTitleElement77,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 665, col: 28, offset: 21110},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								run: (*parser).callonSectionTitleElement79,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 667, col: 9, offset: 21164},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 657, col: 78, offset: 20820},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 661, col: 25, offset: 20938},
																													run: (*parser).callonSectionTitleElement83,
																													expr: &seqExpr{
																														pos: position{line: 661, col: 25, offset: 20938},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 661, col: 25, offset: 20938},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 661, col: 38, offset: 20951},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	run: (*parser).callonSectionTitleElement87,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9733},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9743},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9744},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 661, col: 57, offset: 20970},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 661, col: 63, offset: 20976},
																																	expr: &actionExpr{
																																		pos: position{line: 665, col: 17, offset: 21099},
																																		run: (*parser).callonSectionTitleElement94,
																																		expr: &seqExpr{
																																			pos: position{line: 665, col: 17, offset: 21099},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 665, col: 17, offset: 21099},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 665, col: 21, offset: 21103},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 665, col: 28, offset: 21110},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 665, col: 28, offset: 21110},
																																								run: (*parser).callonSectionTitleElement99,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 665, col: 28, offset: 21110},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 667, col: 9, offset: 21164},
																																								run: (*parser).callonSectionTitleElement101,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 667, col: 9, offset: 21164},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 667, col: 9, offset: 21164},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 661, col: 79, offset: 20992},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 644, col: 5, offset: 20295},
																													run: (*parser).callonSectionTitleElement105,
																													expr: &seqExpr{
																														pos: position{line: 644, col: 5, offset: 20295},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 644, col: 5, offset: 20295},
																																val:        "\\{",
																																ignoreCase: false,
																																want:       "\"\\\\{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 644, col: 13, offset: 20303},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	run: (*parser).callonSectionTitleElement109,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9733},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9743},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9744},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 644, col: 32, offset: 20322},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 651, col: 5, offset: 20563},
																													run: (*parser).callonSectionTitleElement115,
																													expr: &seqExpr{
																														pos: position{line: 651, col: 5, offset: 20563},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 651, col: 5, offset: 20563},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 651, col: 9, offset: 20567},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9733},
																																	run: (*parser).callonSectionTitleElement119,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9733},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9733},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9743},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9744},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 651, col: 28, offset: 20586},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 412, col: 16, offset: 12614},
																							run: (*parser).callonSectionTitleElement125,
																							expr: &litMatcher{
																								pos:        position{line: 412, col: 16, offset: 12614},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 418, col: 5, offset: 12800},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2423, col: 40, offset: 78148},
													expr: &actionExpr{
														pos: position{line: 2910, col: 10, offset: 92147},
														run: (*parser).callonSectionTitleElement129,
														expr: &charClassMatcher{
															pos:        position{line: 2910, col: 11, offset: 92148},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2423, col: 47, offset: 78155},
													expr: &choiceExpr{
														pos: position{line: 2930, col: 8, offset: 92541},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonSectionTitleElement133,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2910, col: 10, offset: 92147},
										run: (*parser).callonSectionTitleElement140,
										expr: &charClassMatcher{
											pos:        position{line: 2910, col: 11, offset: 92148},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2425, col: 11, offset: 78228},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2426, col: 11, offset: 78256},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2427, col: 11, offset: 78272},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2534, col: 5, offset: 81501},
										run: (*parser).callonSectionTitleElement145,
										expr: &seqExpr{
											pos: position{line: 2534, col: 5, offset: 81501},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2534, col: 5, offset: 81501},
													run: (*parser).callonSectionTitleElement147,
												},
												&labeledExpr{
													pos:   position{line: 2537, col: 5, offset: 81572},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2576, col: 5, offset: 82884},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2576, col: 5, offset: 82884},
																run: (*parser).callonSectionTitleElement150,
																expr: &seqExpr{
																	pos: position{line: 2576, col: 5, offset: 82884},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2576, col: 5, offset: 82884},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2576, col: 10, offset: 82889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonSectionTitleElement154,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonSectionTitleElement156,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonSectionTitleElement158,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonSectionTitleElement160,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonSectionTitleElement162,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonSectionTitleElement164,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonSectionTitleElement166,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonSectionTitleElement168,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonSectionTitleElement170,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonSectionTitleElement172,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonSectionTitleElement175,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonSectionTitleElement177,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonSectionTitleElement181,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonSectionTitleElement188,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonSectionTitleElement191,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonSectionTitleElement195,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonSectionTitleElement202,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonSectionTitleElement204,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonSectionTitleElement206,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2585, col: 5, offset: 83342},
																run: (*parser).callonSectionTitleElement208,
																expr: &litMatcher{
																	pos:        position{line: 2585, col: 5, offset: 83342},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2588, col: 7, offset: 83400},
																run: (*parser).callonSectionTitleElement210,
																expr: &litMatcher{
																	pos:        position{line: 2588, col: 7, offset: 83400},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2591, col: 7, offset: 83458},
																run: (*parser).callonSectionTitleElement212,
																expr: &litMatcher{
																	pos:        position{line: 2591, col: 7, offset: 83458},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2594, col: 7, offset: 83514},
																run: (*parser).callonSectionTitleElement214,
																expr: &litMatcher{
																	pos:        position{line: 2594, col: 7, offset: 83514},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2598, col: 14, offset: 83579},
																run: (*parser).callonSectionTitleElement216,
																expr: &litMatcher{
																	pos:        position{line: 2598, col: 14, offset: 83579},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2602, col: 14, offset: 83645},
																run: (*parser).callonSectionTitleElement218,
																expr: &litMatcher{
																	pos:        position{line: 2602, col: 14, offset: 83645},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2606, col: 15, offset: 83714},
																run: (*parser).callonSectionTitleElement220,
																expr: &litMatcher{
																	pos:        position{line: 2606, col: 15, offset: 83714},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2610, col: 13, offset: 83779},
																run: (*parser).callonSectionTitleElement222,
																expr: &litMatcher{
																	pos:        position{line: 2610, col: 13, offset: 83779},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																run: (*parser).callonSectionTitleElement224,
																expr: &seqExpr{
																	pos: position{line: 2617, col: 5, offset: 83935},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2617, col: 5, offset: 83935},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2618, col: 5, offset: 83945},
																			run: (*parser).callonSectionTitleElement227,
																		},
																		&choiceExpr{
																			pos: position{line: 2622, col: 6, offset: 84032},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonSectionTitleElement229,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2622, col: 14, offset: 84040},
																					expr: &choiceExpr{
																						pos: position{line: 2930, col: 8, offset: 92541},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2919, col: 12, offset: 92331},
																								run: (*parser).callonSectionTitleElement233,
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 13, offset: 92332},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2919, col: 13, offset: 92332},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 20, offset: 92339},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2919, col: 29, offset: 92348},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2927, col: 8, offset: 92491},
																								expr: &anyMatcher{
																									line: 2927, col: 9, offset: 92492,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																run: (*parser).callonSectionTitleElement240,
																expr: &seqExpr{
																	pos: position{line: 2627, col: 5, offset: 84160},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2627, col: 5, offset: 84160},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																		&andCodeExpr{
																			pos: position{line: 2628, col: 5, offset: 84170},
																			run: (*parser).callonSectionTitleElement243,
																		},
																		&andExpr{
																			pos: position{line: 2632, col: 5, offset: 84259},
																			expr: &choiceExpr{
																				pos: position{line: 2632, col: 7, offset: 84261},
																				alternatives: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2831, col: 13, offset: 90012},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&actionExpr{
																						pos: position{line: 2919, col: 12, offset: 92331},
																						run: (*parser).callonSectionTitleElement247,
																						expr: &choiceExpr{
																							pos: position{line: 2919, col: 13, offset: 92332},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2919, col: 13, offset: 92332},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 20, offset: 92339},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2919, col: 29, offset: 92348},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 21, offset: 84349},
																run: (*parser).callonSectionTitleElement254,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 21, offset: 84349},
																	val:        "->",
																	ignoreCase: false,
																	want:       "\"->\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 20, offset: 84419},
																run: (*parser).callonSectionTitleElement256,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 20, offset: 84419},
																	val:        "<-",
																	ignoreCase: false,
																	want:       "\"<-\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 21, offset: 84490},
																run: (*parser).callonSectionTitleElement258,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 21, offset: 84490},
																	val:        "=>",
																	ignoreCase: false,
																	want:       "\"=>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 20, offset: 84560},
																run: (*parser).callonSectionTitleElement260,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 20, offset: 84560},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 2659, col: 5, offset: 84866},
																run: (*parser).callonSectionTitleElement262,
																expr: &seqExpr{
																	pos: position{line: 2659, col: 5, offset: 84866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2659, col: 5, offset: 84866},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2659, col: 10, offset: 84871},
																			expr: &charClassMatcher{
																				pos:        position{line: 2659, col: 11, offset: 84872},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2665, col: 6, offset: 85063},
																run: (*parser).callonSectionTitleElement267,
																expr: &seqExpr{
																	pos: position{line: 2665, col: 6, offset: 85063},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2665, col: 6, offset: 85063},
																			run: (*parser).callonSectionTitleElement269,
																		},
																		&litMatcher{
																			pos:        position{line: 2669, col: 6, offset: 85187},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2669, col: 10, offset: 85191},
																			expr: &charClassMatcher{
																				pos:        position{line: 2669, col: 11, offset: 85192},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonSectionTitleElement273,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonSectionTitleElement275,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonSectionTitleElement278,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonSectionTitleElement280,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSectionTitleElement284,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonSectionTitleElement288,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonSectionTitleElement294,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonSectionTitleElement299,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSectionTitleElement303,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonSectionTitleElement309,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonSectionTitleElement313,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonSectionTitleElement319,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonSectionTitleElement322,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonSectionTitleElement326,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonSectionTitleElement330,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2430, col: 11, offset: 78379},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 635, col: 5, offset: 20085},
										run: (*parser).callonSectionTitleElement333,
										expr: &seqExpr{
											pos: position{line: 635, col: 5, offset: 20085},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 635, col: 5, offset: 20085},
													run: (*parser).callonSectionTitleElement335,
												},
												&labeledExpr{
													pos:   position{line: 638, col: 5, offset: 20157},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 638, col: 14, offset: 20166},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 657, col: 25, offset: 20767},
																run: (*parser).callonSectionTitleElement338,
																expr: &seqExpr{
																	pos: position{line: 657, col: 25, offset: 20767},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 25, offset: 20767},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 37, offset: 20779},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSectionTitleElement342,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 56, offset: 20798},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 657, col: 62, offset: 20804},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSectionTitleElement349,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSectionTitleElement354,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSectionTitleElement356,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 78, offset: 20820},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20938},
																run: (*parser).callonSectionTitleElement360,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20938},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20938},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 38, offset: 20951},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSectionTitleElement364,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 57, offset: 20970},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 63, offset: 20976},
																				expr: &actionExpr{
																					pos: position{line: 665, col: 17, offset: 21099},
																					run: (*parser).callonSectionTitleElement371,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 17, offset: 21099},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 665, col: 17, offset: 21099},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 21, offset: 21103},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 665, col: 28, offset: 21110},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 665, col: 28, offset: 21110},
																											run: (*parser).callonSectionTitleElement376,
																											expr: &charClassMatcher{
																												pos:        position{line: 665, col: 28, offset: 21110},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 667, col: 9, offset: 21164},
																											run: (*parser).callonSectionTitleElement378,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 667, col: 9, offset: 21164},
																												expr: &charClassMatcher{
																													pos:        position{line: 667, col: 9, offset: 21164},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 79, offset: 20992},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 644, col: 5, offset: 20295},
																run: (*parser).callonSectionTitleElement382,
																expr: &seqExpr{
																	pos: position{line: 644, col: 5, offset: 20295},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 644, col: 5, offset: 20295},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 13, offset: 20303},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSectionTitleElement386,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 644, col: 32, offset: 20322},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 20563},
																run: (*parser).callonSectionTitleElement392,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 20563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 651, col: 5, offset: 20563},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 9, offset: 20567},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9733},
																				run: (*parser).callonSectionTitleElement396,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9733},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9733},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9743},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9744},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 651, col: 28, offset: 20586},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonSectionTitleElement402,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonSectionTitleElement406,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1281, col: 5, offset: 39502},
										run: (*parser).callonSectionTitleElement410,
										expr: &seqExpr{
											pos: position{line: 1281, col: 5, offset: 39502},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1281, col: 5, offset: 39502},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1281, col: 14, offset: 39511},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2895, col: 7, offset: 91799},
														run: (*parser).callonSectionTitleElement414,
														expr: &oneOrMoreExpr{
															pos: position{line: 2895, col: 7, offset: 91799},
															expr: &charClassMatcher{
																pos:        position{line: 2895, col: 7, offset: 91799},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1281, col: 22, offset: 39519},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1287, col: 5, offset: 39705},
										run: (*parser).callonSectionTitleElement418,
										expr: &seqExpr{
											pos: position{line: 1287, col: 5, offset: 39705},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1287, col: 5, offset: 39705},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1287, col: 10, offset: 39710},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2895, col: 7, offset: 91799},
														run: (*parser).callonSectionTitleElement422,
														expr: &oneOrMoreExpr{
															pos: position{line: 2895, col: 7, offset: 91799},
															expr: &charClassMatcher{
																pos:        position{line: 2895, col: 7, offset: 91799},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1287, col: 18, offset: 39718},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2434, col: 11, offset: 78602},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonSectionTitleElement427,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2446, col: 1, offset: 78937},
			expr: &actionExpr{
				pos: position{line: 2447, col: 5, offset: 79024},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2447, col: 5, offset: 79024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2447, col: 5, offset: 79024},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2447, col: 14, offset: 79033},
								expr: &actionExpr{
									pos: position{line: 2448, col: 9, offset: 79043},
									run: (*parser).callonNormalGroup5,
									expr: &seqExpr{
										pos: position{line: 2448, col: 9, offset: 79043},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2448, col: 9, offset: 79043},
												expr: &notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2449, col: 9, offset: 79056},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2450, col: 13, offset: 79078},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2840, col: 5, offset: 90159},
															run: (*parser).callonNormalGroup12,
															expr: &seqExpr{
																pos: position{line: 2840, col: 5, offset: 90159},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2840, col: 6, offset: 90160},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2841, col: 5, offset: 90205},
																		expr: &charClassMatcher{
																			pos:        position{line: 2841, col: 6, offset: 90206},
																			val:        "[,;?!\\pL\\pN]",
																			chars:      []rune{',', ';', '?', '!'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 2842, col: 5, offset: 90269},
																		expr: &choiceExpr{
																			pos: position{line: 2842, col: 7, offset: 90271},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonNormalGroup19,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1195, col: 32, offset: 36910},
																					val:        "�",
																					ignoreCase: false,
																					want:       "\"�\"",
																				},
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonNormalGroup22,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonNormalGroup29,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2919, col: 12, offset: 92331},
															run: (*parser).callonNormalGroup31,
															expr: &choiceExpr{
																pos: position{line: 2919, col: 13, offset: 92332},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2919, col: 13, offset: 92332},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 20, offset: 92339},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2919, col: 29, offset: 92348},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2453, col: 15, offset: 79145},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2454, col: 15, offset: 79234},
															name: "Quote",
														},
														&actionExpr{
															pos: position{line: 1197, col: 23, offset: 36942},
															run: (*parser).callonNormalGroup38,
															expr: &seqExpr{
																pos: position{line: 1197, col: 23, offset: 36942},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1197, col: 51, offset: 36970},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1197, col: 56, offset: 36975},
																			run: (*parser).callonNormalGroup42,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1197, col: 56, offset: 36975},
																				expr: &charClassMatcher{
																					pos:        position{line: 1197, col: 56, offset: 36975},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1195, col: 32, offset: 36910},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2534, col: 5, offset: 81501},
															run: (*parser).callonNormalGroup46,
															expr: &seqExpr{
																pos: position{line: 2534, col: 5, offset: 81501},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2534, col: 5, offset: 81501},
																		run: (*parser).callonNormalGroup48,
																	},
																	&labeledExpr{
																		pos:   position{line: 2537, col: 5, offset: 81572},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2576, col: 5, offset: 82884},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2576, col: 5, offset: 82884},
																					run: (*parser).callonNormalGroup51,
																					expr: &seqExpr{
																						pos: position{line: 2576, col: 5, offset: 82884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2576, col: 5, offset: 82884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&choiceExpr{
																								pos: position{line: 2576, col: 10, offset: 82889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2585, col: 5, offset: 83342},
																										run: (*parser).callonNormalGroup55,
																										expr: &litMatcher{
																											pos:        position{line: 2585, col: 5, offset: 83342},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2588, col: 7, offset: 83400},
																										run: (*parser).callonNormalGroup57,
																										expr: &litMatcher{
																											pos:        position{line: 2588, col: 7, offset: 83400},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2591, col: 7, offset: 83458},
																										run: (*parser).callonNormalGroup59,
																										expr: &litMatcher{
																											pos:        position{line: 2591, col: 7, offset: 83458},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2594, col: 7, offset: 83514},
																										run: (*parser).callonNormalGroup61,
																										expr: &litMatcher{
																											pos:        position{line: 2594, col: 7, offset: 83514},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2598, col: 14, offset: 83579},
																										run: (*parser).callonNormalGroup63,
																										expr: &litMatcher{
																											pos:        position{line: 2598, col: 14, offset: 83579},
																											val:        "(C)",
																											ignoreCase: false,
																											want:       "\"(C)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2602, col: 14, offset: 83645},
																										run: (*parser).callonNormalGroup65,
																										expr: &litMatcher{
																											pos:        position{line: 2602, col: 14, offset: 83645},
																											val:        "(TM)",
																											ignoreCase: false,
																											want:       "\"(TM)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2606, col: 15, offset: 83714},
																										run: (*parser).callonNormalGroup67,
																										expr: &litMatcher{
																											pos:        position{line: 2606, col: 15, offset: 83714},
																											val:        "(R)",
																											ignoreCase: false,
																											want:       "\"(R)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2610, col: 13, offset: 83779},
																										run: (*parser).callonNormalGroup69,
																										expr: &litMatcher{
																											pos:        position{line: 2610, col: 13, offset: 83779},
																											val:        "...",
																											ignoreCase: false,
																											want:       "\"...\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2638, col: 21, offset: 84349},
																										run: (*parser).callonNormalGroup71,
																										expr: &litMatcher{
																											pos:        position{line: 2638, col: 21, offset: 84349},
																											val:        "->",
																											ignoreCase: false,
																											want:       "\"->\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2617, col: 5, offset: 83935},
																										run: (*parser).callonNormalGroup73,
																										expr: &seqExpr{
																											pos: position{line: 2617, col: 5, offset: 83935},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2617, col: 5, offset: 83935},
																													val:        "--",
																													ignoreCase: false,
																													want:       "\"--\"",
																												},
																												&andCodeExpr{
																													pos: position{line: 2618, col: 5, offset: 83945},
																													run: (*parser).callonNormalGroup76,
																												},
																												&choiceExpr{
																													pos: position{line: 2622, col: 6, offset: 84032},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2910, col: 10, offset: 92147},
																															run: (*parser).callonNormalGroup78,
																															expr: &charClassMatcher{
																																pos:        position{line: 2910, col: 11, offset: 92148},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&andExpr{
																															pos: position{line: 2622, col: 14, offset: 84040},
																															expr: &choiceExpr{
																																pos: position{line: 2930, col: 8, offset: 92541},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2919, col: 12, offset: 92331},
																																		run: (*parser).callonNormalGroup82,
																																		expr: &choiceExpr{
																																			pos: position{line: 2919, col: 13, offset: 92332},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 13, offset: 92332},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 20, offset: 92339},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2919, col: 29, offset: 92348},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2927, col: 8, offset: 92491},
																																		expr: &anyMatcher{
																																			line: 2927, col: 9, offset: 92492,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2627, col: 5, offset: 84160},
																										run: (*parser).callonNormalGroup89,
																										expr: &seqExpr{
																											pos: position{line: 2627, col: 5, offset: 84160},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2627, col: 5, offset: 84160},
																													val:        "--",
																													ignoreCase: false,
																													want:       "\"--\"",
																												},
																												&andCodeExpr{
																													pos: position{line: 2628, col: 5, offset: 84170},
																													run: (*parser).callonNormalGroup92,
																												},
																												&andExpr{
																													pos: position{line: 2632, col: 5, offset: 84259},
																													expr: &choiceExpr{
																														pos: position{line: 2632, col: 7, offset: 84261},
																														alternatives: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 2831, col: 13, offset: 90012},
																																val:        "[\\pL\\pN]",
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&actionExpr{
																																pos: position{line: 2919, col: 12, offset: 92331},
																																run: (*parser).callonNormalGroup96,
																																expr: &choiceExpr{
																																	pos: position{line: 2919, col: 13, offset: 92332},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 13, offset: 92332},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 20, offset: 92339},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2919, col: 29, offset: 92348},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2927, col: 8, offset: 92491},
																																expr: &anyMatcher{
																																	line: 2927, col: 9, offset: 92492,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2642, col: 20, offset: 84419},
																										run: (*parser).callonNormalGroup103,
																										expr: &litMatcher{
																											pos:        position{line: 2642, col: 20, offset: 84419},
																											val:        "<-",
																											ignoreCase: false,
																											want:       "\"<-\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2646, col: 21, offset: 84490},
																										run: (*parser).callonNormalGroup105,
																										expr: &litMatcher{
																											pos:        position{line: 2646, col: 21, offset: 84490},
																											val:        "=>",
																											ignoreCase: false,
																											want:       "\"=>\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2650, col: 20, offset: 84560},
																										run: (*parser).callonNormalGroup107,
																										expr: &litMatcher{
																											pos:        position{line: 2650, col: 20, offset: 84560},
																											val:        "<=",
																											ignoreCase: false,
																											want:       "\"<=\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2585, col: 5, offset: 83342},
																					run: (*parser).callonNormalGroup109,
																					expr: &litMatcher{
																						pos:        position{line: 2585, col: 5, offset: 83342},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2588, col: 7, offset: 83400},
																					run: (*parser).callonNormalGroup111,
																					expr: &litMatcher{
																						pos:        position{line: 2588, col: 7, offset: 83400},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2591, col: 7, offset: 83458},
																					run: (*parser).callonNormalGroup113,
																					expr: &litMatcher{
																						pos:        position{line: 2591, col: 7, offset: 83458},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2594, col: 7, offset: 83514},
																					run: (*parser).callonNormalGroup115,
																					expr: &litMatcher{
																						pos:        position{line: 2594, col: 7, offset: 83514},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2598, col: 14, offset: 83579},
																					run: (*parser).callonNormalGroup117,
																					expr: &litMatcher{
																						pos:        position{line: 2598, col: 14, offset: 83579},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2602, col: 14, offset: 83645},
																					run: (*parser).callonNormalGroup119,
																					expr: &litMatcher{
																						pos:        position{line: 2602, col: 14, offset: 83645},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2606, col: 15, offset: 83714},
																					run: (*parser).callonNormalGroup121,
																					expr: &litMatcher{
																						pos:        position{line: 2606, col: 15, offset: 83714},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2610, col: 13, offset: 83779},
																					run: (*parser).callonNormalGroup123,
																					expr: &litMatcher{
																						pos:        position{line: 2610, col: 13, offset: 83779},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2617, col: 5, offset: 83935},
																					run: (*parser).callonNormalGroup125,
																					expr: &seqExpr{
																						pos: position{line: 2617, col: 5, offset: 83935},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2617, col: 5, offset: 83935},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2618, col: 5, offset: 83945},
																								run: (*parser).callonNormalGroup128,
																							},
																							&choiceExpr{
																								pos: position{line: 2622, col: 6, offset: 84032},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2910, col: 10, offset: 92147},
																										run: (*parser).callonNormalGroup130,
																										expr: &charClassMatcher{
																											pos:        position{line: 2910, col: 11, offset: 92148},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2622, col: 14, offset: 84040},
																										expr: &choiceExpr{
																											pos: position{line: 2930, col: 8, offset: 92541},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2919, col: 12, offset: 92331},
																													run: (*parser).callonNormalGroup134,
																													expr: &choiceExpr{
																														pos: position{line: 2919, col: 13, offset: 92332},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2919, col: 13, offset: 92332},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 20, offset: 92339},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2919, col: 29, offset: 92348},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2927, col: 8, offset: 92491},
																													expr: &anyMatcher{
																														line: 2927, col: 9, offset: 92492,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2627, col: 5, offset: 84160},
																					run: (*parser).callonNormalGroup141,
																					expr: &seqExpr{
																						pos: position{line: 2627, col: 5, offset: 84160},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2627, col: 5, offset: 84160},
																								val:        "--",
																								ignoreCase: false,
																								want:       "\"--\"",
																							},
																							&andCodeExpr{
																								pos: position{line: 2628, col: 5, offset: 84170},
																								run: (*parser).callonNormalGroup144,
																							},
																							&andExpr{
																								pos: position{line: 2632, col: 5, offset: 84259},
																								expr: &choiceExpr{
																									pos: position{line: 2632, col: 7, offset: 84261},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2831, col: 13, offset: 90012},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&actionExpr{
																											pos: position{line: 2919, col: 12, offset: 92331},
																											run: (*parser).callonNormalGroup148,
																											expr: &choiceExpr{
																												pos: position{line: 2919, col: 13, offset: 92332},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2919, col: 13, offset: 92332},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 20, offset: 92339},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2919, col: 29, offset: 92348},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2927, col: 8, offset: 92491},
																											expr: &anyMatcher{
																												line: 2927, col: 9, offset: 92492,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 21, offset: 84349},
																					run: (*parser).callonNormalGroup155,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 21, offset: 84349},
																						val:        "->",
																						ignoreCase: false,
																						want:       "\"->\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 20, offset: 84419},
																					run: (*parser).callonNormalGroup157,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 20, offset: 84419},
																						val:        "<-",
																						ignoreCase: false,
																						want:       "\"<-\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 21, offset: 84490},
																					run: (*parser).callonNormalGroup159,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 21, offset: 84490},
																						val:        "=>",
																						ignoreCase: false,
																						want:       "\"=>\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 20, offset: 84560},
																					run: (*parser).callonNormalGroup161,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 20, offset: 84560},
																						val:        "<=",
																						ignoreCase: false,
																						want:       "\"<=\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2659, col: 5, offset: 84866},
																					run: (*parser).callonNormalGroup163,
																					expr: &seqExpr{
																						pos: position{line: 2659, col: 5, offset: 84866},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2659, col: 5, offset: 84866},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&andExpr{
																								pos: position{line: 2659, col: 10, offset: 84871},
																								expr: &charClassMatcher{
																									pos:        position{line: 2659, col: 11, offset: 84872},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2665, col: 6, offset: 85063},
																					run: (*parser).callonNormalGroup168,
																					expr: &seqExpr{
																						pos: position{line: 2665, col: 6, offset: 85063},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 2665, col: 6, offset: 85063},
																								run: (*parser).callonNormalGroup170,
																							},
																							&litMatcher{
																								pos:        position{line: 2669, col: 6, offset: 85187},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&andExpr{
																								pos: position{line: 2669, col: 10, offset: 85191},
																								expr: &charClassMatcher{
																									pos:        position{line: 2669, col: 11, offset: 85192},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1205, col: 5, offset: 37388},
															run: (*parser).callonNormalGroup174,
															expr: &seqExpr{
																pos: position{line: 1205, col: 5, offset: 37388},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1205, col: 5, offset: 37388},
																		run: (*parser).callonNormalGroup176,
																	},
																	&litMatcher{
																		pos:        position{line: 1208, col: 5, offset: 37464},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 1209, col: 5, offset: 37472},
																		run: (*parser).callonNormalGroup178,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1213, col: 5, offset: 37559},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonNormalGroup180,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1213, col: 12, offset: 37566},
																		expr: &choiceExpr{
																			pos: position{line: 2930, col: 8, offset: 92541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonNormalGroup184,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2458, col: 15, offset: 79491},
															name: "InlinePassthrough",
														},
														&ruleRefExpr{
															pos:  position{line: 2459, col: 15, offset: 79523},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2545, col: 5, offset: 81727},
															run: (*parser).callonNormalGroup193,
															expr: &seqExpr{
																pos: position{line: 2545, col: 5, offset: 81727},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2545, col: 5, offset: 81727},
																		run: (*parser).callonNormalGroup195,
																	},
																	&labeledExpr{
																		pos:   position{line: 2548, col: 5, offset: 81803},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2550, col: 9, offset: 81901},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2550, col: 9, offset: 81901},
																					run: (*parser).callonNormalGroup198,
																					expr: &choiceExpr{
																						pos: position{line: 685, col: 27, offset: 21818},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 685, col: 27, offset: 21818},
																								run: (*parser).callonNormalGroup200,
																								expr: &seqExpr{
																									pos: position{line: 685, col: 27, offset: 21818},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 685, col: 27, offset: 21818},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 685, col: 32, offset: 21823},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2895, col: 7, offset: 91799},
																												run: (*parser).callonNormalGroup204,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2895, col: 7, offset: 91799},
																													expr: &charClassMatcher{
																														pos:        position{line: 2895, col: 7, offset: 91799},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 685, col: 40, offset: 21831},
																											expr: &actionExpr{
																												pos: position{line: 2910, col: 10, offset: 92147},
																												run: (*parser).callonNormalGroup208,
																												expr: &charClassMatcher{
																													pos:        position{line: 2910, col: 11, offset: 92148},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 685, col: 47, offset: 21838},
																											val:        ",",
																											ignoreCase: false,
																											want:       "\",\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 685, col: 51, offset: 21842},
																											label: "label",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 695, col: 24, offset: 22243},
																												expr: &choiceExpr{
																													pos: position{line: 696, col: 5, offset: 22249},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 696, col: 6, offset: 22250},
																															run: (*parser).callonNormalGroup214,
																															expr: &seqExpr{
																																pos: position{line: 696, col: 6, offset: 22250},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 696, col: 6, offset: 22250},
																																		val:        "[\\pL\\pN]",
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 696, col: 14, offset: 22258},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 696, col: 14, offset: 22258},
																																			val:        "[^\\r\\n{<>]",
																																			chars:      []rune{'\r', '\n', '{', '<', '>'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 644, col: 5, offset: 20295},
																															run: (*parser).callonNormalGroup219,
																															expr: &seqExpr{
																																pos: position{line: 644, col: 5, offset: 20295},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 644, col: 5, offset: 20295},
																																		val:        "\\{",
																																		ignoreCase: false,
																																		want:       "\"\\\\{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 644, col: 13, offset: 20303},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonNormalGroup223,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 644, col: 32, offset: 20322},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 651, col: 5, offset: 20563},
																															run: (*parser).callonNormalGroup229,
																															expr: &seqExpr{
																																pos: position{line: 651, col: 5, offset: 20563},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 651, col: 5, offset: 20563},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 651, col: 9, offset: 20567},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 318, col: 18, offset: 9733},
																																			run: (*parser).callonNormalGroup233,
																																			expr: &seqExpr{
																																				pos: position{line: 318, col: 18, offset: 9733},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 318, col: 18, offset: 9733},
																																						val:        "[_\\pL\\pN]",
																																						chars:      []rune{'_'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 318, col: 28, offset: 9743},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 318, col: 29, offset: 9744},
																																							val:        "[-\\pL\\pN]",
																																							chars:      []rune{'-'},
																																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 651, col: 28, offset: 20586},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 700, col: 8, offset: 22484},
																															run: (*parser).callonNormalGroup239,
																															expr: &litMatcher{
																																pos:        position{line: 700, col: 8, offset: 22484},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 685, col: 79, offset: 21870},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 687, col: 9, offset: 21943},
																								run: (*parser).callonNormalGroup242,
																								expr: &seqExpr{
																									pos: position{line: 687, col: 9, offset: 21943},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 687, col: 9, offset: 21943},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 687, col: 14, offset: 21948},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2895, col: 7, offset: 91799},
																												run: (*parser).callonNormalGroup246,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2895, col: 7, offset: 91799},
																													expr: &charClassMatcher{
																														pos:        position{line: 2895, col: 7, offset: 91799},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 687, col: 22, offset: 21956},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2553, col: 11, offset: 82005},
																					run: (*parser).callonNormalGroup250,
																					expr: &charClassMatcher{
																						pos:        position{line: 2553, col: 12, offset: 82006},
																						val:        "[<>&]",
																						chars:      []rune{'<', '>', '&'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 635, col: 5, offset: 20085},
															run: (*parser).callonNormalGroup252,
															expr: &seqExpr{
																pos: position{line: 635, col: 5, offset: 20085},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 635, col: 5, offset: 20085},
																		run: (*parser).callonNormalGroup254,
																	},
																	&labeledExpr{
																		pos:   position{line: 638, col: 5, offset: 20157},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 638, col: 14, offset: 20166},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 657, col: 25, offset: 20767},
																					run: (*parser).callonNormalGroup257,
																					expr: &seqExpr{
																						pos: position{line: 657, col: 25, offset: 20767},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 657, col: 25, offset: 20767},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 657, col: 37, offset: 20779},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									run: (*parser).callonNormalGroup261,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9733},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9743},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9744},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 657, col: 56, offset: 20798},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 657, col: 62, offset: 20804},
																									expr: &actionExpr{
																										pos: position{line: 665, col: 17, offset: 21099},
																										run: (*parser).callonNormalGroup268,
																										expr: &seqExpr{
																											pos: position{line: 665, col: 17, offset: 21099},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 665, col: 17, offset: 21099},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 665, col: 21, offset: 21103},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 665, col: 28, offset: 21110},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 665, col: 28, offset: 21110},
																																run: (*parser).callonNormalGroup273,
																																expr: &charClassMatcher{
																																	pos:        position{line: 665, col: 28, offset: 21110},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 667, col: 9, offset: 21164},
																																run: (*parser).callonNormalGroup275,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 667, col: 9, offset: 21164},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 667, col: 9, offset: 21164},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 657, col: 78, offset: 20820},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 661, col: 25, offset: 20938},
																					run: (*parser).callonNormalGroup279,
																					expr: &seqExpr{
																						pos: position{line: 661, col: 25, offset: 20938},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 661, col: 25, offset: 20938},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 38, offset: 20951},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									run: (*parser).callonNormalGroup283,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9733},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9743},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9744},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 57, offset: 20970},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 661, col: 63, offset: 20976},
																									expr: &actionExpr{
																										pos: position{line: 665, col: 17, offset: 21099},
																										run: (*parser).callonNormalGroup290,
																										expr: &seqExpr{
																											pos: position{line: 665, col: 17, offset: 21099},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 665, col: 17, offset: 21099},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 665, col: 21, offset: 21103},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 665, col: 28, offset: 21110},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 665, col: 28, offset: 21110},
																																run: (*parser).callonNormalGroup295,
																																expr: &charClassMatcher{
																																	pos:        position{line: 665, col: 28, offset: 21110},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 667, col: 9, offset: 21164},
																																run: (*parser).callonNormalGroup297,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 667, col: 9, offset: 21164},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 667, col: 9, offset: 21164},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 661, col: 79, offset: 20992},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 644, col: 5, offset: 20295},
																					run: (*parser).callonNormalGroup301,
																					expr: &seqExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 644, col: 5, offset: 20295},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 644, col: 13, offset: 20303},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									run: (*parser).callonNormalGroup305,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9733},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9743},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9744},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 644, col: 32, offset: 20322},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 651, col: 5, offset: 20563},
																					run: (*parser).callonNormalGroup311,
																					expr: &seqExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 651, col: 5, offset: 20563},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 651, col: 9, offset: 20567},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9733},
																									run: (*parser).callonNormalGroup315,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9733},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9743},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9744},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 651, col: 28, offset: 20586},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2853, col: 12, offset: 90555},
															run: (*parser).callonNormalGroup321,
															expr: &charClassMatcher{
																pos:        position{line: 2853, col: 12, offset: 90555},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValue",
			pos:  position{line: 2471, col: 1, offset: 79980},
			expr: &actionExpr{
				pos: position{line: 2472, col: 5, offset: 80013},
				run: (*parser).callonAttributeStructuredValue1,
				expr: &seqExpr{
					pos: position{line: 2472, col: 5, offset: 80013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2472, col: 5, offset: 80013},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2472, col: 14, offset: 80022},
								expr: &ruleRefExpr{
									pos:  position{line: 2472, col: 15, offset: 80023},
									name: "AttributeStructuredValueElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValueElement",
			pos:  position{line: 2476, col: 1, offset: 80120},
			expr: &actionExpr{
				pos: position{line: 2477, col: 5, offset: 80160},
				run: (*parser).callonAttributeStructuredValueElement1,
				expr: &seqExpr{
					pos: position{line: 2477, col: 5, offset: 80160},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2477, col: 5, offset: 80160},
							expr: &notExpr{
								pos: position{line: 2927, col: 8, offset: 92491},
								expr: &anyMatcher{
									line: 2927, col: 9, offset: 92492,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2478, col: 5, offset: 80169},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2479, col: 9, offset: 80187},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2840, col: 5, offset: 90159},
										run: (*parser).callonAttributeStructuredValueElement8,
										expr: &seqExpr{
											pos: position{line: 2840, col: 5, offset: 90159},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2840, col: 6, offset: 90160},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2841, col: 5, offset: 90205},
													expr: &charClassMatcher{
														pos:        position{line: 2841, col: 6, offset: 90206},
														val:        "[,;?!\\pL\\pN]",
														chars:      []rune{',', ';', '?', '!'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2842, col: 5, offset: 90269},
													expr: &choiceExpr{
														pos: position{line: 2842, col: 7, offset: 90271},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2910, col: 10, offset: 92147},
																run: (*parser).callonAttributeStructuredValueElement15,
																expr: &charClassMatcher{
																	pos:        position{line: 2910, col: 11, offset: 92148},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1195, col: 32, offset: 36910},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonAttributeStructuredValueElement18,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2910, col: 10, offset: 92147},
										run: (*parser).callonAttributeStructuredValueElement25,
										expr: &charClassMatcher{
											pos:        position{line: 2910, col: 11, offset: 92148},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2481, col: 11, offset: 80225},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2482, col: 11, offset: 80247},
										name: "Quote",
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 81727},
										run: (*parser).callonAttributeStructuredValueElement29,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 81727},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2545, col: 5, offset: 81727},
													run: (*parser).callonAttributeStructuredValueElement31,
												},
												&labeledExpr{
													pos:   position{line: 2548, col: 5, offset: 81803},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2550, col: 9, offset: 81901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2550, col: 9, offset: 81901},
																run: (*parser).callonAttributeStructuredValueElement34,
																expr: &choiceExpr{
																	pos: position{line: 685, col: 27, offset: 21818},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 685, col: 27, offset: 21818},
																			run: (*parser).callonAttributeStructuredValueElement36,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 27, offset: 21818},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 685, col: 27, offset: 21818},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 32, offset: 21823},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonAttributeStructuredValueElement40,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 40, offset: 21831},
																						expr: &actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonAttributeStructuredValueElement44,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 47, offset: 21838},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 685, col: 51, offset: 21842},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 695, col: 24, offset: 22243},
																							expr: &choiceExpr{
																								pos: position{line: 696, col: 5, offset: 22249},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 696, col: 6, offset: 22250},
																										run: (*parser).callonAttributeStructuredValueElement50,
																										expr: &seqExpr{
																											pos: position{line: 696, col: 6, offset: 22250},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 696, col: 6, offset: 22250},
																													val:        "[\\pL\\pN]",
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 696, col: 14, offset: 22258},
																													expr: &charClassMatcher{
																														pos:        position{line: 696, col: 14, offset: 22258},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 644, col: 5, offset: 20295},
																										run: (*parser).callonAttributeStructuredValueElement55,
																										expr: &seqExpr{
																											pos: position{line: 644, col: 5, offset: 20295},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 644, col: 5, offset: 20295},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 644, col: 13, offset: 20303},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonAttributeStructuredValueElement59,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 644, col: 32, offset: 20322},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 651, col: 5, offset: 20563},
																										run: (*parser).callonAttributeStructuredValueElement65,
																										expr: &seqExpr{
																											pos: position{line: 651, col: 5, offset: 20563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 651, col: 5, offset: 20563},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 651, col: 9, offset: 20567},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9733},
																														run: (*parser).callonAttributeStructuredValueElement69,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9733},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9733},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9743},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9744},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 651, col: 28, offset: 20586},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 700, col: 8, offset: 22484},
																										run: (*parser).callonAttributeStructuredValueElement75,
																										expr: &litMatcher{
																											pos:        position{line: 700, col: 8, offset: 22484},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 685, col: 79, offset: 21870},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 687, col: 9, offset: 21943},
																			run: (*parser).callonAttributeStructuredValueElement78,
																			expr: &seqExpr{
																				pos: position{line: 687, col: 9, offset: 21943},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 687, col: 9, offset: 21943},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 687, col: 14, offset: 21948},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2895, col: 7, offset: 91799},
																							run: (*parser).callonAttributeStructuredValueElement82,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2895, col: 7, offset: 91799},
																								expr: &charClassMatcher{
																									pos:        position{line: 2895, col: 7, offset: 91799},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 687, col: 22, offset: 21956},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2553, col: 11, offset: 82005},
																run: (*parser).callonAttributeStructuredValueElement86,
																expr: &charClassMatcher{
																	pos:        position{line: 2553, col: 12, offset: 82006},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 82884},
										run: (*parser).callonAttributeStructuredValueElement88,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 82884},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2576, col: 5, offset: 82884},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2576, col: 10, offset: 82889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2585, col: 5, offset: 83342},
															run: (*parser).callonAttributeStructuredValueElement92,
															expr: &litMatcher{
																pos:        position{line: 2585, col: 5, offset: 83342},
																val:        "\"`",
																ignoreCase: false,
																want:       "\"\\\"`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2588, col: 7, offset: 83400},
															run: (*parser).callonAttributeStructuredValueElement94,
															expr: &litMatcher{
																pos:        position{line: 2588, col: 7, offset: 83400},
																val:        "`\"",
																ignoreCase: false,
																want:       "\"`\\\"\"",
															},
														},
														&actionExpr{
															pos: position{line: 2591, col: 7, offset: 83458},
															run: (*parser).callonAttributeStructuredValueElement96,
															expr: &litMatcher{
																pos:        position{line: 2591, col: 7, offset: 83458},
																val:        "'`",
																ignoreCase: false,
																want:       "\"'`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2594, col: 7, offset: 83514},
															run: (*parser).callonAttributeStructuredValueElement98,
															expr: &litMatcher{
																pos:        position{line: 2594, col: 7, offset: 83514},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2598, col: 14, offset: 83579},
															run: (*parser).callonAttributeStructuredValueElement100,
															expr: &litMatcher{
																pos:        position{line: 2598, col: 14, offset: 83579},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2602, col: 14, offset: 83645},
															run: (*parser).callonAttributeStructuredValueElement102,
															expr: &litMatcher{
																pos:        position{line: 2602, col: 14, offset: 83645},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2606, col: 15, offset: 83714},
															run: (*parser).callonAttributeStructuredValueElement104,
															expr: &litMatcher{
																pos:        position{line: 2606, col: 15, offset: 83714},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2610, col: 13, offset: 83779},
															run: (*parser).callonAttributeStructuredValueElement106,
															expr: &litMatcher{
																pos:        position{line: 2610, col: 13, offset: 83779},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
														&actionExpr{
															pos: position{line: 2638, col: 21, offset: 84349},
															run: (*parser).callonAttributeStructuredValueElement108,
															expr: &litMatcher{
																pos:        position{line: 2638, col: 21, offset: 84349},
																val:        "->",
																ignoreCase: false,
																want:       "\"->\"",
															},
														},
														&actionExpr{
															pos: position{line: 2617, col: 5, offset: 83935},
															run: (*parser).callonAttributeStructuredValueElement110,
															expr: &seqExpr{
																pos: position{line: 2617, col: 5, offset: 83935},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2617, col: 5, offset: 83935},
																		val:        "--",
																		ignoreCase: false,
																		want:       "\"--\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 2618, col: 5, offset: 83945},
																		run: (*parser).callonAttributeStructuredValueElement113,
																	},
																	&choiceExpr{
																		pos: position{line: 2622, col: 6, offset: 84032},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonAttributeStructuredValueElement115,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 2622, col: 14, offset: 84040},
																				expr: &choiceExpr{
																					pos: position{line: 2930, col: 8, offset: 92541},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonAttributeStructuredValueElement119,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2927, col: 8, offset: 92491},
																							expr: &anyMatcher{
																								line: 2927, col: 9, offset: 92492,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2627, col: 5, offset: 84160},
															run: (*parser).callonAttributeStructuredValueElement126,
															expr: &seqExpr{
																pos: position{line: 2627, col: 5, offset: 84160},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2627, col: 5, offset: 84160},
																		val:        "--",
																		ignoreCase: false,
																		want:       "\"--\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 2628, col: 5, offset: 84170},
																		run: (*parser).callonAttributeStructuredValueElement129,
																	},
																	&andExpr{
																		pos: position{line: 2632, col: 5, offset: 84259},
																		expr: &choiceExpr{
																			pos: position{line: 2632, col: 7, offset: 84261},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2831, col: 13, offset: 90012},
																					val:        "[\\pL\\pN]",
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonAttributeStructuredValueElement133,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2927, col: 8, offset: 92491},
																					expr: &anyMatcher{
																						line: 2927, col: 9, offset: 92492,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2642, col: 20, offset: 84419},
															run: (*parser).callonAttributeStructuredValueElement140,
															expr: &litMatcher{
																pos:        position{line: 2642, col: 20, offset: 84419},
																val:        "<-",
																ignoreCase: false,
																want:       "\"<-\"",
															},
														},
														&actionExpr{
															pos: position{line: 2646, col: 21, offset: 84490},
															run: (*parser).callonAttributeStructuredValueElement142,
															expr: &litMatcher{
																pos:        position{line: 2646, col: 21, offset: 84490},
																val:        "=>",
																ignoreCase: false,
																want:       "\"=>\"",
															},
														},
														&actionExpr{
															pos: position{line: 2650, col: 20, offset: 84560},
															run: (*parser).callonAttributeStructuredValueElement144,
															expr: &litMatcher{
																pos:        position{line: 2650, col: 20, offset: 84560},
																val:        "<=",
																ignoreCase: false,
																want:       "\"<=\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2585, col: 5, offset: 83342},
										run: (*parser).callonAttributeStructuredValueElement146,
										expr: &litMatcher{
											pos:        position{line: 2585, col: 5, offset: 83342},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2588, col: 7, offset: 83400},
										run: (*parser).callonAttributeStructuredValueElement148,
										expr: &litMatcher{
											pos:        position{line: 2588, col: 7, offset: 83400},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2591, col: 7, offset: 83458},
										run: (*parser).callonAttributeStructuredValueElement150,
										expr: &litMatcher{
											pos:        position{line: 2591, col: 7, offset: 83458},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2594, col: 7, offset: 83514},
										run: (*parser).callonAttributeStructuredValueElement152,
										expr: &litMatcher{
											pos:        position{line: 2594, col: 7, offset: 83514},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2598, col: 14, offset: 83579},
										run: (*parser).callonAttributeStructuredValueElement154,
										expr: &litMatcher{
											pos:        position{line: 2598, col: 14, offset: 83579},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2602, col: 14, offset: 83645},
										run: (*parser).callonAttributeStructuredValueElement156,
										expr: &litMatcher{
											pos:        position{line: 2602, col: 14, offset: 83645},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2606, col: 15, offset: 83714},
										run: (*parser).callonAttributeStructuredValueElement158,
										expr: &litMatcher{
											pos:        position{line: 2606, col: 15, offset: 83714},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2610, col: 13, offset: 83779},
										run: (*parser).callonAttributeStructuredValueElement160,
										expr: &litMatcher{
											pos:        position{line: 2610, col: 13, offset: 83779},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2617, col: 5, offset: 83935},
										run: (*parser).callonAttributeStructuredValueElement162,
										expr: &seqExpr{
											pos: position{line: 2617, col: 5, offset: 83935},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2617, col: 5, offset: 83935},
													val:        "--",
													ignoreCase: false,
													want:       "\"--\"",
												},
												&andCodeExpr{
													pos: position{line: 2618, col: 5, offset: 83945},
													run: (*parser).callonAttributeStructuredValueElement165,
												},
												&choiceExpr{
													pos: position{line: 2622, col: 6, offset: 84032},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2910, col: 10, offset: 92147},
															run: (*parser).callonAttributeStructuredValueElement167,
															expr: &charClassMatcher{
																pos:        position{line: 2910, col: 11, offset: 92148},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&andExpr{
															pos: position{line: 2622, col: 14, offset: 84040},
															expr: &choiceExpr{
																pos: position{line: 2930, col: 8, offset: 92541},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2919, col: 12, offset: 92331},
																		run: (*parser).callonAttributeStructuredValueElement171,
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 13, offset: 92332},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2919, col: 13, offset: 92332},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 20, offset: 92339},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2919, col: 29, offset: 92348},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2927, col: 8, offset: 92491},
																		expr: &anyMatcher{
																			line: 2927, col: 9, offset: 92492,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 5, offset: 84160},
										run: (*parser).callonAttributeStructuredValueElement178,
										expr: &seqExpr{
											pos: position{line: 2627, col: 5, offset: 84160},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2627, col: 5, offset: 84160},
													val:        "--",
													ignoreCase: false,
													want:       "\"--\"",
												},
												&andCodeExpr{
													pos: position{line: 2628, col: 5, offset: 84170},
													run: (*parser).callonAttributeStructuredValueElement181,
												},
												&andExpr{
													pos: position{line: 2632, col: 5, offset: 84259},
													expr: &choiceExpr{
														pos: position{line: 2632, col: 7, offset: 84261},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2831, col: 13, offset: 90012},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2919, col: 12, offset: 92331},
																run: (*parser).callonAttributeStructuredValueElement185,
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 13, offset: 92332},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2919, col: 13, offset: 92332},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 20, offset: 92339},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2919, col: 29, offset: 92348},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2927, col: 8, offset: 92491},
																expr: &anyMatcher{
																	line: 2927, col: 9, offset: 92492,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 21, offset: 84349},
										run: (*parser).callonAttributeStructuredValueElement192,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 21, offset: 84349},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 20, offset: 84419},
										run: (*parser).callonAttributeStructuredValueElement194,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 20, offset: 84419},
											val:        "<-",
											ignoreCase: false,
											want:       "\"<-\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 21, offset: 84490},
										run: (*parser).callonAttributeStructuredValueElement196,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 21, offset: 84490},
											val:        "=>",
											ignoreCase: false,
											want:       "\"=>\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 20, offset: 84560},
										run: (*parser).callonAttributeStructuredValueElement198,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 20, offset: 84560},
											val:        "<=",
											ignoreCase: false,
											want:       "\"<=\"",
										},
									},
									&actionExpr{
										pos: position{line: 2659, col: 5, offset: 84866},
										run: (*parser).callonAttributeStructuredValueElement200,
										expr: &seqExpr{
											pos: position{line: 2659, col: 5, offset: 84866},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2659, col: 5, offset: 84866},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2659, col: 10, offset: 84871},
													expr: &charClassMatcher{
														pos:        position{line: 2659, col: 11, offset: 84872},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2665, col: 6, offset: 85063},
										run: (*parser).callonAttributeStructuredValueElement205,
										expr: &seqExpr{
											pos: position{line: 2665, col: 6, offset: 85063},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2665, col: 6, offset: 85063},
													run: (*parser).callonAttributeStructuredValueElement207,
												},
												&litMatcher{
													pos:        position{line: 2669, col: 6, offset: 85187},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2669, col: 10, offset: 85191},
													expr: &charClassMatcher{
														pos:        position{line: 2669, col: 11, offset: 85192},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										run: (*parser).callonAttributeStructuredValueElement211,
										expr: &seqExpr{
											pos: position{line: 1197, col: 23, offset: 36942},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1197, col: 51, offset: 36970},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														run: (*parser).callonAttributeStructuredValueElement215,
														expr: &oneOrMoreExpr{
															pos: position{line: 1197, col: 56, offset: 36975},
															expr: &charClassMatcher{
																pos:        position{line: 1197, col: 56, offset: 36975},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1195, col: 32, offset: 36910},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2853, col: 12, offset: 90555},
										run: (*parser).callonAttributeStructuredValueElement219,
										expr: &charClassMatcher{
											pos:        position{line: 2853, col: 12, offset: 90555},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2493, col: 1, offset: 80489},
			expr: &actionExpr{
				pos: position{line: 2495, col: 5, offset: 80571},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2495, col: 5, offset: 80571},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2495, col: 5, offset: 80571},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2498, col: 5, offset: 80636},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2499, col: 9, offset: 80654},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2499, col: 9, offset: 80654},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2500, col: 11, offset: 80675},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2501, col: 11, offset: 80698},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2502, col: 11, offset: 80714},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2503, col: 11, offset: 80743},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2504, col: 11, offset: 80769},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2505, col: 11, offset: 80795},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1281, col: 5, offset: 39502},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1281, col: 5, offset: 39502},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1281, col: 5, offset: 39502},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1281, col: 14, offset: 39511},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2895, col: 7, offset: 91799},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2895, col: 7, offset: 91799},
															expr: &charClassMatcher{
																pos:        position{line: 2895, col: 7, offset: 91799},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1281, col: 22, offset: 39519},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1287, col: 5, offset: 39705},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1287, col: 5, offset: 39705},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1287, col: 5, offset: 39705},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1287, col: 10, offset: 39710},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2895, col: 7, offset: 91799},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 2895, col: 7, offset: 91799},
															expr: &charClassMatcher{
																pos:        position{line: 2895, col: 7, offset: 91799},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1287, col: 18, offset: 39718},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1326, col: 23, offset: 41195},
										run: (*parser).callonInlineMacro29,
										expr: &seqExpr{
											pos: position{line: 1326, col: 23, offset: 41195},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1326, col: 23, offset: 41195},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1326, col: 29, offset: 41201},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1333, col: 30, offset: 41532},
														run: (*parser).callonInlineMacro33,
														expr: &oneOrMoreExpr{
															pos: position{line: 1333, col: 30, offset: 41532},
															expr: &choiceExpr{
																pos: position{line: 1333, col: 31, offset: 41533},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2831, col: 13, offset: 90012},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2910, col: 10, offset: 92147},
																		run: (*parser).callonInlineMacro37,
																		expr: &charClassMatcher{
																			pos:        position{line: 2910, col: 11, offset: 92148},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1327, col: 5, offset: 41240},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1327, col: 11, offset: 41246},
														expr: &actionExpr{
															pos: position{line: 1327, col: 12, offset: 41247},
															run: (*parser).callonInlineMacro41,
															expr: &seqExpr{
																pos: position{line: 1327, col: 12, offset: 41247},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1327, col: 12, offset: 41247},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonInlineMacro44,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1327, col: 19, offset: 41254},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1327, col: 23, offset: 41258},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonInlineMacro48,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1327, col: 30, offset: 41265},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1333, col: 30, offset: 41532},
																			run: (*parser).callonInlineMacro51,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1333, col: 30, offset: 41532},
																				expr: &choiceExpr{
																					pos: position{line: 1333, col: 31, offset: 41533},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2831, col: 13, offset: 90012},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonInlineMacro55,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1328, col: 5, offset: 41332},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1328, col: 11, offset: 41338},
														expr: &actionExpr{
															pos: position{line: 1328, col: 12, offset: 41339},
															run: (*parser).callonInlineMacro59,
															expr: &seqExpr{
																pos: position{line: 1328, col: 12, offset: 41339},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1328, col: 12, offset: 41339},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonInlineMacro62,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1328, col: 19, offset: 41346},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1328, col: 23, offset: 41350},
																		expr: &actionExpr{
																			pos: position{line: 2910, col: 10, offset: 92147},
																			run: (*parser).callonInlineMacro66,
																			expr: &charClassMatcher{
																				pos:        position{line: 2910, col: 11, offset: 92148},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1328, col: 30, offset: 41357},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1333, col: 30, offset: 41532},
																			run: (*parser).callonInlineMacro69,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1333, col: 30, offset: 41532},
																				expr: &choiceExpr{
																					pos: position{line: 1333, col: 31, offset: 41533},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2831, col: 13, offset: 90012},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2910, col: 10, offset: 92147},
																							run: (*parser).callonInlineMacro73,
																							expr: &charClassMatcher{
																								pos:        position{line: 2910, col: 11, offset: 92148},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1329, col: 5, offset: 41424},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2508, col: 11, offset: 80874},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2509, col: 11, offset: 80894},
										name: "InlineButton",
									},
									&ruleRefExpr{
										pos:  position{line: 2510, col: 11, offset: 80917},
										name: "InlineMenu",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2514, col: 1, offset: 80974},
			expr: &actionExpr{
				pos: position{line: 2516, col: 5, offset: 81062},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2516, col: 5, offset: 81062},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2516, col: 5, offset: 81062},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2519, col: 5, offset: 81139},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2520, col: 9, offset: 81157},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1396, col: 26, offset: 44425},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1396, col: 26, offset: 44425},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1394, col: 32, offset: 44393},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1396, col: 54, offset: 44453},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1400, col: 33, offset: 44666},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1400, col: 34, offset: 44667},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1400, col: 34, offset: 44667},
																	expr: &seqExpr{
																		pos: position{line: 1400, col: 35, offset: 44668},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1400, col: 35, offset: 44668},
																				expr: &litMatcher{
																					pos:        position{line: 1394, col: 32, offset: 44393},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1400, col: 64, offset: 44697,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1402, col: 11, offset: 44870},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1402, col: 11, offset: 44870},
																	expr: &seqExpr{
																		pos: position{line: 1402, col: 12, offset: 44871},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1402, col: 12, offset: 44871},
																				expr: &actionExpr{
																					pos: position{line: 2910, col: 10, offset: 92147},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2910, col: 11, offset: 92148},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1402, col: 19, offset: 44878},
																				expr: &actionExpr{
																					pos: position{line: 2919, col: 12, offset: 92331},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2919, col: 13, offset: 92332},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2919, col: 13, offset: 92332},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 20, offset: 92339},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2919, col: 29, offset: 92348},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1402, col: 28, offset: 44887},
																				expr: &litMatcher{
																					pos:        position{line: 1394, col: 32, offset: 44393},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1402, col: 57, offset: 44916,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1394, col: 32, offset: 44393},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1396, col: 121, offset: 44520},
													expr: &charClassMatcher{
														pos:        position{line: 2831, col: 13, offset: 90012},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1384, col: 26, offset: 43708},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1384, col: 26, offset: 43708},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1382, col: 32, offset: 43678},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1384, col: 54, offset: 43736},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1388, col: 33, offset: 43949},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1388, col: 34, offset: 43950},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1388, col: 34, offset: 43950},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1388, col: 35, offset: 43951},
																			expr: &litMatcher{
																				pos:        position{line: 1382, col: 32, offset: 43678},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1388, col: 64, offset: 43980},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1388, col: 71, offset: 43987},
																			expr: &actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1388, col: 80, offset: 43996,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1388, col: 83, offset: 43999},
																			expr: &seqExpr{
																				pos: position{line: 1388, col: 84, offset: 44000},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1388, col: 84, offset: 44000},
																						expr: &seqExpr{
																							pos: position{line: 1388, col: 86, offset: 44002},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2914, col: 11, offset: 92214},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2914, col: 11, offset: 92214},
																										expr: &charClassMatcher{
																											pos:        position{line: 2914, col: 12, offset: 92215},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1382, col: 32, offset: 43678},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1388, col: 122, offset: 44038},
																						expr: &litMatcher{
																							pos:        position{line: 1382, col: 32, offset: 43678},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1388, col: 151, offset: 44067},
																						expr: &actionExpr{
																							pos: position{line: 2919, col: 12, offset: 92331},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2919, col: 13, offset: 92332},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2919, col: 13, offset: 92332},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 20, offset: 92339},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2919, col: 29, offset: 92348},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1388, col: 160, offset: 44076,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1390, col: 11, offset: 44226},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1390, col: 12, offset: 44227},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1390, col: 12, offset: 44227},
																			expr: &actionExpr{
																				pos: position{line: 2910, col: 10, offset: 92147},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2910, col: 11, offset: 92148},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1390, col: 19, offset: 44234},
																			expr: &actionExpr{
																				pos: position{line: 2919, col: 12, offset: 92331},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 13, offset: 92332},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2919, col: 13, offset: 92332},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 20, offset: 92339},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2919, col: 29, offset: 92348},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1390, col: 28, offset: 44243},
																			expr: &litMatcher{
																				pos:        position{line: 1382, col: 32, offset: 43678},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1390, col: 57, offset: 44272,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1382, col: 32, offset: 43678},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1384, col: 121, offset: 43803},
													expr: &charClassMatcher{
														pos:        position{line: 2831, col: 13, offset: 90012},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2520, col: 57, offset: 81205},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2525, col: 1, offset: 81265},
			expr: &seqExpr{
				pos: position{line: 2527, col: 5, offset: 81341},
				exprs: []interface{}{
					&andCodeExpr{
						pos: position{line: 2527, col: 5, offset: 81341},
						run: (*parser).callonQuote2,
					},
					&ruleRefExpr{
						pos:  position{line: 2530, col: 5, offset: 81406},
						name: "QuotedText",
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2746, col: 1, offset: 87094},
			expr: &actionExpr{
				pos: position{line: 2746, col: 26, offset: 87119},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2746, col: 26, offset: 87119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2746, col: 26, offset: 87119},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2746, col: 31, offset: 87124},
								expr: &actionExpr{
									pos: position{line: 2751, col: 5, offset: 87187},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2751, col: 5, offset: 87187},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2751, col: 5, offset: 87187},
												expr: &notExpr{
													pos: position{line: 2927, col: 8, offset: 92491},
													expr: &anyMatcher{
														line: 2927, col: 9, offset: 92492,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2754, col: 5, offset: 87311},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2754, col: 16, offset: 87322},
													expr: &actionExpr{
														pos: position{line: 2754, col: 17, offset: 87323},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2754, col: 17, offset: 87323},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2754, col: 17, offset: 87323},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 12, offset: 91974},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 2902, col: 13, offset: 91975},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2902, col: 13, offset: 91975},
																					expr: &litMatcher{
																						pos:        position{line: 2902, col: 13, offset: 91975},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2902, col: 18, offset: 91980},
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 18, offset: 91980},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2754, col: 27, offset: 87333},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2755, col: 5, offset: 87361},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2755, col: 12, offset: 87368},
													expr: &choiceExpr{
														pos: position{line: 2756, col: 9, offset: 87378},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2756, col: 9, offset: 87378},
																run: (*parser).callonTableColumnsAttribute25,
																expr: &litMatcher{
																	pos:        position{line: 2756, col: 9, offset: 87378},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2757, col: 11, offset: 87425},
																run: (*parser).callonTableColumnsAttribute27,
																expr: &litMatcher{
																	pos:        position{line: 2757, col: 11, offset: 87425},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2758, col: 11, offset: 87473},
																run: (*parser).callonTableColumnsAttribute29,
																expr: &litMatcher{
																	pos:        position{line: 2758, col: 11, offset: 87473},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2760, col: 5, offset: 87523},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2760, col: 12, offset: 87530},
													expr: &choiceExpr{
														pos: position{line: 2761, col: 9, offset: 87540},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2761, col: 9, offset: 87540},
																run: (*parser).callonTableColumnsAttribute34,
																expr: &litMatcher{
																	pos:        position{line: 2761, col: 9, offset: 87540},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2762, col: 11, offset: 87587},
																run: (*parser).callonTableColumnsAttribute36,
																expr: &litMatcher{
																	pos:        position{line: 2762, col: 11, offset: 87587},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2763, col: 11, offset: 87637},
																run: (*parser).callonTableColumnsAttribute38,
																expr: &litMatcher{
																	pos:        position{line: 2763, col: 11, offset: 87637},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2765, col: 5, offset: 87688},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2765, col: 12, offset: 87695},
													expr: &choiceExpr{
														pos: position{line: 2765, col: 13, offset: 87696},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2902, col: 12, offset: 91974},
																run: (*parser).callonTableColumnsAttribute43,
																expr: &seqExpr{
																	pos: position{line: 2902, col: 13, offset: 91975},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2902, col: 13, offset: 91975},
																			expr: &litMatcher{
																				pos:        position{line: 2902, col: 13, offset: 91975},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2902, col: 18, offset: 91980},
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 18, offset: 91980},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2765, col: 24, offset: 87707},
																run: (*parser).callonTableColumnsAttribute49,
																expr: &litMatcher{
																	pos:        position{line: 2765, col: 24, offset: 87707},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2766, col: 5, offset: 87749},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2766, col: 11, offset: 87755},
													expr: &actionExpr{
														pos: position{line: 2766, col: 12, offset: 87756},
														run: (*parser).callonTableColumnsAttribute53,
														expr: &charClassMatcher{
															pos:        position{line: 2766, col: 12, offset: 87756},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2768, col: 5, offset: 87886},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2768, col: 11, offset: 87892},
													expr: &litMatcher{
														pos:        position{line: 2768, col: 12, offset: 87893},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2769, col: 5, offset: 87903},
												run: (*parser).callonTableColumnsAttribute58,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2927, col: 8, offset: 92491},
							expr: &anyMatcher{
								line: 2927, col: 9, offset: 92492,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2796, col: 1, offset: 88912},
			expr: &actionExpr{
				pos: position{line: 2797, col: 5, offset: 88935},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2797, col: 5, offset: 88935},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2797, col: 5, offset: 88935},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2820, col: 18, offset: 89676},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2820, col: 19, offset: 89677},
									expr: &charClassMatcher{
										pos:        position{line: 2820, col: 19, offset: 89677},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2798, col: 5, offset: 88961},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2802, col: 5, offset: 89089},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2803, col: 5, offset: 89099},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2824, col: 19, offset: 89752},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2824, col: 19, offset: 89752},
									expr: &charClassMatcher{
										pos:        position{line: 2824, col: 19, offset: 89752},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2804, col: 5, offset: 89127},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2804, col: 17, offset: 89139},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2930, col: 8, offset: 92541},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2919, col: 12, offset: 92331},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2919, col: 13, offset: 92332},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2919, col: 13, offset: 92332},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 20, offset: 92339},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2919, col: 29, offset: 92348},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2927, col: 8, offset: 92491},
									expr: &anyMatcher{
										line: 2927, col: 9, offset: 92492,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2808, col: 1, offset: 89287},
			expr: &actionExpr{
				pos: position{line: 2809, col: 5, offset: 89311},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2809, col: 5, offset: 89311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2809, col: 5, offset: 89311},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2820, col: 18, offset: 89676},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2820, col: 19, offset: 89677},
									expr: &charClassMatcher{
										pos:        position{line: 2820, col: 19, offset: 89677},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2810, col: 5, offset: 89337},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2814, col: 5, offset: 89465},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2815, col: 5, offset: 89474},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2824, col: 19, offset: 89752},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2824, col: 19, offset: 89752},
									expr: &charClassMatcher{
										pos:        position{line: 2824, col: 19, offset: 89752},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2816, col: 5, offset: 89502},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2816, col: 17, offset: 89514},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2865, col: 1, offset: 90741},
			expr: &actionExpr{
				pos: position{line: 2865, col: 17, offset: 90757},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2865, col: 17, offset: 90757},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2865, col: 22, offset: 90762},
						expr: &choiceExpr{
							pos: position{line: 2865, col: 23, offset: 90763},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2882, col: 5, offset: 91256},
									run: (*parser).callonFileLocation5,
									expr: &seqExpr{
										pos: position{line: 2882, col: 5, offset: 91256},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2882, col: 5, offset: 91256},
												expr: &litMatcher{
													pos:        position{line: 2882, col: 6, offset: 91257},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 2883, col: 5, offset: 91281},
												label: "elements",
												expr: &oneOrMoreExpr{
													pos: position{line: 2883, col: 14, offset: 91290},
													expr: &choiceExpr{
														pos: position{line: 2884, col: 9, offset: 91300},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2884, col: 9, offset: 91300},
																run: (*parser).callonFileLocation12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2884, col: 9, offset: 91300},
																	expr: &charClassMatcher{
																		pos:        position{line: 2884, col: 10, offset: 91301},
																		val:        "[^\\r\\n[]�{.,;?! ]",
																		chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', ' '},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&seqExpr{
																pos: position{line: 2887, col: 11, offset: 91564},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2848, col: 25, offset: 90406},
																		run: (*parser).callonFileLocation16,
																		expr: &charClassMatcher{
																			pos:        position{line: 2848, col: 25, offset: 90406},
																			val:        "[.,;?!]",
																			chars:      []rune{'.', ',', ';', '?', '!'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 2887, col: 32, offset: 91585},
																		expr: &notExpr{
																			pos: position{line: 2887, col: 34, offset: 91587},
																			expr: &choiceExpr{
																				pos: position{line: 2887, col: 36, offset: 91589},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2927, col: 8, offset: 92491},
																						expr: &anyMatcher{
																							line: 2927, col: 9, offset: 92492,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2910, col: 10, offset: 92147},
																						run: (*parser).callonFileLocation23,
																						expr: &charClassMatcher{
																							pos:        position{line: 2910, col: 11, offset: 92148},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 635, col: 5, offset: 20085},
																run: (*parser).callonFileLocation25,
																expr: &seqExpr{
																	pos: position{line: 635, col: 5, offset: 20085},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 635, col: 5, offset: 20085},
																			run: (*parser).callonFileLocation27,
																		},
																		&labeledExpr{
																			pos:   position{line: 638, col: 5, offset: 20157},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 638, col: 14, offset: 20166},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 657, col: 25, offset: 20767},
																						run: (*parser).callonFileLocation30,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 25, offset: 20767},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 25, offset: 20767},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 37, offset: 20779},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonFileLocation34,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 56, offset: 20798},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 657, col: 62, offset: 20804},
																										expr: &actionExpr{
																											pos: position{line: 665, col: 17, offset: 21099},
																											run: (*parser).callonFileLocation41,
																											expr: &seqExpr{
																												pos: position{line: 665, col: 17, offset: 21099},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 665, col: 17, offset: 21099},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 665, col: 21, offset: 21103},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 665, col: 28, offset: 21110},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 665, col: 28, offset: 21110},
																																	run: (*parser).callonFileLocation46,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 665, col: 28, offset: 21110},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 667, col: 9, offset: 21164},
																																	run: (*parser).callonFileLocation48,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 667, col: 9, offset: 21164},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 667, col: 9, offset: 21164},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 78, offset: 20820},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 661, col: 25, offset: 20938},
																						run: (*parser).callonFileLocation52,
																						expr: &seqExpr{
																							pos: position{line: 661, col: 25, offset: 20938},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 661, col: 25, offset: 20938},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 661, col: 38, offset: 20951},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonFileLocation56,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 661, col: 57, offset: 20970},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 661, col: 63, offset: 20976},
																										expr: &actionExpr{
																											pos: position{line: 665, col: 17, offset: 21099},
																											run: (*parser).callonFileLocation63,
																											expr: &seqExpr{
																												pos: position{line: 665, col: 17, offset: 21099},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 665, col: 17, offset: 21099},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 665, col: 21, offset: 21103},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 665, col: 28, offset: 21110},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 665, col: 28, offset: 21110},
																																	run: (*parser).callonFileLocation68,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 665, col: 28, offset: 21110},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 667, col: 9, offset: 21164},
																																	run: (*parser).callonFileLocation70,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 667, col: 9, offset: 21164},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 667, col: 9, offset: 21164},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 661, col: 79, offset: 20992},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 644, col: 5, offset: 20295},
																						run: (*parser).callonFileLocation74,
																						expr: &seqExpr{
																							pos: position{line: 644, col: 5, offset: 20295},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 644, col: 5, offset: 20295},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 13, offset: 20303},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonFileLocation78,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 644, col: 32, offset: 20322},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 20563},
																						run: (*parser).callonFileLocation84,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 20563},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 651, col: 5, offset: 20563},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 9, offset: 20567},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9733},
																										run: (*parser).callonFileLocation88,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9733},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9733},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9743},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9744},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 651, col: 28, offset: 20586},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2889, col: 11, offset: 91643},
																run: (*parser).callonFileLocation94,
																expr: &litMatcher{
																	pos:        position{line: 2889, col: 11, offset: 91643},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1197, col: 23, offset: 36942},
									run: (*parser).callonFileLocation96,
									expr: &seqExpr{
										pos: position{line: 1197, col: 23, offset: 36942},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1195, col: 32, offset: 36910},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1197, col: 51, offset: 36970},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1197, col: 56, offset: 36975},
													run: (*parser).callonFileLocation100,
													expr: &oneOrMoreExpr{
														pos: position{line: 1197, col: 56, offset: 36975},
														expr: &charClassMatcher{
															pos:        position{line: 1197, col: 56, offset: 36975},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1195, col: 32, offset: 36910},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr interface{}) (interface{}, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr interface{}) (interface{}, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine101()
}

func (c *current) onDocumentRawLine97(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine97(stack["name"])
}

func (c *current) onDocumentRawLine111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111()
}

func (c *current) onDocumentRawLine107(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["name"])
}

func (c *current) onDocumentRawLine92(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine127()
}

func (c *current) onDocumentRawLine123(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine123(stack["name"])
}

func (c *current) onDocumentRawLine137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine137()
}

func (c *current) onDocumentRawLine133(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine133(stack["name"])
}

func (c *current) onDocumentRawLine118(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine118(stack["s"])
}

func (c *current) onDocumentRawLine151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine151()
}

func (c *current) onDocumentRawLine147(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine147(stack["name"])
}

func (c *current) onDocumentRawLine161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine157(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157(stack["name"])
}

func (c *current) onDocumentRawLine144(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine144(stack["s"])
}

func (c *current) onDocumentRawLine171() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine167(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167(stack["w"])
}

func (c *current) onDocumentRawLine179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine179()
}

func (c *current) onDocumentRawLine175(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine175(stack["w"])
}

func (c *current) onDocumentRawLine183() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine183()
}

func (c *current) onDocumentRawLine190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine190()
}

func (c *current) onDocumentRawLine194() (interface{}, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine194()
}

func (c *current) onDocumentRawLine196() (interface{}, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine196()
}

func (c *current) onDocumentRawLine198() (interface{}, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine198()
}

func (c *current) onDocumentRawLine200() (interface{}, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine200()
}

func (c *current) onDocumentRawLine202() (interface{}, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine202()
}

func (c *current) onDocumentRawLine204() (interface{}, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine204()
}

func (c *current) onDocumentRawLine207() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine207()
}

func (c *current) onDocumentRawLine220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220()
}

func (c *current) onDocumentRawLine216(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine216(stack["name"])
}

func (c *current) onDocumentRawLine230() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine230()
}

func (c *current) onDocumentRawLine226(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine226(stack["name"])
}

func (c *current) onDocumentRawLine211(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine211(stack["s"])
}

func (c *current) onDocumentRawLine246() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine246()
}

func (c *current) onDocumentRawLine242(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine242(stack["name"])
}

func (c *current) onDocumentRawLine256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine256()
}

func (c *current) onDocumentRawLine252(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine252(stack["name"])
}

func (c *current) onDocumentRawLine237(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine237(stack["s"])
}

func (c *current) onDocumentRawLine270() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine270()
}

func (c *current) onDocumentRawLine266(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine266(stack["name"])
}

func (c *current) onDocumentRawLine280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine280()
}

func (c *current) onDocumentRawLine276(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine276(stack["name"])
}

func (c *current) onDocumentRawLine263(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine263(stack["s"])
}

func (c *current) onDocumentRawLine290() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine290()
}

func (c *current) onDocumentRawLine286(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine286(stack["w"])
}

func (c *current) onDocumentRawLine298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine298()
}

func (c *current) onDocumentRawLine294(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine294(stack["w"])
}

func (c *current) onDocumentRawLine302() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302()
}

func (c *current) onDocumentRawLine310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine87(left, operand, right interface{}) (interface{}, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine319() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine319()
}

func (c *current) onDocumentRawLine325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine325()
}

func (c *current) onDocumentRawLine330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine330()
}

func (c *current) onDocumentRawLine314(name, attr interface{}) (interface{}, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine314(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine343() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine343()
}

func (c *current) onDocumentRawLine349() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine349()
}

func (c *current) onDocumentRawLine352() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine352()
}

func (c *current) onDocumentRawLine340(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine340(stack["delimiter"])
}

func (c *current) onDocumentRawLine362() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine362()
}

func (c *current) onDocumentRawLine368() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine368()
}

func (c *current) onDocumentRawLine371() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine371()
}

func (c *current) onDocumentRawLine359(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine359(stack["delimiter"])
}

func (c *current) onDocumentRawLine382() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine382()
}

func (c *current) onDocumentRawLine386() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine386()
}

func (c *current) onDocumentRawLine389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine389()
}

func (c *current) onDocumentRawLine378(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine378(stack["language"])
}

func (c *current) onDocumentRawLine399() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine399()
}

func (c *current) onDocumentRawLine405() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine405()
}

func (c *current) onDocumentRawLine408() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine408()
}

func (c *current) onDocumentRawLine396(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine396(stack["delimiter"])
}

func (c *current) onDocumentRawLine418() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine418()
}

func (c *current) onDocumentRawLine424() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine424()
}

func (c *current) onDocumentRawLine427() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine427()
}

func (c *current) onDocumentRawLine415(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine415(stack["delimiter"])
}

func (c *current) onDocumentRawLine437() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine437()
}

func (c *current) onDocumentRawLine443() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine443()
}

func (c *current) onDocumentRawLine446() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine446()
}

func (c *current) onDocumentRawLine434(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine434(stack["delimiter"])
}

func (c *current) onDocumentRawLine456() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine456()
}

func (c *current) onDocumentRawLine462() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine462()
}

func (c *current) onDocumentRawLine465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine465()
}

func (c *current) onDocumentRawLine453(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine453(stack["delimiter"])
}

func (c *current) onDocumentRawLine475() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine475()
}

func (c *current) onDocumentRawLine481() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine481()
}

func (c *current) onDocumentRawLine484() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine484()
}

func (c *current) onDocumentRawLine472(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine472(stack["delimiter"])
}

func (c *current) onDocumentRawLine494() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine494()
}

func (c *current) onDocumentRawLine500() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine500()
}

func (c *current) onDocumentRawLine503() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine503()
}

func (c *current) onDocumentRawLine491(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine491(stack["delimiter"])
}

func (c *current) onDocumentRawLine334(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334(stack["delimiter"])
}

func (c *current) onDocumentRawLine512() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine512() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine512()
}

func (c *current) onDocumentRawLine513() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine513() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine513()
}

func (c *current) onDocumentRawLine515() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine515()
}

func (c *current) onDocumentRawLine518(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine518() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine518(stack["level"])
}

func (c *current) onDocumentRawLine519(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine519(stack["level"])
}

func (c *current) onDocumentRawLine522(level interface{}) (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine522(stack["level"])
}

func (c *current) onDocumentRawLine510(level interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine510(stack["level"])
}

func (c *current) onDocumentRawLine1(element interface{}) (interface{}, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion19() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion34() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonFileInclusion34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion34()
}

func (c *current) onFileInclusion41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion41()
}

func (c *current) onFileInclusion53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion53()
}

func (c *current) onFileInclusion55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion55()
}

func (c *current) onFileInclusion48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["start"])
}

func (c *current) onFileInclusion37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["name"], stack["start"])
}

func (c *current) onFileInclusion63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion63()
}

func (c *current) onFileInclusion75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion75()
}

func (c *current) onFileInclusion77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77()
}

func (c *current) onFileInclusion70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["start"])
}

func (c *current) onFileInclusion59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["name"], stack["start"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion81(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81(stack["name"])
}

func (c *current) onFileInclusion95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion91(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91(stack["name"])
}

func (c *current) onFileInclusion32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion32(stack["element"])
}

func (c *current) onFileInclusion101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion107() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion107()
}

func (c *current) onFileInclusion103(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion103(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion114()
}

func (c *current) onFileInclusion117() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion117()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment9(attributes interface{}) error {
	if attributes, ok := attributes.(types.Attributes); ok {
		c.storeBlockAttributes(attributes)
	}
	return nil

}

func (p *parser) callonDocumentFragment9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment9(stack["attributes"])
}

func (c *current) onDocumentFragment21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment21()
}

func (c *current) onDocumentFragment28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment28()
}

func (c *current) onDocumentFragment31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment31()
}

func (c *current) onDocumentFragment17(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment17(stack["name"])
}

func (c *current) onDocumentFragment42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment42()
}

func (c *current) onDocumentFragment49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment49()
}

func (c *current) onDocumentFragment52() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment52()
}

func (c *current) onDocumentFragment38(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment38(stack["name"])
}

func (c *current) onDocumentFragment65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment65()
}

func (c *current) onDocumentFragment68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment68()
}

func (c *current) onDocumentFragment59() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment59()
}

func (c *current) onDocumentFragment82() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment82()
}

func (c *current) onDocumentFragment88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment88()
}

func (c *current) onDocumentFragment91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment79(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment79(stack["delimiter"])
}

func (c *current) onDocumentFragment107() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment107()
}

func (c *current) onDocumentFragment113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment113()
}

func (c *current) onDocumentFragment116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment116()
}

func (c *current) onDocumentFragment104(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment104(stack["delimiter"])
}

func (c *current) onDocumentFragment132() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment132()
}

func (c *current) onDocumentFragment136() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment136()
}

func (c *current) onDocumentFragment126(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment126(stack["content"])
}

func (c *current) onDocumentFragment100(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment100(stack["line"])
}

func (c *current) onDocumentFragment148() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment148()
}

func (c *current) onDocumentFragment154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment154()
}

func (c *current) onDocumentFragment157() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment157()
}

func (c *current) onDocumentFragment145(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment145(stack["delimiter"])
}

func (c *current) onDocumentFragment77(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment172() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment172()
}

func (c *current) onDocumentFragment178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment181() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment181()
}

func (c *current) onDocumentFragment169(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169(stack["delimiter"])
}

func (c *current) onDocumentFragment188(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment188(stack["start"])
}

func (c *current) onDocumentFragment200() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment200()
}

func (c *current) onDocumentFragment206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment206()
}

func (c *current) onDocumentFragment209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment209()
}

func (c *current) onDocumentFragment197(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment197(stack["delimiter"])
}

func (c *current) onDocumentFragment216(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment216() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment216(stack["end"])
}

func (c *current) onDocumentFragment226() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment226()
}

func (c *current) onDocumentFragment230() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment230()
}

func (c *current) onDocumentFragment220(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment220(stack["content"])
}

func (c *current) onDocumentFragment191(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment191(stack["line"])
}

func (c *current) onDocumentFragment245() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment245()
}

func (c *current) onDocumentFragment251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment251()
}

func (c *current) onDocumentFragment254() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment254()
}

func (c *current) onDocumentFragment242(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment242(stack["delimiter"])
}

func (c *current) onDocumentFragment261(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment261() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment261(stack["end"])
}

func (c *current) onDocumentFragment166(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment166(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment271() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment271()
}

func (c *current) onDocumentFragment275() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment275()
}

func (c *current) onDocumentFragment278() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment278()
}

func (c *current) onDocumentFragment267(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment267(stack["language"])
}

func (c *current) onDocumentFragment293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment293()
}

func (c *current) onDocumentFragment296() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment296()
}

func (c *current) onDocumentFragment310() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment310()
}

func (c *current) onDocumentFragment314() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment314()
}

func (c *current) onDocumentFragment304(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment304(stack["content"])
}

func (c *current) onDocumentFragment287(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment287(stack["line"])
}

func (c *current) onDocumentFragment325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment325()
}

func (c *current) onDocumentFragment328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment328()
}

func (c *current) onDocumentFragment264(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment264(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment341() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment341()
}

func (c *current) onDocumentFragment347() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment347()
}

func (c *current) onDocumentFragment350() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment350()
}

func (c *current) onDocumentFragment338(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment338(stack["delimiter"])
}

func (c *current) onDocumentFragment357(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment357() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment357(stack["start"])
}

func (c *current) onDocumentFragment369() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment369()
}

func (c *current) onDocumentFragment375() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment375() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment375()
}

func (c *current) onDocumentFragment378() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment378()
}

func (c *current) onDocumentFragment366(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment366(stack["delimiter"])
}

func (c *current) onDocumentFragment385(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment385() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment385(stack["end"])
}

func (c *current) onDocumentFragment395() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment395()
}

func (c *current) onDocumentFragment399() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399()
}

func (c *current) onDocumentFragment389(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment389(stack["content"])
}

func (c *current) onDocumentFragment360(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment360(stack["line"])
}

func (c *current) onDocumentFragment414() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment414()
}

func (c *current) onDocumentFragment420() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment420()
}

func (c *current) onDocumentFragment423() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment423()
}

func (c *current) onDocumentFragment411(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment411(stack["delimiter"])
}

func (c *current) onDocumentFragment430(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment430() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment430(stack["end"])
}

func (c *current) onDocumentFragment335(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment335(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment439() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment439()
}

func (c *current) onDocumentFragment445() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment445()
}

func (c *current) onDocumentFragment448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment448()
}

func (c *current) onDocumentFragment436(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment436(stack["delimiter"])
}

func (c *current) onDocumentFragment455(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment455() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment455(stack["start"])
}

func (c *current) onDocumentFragment467() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment467()
}

func (c *current) onDocumentFragment473() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment473()
}

func (c *current) onDocumentFragment476() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment476()
}

func (c *current) onDocumentFragment464(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment464(stack["delimiter"])
}

func (c *current) onDocumentFragment483(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment483() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment483(stack["end"])
}

func (c *current) onDocumentFragment493() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment493()
}

func (c *current) onDocumentFragment497() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment497() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment497()
}

func (c *current) onDocumentFragment487(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment487(stack["content"])
}

func (c *current) onDocumentFragment458(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment458(stack["line"])
}

func (c *current) onDocumentFragment512() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment512()
}

func (c *current) onDocumentFragment518() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment518()
}

func (c *current) onDocumentFragment521() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment521()
}

func (c *current) onDocumentFragment509(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment509(stack["delimiter"])
}

func (c *current) onDocumentFragment528(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment528() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment528(stack["end"])
}

func (c *current) onDocumentFragment433(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment433(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment537() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment537()
}

func (c *current) onDocumentFragment543() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment543()
}

func (c *current) onDocumentFragment546() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment546()
}

func (c *current) onDocumentFragment534(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment534(stack["delimiter"])
}

func (c *current) onDocumentFragment553(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment553() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment553(stack["start"])
}

func (c *current) onDocumentFragment565() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment565()
}

func (c *current) onDocumentFragment571() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment571()
}

func (c *current) onDocumentFragment574() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment574() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment574()
}

func (c *current) onDocumentFragment562(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment562(stack["delimiter"])
}

func (c *current) onDocumentFragment581(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment581() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment581(stack["end"])
}

func (c *current) onDocumentFragment591() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment591()
}

func (c *current) onDocumentFragment595() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment595()
}

func (c *current) onDocumentFragment585(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment585(stack["content"])
}

func (c *current) onDocumentFragment556(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment556(stack["line"])
}

func (c *current) onDocumentFragment610() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment610()
}

func (c *current) onDocumentFragment616() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment616()
}

func (c *current) onDocumentFragment619() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment619()
}

func (c *current) onDocumentFragment607(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment607(stack["delimiter"])
}

func (c *current) onDocumentFragment626(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment626() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment626(stack["end"])
}

func (c *current) onDocumentFragment531(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment531(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment641() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment641()
}

func (c *current) onDocumentFragment644() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment644()
}

func (c *current) onDocumentFragment635() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment635()
}

func (c *current) onDocumentFragment653() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment653()
}

func (c *current) onDocumentFragment657() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment657()
}

func (c *current) onDocumentFragment632(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment632(stack["content"])
}

func (c *current) onDocumentFragment676() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment676()
}

func (c *current) onDocumentFragment679() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment679()
}

func (c *current) onDocumentFragment670() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment670()
}

func (c *current) onDocumentFragment688() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment688()
}

func (c *current) onDocumentFragment692() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment692()
}

func (c *current) onDocumentFragment667(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment667(stack["content"])
}

func (c *current) onDocumentFragment702() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment702()
}

func (c *current) onDocumentFragment705(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonDocumentFragment705() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment705(stack["content"])
}

func (c *current) onDocumentFragment707() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment707()
}

func (c *current) onDocumentFragment699(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment699(stack["content"])
}

func (c *current) onDocumentFragment629(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment629(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment720() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment720()
}

func (c *current) onDocumentFragment723() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment723()
}

func (c *current) onDocumentFragment726() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment726()
}

func (c *current) onDocumentFragment717(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment717(stack["delimiter"])
}

func (c *current) onDocumentFragment742() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment742()
}

func (c *current) onDocumentFragment745() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment745()
}

func (c *current) onDocumentFragment748() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment748()
}

func (c *current) onDocumentFragment739(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment739(stack["delimiter"])
}

func (c *current) onDocumentFragment764() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment764()
}

func (c *current) onDocumentFragment768() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment768()
}

func (c *current) onDocumentFragment758(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment758() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment758(stack["content"])
}

func (c *current) onDocumentFragment735(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735(stack["line"])
}

func (c *current) onDocumentFragment781() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment781()
}

func (c *current) onDocumentFragment784() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment784() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment784()
}

func (c *current) onDocumentFragment787() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment787()
}

func (c *current) onDocumentFragment778(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment778(stack["delimiter"])
}

func (c *current) onDocumentFragment714(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonDocumentFragment714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment714(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment802() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment802()
}

func (c *current) onDocumentFragment808() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment808()
}

func (c *current) onDocumentFragment811() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment811() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment811()
}

func (c *current) onDocumentFragment799(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment799() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment799(stack["delimiter"])
}

func (c *current) onDocumentFragment818(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment818() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment818(stack["start"])
}

func (c *current) onDocumentFragment830() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment830()
}

func (c *current) onDocumentFragment836() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment836()
}

func (c *current) onDocumentFragment839() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839()
}

func (c *current) onDocumentFragment827(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment827(stack["delimiter"])
}

func (c *current) onDocumentFragment846(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment846() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment846(stack["end"])
}

func (c *current) onDocumentFragment856() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment856()
}

func (c *current) onDocumentFragment860() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment860()
}

func (c *current) onDocumentFragment850(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment850(stack["content"])
}

func (c *current) onDocumentFragment821(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment821() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment821(stack["line"])
}

func (c *current) onDocumentFragment875() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment875()
}

func (c *current) onDocumentFragment881() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment881() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment881()
}

func (c *current) onDocumentFragment884() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment884()
}

func (c *current) onDocumentFragment872(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment872(stack["delimiter"])
}

func (c *current) onDocumentFragment891(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment891() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment891(stack["end"])
}

func (c *current) onDocumentFragment796(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment796(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment900() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment900()
}

func (c *current) onDocumentFragment906() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment906() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment906()
}

func (c *current) onDocumentFragment909() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment909()
}

func (c *current) onDocumentFragment897(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment897(stack["delimiter"])
}

func (c *current) onDocumentFragment916(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment916() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment916(stack["start"])
}

func (c *current) onDocumentFragment928() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment928()
}

func (c *current) onDocumentFragment934() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment934() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment934()
}

func (c *current) onDocumentFragment937() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment937() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment937()
}

func (c *current) onDocumentFragment925(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment925(stack["delimiter"])
}

func (c *current) onDocumentFragment944(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment944() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment944(stack["end"])
}

func (c *current) onDocumentFragment954() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment954() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment954()
}

func (c *current) onDocumentFragment958() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment958() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment958()
}

func (c *current) onDocumentFragment948(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment948() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment948(stack["content"])
}

func (c *current) onDocumentFragment919(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment919(stack["line"])
}

func (c *current) onDocumentFragment973() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment973()
}

func (c *current) onDocumentFragment979() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment979()
}

func (c *current) onDocumentFragment982() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment982()
}

func (c *current) onDocumentFragment970(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment970() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment970(stack["delimiter"])
}

func (c *current) onDocumentFragment989(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment989() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment989(stack["end"])
}

func (c *current) onDocumentFragment894(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment894(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment998() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment998() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment998()
}

func (c *current) onDocumentFragment1004() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1004()
}

func (c *current) onDocumentFragment1007() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1007() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1007()
}

func (c *current) onDocumentFragment995(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment995(stack["delimiter"])
}

func (c *current) onDocumentFragment1014(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1014() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1014(stack["start"])
}

func (c *current) onDocumentFragment1026() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1026()
}

func (c *current) onDocumentFragment1032() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1032()
}

func (c *current) onDocumentFragment1035() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1035()
}

func (c *current) onDocumentFragment1023(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1023() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1023(stack["delimiter"])
}

func (c *current) onDocumentFragment1042(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1042() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1042(stack["end"])
}

func (c *current) onDocumentFragment1052() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1052()
}

func (c *current) onDocumentFragment1056() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1056() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1056()
}

func (c *current) onDocumentFragment1046(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1046() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1046(stack["content"])
}

func (c *current) onDocumentFragment1017(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1017(stack["line"])
}

func (c *current) onDocumentFragment1071() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1071() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1071()
}

func (c *current) onDocumentFragment1077() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1077()
}

func (c *current) onDocumentFragment1080() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1080()
}

func (c *current) onDocumentFragment1068(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1068() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1068(stack["delimiter"])
}

func (c *current) onDocumentFragment1087(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1087() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087(stack["end"])
}

func (c *current) onDocumentFragment992(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment992(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment1101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1101()
}

func (c *current) onDocumentFragment1104() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1104()
}

func (c *current) onDocumentFragment1112() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1112()
}

func (c *current) onDocumentFragment1090() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1090()
}

func (c *current) onDocumentFragment1124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1124()
}

func (c *current) onDocumentFragment1127() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1127()
}

func (c *current) onDocumentFragment1143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1143()
}

func (c *current) onDocumentFragment1146() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1146()
}

func (c *current) onDocumentFragment1137() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1137()
}

func (c *current) onDocumentFragment1160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1160()
}

func (c *current) onDocumentFragment1163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1163()
}

func (c *current) onDocumentFragment1185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1185()
}

func (c *current) onDocumentFragment1190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1190()
}

func (c *current) onDocumentFragment1188(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1188(stack["content"])
}

func (c *current) onDocumentFragment1181(content interface{}) (interface{}, error) {
	return types.NewInlineTableCell(content.(types.RawLine))

}

func (p *parser) callonDocumentFragment1181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1181(stack["content"])
}

func (c *current) onDocumentFragment1194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1194()
}

func (c *current) onDocumentFragment1177(cells interface{}) (interface{}, error) {

	return cells, nil
}

func (p *parser) callonDocumentFragment1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1177(stack["cells"])
}

func (c *current) onDocumentFragment1211() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1211()
}

func (c *current) onDocumentFragment1214() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1214()
}

func (c *current) onDocumentFragment1230() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1230()
}

func (c *current) onDocumentFragment1233() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1233()
}

func (c *current) onDocumentFragment1224() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1224()
}

func (c *current) onDocumentFragment1242() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1242()
}

func (c *current) onDocumentFragment1247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1247()
}

func (c *current) onDocumentFragment1250() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1250()
}

func (c *current) onDocumentFragment1264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1264()
}

func (c *current) onDocumentFragment1267() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1267()
}

func (c *current) onDocumentFragment1283() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1283()
}

func (c *current) onDocumentFragment1286() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1286()
}

func (c *current) onDocumentFragment1277() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1277()
}

func (c *current) onDocumentFragment1297() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1297()
}

func (c *current) onDocumentFragment1302() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1302()
}

func (c *current) onDocumentFragment1307() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1307()
}

func (c *current) onDocumentFragment1257(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1257(stack["content"])
}

func (c *current) onDocumentFragment1204(format, content interface{}) (interface{}, error) {
	return types.NewMultilineTableCell(content.([]interface{}), format)

}

func (p *parser) callonDocumentFragment1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1204(stack["format"], stack["content"])
}

func (c *current) onDocumentFragment1201(cells interface{}) (interface{}, error) {
	return cells, nil
}

func (p *parser) callonDocumentFragment1201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1201(stack["cells"])
}

func (c *current) onDocumentFragment1174(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174(stack["cells"])
}

func (c *current) onDocumentFragment1320() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1320()
}

func (c *current) onDocumentFragment1323() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1323()
}

func (c *current) onDocumentFragment1314() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1314()
}

func (c *current) onDocumentFragment1153(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDocumentFragment1153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1153(stack["content"])
}

func (c *current) onDocumentFragment1334() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1334()
}

func (c *current) onDocumentFragment1337() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1337()
}

func (c *current) onDocumentFragment1120(lines interface{}) (interface{}, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonDocumentFragment1120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1120(stack["lines"])
}

func (c *current) onDocumentFragment1352() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1352()
}

func (c *current) onDocumentFragment1356() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1356()
}

func (c *current) onDocumentFragment1346(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentFragment1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1346(stack["content"])
}

func (c *current) onDocumentFragment1365() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1365() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1365()
}

func (c *current) onDocumentFragment1371() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1371()
}

func (c *current) onDocumentFragment1374() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1374()
}

func (c *current) onDocumentFragment1391() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1391()
}

func (c *current) onDocumentFragment1394() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1394()
}

func (c *current) onDocumentFragment1383() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1383()
}

func (c *current) onDocumentFragment1404() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1404()
}

func (c *current) onDocumentFragment1407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1407()
}

func (c *current) onDocumentFragment1367(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1367(stack["content"])
}

func (c *current) onDocumentFragment1363(frontmatter interface{}) (interface{}, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1363(stack["frontmatter"])
}

func (c *current) onDocumentFragment1415(attributes, element interface{}) (bool, error) {
	// there must be at least `attributes` or `element`
	return attributes != nil || element != nil, nil

}

func (p *parser) callonDocumentFragment1415() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1415(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.disableFrontMatterRule()           // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule(element) // not allowed anymore, based on element that was found

	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements3() error {
	c.globalStore[withinDelimitedBlockKey] = true
	return nil

}

func (p *parser) callonDelimitedBlockElements3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements3()
}

func (c *current) onDelimitedBlockElements11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements11()
}

func (c *current) onDelimitedBlockElements7(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements7(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value, string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue10()
}

func (c *current) onAttributeDeclarationValue16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue16()
}

func (c *current) onAttributeDeclarationValue7(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements interface{}) (interface{}, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		elements = append(elements.([]interface{}), otherElements...)
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onAttributeDeclarationValueElements1(elements interface{}) (interface{}, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValueElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElements1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement8()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement21() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement21()
}

func (c *current) onAttributeDeclarationValueElement26() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonAttributeDeclarationValueElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement26()
}

func (c *current) onAttributeDeclarationValueElement35() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement35()
}

func (c *current) onAttributeDeclarationValueElement39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement39()
}

func (c *current) onAttributeDeclarationValueElement45() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement45()
}

func (c *current) onAttributeDeclarationValueElement54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement54()
}

func (c *current) onAttributeDeclarationValueElement50(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValueElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement50(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement64()
}

func (c *current) onAttributeDeclarationValueElement60(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement60(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement70() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement70()
}

func (c *current) onAttributeDeclarationValueElement31(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonAttributeDeclarationValueElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement31(stack["id"], stack["label"])
}

func (c *current) onAttributeDeclarationValueElement77() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement77()
}

func (c *current) onAttributeDeclarationValueElement73(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonAttributeDeclarationValueElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement73(stack["id"])
}

func (c *current) onAttributeDeclarationValueElement29() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement29()
}

func (c *current) onAttributeDeclarationValueElement81() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement81()
}

func (c *current) onAttributeDeclarationValueElement24(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement24(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement83()
}

func (c *current) onAttributeDeclarationValueElement87() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonAttributeDeclarationValueElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement87()
}

func (c *current) onAttributeDeclarationValueElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement94()
}

func (c *current) onAttributeDeclarationValueElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement106()
}

func (c *current) onAttributeDeclarationValueElement108() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement108()
}

func (c *current) onAttributeDeclarationValueElement101(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement101(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement90(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement90(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement116()
}

func (c *current) onAttributeDeclarationValueElement128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement128()
}

func (c *current) onAttributeDeclarationValueElement130() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement130()
}

func (c *current) onAttributeDeclarationValueElement123(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement123(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement112(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement112(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement138()
}

func (c *current) onAttributeDeclarationValueElement134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValueElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement134(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement148()
}

func (c *current) onAttributeDeclarationValueElement144(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement144(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement85(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("new AttributeDeclarationValueElement: %s", spew.Sdump(element))
	}
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes86(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103()
}

func (c *current) onBlockAttributes117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117()
}

func (c *current) onBlockAttributes120() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes120()
}

func (c *current) onBlockAttributes111() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes111()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes145()
}

func (c *current) onBlockAttributes148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148()
}

func (c *current) onBlockAttributes138() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes138()
}

func (c *current) onBlockAttributes155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes155()
}

func (c *current) onBlockAttributes161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes161()
}

func (c *current) onBlockAttributes157(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes157(stack["name"])
}

func (c *current) onBlockAttributes171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes171()
}

func (c *current) onBlockAttributes167(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes167(stack["name"])
}

func (c *current) onBlockAttributes177() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes177()
}

func (c *current) onBlockAttributes130(elements interface{}) (interface{}, error) {
	return types.NewTitleAttribute(types.Reduce(elements, strings.TrimSpace))

}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130(stack["elements"])
}

func (c *current) onBlockAttributes180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes180()
}

func (c *current) onBlockAttributes183() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes183()
}

func (c *current) onBlockAttributes197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes197()
}

func (c *current) onBlockAttributes200() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes200()
}

func (c *current) onBlockAttributes191() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes191()
}

func (c *current) onBlockAttributes127(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes127(stack["title"])
}

func (c *current) onBlockAttributes212() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes212()
}

func (c *current) onBlockAttributes215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes215()
}

func (c *current) onBlockAttributes229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes229()
}

func (c *current) onBlockAttributes232() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes232()
}

func (c *current) onBlockAttributes223() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes223()
}

func (c *current) onBlockAttributes207(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes207(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes27()
}

func (c *current) onLongHandAttributes30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes30()
}

func (c *current) onLongHandAttributes32() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes32()
}

func (c *current) onLongHandAttributes34() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes34()
}

func (c *current) onLongHandAttributes36() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes36()
}

func (c *current) onLongHandAttributes38() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes38()
}

func (c *current) onLongHandAttributes42() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes42()
}

func (c *current) onLongHandAttributes49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes49()
}

func (c *current) onLongHandAttributes61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes61()
}

func (c *current) onLongHandAttributes63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes63()
}

func (c *current) onLongHandAttributes56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes56(stack["start"])
}

func (c *current) onLongHandAttributes45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes45(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes71()
}

func (c *current) onLongHandAttributes83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes83()
}

func (c *current) onLongHandAttributes85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes85()
}

func (c *current) onLongHandAttributes78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes78(stack["start"])
}

func (c *current) onLongHandAttributes67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes67(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes93()
}

func (c *current) onLongHandAttributes89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes89(stack["name"])
}

func (c *current) onLongHandAttributes103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes103()
}

func (c *current) onLongHandAttributes99(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes99(stack["name"])
}

func (c *current) onLongHandAttributes40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes40(stack["element"])
}

func (c *current) onLongHandAttributes109() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes109()
}

func (c *current) onLongHandAttributes113() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes113()
}

func (c *current) onLongHandAttributes115() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes115()
}

func (c *current) onLongHandAttributes23(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes23(stack["elements"])
}

func (c *current) onLongHandAttributes17(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes17(stack["content"])
}

func (c *current) onLongHandAttributes129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes129()
}

func (c *current) onLongHandAttributes132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes132()
}

func (c *current) onLongHandAttributes134() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes134()
}

func (c *current) onLongHandAttributes136() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes136()
}

func (c *current) onLongHandAttributes138() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes138()
}

func (c *current) onLongHandAttributes140() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes140()
}

func (c *current) onLongHandAttributes144() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes144() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes144()
}

func (c *current) onLongHandAttributes151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes151()
}

func (c *current) onLongHandAttributes163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes163()
}

func (c *current) onLongHandAttributes165() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes165()
}

func (c *current) onLongHandAttributes158(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes158(stack["start"])
}

func (c *current) onLongHandAttributes147(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes147(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes173()
}

func (c *current) onLongHandAttributes185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes185()
}

func (c *current) onLongHandAttributes187() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes187()
}

func (c *current) onLongHandAttributes180(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes180(stack["start"])
}

func (c *current) onLongHandAttributes169(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes169(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes195()
}

func (c *current) onLongHandAttributes191(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes191(stack["name"])
}

func (c *current) onLongHandAttributes205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes205()
}

func (c *current) onLongHandAttributes201(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes201(stack["name"])
}

func (c *current) onLongHandAttributes142(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes142(stack["element"])
}

func (c *current) onLongHandAttributes211() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes211()
}

func (c *current) onLongHandAttributes216() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes216()
}

func (c *current) onLongHandAttributes218() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes218()
}

func (c *current) onLongHandAttributes125(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes125(stack["elements"])
}

func (c *current) onLongHandAttributes226() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes226()
}

func (c *current) onLongHandAttributes119(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes119(stack["content"])
}

func (c *current) onLongHandAttributes234() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes234()
}

func (c *current) onLongHandAttributes236() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes236()
}

func (c *current) onLongHandAttributes238() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes238()
}

func (c *current) onLongHandAttributes240() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes240()
}

func (c *current) onLongHandAttributes242() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes242()
}

func (c *current) onLongHandAttributes247() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes247()
}

func (c *current) onLongHandAttributes254() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes254()
}

func (c *current) onLongHandAttributes266() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes266()
}

func (c *current) onLongHandAttributes268() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes268()
}

func (c *current) onLongHandAttributes261(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes261(stack["start"])
}

func (c *current) onLongHandAttributes250(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes250(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes276() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes276()
}

func (c *current) onLongHandAttributes288() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes288()
}

func (c *current) onLongHandAttributes290() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes290()
}

func (c *current) onLongHandAttributes283(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes283(stack["start"])
}

func (c *current) onLongHandAttributes272(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes272(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes298() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes298()
}

func (c *current) onLongHandAttributes294(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes294(stack["name"])
}

func (c *current) onLongHandAttributes308() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes308()
}

func (c *current) onLongHandAttributes304(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes304(stack["name"])
}

func (c *current) onLongHandAttributes245(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes245(stack["element"])
}

func (c *current) onLongHandAttributes314() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes314()
}

func (c *current) onLongHandAttributes320() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes320()
}

func (c *current) onLongHandAttributes229(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes229(stack["elements"])
}

func (c *current) onLongHandAttributes14(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonLongHandAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes14(stack["value"])
}

func (c *current) onLongHandAttributes348() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes348()
}

func (c *current) onLongHandAttributes351() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes351()
}

func (c *current) onLongHandAttributes353() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes353()
}

func (c *current) onLongHandAttributes355() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes355()
}

func (c *current) onLongHandAttributes357() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes357()
}

func (c *current) onLongHandAttributes359() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes359()
}

func (c *current) onLongHandAttributes363() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes363() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes363()
}

func (c *current) onLongHandAttributes370() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes370()
}

func (c *current) onLongHandAttributes382() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes382()
}

func (c *current) onLongHandAttributes384() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes384()
}

func (c *current) onLongHandAttributes377(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes377(stack["start"])
}

func (c *current) onLongHandAttributes366(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes366(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes392() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes392()
}

func (c *current) onLongHandAttributes404() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes404()
}

func (c *current) onLongHandAttributes406() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes406()
}

func (c *current) onLongHandAttributes399(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes399(stack["start"])
}

func (c *current) onLongHandAttributes388(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes388(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes414() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes414()
}

func (c *current) onLongHandAttributes410(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes410(stack["name"])
}

func (c *current) onLongHandAttributes424() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes424()
}

func (c *current) onLongHandAttributes420(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes420(stack["name"])
}

func (c *current) onLongHandAttributes361(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes361(stack["element"])
}

func (c *current) onLongHandAttributes430() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes430()
}

func (c *current) onLongHandAttributes434() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes434()
}

func (c *current) onLongHandAttributes436() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes436()
}

func (c *current) onLongHandAttributes344(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes344(stack["elements"])
}

func (c *current) onLongHandAttributes338(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes338(stack["content"])
}

func (c *current) onLongHandAttributes450() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes450()
}

func (c *current) onLongHandAttributes453() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes453()
}

func (c *current) onLongHandAttributes455() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes455()
}

func (c *current) onLongHandAttributes457() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes457()
}

func (c *current) onLongHandAttributes459() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes459()
}

func (c *current) onLongHandAttributes461() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes461()
}

func (c *current) onLongHandAttributes465() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes465() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes465()
}

func (c *current) onLongHandAttributes472() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes472()
}

func (c *current) onLongHandAttributes484() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes484()
}

func (c *current) onLongHandAttributes486() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes486()
}

func (c *current) onLongHandAttributes479(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes479(stack["start"])
}

func (c *current) onLongHandAttributes468(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes468(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes494() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes494()
}

func (c *current) onLongHandAttributes506() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes506()
}

func (c *current) onLongHandAttributes508() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes508()
}

func (c *current) onLongHandAttributes501(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes501(stack["start"])
}

func (c *current) onLongHandAttributes490(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes490(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes516() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes516()
}

func (c *current) onLongHandAttributes512(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes512(stack["name"])
}

func (c *current) onLongHandAttributes526() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes526()
}

func (c *current) onLongHandAttributes522(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes522(stack["name"])
}

func (c *current) onLongHandAttributes463(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes463(stack["element"])
}

func (c *current) onLongHandAttributes532() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes532()
}

func (c *current) onLongHandAttributes537() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes537()
}

func (c *current) onLongHandAttributes539() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes539()
}

func (c *current) onLongHandAttributes446(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes446(stack["elements"])
}

func (c *current) onLongHandAttributes547() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes547()
}

func (c *current) onLongHandAttributes440(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes440(stack["content"])
}

func (c *current) onLongHandAttributes555() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes555()
}

func (c *current) onLongHandAttributes557() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes557()
}

func (c *current) onLongHandAttributes559() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes559()
}

func (c *current) onLongHandAttributes561() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes561()
}

func (c *current) onLongHandAttributes563() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes563()
}

func (c *current) onLongHandAttributes568() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes568() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes568()
}

func (c *current) onLongHandAttributes575() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes575()
}

func (c *current) onLongHandAttributes587() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes587()
}

func (c *current) onLongHandAttributes589() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes589()
}

func (c *current) onLongHandAttributes582(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes582(stack["start"])
}

func (c *current) onLongHandAttributes571(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes571(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes597() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes597()
}

func (c *current) onLongHandAttributes609() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes609()
}

func (c *current) onLongHandAttributes611() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes611()
}

func (c *current) onLongHandAttributes604(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes604(stack["start"])
}

func (c *current) onLongHandAttributes593(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes593(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes619() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes619()
}

func (c *current) onLongHandAttributes615(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes615(stack["name"])
}

func (c *current) onLongHandAttributes629() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes629()
}

func (c *current) onLongHandAttributes625(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes625(stack["name"])
}

func (c *current) onLongHandAttributes566(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes566(stack["element"])
}

func (c *current) onLongHandAttributes635() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes635()
}

func (c *current) onLongHandAttributes641() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes641()
}

func (c *current) onLongHandAttributes550(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes550(stack["elements"])
}

func (c *current) onLongHandAttributes333(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonLongHandAttributes333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes333(stack["id"])
}

func (c *current) onLongHandAttributes659() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes659()
}

func (c *current) onLongHandAttributes662() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes662()
}

func (c *current) onLongHandAttributes664() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes664()
}

func (c *current) onLongHandAttributes666() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes666()
}

func (c *current) onLongHandAttributes668() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes668()
}

func (c *current) onLongHandAttributes670() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes670()
}

func (c *current) onLongHandAttributes674() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes674() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes674()
}

func (c *current) onLongHandAttributes681() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes681()
}

func (c *current) onLongHandAttributes693() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes693() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes693()
}

func (c *current) onLongHandAttributes695() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes695()
}

func (c *current) onLongHandAttributes688(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes688(stack["start"])
}

func (c *current) onLongHandAttributes677(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes677(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes703() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes703()
}

func (c *current) onLongHandAttributes715() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes715()
}

func (c *current) onLongHandAttributes717() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes717()
}

func (c *current) onLongHandAttributes710(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes710(stack["start"])
}

func (c *current) onLongHandAttributes699(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes699(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes725() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes725()
}

func (c *current) onLongHandAttributes721(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes721() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes721(stack["name"])
}

func (c *current) onLongHandAttributes735() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes735()
}

func (c *current) onLongHandAttributes731(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes731(stack["name"])
}

func (c *current) onLongHandAttributes672(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes672() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes672(stack["element"])
}

func (c *current) onLongHandAttributes741() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes741() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes741()
}

func (c *current) onLongHandAttributes745() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes745()
}

func (c *current) onLongHandAttributes747() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes747()
}

func (c *current) onLongHandAttributes655(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes655(stack["elements"])
}

func (c *current) onLongHandAttributes649(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes649(stack["content"])
}

func (c *current) onLongHandAttributes761() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes761()
}

func (c *current) onLongHandAttributes764() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes764()
}

func (c *current) onLongHandAttributes766() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes766()
}

func (c *current) onLongHandAttributes768() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes768()
}

func (c *current) onLongHandAttributes770() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes770()
}

func (c *current) onLongHandAttributes772() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes772()
}

func (c *current) onLongHandAttributes776() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes776() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes776()
}

func (c *current) onLongHandAttributes783() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes783() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes783()
}

func (c *current) onLongHandAttributes795() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes795()
}

func (c *current) onLongHandAttributes797() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes797()
}

func (c *current) onLongHandAttributes790(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes790(stack["start"])
}

func (c *current) onLongHandAttributes779(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes779(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes805() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes805()
}

func (c *current) onLongHandAttributes817() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes817()
}

func (c *current) onLongHandAttributes819() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes819()
}

func (c *current) onLongHandAttributes812(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes812(stack["start"])
}

func (c *current) onLongHandAttributes801(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes801(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes827() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes827()
}

func (c *current) onLongHandAttributes823(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes823(stack["name"])
}

func (c *current) onLongHandAttributes837() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes837()
}

func (c *current) onLongHandAttributes833(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes833(stack["name"])
}

func (c *current) onLongHandAttributes774(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes774(stack["element"])
}

func (c *current) onLongHandAttributes843() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes843() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes843()
}

func (c *current) onLongHandAttributes848() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes848()
}

func (c *current) onLongHandAttributes850() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes850()
}

func (c *current) onLongHandAttributes757(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes757() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes757(stack["elements"])
}

func (c *current) onLongHandAttributes858() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes858()
}

func (c *current) onLongHandAttributes751(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes751(stack["content"])
}

func (c *current) onLongHandAttributes866() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes866()
}

func (c *current) onLongHandAttributes868() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes868() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes868()
}

func (c *current) onLongHandAttributes870() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes870()
}

func (c *current) onLongHandAttributes872() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes872()
}

func (c *current) onLongHandAttributes874() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes874() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes874()
}

func (c *current) onLongHandAttributes879() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes879() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes879()
}

func (c *current) onLongHandAttributes886() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes886() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes886()
}

func (c *current) onLongHandAttributes898() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes898()
}

func (c *current) onLongHandAttributes900() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes900()
}

func (c *current) onLongHandAttributes893(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes893(stack["start"])
}

func (c *current) onLongHandAttributes882(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes882() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes882(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes908() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes908()
}

func (c *current) onLongHandAttributes920() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes920() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes920()
}

func (c *current) onLongHandAttributes922() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes922()
}

func (c *current) onLongHandAttributes915(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes915() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes915(stack["start"])
}

func (c *current) onLongHandAttributes904(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes904(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes930() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes930()
}

func (c *current) onLongHandAttributes926(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes926(stack["name"])
}

func (c *current) onLongHandAttributes940() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes940()
}

func (c *current) onLongHandAttributes936(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes936() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes936(stack["name"])
}

func (c *current) onLongHandAttributes877(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes877() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes877(stack["element"])
}

func (c *current) onLongHandAttributes946() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes946()
}

func (c *current) onLongHandAttributes952() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes952() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes952()
}

func (c *current) onLongHandAttributes861(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes861(stack["elements"])
}

func (c *current) onLongHandAttributes644(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonLongHandAttributes644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes644(stack["option"])
}

func (c *current) onLongHandAttributes970() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes970() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes970()
}

func (c *current) onLongHandAttributes973() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes973()
}

func (c *current) onLongHandAttributes975() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes975() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes975()
}

func (c *current) onLongHandAttributes977() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes977() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes977()
}

func (c *current) onLongHandAttributes979() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes979()
}

func (c *current) onLongHandAttributes981() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes981() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes981()
}

func (c *current) onLongHandAttributes985() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes985() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes985()
}

func (c *current) onLongHandAttributes992() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes992()
}

func (c *current) onLongHandAttributes1004() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1004()
}

func (c *current) onLongHandAttributes1006() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1006() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1006()
}

func (c *current) onLongHandAttributes999(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes999() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes999(stack["start"])
}

func (c *current) onLongHandAttributes988(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes988(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1014() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1014() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1014()
}

func (c *current) onLongHandAttributes1026() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1026()
}

func (c *current) onLongHandAttributes1028() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1028()
}

func (c *current) onLongHandAttributes1021(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1021() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1021(stack["start"])
}

func (c *current) onLongHandAttributes1010(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes1010() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1010(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1036() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1036() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1036()
}

func (c *current) onLongHandAttributes1032(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1032(stack["name"])
}

func (c *current) onLongHandAttributes1046() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1046() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1046()
}

func (c *current) onLongHandAttributes1042(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes1042() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1042(stack["name"])
}

func (c *current) onLongHandAttributes983(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes983() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes983(stack["element"])
}

func (c *current) onLongHandAttributes1052() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1052()
}

func (c *current) onLongHandAttributes1056() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes1056() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1056()
}

func (c *current) onLongHandAttributes1058() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1058() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1058()
}

func (c *current) onLongHandAttributes966(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes966(stack["elements"])
}

func (c *current) onLongHandAttributes960(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes960(stack["content"])
}

func (c *current) onLongHandAttributes1072() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1072()
}

func (c *current) onLongHandAttributes1075() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1075() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1075()
}

func (c *current) onLongHandAttributes1077() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1077()
}

func (c *current) onLongHandAttributes1079() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes1079() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1079()
}

func (c *current) onLongHandAttributes1081() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes1081() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1081()
}

func (c *current) onLongHandAttributes1083() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1083()
}

func (c *current) onLongHandAttributes1087() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes1087() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1087()
}

func (c *current) onLongHandAttributes1094() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1094()
}

func (c *current) onLongHandAttributes1106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1106()
}

func (c *current) onLongHandAttributes1108() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1108()
}

func (c *current) onLongHandAttributes1101(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1101(stack["start"])
}

func (c *current) onLongHandAttributes1090(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1090(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1116()
}

func (c *current) onLongHandAttributes1128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1128()
}

func (c *current) onLongHandAttributes1130() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1130()
}

func (c *current) onLongHandAttributes1123(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1123(stack["start"])
}

func (c *current) onLongHandAttributes1112(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1112(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1138()
}

func (c *current) onLongHandAttributes1134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes1134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1134(stack["name"])
}

func (c *current) onLongHandAttributes1148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1148()
}

func (c *current) onLongHandAttributes1144(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes1144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1144(stack["name"])
}

func (c *current) onLongHandAttributes1085(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes1085() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1085(stack["element"])
}

func (c *current) onLongHandAttributes1154() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1154()
}

func (c *current) onLongHandAttributes1159() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1159()
}

func (c *current) onLongHandAttributes1161() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1161()
}

func (c *current) onLongHandAttributes1068(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes1068() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1068(stack["elements"])
}

func (c *current) onLongHandAttributes1169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1169()
}

func (c *current) onLongHandAttributes1062(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes1062() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1062(stack["content"])
}

func (c *current) onLongHandAttributes1177() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonLongHandAttributes1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1177()
}

func (c *current) onLongHandAttributes1179() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonLongHandAttributes1179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1179()
}

func (c *current) onLongHandAttributes1181() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonLongHandAttributes1181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1181()
}

func (c *current) onLongHandAttributes1183() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonLongHandAttributes1183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1183()
}

func (c *current) onLongHandAttributes1185() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1185()
}

func (c *current) onLongHandAttributes1190() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLongHandAttributes1190() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1190()
}

func (c *current) onLongHandAttributes1197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1197()
}

func (c *current) onLongHandAttributes1209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1209()
}

func (c *current) onLongHandAttributes1211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1211()
}

func (c *current) onLongHandAttributes1204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1204(stack["start"])
}

func (c *current) onLongHandAttributes1193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLongHandAttributes1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1193(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1219()
}

func (c *current) onLongHandAttributes1231() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1231()
}

func (c *current) onLongHandAttributes1233() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1233()
}

func (c *current) onLongHandAttributes1226(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1226(stack["start"])
}

func (c *current) onLongHandAttributes1215(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLongHandAttributes1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1215(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1241()
}

func (c *current) onLongHandAttributes1237(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLongHandAttributes1237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1237(stack["name"])
}

func (c *current) onLongHandAttributes1251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1251()
}

func (c *current) onLongHandAttributes1247(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLongHandAttributes1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1247(stack["name"])
}

func (c *current) onLongHandAttributes1188(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes1188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1188(stack["element"])
}

func (c *current) onLongHandAttributes1257() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1257()
}

func (c *current) onLongHandAttributes1263() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1263()
}

func (c *current) onLongHandAttributes1172(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes1172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1172(stack["elements"])
}

func (c *current) onLongHandAttributes955(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonLongHandAttributes955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes955(stack["role"])
}

func (c *current) onLongHandAttributes325(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonLongHandAttributes325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes325(stack["extra"])
}

func (c *current) onLongHandAttributes1270() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1270()
}

func (c *current) onLongHandAttributes1272(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonLongHandAttributes1272() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1272(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes10(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonLongHandAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes10(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute13()
}

func (c *current) onNamedAttribute21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute21()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue15()
}

func (c *current) onAttributeValue18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue18()
}

func (c *current) onAttributeValue20() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonAttributeValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue20()
}

func (c *current) onAttributeValue22() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonAttributeValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue22()
}

func (c *current) onAttributeValue24() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonAttributeValue24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue24()
}

func (c *current) onAttributeValue26() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonAttributeValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue26()
}

func (c *current) onAttributeValue30() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonAttributeValue30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue30()
}

func (c *current) onAttributeValue37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue37()
}

func (c *current) onAttributeValue49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue49()
}

func (c *current) onAttributeValue51() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeValue51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue51()
}

func (c *current) onAttributeValue44(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue44(stack["start"])
}

func (c *current) onAttributeValue33(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue33(stack["name"], stack["start"])
}

func (c *current) onAttributeValue59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue59()
}

func (c *current) onAttributeValue71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue71()
}

func (c *current) onAttributeValue73() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeValue73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue73()
}

func (c *current) onAttributeValue66(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue66(stack["start"])
}

func (c *current) onAttributeValue55(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeValue55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue55(stack["name"], stack["start"])
}

func (c *current) onAttributeValue81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue81()
}

func (c *current) onAttributeValue77(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeValue77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue77(stack["name"])
}

func (c *current) onAttributeValue91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue91()
}

func (c *current) onAttributeValue87(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeValue87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue87(stack["name"])
}

func (c *current) onAttributeValue28(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue28(stack["element"])
}

func (c *current) onAttributeValue97() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonAttributeValue97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue97()
}

func (c *current) onAttributeValue101() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeValue101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue101()
}

func (c *current) onAttributeValue103() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeValue103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue103()
}

func (c *current) onAttributeValue11(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue11(stack["elements"])
}

func (c *current) onAttributeValue5(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue5(stack["content"])
}

func (c *current) onAttributeValue117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue117()
}

func (c *current) onAttributeValue120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue120()
}

func (c *current) onAttributeValue122() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonAttributeValue122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue122()
}

func (c *current) onAttributeValue124() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonAttributeValue124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue124()
}

func (c *current) onAttributeValue126() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonAttributeValue126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue126()
}

func (c *current) onAttributeValue128() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonAttributeValue128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue128()
}

func (c *current) onAttributeValue132() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonAttributeValue132() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue132()
}

func (c *current) onAttributeValue139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue139()
}

func (c *current) onAttributeValue151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue151()
}

func (c *current) onAttributeValue153() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeValue153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue153()
}

func (c *current) onAttributeValue146(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeValue146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue146(stack["start"])
}

func (c *current) onAttributeValue135(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeValue135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue135(stack["name"], stack["start"])
}

func (c *current) onAttributeValue161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue161()
}

func (c *current) onAttributeValue173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue173()
}

func (c *current) onAttributeValue175() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeValue175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue175()
}

func (c *current) onAttributeValue168(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeValue168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue168(stack["start"])
}

func (c *current) onAttributeValue157(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeValue157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue157(stack["name"], stack["start"])
}

func (c *current) onAttributeValue183() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue183()
}

func (c *current) onAttributeValue179(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeValue179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue179(stack["name"])
}

func (c *current) onAttributeValue193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue193()
}

func (c *current) onAttributeValue189(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeValue189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue189(stack["name"])
}

func (c *current) onAttributeValue130(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeValue130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue130(stack["element"])
}

func (c *current) onAttributeValue199() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonAttributeValue199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue199()
}

func (c *current) onAttributeValue204() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeValue204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue204()
}

func (c *current) onAttributeValue206() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeValue206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue206()
}

func (c *current) onAttributeValue113(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeValue113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue113(stack["elements"])
}

func (c *current) onAttributeValue214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue214()
}

func (c *current) onAttributeValue107(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeValue107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue107(stack["content"])
}

func (c *current) onAttributeValue222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue222()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onUnquotedAttributeValue4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue15() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15()
}

func (c *current) onUnquotedAttributeValue22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue22()
}

func (c *current) onUnquotedAttributeValue34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue34()
}

func (c *current) onUnquotedAttributeValue36() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue36()
}

func (c *current) onUnquotedAttributeValue29(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue29(stack["start"])
}

func (c *current) onUnquotedAttributeValue18(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue18(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue44()
}

func (c *current) onUnquotedAttributeValue56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue56()
}

func (c *current) onUnquotedAttributeValue58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue58()
}

func (c *current) onUnquotedAttributeValue51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue51(stack["start"])
}

func (c *current) onUnquotedAttributeValue40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue40(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue66()
}

func (c *current) onUnquotedAttributeValue62(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonUnquotedAttributeValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue62(stack["name"])
}

func (c *current) onUnquotedAttributeValue76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue76()
}

func (c *current) onUnquotedAttributeValue72(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue72(stack["name"])
}

func (c *current) onUnquotedAttributeValue13(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13(stack["element"])
}

func (c *current) onUnquotedAttributeValue83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue83()
}

func (c *current) onUnquotedAttributeValue85() (interface{}, error) {
	// not within brackets and stop on space and quotation marks (`"')
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue85()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference35()
}

func (c *current) onCrossReference31(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31(stack["name"])
}

func (c *current) onCrossReference41() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference41()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference48() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48()
}

func (c *current) onCrossReference44(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44(stack["id"])
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference20()
}

func (c *current) onExternalCrossReference27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference27()
}

func (c *current) onExternalCrossReference31() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalCrossReference31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference31()
}

func (c *current) onExternalCrossReference38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference38()
}

func (c *current) onExternalCrossReference50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference50()
}

func (c *current) onExternalCrossReference52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference52()
}

func (c *current) onExternalCrossReference45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference45(stack["start"])
}

func (c *current) onExternalCrossReference34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference34(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference60()
}

func (c *current) onExternalCrossReference72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference72()
}

func (c *current) onExternalCrossReference74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74()
}

func (c *current) onExternalCrossReference67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference67(stack["start"])
}

func (c *current) onExternalCrossReference56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference56(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82()
}

func (c *current) onExternalCrossReference78(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78(stack["name"])
}

func (c *current) onExternalCrossReference92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference88(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference88(stack["name"])
}

func (c *current) onExternalCrossReference29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference29(stack["element"])
}

func (c *current) onExternalCrossReference98() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference104() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference104()
}

func (c *current) onExternalCrossReference100(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference100(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader12() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader12()
}

func (c *current) onDocumentHeader16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader16()
}

func (c *current) onDocumentHeader6(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader6(stack["content"])
}

func (c *current) onDocumentHeader28() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader28()
}

func (c *current) onDocumentHeader34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader34()
}

func (c *current) onDocumentHeader37() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader37()
}

func (c *current) onDocumentHeader25(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader25(stack["delimiter"])
}

func (c *current) onDocumentHeader53() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader53()
}

func (c *current) onDocumentHeader59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader59()
}

func (c *current) onDocumentHeader62() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader62()
}

func (c *current) onDocumentHeader50(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader50(stack["delimiter"])
}

func (c *current) onDocumentHeader78() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader78()
}

func (c *current) onDocumentHeader82() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader82()
}

func (c *current) onDocumentHeader72(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader72(stack["content"])
}

func (c *current) onDocumentHeader46(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader46(stack["line"])
}

func (c *current) onDocumentHeader94() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader94()
}

func (c *current) onDocumentHeader100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader100()
}

func (c *current) onDocumentHeader103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader103()
}

func (c *current) onDocumentHeader91(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader91(stack["delimiter"])
}

func (c *current) onDocumentHeader23(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader23(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader122() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader122()
}

func (c *current) onDocumentHeader126() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader126()
}

func (c *current) onDocumentHeader116(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader116(stack["content"])
}

func (c *current) onDocumentHeader138() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader138()
}

func (c *current) onDocumentHeader144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader144()
}

func (c *current) onDocumentHeader147() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader147()
}

func (c *current) onDocumentHeader135(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader135(stack["delimiter"])
}

func (c *current) onDocumentHeader163() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader163()
}

func (c *current) onDocumentHeader169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader169()
}

func (c *current) onDocumentHeader172() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader172()
}

func (c *current) onDocumentHeader160(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader160(stack["delimiter"])
}

func (c *current) onDocumentHeader188() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader188()
}

func (c *current) onDocumentHeader192() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader192()
}

func (c *current) onDocumentHeader182(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader182(stack["content"])
}

func (c *current) onDocumentHeader156(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader156(stack["line"])
}

func (c *current) onDocumentHeader204() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader204()
}

func (c *current) onDocumentHeader210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader210()
}

func (c *current) onDocumentHeader213() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader213()
}

func (c *current) onDocumentHeader201(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader201(stack["delimiter"])
}

func (c *current) onDocumentHeader133(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader133(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader232() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader232()
}

func (c *current) onDocumentHeader243() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader243()
}

func (c *current) onDocumentHeader247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader247()
}

func (c *current) onDocumentHeader251() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader251()
}

func (c *current) onDocumentHeader255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader255()
}

func (c *current) onDocumentHeader259() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader259()
}

func (c *current) onDocumentHeader263() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader263()
}

func (c *current) onDocumentHeader240(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader240(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader274()
}

func (c *current) onDocumentHeader267(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader267(stack["email"])
}

func (c *current) onDocumentHeader279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader279()
}

func (c *current) onDocumentHeader284() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader284()
}

func (c *current) onDocumentHeader286(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader286() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader286(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader236(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader236(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader288() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader288()
}

func (c *current) onDocumentHeader229(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader229(stack["authors"])
}

func (c *current) onDocumentHeader303() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader303()
}

func (c *current) onDocumentHeader307() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader307()
}

func (c *current) onDocumentHeader297(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader297(stack["content"])
}

func (c *current) onDocumentHeader319() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader319()
}

func (c *current) onDocumentHeader325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader325()
}

func (c *current) onDocumentHeader328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader328()
}

func (c *current) onDocumentHeader316(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader316(stack["delimiter"])
}

func (c *current) onDocumentHeader344() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader344()
}

func (c *current) onDocumentHeader350() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader350()
}

func (c *current) onDocumentHeader353() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader353()
}

func (c *current) onDocumentHeader341(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader341(stack["delimiter"])
}

func (c *current) onDocumentHeader369() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader369()
}

func (c *current) onDocumentHeader373() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader373()
}

func (c *current) onDocumentHeader363(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader363(stack["content"])
}

func (c *current) onDocumentHeader337(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader337(stack["line"])
}

func (c *current) onDocumentHeader385() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader385()
}

func (c *current) onDocumentHeader391() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader391()
}

func (c *current) onDocumentHeader394() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader394()
}

func (c *current) onDocumentHeader382(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader382(stack["delimiter"])
}

func (c *current) onDocumentHeader314(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader314(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader408() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader408()
}

func (c *current) onDocumentHeader418() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader418()
}

func (c *current) onDocumentHeader432() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader432()
}

func (c *current) onDocumentHeader424() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader424()
}

func (c *current) onDocumentHeader440() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader440()
}

func (c *current) onDocumentHeader447() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader447()
}

func (c *current) onDocumentHeader414(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader414(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader453() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader453()
}

func (c *current) onDocumentHeader460() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader460()
}

func (c *current) onDocumentHeader450(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader450(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader464() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader464()
}

func (c *current) onDocumentHeader405(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader405(stack["revision"])
}

func (c *current) onDocumentHeader224(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentAuthorsAndRevision(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader224(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader479()
}

func (c *current) onDocumentHeader486() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader486()
}

func (c *current) onDocumentHeader489() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader489()
}

func (c *current) onDocumentHeader475(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader475(stack["name"])
}

func (c *current) onDocumentHeader500() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader500()
}

func (c *current) onDocumentHeader507() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader507()
}

func (c *current) onDocumentHeader510() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader510()
}

func (c *current) onDocumentHeader496(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader496(stack["name"])
}

func (c *current) onDocumentHeader523() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader523()
}

func (c *current) onDocumentHeader527() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader527()
}

func (c *current) onDocumentHeader517(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader517(stack["content"])
}

func (c *current) onDocumentHeader539() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader539()
}

func (c *current) onDocumentHeader545() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader545()
}

func (c *current) onDocumentHeader548() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader548()
}

func (c *current) onDocumentHeader536(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader536(stack["delimiter"])
}

func (c *current) onDocumentHeader564() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader564()
}

func (c *current) onDocumentHeader570() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader570()
}

func (c *current) onDocumentHeader573() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader573()
}

func (c *current) onDocumentHeader561(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader561(stack["delimiter"])
}

func (c *current) onDocumentHeader589() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader589()
}

func (c *current) onDocumentHeader593() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader593()
}

func (c *current) onDocumentHeader583(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader583(stack["content"])
}

func (c *current) onDocumentHeader557(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader557(stack["line"])
}

func (c *current) onDocumentHeader605() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader605()
}

func (c *current) onDocumentHeader611() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader611()
}

func (c *current) onDocumentHeader614() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader614()
}

func (c *current) onDocumentHeader602(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader602() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader602(stack["delimiter"])
}

func (c *current) onDocumentHeader534(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader534(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader1(title, authorsAndRevision, extraElements interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authorsAndRevision, extraElements.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["authorsAndRevision"], stack["extraElements"])
}

func (c *current) onDocumentTitle4() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentTitle4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle4()
}

func (c *current) onDocumentTitle10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentTitle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle10()
}

func (c *current) onDocumentTitle1(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"])
}

func (c *current) onDocumentAuthorFullName4() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName4()
}

func (c *current) onDocumentAuthorFullName8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName8()
}

func (c *current) onDocumentAuthorFullName12() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName12()
}

func (c *current) onDocumentAuthorFullName16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName16()
}

func (c *current) onDocumentAuthorFullName20() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName20()
}

func (c *current) onDocumentAuthorFullName24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName24()
}

func (c *current) onDocumentAuthorFullName1(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentAuthorFullName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName1(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onInlineElement4() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement17()
}

func (c *current) onInlineElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement7()
}

func (c *current) onInlineElement27() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements), nil

}

func (p *parser) callonInlineElement27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement27()
}

func (c *current) onInlineElement29() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonInlineElement29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement31()
}

func (c *current) onInlineElement35() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement35()
}

func (c *current) onInlineElement25() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement25()
}

func (c *current) onInlineElement46() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonInlineElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement46()
}

func (c *current) onInlineElement48() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonInlineElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement48()
}

func (c *current) onInlineElement50() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonInlineElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement50()
}

func (c *current) onInlineElement52() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonInlineElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement52()
}

func (c *current) onInlineElement54() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonInlineElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement54()
}

func (c *current) onInlineElement56() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonInlineElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement56()
}

func (c *current) onInlineElement58() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonInlineElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement58()
}

func (c *current) onInlineElement60() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonInlineElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement60()
}

func (c *current) onInlineElement62() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonInlineElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement62()
}

func (c *current) onInlineElement67() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonInlineElement67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement67()
}

func (c *current) onInlineElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement69()
}

func (c *current) onInlineElement73() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement73()
}

func (c *current) onInlineElement64() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonInlineElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement64()
}

func (c *current) onInlineElement83() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonInlineElement83() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement83()
}

func (c *current) onInlineElement87() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement87()
}

func (c *current) onInlineElement80() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonInlineElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement80()
}

func (c *current) onInlineElement94() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonInlineElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement94()
}

func (c *current) onInlineElement96() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonInlineElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement96()
}

func (c *current) onInlineElement98() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonInlineElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement98()
}

func (c *current) onInlineElement42() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement42()
}

func (c *current) onInlineElement100() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonInlineElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement100()
}

func (c *current) onInlineElement102() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonInlineElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement102()
}

func (c *current) onInlineElement104() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonInlineElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement104()
}

func (c *current) onInlineElement106() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonInlineElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement106()
}

func (c *current) onInlineElement108() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonInlineElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement108()
}

func (c *current) onInlineElement110() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonInlineElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement110()
}

func (c *current) onInlineElement112() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonInlineElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement112()
}

func (c *current) onInlineElement114() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonInlineElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement114()
}

func (c *current) onInlineElement119() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonInlineElement119() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement119()
}

func (c *current) onInlineElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement121()
}

func (c *current) onInlineElement125() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement125()
}

func (c *current) onInlineElement116() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonInlineElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement116()
}

func (c *current) onInlineElement135() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonInlineElement135() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement135()
}

func (c *current) onInlineElement139() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement139()
}

func (c *current) onInlineElement132() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonInlineElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement132()
}

func (c *current) onInlineElement146() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonInlineElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement146()
}

func (c *current) onInlineElement148() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonInlineElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement148()
}

func (c *current) onInlineElement150() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonInlineElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement150()
}

func (c *current) onInlineElement152() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonInlineElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement152()
}

func (c *current) onInlineElement154() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonInlineElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement154()
}

func (c *current) onInlineElement161() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonInlineElement161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement161()
}

func (c *current) onInlineElement159() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159()
}

func (c *current) onInlineElement168() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonInlineElement168() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement168()
}

func (c *current) onInlineElement175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement175()
}

func (c *current) onInlineElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement187()
}

func (c *current) onInlineElement189() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement189()
}

func (c *current) onInlineElement182(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement182(stack["start"])
}

func (c *current) onInlineElement171(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171(stack["name"], stack["start"])
}

func (c *current) onInlineElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement197()
}

func (c *current) onInlineElement209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement209()
}

func (c *current) onInlineElement211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement211()
}

func (c *current) onInlineElement204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement204(stack["start"])
}

func (c *current) onInlineElement193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement193(stack["name"], stack["start"])
}

func (c *current) onInlineElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement219()
}

func (c *current) onInlineElement215(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement215(stack["name"])
}

func (c *current) onInlineElement229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement229()
}

func (c *current) onInlineElement225(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonInlineElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement225(stack["name"])
}

func (c *current) onInlineElement166(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement166(stack["element"])
}

func (c *current) onInlineElement237() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineElement237() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement237()
}

func (c *current) onInlineElement246() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement246()
}

func (c *current) onInlineElement250() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement250()
}

func (c *current) onInlineElement256() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement256()
}

func (c *current) onInlineElement265() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement265()
}

func (c *current) onInlineElement261(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement261(stack["name"])
}

func (c *current) onInlineElement275() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement275()
}

func (c *current) onInlineElement271(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonInlineElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement271(stack["name"])
}

func (c *current) onInlineElement281() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement281()
}

func (c *current) onInlineElement242(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement242(stack["id"], stack["label"])
}

func (c *current) onInlineElement288() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement288()
}

func (c *current) onInlineElement284(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement284(stack["id"])
}

func (c *current) onInlineElement240() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement240()
}

func (c *current) onInlineElement292() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement292()
}

func (c *current) onInlineElement235(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement235(stack["element"])
}

func (c *current) onInlineElement294() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement294()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineButton3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineButton3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton3()
}

func (c *current) onInlineButton1(attributes interface{}) (interface{}, error) {
	return types.NewInlineButton(attributes.(types.Attributes))

}

func (p *parser) callonInlineButton1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton1(stack["attributes"])
}

func (c *current) onInlineMenu3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineMenu3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu3()
}

func (c *current) onInlineMenu6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMenu6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu6()
}

func (c *current) onInlineMenu1(id, attributes interface{}) (interface{}, error) {
	return types.NewInlineMenu(id.(string), attributes.(types.Attributes))

}

func (p *parser) callonInlineMenu1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu1(stack["id"], stack["attributes"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent12()
}

func (c *current) onIndexTermContent15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent15()
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent23()
}

func (c *current) onIndexTermContent27() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonIndexTermContent27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent27()
}

func (c *current) onIndexTermContent36() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent36()
}

func (c *current) onIndexTermContent40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent40()
}

func (c *current) onIndexTermContent46() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent46()
}

func (c *current) onIndexTermContent55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent55()
}

func (c *current) onIndexTermContent51(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonIndexTermContent51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent51(stack["name"])
}

func (c *current) onIndexTermContent65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent65()
}

func (c *current) onIndexTermContent61(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonIndexTermContent61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent61(stack["name"])
}

func (c *current) onIndexTermContent71() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent71()
}

func (c *current) onIndexTermContent32(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent32(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent78() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent78()
}

func (c *current) onIndexTermContent74(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent74(stack["id"])
}

func (c *current) onIndexTermContent30() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent30()
}

func (c *current) onIndexTermContent82() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent82()
}

func (c *current) onIndexTermContent25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25(stack["element"])
}

func (c *current) onIndexTermContent88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent88()
}

func (c *current) onIndexTermContent84(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent84(stack["ref"])
}

func (c *current) onIndexTermContent92() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent92()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock9()
}

func (c *current) onImageBlock26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26()
}

func (c *current) onImageBlock30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock30()
}

func (c *current) onImageBlock37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock37()
}

func (c *current) onImageBlock41() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonImageBlock41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock41()
}

func (c *current) onImageBlock48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock48()
}

func (c *current) onImageBlock60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock60()
}

func (c *current) onImageBlock62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock62()
}

func (c *current) onImageBlock55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock55(stack["start"])
}

func (c *current) onImageBlock44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock44(stack["name"], stack["start"])
}

func (c *current) onImageBlock70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock70()
}

func (c *current) onImageBlock82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock82()
}

func (c *current) onImageBlock84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock84()
}

func (c *current) onImageBlock77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock77(stack["start"])
}

func (c *current) onImageBlock66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock66(stack["name"], stack["start"])
}

func (c *current) onImageBlock92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock92()
}

func (c *current) onImageBlock88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock88(stack["name"])
}

func (c *current) onImageBlock102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock102()
}

func (c *current) onImageBlock98(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonImageBlock98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock98(stack["name"])
}

func (c *current) onImageBlock39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock39(stack["element"])
}

func (c *current) onImageBlock108() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock108()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock114() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock114()
}

func (c *current) onImageBlock110(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock110(stack["ref"])
}

func (c *current) onImageBlock5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock121()
}

func (c *current) onImageBlock124() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock124()
}

func (c *current) onImageBlock1(path, attributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage11()
}

func (c *current) onInlineImage28() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage28()
}

func (c *current) onInlineImage32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32()
}

func (c *current) onInlineImage39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage39()
}

func (c *current) onInlineImage43() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonInlineImage43() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43()
}

func (c *current) onInlineImage50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage50()
}

func (c *current) onInlineImage62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage62()
}

func (c *current) onInlineImage64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage64()
}

func (c *current) onInlineImage57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage57(stack["start"])
}

func (c *current) onInlineImage46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage46(stack["name"], stack["start"])
}

func (c *current) onInlineImage72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage84()
}

func (c *current) onInlineImage86() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86()
}

func (c *current) onInlineImage79(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage79(stack["start"])
}

func (c *current) onInlineImage68(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage68(stack["name"], stack["start"])
}

func (c *current) onInlineImage94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage94()
}

func (c *current) onInlineImage90(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage90(stack["name"])
}

func (c *current) onInlineImage104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage104()
}

func (c *current) onInlineImage100(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonInlineImage100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage100(stack["name"])
}

func (c *current) onInlineImage41(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage41(stack["element"])
}

func (c *current) onInlineImage110() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage110()
}

func (c *current) onInlineImage21(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage21(stack["elements"])
}

func (c *current) onInlineImage116() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116()
}

func (c *current) onInlineImage112(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage112(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote6()
}

func (c *current) onInlineFootnote1(ref, elements interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref, elements.([]interface{}))

}

func (p *parser) callonInlineFootnote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote1(stack["ref"], stack["elements"])
}

func (c *current) onFootnoteElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElements1(stack["elements"])
}

func (c *current) onFootnoteElement8() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement8()
}

func (c *current) onFootnoteElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement1(stack["element"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink11()
}

func (c *current) onLink27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink27()
}

func (c *current) onLink31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink31()
}

func (c *current) onLink38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink38()
}

func (c *current) onLink42() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLink42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink42()
}

func (c *current) onLink49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink49()
}

func (c *current) onLink61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink61()
}

func (c *current) onLink63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink63()
}

func (c *current) onLink56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink56(stack["start"])
}

func (c *current) onLink45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink45(stack["name"], stack["start"])
}

func (c *current) onLink71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink71()
}

func (c *current) onLink83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink83()
}

func (c *current) onLink85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink85()
}

func (c *current) onLink78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink78(stack["start"])
}

func (c *current) onLink67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink67(stack["name"], stack["start"])
}

func (c *current) onLink93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink93()
}

func (c *current) onLink89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink89(stack["name"])
}

func (c *current) onLink103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink103()
}

func (c *current) onLink99(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink99(stack["name"])
}

func (c *current) onLink40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink40(stack["element"])
}

func (c *current) onLink109() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink109()
}

func (c *current) onLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink20(stack["elements"])
}

func (c *current) onLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink111(url interface{}) (bool, error) {
	// expect `>` to be part of `url` and trimmed afterwards
	return url.(*types.Location).TrimAngleBracketSuffix()

}

func (p *parser) callonLink111() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink111(stack["url"])
}

func (c *current) onLink2(url interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"])
}

func (c *current) onLink121() (bool, error) {
	// must not start or end with dot (`.`), not contain two consecutive dots (`..`)
	local := string(c.text)
	return !strings.HasPrefix(local, ".") &&
		!strings.HasSuffix(local, ".") &&
		!strings.Contains(local, ".."), nil

}

func (p *parser) callonLink121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink121()
}

func (c *current) onLink117() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLink117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink117()
}

func (c *current) onLink124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink124()
}

func (c *current) onLink114(local, domain interface{}) (interface{}, error) {
	return types.NewEmailAddressLink(local.(string) + "@" + domain.(string))
}

func (p *parser) callonLink114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink114(stack["local"], stack["domain"])
}

func (c *current) onRelativeLink10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink10()
}

func (c *current) onRelativeLink27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink31()
}

func (c *current) onRelativeLink38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink38()
}

func (c *current) onRelativeLink42() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonRelativeLink42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink42()
}

func (c *current) onRelativeLink49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink49()
}

func (c *current) onRelativeLink61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink61()
}

func (c *current) onRelativeLink63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63()
}

func (c *current) onRelativeLink56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink56(stack["start"])
}

func (c *current) onRelativeLink45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink45(stack["name"], stack["start"])
}

func (c *current) onRelativeLink71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink71()
}

func (c *current) onRelativeLink83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink83()
}

func (c *current) onRelativeLink85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink85()
}

func (c *current) onRelativeLink78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78(stack["start"])
}

func (c *current) onRelativeLink67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink67(stack["name"], stack["start"])
}

func (c *current) onRelativeLink93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink93()
}

func (c *current) onRelativeLink89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89(stack["name"])
}

func (c *current) onRelativeLink103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink103()
}

func (c *current) onRelativeLink99(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink99(stack["name"])
}

func (c *current) onRelativeLink40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink40(stack["element"])
}

func (c *current) onRelativeLink109() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink109()
}

func (c *current) onRelativeLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink20(stack["elements"])
}

func (c *current) onRelativeLink115() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115()
}

func (c *current) onRelativeLink111(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink111(stack["ref"])
}

func (c *current) onRelativeLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink6(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink2(stack["url"], stack["attributes"])
}

func (c *current) onRelativeLink129() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink129()
}

func (c *current) onRelativeLink146() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink146()
}

func (c *current) onRelativeLink150() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink150()
}

func (c *current) onRelativeLink157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157()
}

func (c *current) onRelativeLink161() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonRelativeLink161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161()
}

func (c *current) onRelativeLink168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink168()
}

func (c *current) onRelativeLink180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink180()
}

func (c *current) onRelativeLink182() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink182()
}

func (c *current) onRelativeLink175(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink175(stack["start"])
}

func (c *current) onRelativeLink164(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink164(stack["name"], stack["start"])
}

func (c *current) onRelativeLink190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink190()
}

func (c *current) onRelativeLink202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink202()
}

func (c *current) onRelativeLink204() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink204()
}

func (c *current) onRelativeLink197(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink197(stack["start"])
}

func (c *current) onRelativeLink186(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink186(stack["name"], stack["start"])
}

func (c *current) onRelativeLink212() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink212()
}

func (c *current) onRelativeLink208(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink208(stack["name"])
}

func (c *current) onRelativeLink222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink222()
}

func (c *current) onRelativeLink218(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink218(stack["name"])
}

func (c *current) onRelativeLink159(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink159(stack["element"])
}

func (c *current) onRelativeLink228() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink228()
}

func (c *current) onRelativeLink139(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink139(stack["elements"])
}

func (c *current) onRelativeLink234() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink234()
}

func (c *current) onRelativeLink230(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink230(stack["ref"])
}

func (c *current) onRelativeLink125(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink125(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink121(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink121(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink11()
}

func (c *current) onExternalLink27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink27()
}

func (c *current) onExternalLink31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink31()
}

func (c *current) onExternalLink38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink38()
}

func (c *current) onExternalLink42() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalLink42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink42()
}

func (c *current) onExternalLink49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink49()
}

func (c *current) onExternalLink61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink61()
}

func (c *current) onExternalLink63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink63()
}

func (c *current) onExternalLink56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink56(stack["start"])
}

func (c *current) onExternalLink45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink45(stack["name"], stack["start"])
}

func (c *current) onExternalLink71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink71()
}

func (c *current) onExternalLink83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink83()
}

func (c *current) onExternalLink85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink85()
}

func (c *current) onExternalLink78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink78(stack["start"])
}

func (c *current) onExternalLink67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink67(stack["name"], stack["start"])
}

func (c *current) onExternalLink93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink93()
}

func (c *current) onExternalLink89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89(stack["name"])
}

func (c *current) onExternalLink103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink103()
}

func (c *current) onExternalLink99(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99(stack["name"])
}

func (c *current) onExternalLink40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink40(stack["element"])
}

func (c *current) onExternalLink109() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink109()
}

func (c *current) onExternalLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink20(stack["elements"])
}

func (c *current) onExternalLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink6(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink122() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink122()
}

func (c *current) onExternalLink138() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink138()
}

func (c *current) onExternalLink142() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink142()
}

func (c *current) onExternalLink149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink149()
}

func (c *current) onExternalLink153() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalLink153() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink153()
}

func (c *current) onExternalLink160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink160()
}

func (c *current) onExternalLink172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172()
}

func (c *current) onExternalLink174() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink174()
}

func (c *current) onExternalLink167(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink167(stack["start"])
}

func (c *current) onExternalLink156(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink156(stack["name"], stack["start"])
}

func (c *current) onExternalLink182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink194() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink194()
}

func (c *current) onExternalLink196() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink196()
}

func (c *current) onExternalLink189(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink189(stack["start"])
}

func (c *current) onExternalLink178(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink178(stack["name"], stack["start"])
}

func (c *current) onExternalLink204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink204()
}

func (c *current) onExternalLink200(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink200(stack["name"])
}

func (c *current) onExternalLink214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink214()
}

func (c *current) onExternalLink210(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink210(stack["name"])
}

func (c *current) onExternalLink151(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink151(stack["element"])
}

func (c *current) onExternalLink220() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink220()
}

func (c *current) onExternalLink131(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131(stack["elements"])
}

func (c *current) onExternalLink117(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink117(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink114(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink114(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements53() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements53()
}

func (c *current) onListElements57() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements57()
}

func (c *current) onListElements49(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawLines"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements70()
}

func (c *current) onListElements73() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73()
}

func (c *current) onListElements78(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListElements78() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements78(stack["style"])
}

func (c *current) onListElements79(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["style"])
}

func (c *current) onListElements67(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListElements67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements67(stack["style"])
}

func (c *current) onListElements90() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements90()
}

func (c *current) onListElements92() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements92()
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96(stack["style"])
}

func (c *current) onListElements84(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements84(stack["style"])
}

func (c *current) onListElements104() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104()
}

func (c *current) onListElements108() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements108()
}

func (c *current) onListElements100(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["rawLines"])
}

func (c *current) onListElements64(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements64(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements122() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements122()
}

func (c *current) onListElements126(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements126(stack["ref"])
}

func (c *current) onListElements118(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"])
}

func (c *current) onListElements134() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements134()
}

func (c *current) onListElements138() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements138()
}

func (c *current) onListElements130(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements130(stack["rawLines"])
}

func (c *current) onListElements115(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListElements115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements115(stack["ref"], stack["description"])
}

func (c *current) onListElements155() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements155()
}

func (c *current) onListElements158(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements158() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements158(stack["separator"])
}

func (c *current) onListElements152(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements152(stack["separator"])
}

func (c *current) onListElements161() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements161()
}

func (c *current) onListElements148() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements148()
}

func (c *current) onListElements173() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements173()
}

func (c *current) onListElements176(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements176(stack["separator"])
}

func (c *current) onListElements170(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements170(stack["separator"])
}

func (c *current) onListElements182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements182()
}

func (c *current) onListElements185() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements185()
}

func (c *current) onListElements199() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements199()
}

func (c *current) onListElements202() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements202()
}

func (c *current) onListElements193() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements193()
}

func (c *current) onListElements179() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonListElements179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements179()
}

func (c *current) onListElements211() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements211()
}

func (c *current) onListElements215() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements215()
}

func (c *current) onListElements219() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements219()
}

func (c *current) onListElements209(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListElements209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements209(stack["content"])
}

func (c *current) onListElements145(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements145(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement35()
}

func (c *current) onExtraListElement42() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement42()
}

func (c *current) onExtraListElement45(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45(stack["depth"])
}

func (c *current) onExtraListElement39(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement39(stack["depth"])
}

func (c *current) onExtraListElement46() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement46()
}

func (c *current) onExtraListElement51() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement51()
}

func (c *current) onExtraListElement55() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement55()
}

func (c *current) onExtraListElement59() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement59()
}

func (c *current) onExtraListElement64() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement64()
}

func (c *current) onExtraListElement69(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement69(stack["prefix"])
}

func (c *current) onExtraListElement32(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement32(stack["prefix"])
}

func (c *current) onExtraListElement77() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement77()
}

func (c *current) onExtraListElement81() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement81()
}

func (c *current) onExtraListElement73(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement73(stack["rawLines"])
}

func (c *current) onExtraListElement29(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement29(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement94()
}

func (c *current) onExtraListElement97() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement97()
}

func (c *current) onExtraListElement102(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement102() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["style"])
}

func (c *current) onExtraListElement103(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement103(stack["style"])
}

func (c *current) onExtraListElement91(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement91(stack["style"])
}

func (c *current) onExtraListElement114() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement116() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement116()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement120(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement120(stack["style"])
}

func (c *current) onExtraListElement108(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["style"])
}

func (c *current) onExtraListElement128() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement128()
}

func (c *current) onExtraListElement132() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132()
}

func (c *current) onExtraListElement124(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement124(stack["rawLines"])
}

func (c *current) onExtraListElement88(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement88(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement146() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement146()
}

func (c *current) onExtraListElement150(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["ref"])
}

func (c *current) onExtraListElement142(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement142(stack["ref"])
}

func (c *current) onExtraListElement158() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement158()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement154(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement154(stack["rawLines"])
}

func (c *current) onExtraListElement139(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement179() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement179()
}

func (c *current) onExtraListElement182(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement182() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement182(stack["separator"])
}

func (c *current) onExtraListElement176(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176(stack["separator"])
}

func (c *current) onExtraListElement185() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement185()
}

func (c *current) onExtraListElement172() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement172()
}

func (c *current) onExtraListElement197() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement197()
}

func (c *current) onExtraListElement200(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement200() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement200(stack["separator"])
}

func (c *current) onExtraListElement194(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement194(stack["separator"])
}

func (c *current) onExtraListElement206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement206()
}

func (c *current) onExtraListElement209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement209()
}

func (c *current) onExtraListElement223() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement223()
}

func (c *current) onExtraListElement226() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement226()
}

func (c *current) onExtraListElement217() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement217()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement235() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement235()
}

func (c *current) onExtraListElement239() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement239()
}

func (c *current) onExtraListElement243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement243()
}

func (c *current) onExtraListElement233(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement233(stack["content"])
}

func (c *current) onExtraListElement169(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement169(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement263() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement263()
}

func (c *current) onExtraListElement270() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement270()
}

func (c *current) onExtraListElement273(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement273() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement273(stack["depth"])
}

func (c *current) onExtraListElement267(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement267(stack["depth"])
}

func (c *current) onExtraListElement274() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement274()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement283() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement283()
}

func (c *current) onExtraListElement287() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement287()
}

func (c *current) onExtraListElement292() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement292()
}

func (c *current) onExtraListElement297(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement297(stack["prefix"])
}

func (c *current) onExtraListElement260(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement260(stack["prefix"])
}

func (c *current) onExtraListElement305() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement305()
}

func (c *current) onExtraListElement309() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309()
}

func (c *current) onExtraListElement301(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement301(stack["rawLines"])
}

func (c *current) onExtraListElement257(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement257(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement322() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement322()
}

func (c *current) onExtraListElement325() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement325()
}

func (c *current) onExtraListElement330(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement330() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement330(stack["style"])
}

func (c *current) onExtraListElement331(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement331(stack["style"])
}

func (c *current) onExtraListElement319(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement319(stack["style"])
}

func (c *current) onExtraListElement342() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement342()
}

func (c *current) onExtraListElement344() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344()
}

func (c *current) onExtraListElement346() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement346()
}

func (c *current) onExtraListElement348(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348(stack["style"])
}

func (c *current) onExtraListElement336(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement336(stack["style"])
}

func (c *current) onExtraListElement356() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356()
}

func (c *current) onExtraListElement360() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement360()
}

func (c *current) onExtraListElement352(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["rawLines"])
}

func (c *current) onExtraListElement316(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement316(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement378(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement378(stack["ref"])
}

func (c *current) onExtraListElement370(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement370(stack["ref"])
}

func (c *current) onExtraListElement386() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement386()
}

func (c *current) onExtraListElement390() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement390()
}

func (c *current) onExtraListElement382(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement382(stack["rawLines"])
}

func (c *current) onExtraListElement367(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement367(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement407() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement410(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement410() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement410(stack["separator"])
}

func (c *current) onExtraListElement404(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement413() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement413()
}

func (c *current) onExtraListElement400() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement400()
}

func (c *current) onExtraListElement425() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425()
}

func (c *current) onExtraListElement428(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement428() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428(stack["separator"])
}

func (c *current) onExtraListElement422(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement434() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement434()
}

func (c *current) onExtraListElement437() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement437()
}

func (c *current) onExtraListElement451() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement451()
}

func (c *current) onExtraListElement454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement454()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement463() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement463()
}

func (c *current) onExtraListElement467() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement467()
}

func (c *current) onExtraListElement471() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement471()
}

func (c *current) onExtraListElement461(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement461(stack["content"])
}

func (c *current) onExtraListElement397(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement397(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement250(attributes, element interface{}) (interface{}, error) {

	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement250(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement485() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement489() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement489()
}

func (c *current) onExtraListElement479(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonExtraListElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement479(stack["content"])
}

func (c *current) onExtraListElement505() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement505()
}

func (c *current) onExtraListElement508() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement508()
}

func (c *current) onExtraListElement499() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement499()
}

func (c *current) onExtraListElement519() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement519()
}

func (c *current) onExtraListElement521() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement521()
}

func (c *current) onExtraListElement530() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement530()
}

func (c *current) onExtraListElement537() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement537()
}

func (c *current) onExtraListElement540(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement540() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement540(stack["depth"])
}

func (c *current) onExtraListElement534(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement534(stack["depth"])
}

func (c *current) onExtraListElement541() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement541()
}

func (c *current) onExtraListElement546() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement546()
}

func (c *current) onExtraListElement550() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement550()
}

func (c *current) onExtraListElement554() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement554()
}

func (c *current) onExtraListElement559() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement559()
}

func (c *current) onExtraListElement564(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement564(stack["prefix"])
}

func (c *current) onExtraListElement527(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement527(stack["prefix"])
}

func (c *current) onExtraListElement571() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement571()
}

func (c *current) onExtraListElement574() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement574() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement574()
}

func (c *current) onExtraListElement579(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement579() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement579(stack["style"])
}

func (c *current) onExtraListElement580(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement580(stack["style"])
}

func (c *current) onExtraListElement568(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement568(stack["style"])
}

func (c *current) onExtraListElement588() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement588()
}

func (c *current) onExtraListElement592(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["ref"])
}

func (c *current) onExtraListElement584(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement584(stack["ref"])
}

func (c *current) onExtraListElement604() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement604()
}

func (c *current) onExtraListElement607(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement607() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement607(stack["separator"])
}

func (c *current) onExtraListElement601(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement601(stack["separator"])
}

func (c *current) onExtraListElement610() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement610()
}

func (c *current) onExtraListElement597() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement597()
}

func (c *current) onExtraListElement621() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement621()
}

func (c *current) onExtraListElement624(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement624() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement624(stack["separator"])
}

func (c *current) onExtraListElement618(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement618(stack["separator"])
}

func (c *current) onExtraListElement635() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement635()
}

func (c *current) onExtraListElement641() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement641()
}

func (c *current) onExtraListElement644() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement644()
}

func (c *current) onExtraListElement632(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement632(stack["delimiter"])
}

func (c *current) onExtraListElement654() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement654()
}

func (c *current) onExtraListElement660() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement660() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement660()
}

func (c *current) onExtraListElement663() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement663()
}

func (c *current) onExtraListElement651(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement651() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement651(stack["delimiter"])
}

func (c *current) onExtraListElement674() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement674()
}

func (c *current) onExtraListElement678() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement678()
}

func (c *current) onExtraListElement681() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement681()
}

func (c *current) onExtraListElement670(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement670(stack["language"])
}

func (c *current) onExtraListElement691() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement691()
}

func (c *current) onExtraListElement697() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement697()
}

func (c *current) onExtraListElement700() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement700() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement700()
}

func (c *current) onExtraListElement688(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement688(stack["delimiter"])
}

func (c *current) onExtraListElement710() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement710()
}

func (c *current) onExtraListElement716() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement716() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement716()
}

func (c *current) onExtraListElement719() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement719()
}

func (c *current) onExtraListElement707(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement707(stack["delimiter"])
}

func (c *current) onExtraListElement729() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement729()
}

func (c *current) onExtraListElement735() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement735()
}

func (c *current) onExtraListElement738() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement738()
}

func (c *current) onExtraListElement726(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement726(stack["delimiter"])
}

func (c *current) onExtraListElement748() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement748()
}

func (c *current) onExtraListElement754() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement754()
}

func (c *current) onExtraListElement757() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement757() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement757()
}

func (c *current) onExtraListElement745(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement745(stack["delimiter"])
}

func (c *current) onExtraListElement767() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement767() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement767()
}

func (c *current) onExtraListElement773() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement773()
}

func (c *current) onExtraListElement776() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement776()
}

func (c *current) onExtraListElement764(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement764(stack["delimiter"])
}

func (c *current) onExtraListElement786() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement786() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement786()
}

func (c *current) onExtraListElement792() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement792()
}

func (c *current) onExtraListElement795() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement795()
}

func (c *current) onExtraListElement783(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement783() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement783(stack["delimiter"])
}

func (c *current) onExtraListElement626(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement626(stack["delimiter"])
}

func (c *current) onExtraListElement803() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement803()
}

func (c *current) onExtraListElement807() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement807()
}

func (c *current) onExtraListElement496(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement496(stack["content"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListContinuation7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation7()
}

func (c *current) onListContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation9()
}

func (c *current) onListContinuation16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation16()
}

func (c *current) onListContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation18(stack["offset"])
}

func (c *current) onListContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListContinuationElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement14()
}

func (c *current) onListContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement21()
}

func (c *current) onListContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement24(stack["depth"])
}

func (c *current) onListContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement18(stack["depth"])
}

func (c *current) onListContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement25()
}

func (c *current) onListContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement30()
}

func (c *current) onListContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement34()
}

func (c *current) onListContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement38()
}

func (c *current) onListContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement43()
}

func (c *current) onListContinuationElement48(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement48(stack["prefix"])
}

func (c *current) onListContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement11(stack["prefix"])
}

func (c *current) onListContinuationElement56() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement56()
}

func (c *current) onListContinuationElement60() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement60()
}

func (c *current) onListContinuationElement52(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement52(stack["rawLines"])
}

func (c *current) onListContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListContinuationElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement73()
}

func (c *current) onListContinuationElement76() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement76()
}

func (c *current) onListContinuationElement81(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement81(stack["style"])
}

func (c *current) onListContinuationElement82(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement82(stack["style"])
}

func (c *current) onListContinuationElement70(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement70(stack["style"])
}

func (c *current) onListContinuationElement93() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListContinuationElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement93()
}

func (c *current) onListContinuationElement95() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement95()
}

func (c *current) onListContinuationElement97() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement97()
}

func (c *current) onListContinuationElement99(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement99(stack["style"])
}

func (c *current) onListContinuationElement87(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement87(stack["style"])
}

func (c *current) onListContinuationElement107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement107()
}

func (c *current) onListContinuationElement111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement111()
}

func (c *current) onListContinuationElement103(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement103(stack["rawLines"])
}

func (c *current) onListContinuationElement67(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListContinuationElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement67(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListContinuationElement125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement125()
}

func (c *current) onListContinuationElement129(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement129(stack["ref"])
}

func (c *current) onListContinuationElement121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement121(stack["ref"])
}

func (c *current) onListContinuationElement137() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement137()
}

func (c *current) onListContinuationElement141() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement141()
}

func (c *current) onListContinuationElement133(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement133(stack["rawLines"])
}

func (c *current) onListContinuationElement118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListContinuationElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement118(stack["ref"], stack["description"])
}

func (c *current) onListContinuationElement158() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement158()
}

func (c *current) onListContinuationElement161(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement161(stack["separator"])
}

func (c *current) onListContinuationElement155(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement155(stack["separator"])
}

func (c *current) onListContinuationElement164() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement164()
}

func (c *current) onListContinuationElement151() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement151()
}

func (c *current) onListContinuationElement176() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement176()
}

func (c *current) onListContinuationElement179(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement179() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement179(stack["separator"])
}

func (c *current) onListContinuationElement173(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement173(stack["separator"])
}

func (c *current) onListContinuationElement185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement185()
}

func (c *current) onListContinuationElement188() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement188()
}

func (c *current) onListContinuationElement202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement202()
}

func (c *current) onListContinuationElement205() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement205()
}

func (c *current) onListContinuationElement196() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement196()
}

func (c *current) onListContinuationElement182() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonListContinuationElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement182()
}

func (c *current) onListContinuationElement214() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement214()
}

func (c *current) onListContinuationElement218() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement218()
}

func (c *current) onListContinuationElement222() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement222()
}

func (c *current) onListContinuationElement212(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListContinuationElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement212(stack["content"])
}

func (c *current) onListContinuationElement148(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListContinuationElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement148(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListContinuationElement240() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement240()
}

func (c *current) onListContinuationElement243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement243()
}

func (c *current) onListContinuationElement234() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement234()
}

func (c *current) onListContinuationElement255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement255()
}

func (c *current) onListContinuationElement262() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement262()
}

func (c *current) onListContinuationElement265() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement265()
}

func (c *current) onListContinuationElement251(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement251(stack["name"])
}

func (c *current) onListContinuationElement276() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement276()
}

func (c *current) onListContinuationElement283() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement283()
}

func (c *current) onListContinuationElement286() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement286()
}

func (c *current) onListContinuationElement272(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement272(stack["name"])
}

func (c *current) onListContinuationElement298() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement298()
}

func (c *current) onListContinuationElement304() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement304()
}

func (c *current) onListContinuationElement307() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement307()
}

func (c *current) onListContinuationElement295(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement295(stack["delimiter"])
}

func (c *current) onListContinuationElement323() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement323()
}

func (c *current) onListContinuationElement329() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement329()
}

func (c *current) onListContinuationElement332() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement332()
}

func (c *current) onListContinuationElement320(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement320(stack["delimiter"])
}

func (c *current) onListContinuationElement348() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement348()
}

func (c *current) onListContinuationElement352() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement352()
}

func (c *current) onListContinuationElement342(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement342(stack["content"])
}

func (c *current) onListContinuationElement316(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement316(stack["line"])
}

func (c *current) onListContinuationElement364() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement364()
}

func (c *current) onListContinuationElement370() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement370()
}

func (c *current) onListContinuationElement373() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement373()
}

func (c *current) onListContinuationElement361(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement361(stack["delimiter"])
}

func (c *current) onListContinuationElement293(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListContinuationElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement293(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement388() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement388()
}

func (c *current) onListContinuationElement394() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement394()
}

func (c *current) onListContinuationElement397() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement397()
}

func (c *current) onListContinuationElement385(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement385(stack["delimiter"])
}

func (c *current) onListContinuationElement404(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement404(stack["start"])
}

func (c *current) onListContinuationElement416() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement416()
}

func (c *current) onListContinuationElement422() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement422()
}

func (c *current) onListContinuationElement425() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement425()
}

func (c *current) onListContinuationElement413(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement413(stack["delimiter"])
}

func (c *current) onListContinuationElement432(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement432() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement432(stack["end"])
}

func (c *current) onListContinuationElement442() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement442()
}

func (c *current) onListContinuationElement446() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement446()
}

func (c *current) onListContinuationElement436(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement436(stack["content"])
}

func (c *current) onListContinuationElement407(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement407(stack["line"])
}

func (c *current) onListContinuationElement461() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement461()
}

func (c *current) onListContinuationElement467() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement467()
}

func (c *current) onListContinuationElement470() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement470()
}

func (c *current) onListContinuationElement458(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement458(stack["delimiter"])
}

func (c *current) onListContinuationElement477(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement477() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement477(stack["end"])
}

func (c *current) onListContinuationElement382(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListContinuationElement382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement382(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement487() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement487()
}

func (c *current) onListContinuationElement491() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement491()
}

func (c *current) onListContinuationElement494() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement494()
}

func (c *current) onListContinuationElement483(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement483(stack["language"])
}

func (c *current) onListContinuationElement509() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement509()
}

func (c *current) onListContinuationElement512() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement512()
}

func (c *current) onListContinuationElement526() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement526()
}

func (c *current) onListContinuationElement530() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement530()
}

func (c *current) onListContinuationElement520(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement520(stack["content"])
}

func (c *current) onListContinuationElement503(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement503(stack["line"])
}

func (c *current) onListContinuationElement541() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement541()
}

func (c *current) onListContinuationElement544() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement544()
}

func (c *current) onListContinuationElement480(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListContinuationElement480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement480(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement557() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement557()
}

func (c *current) onListContinuationElement563() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement563()
}

func (c *current) onListContinuationElement566() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement566()
}

func (c *current) onListContinuationElement554(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement554(stack["delimiter"])
}

func (c *current) onListContinuationElement573(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement573() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement573(stack["start"])
}

func (c *current) onListContinuationElement585() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement585()
}

func (c *current) onListContinuationElement591() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement591()
}

func (c *current) onListContinuationElement594() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement594()
}

func (c *current) onListContinuationElement582(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement582(stack["delimiter"])
}

func (c *current) onListContinuationElement601(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement601() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement601(stack["end"])
}

func (c *current) onListContinuationElement611() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement611()
}

func (c *current) onListContinuationElement615() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement615()
}

func (c *current) onListContinuationElement605(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement605(stack["content"])
}

func (c *current) onListContinuationElement576(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement576() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement576(stack["line"])
}

func (c *current) onListContinuationElement630() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement630()
}

func (c *current) onListContinuationElement636() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement636()
}

func (c *current) onListContinuationElement639() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement639()
}

func (c *current) onListContinuationElement627(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement627(stack["delimiter"])
}

func (c *current) onListContinuationElement646(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement646() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement646(stack["end"])
}

func (c *current) onListContinuationElement551(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListContinuationElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement551(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement655() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement655()
}

func (c *current) onListContinuationElement661() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement661()
}

func (c *current) onListContinuationElement664() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement664()
}

func (c *current) onListContinuationElement652(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement652(stack["delimiter"])
}

func (c *current) onListContinuationElement671(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement671() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement671(stack["start"])
}

func (c *current) onListContinuationElement683() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement683() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement683()
}

func (c *current) onListContinuationElement689() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement689()
}

func (c *current) onListContinuationElement692() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement692()
}

func (c *current) onListContinuationElement680(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement680() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement680(stack["delimiter"])
}

func (c *current) onListContinuationElement699(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement699() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement699(stack["end"])
}

func (c *current) onListContinuationElement709() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement709()
}

func (c *current) onListContinuationElement713() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement713()
}

func (c *current) onListContinuationElement703(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement703(stack["content"])
}

func (c *current) onListContinuationElement674(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement674(stack["line"])
}

func (c *current) onListContinuationElement728() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement728()
}

func (c *current) onListContinuationElement734() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement734()
}

func (c *current) onListContinuationElement737() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement737()
}

func (c *current) onListContinuationElement725(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement725(stack["delimiter"])
}

func (c *current) onListContinuationElement744(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement744() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement744(stack["end"])
}

func (c *current) onListContinuationElement649(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListContinuationElement649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement649(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement753() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement753()
}

func (c *current) onListContinuationElement759() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement759()
}

func (c *current) onListContinuationElement762() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement762()
}

func (c *current) onListContinuationElement750(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement750(stack["delimiter"])
}

func (c *current) onListContinuationElement769(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement769() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement769(stack["start"])
}

func (c *current) onListContinuationElement781() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement781()
}

func (c *current) onListContinuationElement787() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement787()
}

func (c *current) onListContinuationElement790() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement790()
}

func (c *current) onListContinuationElement778(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement778(stack["delimiter"])
}

func (c *current) onListContinuationElement797(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement797() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement797(stack["end"])
}

func (c *current) onListContinuationElement807() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement807()
}

func (c *current) onListContinuationElement811() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement811() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement811()
}

func (c *current) onListContinuationElement801(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement801(stack["content"])
}

func (c *current) onListContinuationElement772(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement772(stack["line"])
}

func (c *current) onListContinuationElement826() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement826()
}

func (c *current) onListContinuationElement832() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement832() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement832()
}

func (c *current) onListContinuationElement835() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement835()
}

func (c *current) onListContinuationElement823(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement823(stack["delimiter"])
}

func (c *current) onListContinuationElement842(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement842() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement842(stack["end"])
}

func (c *current) onListContinuationElement747(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListContinuationElement747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement747(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement857() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement857() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement857()
}

func (c *current) onListContinuationElement860() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement860()
}

func (c *current) onListContinuationElement851() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement851() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement851()
}

func (c *current) onListContinuationElement869() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement869() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement869()
}

func (c *current) onListContinuationElement873() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement873()
}

func (c *current) onListContinuationElement848(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement848(stack["content"])
}

func (c *current) onListContinuationElement892() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement892()
}

func (c *current) onListContinuationElement895() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement895() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement895()
}

func (c *current) onListContinuationElement886() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement886() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement886()
}

func (c *current) onListContinuationElement904() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement904()
}

func (c *current) onListContinuationElement908() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement908()
}

func (c *current) onListContinuationElement883(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement883() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement883(stack["content"])
}

func (c *current) onListContinuationElement918() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement918()
}

func (c *current) onListContinuationElement921(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonListContinuationElement921() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement921(stack["content"])
}

func (c *current) onListContinuationElement923() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement923()
}

func (c *current) onListContinuationElement915(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement915() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement915(stack["content"])
}

func (c *current) onListContinuationElement845(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListContinuationElement845() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement845(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListContinuationElement936() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement936() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement936()
}

func (c *current) onListContinuationElement939() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement939()
}

func (c *current) onListContinuationElement942() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement942()
}

func (c *current) onListContinuationElement933(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement933() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement933(stack["delimiter"])
}

func (c *current) onListContinuationElement958() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement958() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement958()
}

func (c *current) onListContinuationElement961() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement961() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement961()
}

func (c *current) onListContinuationElement964() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement964()
}

func (c *current) onListContinuationElement955(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement955(stack["delimiter"])
}

func (c *current) onListContinuationElement980() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement980()
}

func (c *current) onListContinuationElement984() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement984() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement984()
}

func (c *current) onListContinuationElement974(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement974(stack["content"])
}

func (c *current) onListContinuationElement951(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement951() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement951(stack["line"])
}

func (c *current) onListContinuationElement997() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement997() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement997()
}

func (c *current) onListContinuationElement1000() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1000() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1000()
}

func (c *current) onListContinuationElement1003() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1003()
}

func (c *current) onListContinuationElement994(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement994() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement994(stack["delimiter"])
}

func (c *current) onListContinuationElement930(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonListContinuationElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement930(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1018() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1018() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1018()
}

func (c *current) onListContinuationElement1024() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1024() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1024()
}

func (c *current) onListContinuationElement1027() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1027() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1027()
}

func (c *current) onListContinuationElement1015(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1015(stack["delimiter"])
}

func (c *current) onListContinuationElement1034(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1034() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1034(stack["start"])
}

func (c *current) onListContinuationElement1046() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1046() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1046()
}

func (c *current) onListContinuationElement1052() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1052()
}

func (c *current) onListContinuationElement1055() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1055()
}

func (c *current) onListContinuationElement1043(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1043(stack["delimiter"])
}

func (c *current) onListContinuationElement1062(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1062() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1062(stack["end"])
}

func (c *current) onListContinuationElement1072() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1072()
}

func (c *current) onListContinuationElement1076() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1076()
}

func (c *current) onListContinuationElement1066(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1066(stack["content"])
}

func (c *current) onListContinuationElement1037(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1037() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1037(stack["line"])
}

func (c *current) onListContinuationElement1091() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1091() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1091()
}

func (c *current) onListContinuationElement1097() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1097() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1097()
}

func (c *current) onListContinuationElement1100() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1100()
}

func (c *current) onListContinuationElement1088(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1088() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1088(stack["delimiter"])
}

func (c *current) onListContinuationElement1107(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1107() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1107(stack["end"])
}

func (c *current) onListContinuationElement1012(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1012(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1116() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1116()
}

func (c *current) onListContinuationElement1122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1122()
}

func (c *current) onListContinuationElement1125() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1125()
}

func (c *current) onListContinuationElement1113(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1113(stack["delimiter"])
}

func (c *current) onListContinuationElement1132(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1132() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1132(stack["start"])
}

func (c *current) onListContinuationElement1144() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1144()
}

func (c *current) onListContinuationElement1150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1150()
}

func (c *current) onListContinuationElement1153() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1153()
}

func (c *current) onListContinuationElement1141(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1141(stack["delimiter"])
}

func (c *current) onListContinuationElement1160(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1160(stack["end"])
}

func (c *current) onListContinuationElement1170() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1170()
}

func (c *current) onListContinuationElement1174() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1174()
}

func (c *current) onListContinuationElement1164(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1164(stack["content"])
}

func (c *current) onListContinuationElement1135(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1135(stack["line"])
}

func (c *current) onListContinuationElement1189() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1189()
}

func (c *current) onListContinuationElement1195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1195()
}

func (c *current) onListContinuationElement1198() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1198()
}

func (c *current) onListContinuationElement1186(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1186(stack["delimiter"])
}

func (c *current) onListContinuationElement1205(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1205() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1205(stack["end"])
}

func (c *current) onListContinuationElement1110(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1110(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1214() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1214()
}

func (c *current) onListContinuationElement1220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1220()
}

func (c *current) onListContinuationElement1223() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1223()
}

func (c *current) onListContinuationElement1211(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1211(stack["delimiter"])
}

func (c *current) onListContinuationElement1230(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1230(stack["start"])
}

func (c *current) onListContinuationElement1242() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1242()
}

func (c *current) onListContinuationElement1248() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1248()
}

func (c *current) onListContinuationElement1251() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1251()
}

func (c *current) onListContinuationElement1239(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1239(stack["delimiter"])
}

func (c *current) onListContinuationElement1258(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1258() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1258(stack["end"])
}

func (c *current) onListContinuationElement1268() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1268()
}

func (c *current) onListContinuationElement1272() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1272()
}

func (c *current) onListContinuationElement1262(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1262(stack["content"])
}

func (c *current) onListContinuationElement1233(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1233(stack["line"])
}

func (c *current) onListContinuationElement1287() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1287()
}

func (c *current) onListContinuationElement1293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1293()
}

func (c *current) onListContinuationElement1296() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1296()
}

func (c *current) onListContinuationElement1284(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1284(stack["delimiter"])
}

func (c *current) onListContinuationElement1303(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1303() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1303(stack["end"])
}

func (c *current) onListContinuationElement1208(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1208(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1317() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1317()
}

func (c *current) onListContinuationElement1320() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1320()
}

func (c *current) onListContinuationElement1328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1328()
}

func (c *current) onListContinuationElement1306() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListContinuationElement1306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1306()
}

func (c *current) onListContinuationElement1340() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1340()
}

func (c *current) onListContinuationElement1343() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1343()
}

func (c *current) onListContinuationElement1359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1359()
}

func (c *current) onListContinuationElement1362() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1362()
}

func (c *current) onListContinuationElement1353() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1353()
}

func (c *current) onListContinuationElement1376() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1376()
}

func (c *current) onListContinuationElement1379() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1379()
}

func (c *current) onListContinuationElement1401() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1401()
}

func (c *current) onListContinuationElement1406() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1406()
}

func (c *current) onListContinuationElement1404(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1404(stack["content"])
}

func (c *current) onListContinuationElement1397(content interface{}) (interface{}, error) {
	return types.NewInlineTableCell(content.(types.RawLine))

}

func (p *parser) callonListContinuationElement1397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1397(stack["content"])
}

func (c *current) onListContinuationElement1410() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1410()
}

func (c *current) onListContinuationElement1393(cells interface{}) (interface{}, error) {

	return cells, nil
}

func (p *parser) callonListContinuationElement1393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1393(stack["cells"])
}

func (c *current) onListContinuationElement1427() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1427()
}

func (c *current) onListContinuationElement1430() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1430()
}

func (c *current) onListContinuationElement1446() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1446()
}

func (c *current) onListContinuationElement1449() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1449()
}

func (c *current) onListContinuationElement1440() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1440()
}

func (c *current) onListContinuationElement1458() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1458()
}

func (c *current) onListContinuationElement1463() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1463()
}

func (c *current) onListContinuationElement1466() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1466()
}

func (c *current) onListContinuationElement1480() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1480()
}

func (c *current) onListContinuationElement1483() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1483()
}

func (c *current) onListContinuationElement1499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1499()
}

func (c *current) onListContinuationElement1502() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1502()
}

func (c *current) onListContinuationElement1493() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1493()
}

func (c *current) onListContinuationElement1513() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1513() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1513()
}

func (c *current) onListContinuationElement1518() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1518()
}

func (c *current) onListContinuationElement1523() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1523()
}

func (c *current) onListContinuationElement1473(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1473(stack["content"])
}

func (c *current) onListContinuationElement1420(format, content interface{}) (interface{}, error) {
	return types.NewMultilineTableCell(content.([]interface{}), format)

}

func (p *parser) callonListContinuationElement1420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1420(stack["format"], stack["content"])
}

func (c *current) onListContinuationElement1417(cells interface{}) (interface{}, error) {
	return cells, nil
}

func (p *parser) callonListContinuationElement1417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1417(stack["cells"])
}

func (c *current) onListContinuationElement1390(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListContinuationElement1390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1390(stack["cells"])
}

func (c *current) onListContinuationElement1536() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1536()
}

func (c *current) onListContinuationElement1539() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1539()
}

func (c *current) onListContinuationElement1530() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1530()
}

func (c *current) onListContinuationElement1369(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonListContinuationElement1369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1369(stack["content"])
}

func (c *current) onListContinuationElement1550() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1550()
}

func (c *current) onListContinuationElement1553() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1553()
}

func (c *current) onListContinuationElement1336(lines interface{}) (interface{}, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonListContinuationElement1336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1336(stack["lines"])
}

func (c *current) onListContinuationElement1568() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1568()
}

func (c *current) onListContinuationElement1572() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1572()
}

func (c *current) onListContinuationElement1562(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonListContinuationElement1562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1562(stack["content"])
}

func (c *current) onListContinuationElement1585() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonListContinuationElement1585() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1585()
}

func (c *current) onListContinuationElement1588() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonListContinuationElement1588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1588()
}

func (c *current) onListContinuationElement1590() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonListContinuationElement1590() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1590()
}

func (c *current) onListContinuationElement1592() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonListContinuationElement1592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1592()
}

func (c *current) onListContinuationElement1594() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonListContinuationElement1594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1594()
}

func (c *current) onListContinuationElement1596() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonListContinuationElement1596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1596()
}

func (c *current) onListContinuationElement1600() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1600()
}

func (c *current) onListContinuationElement1598() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonListContinuationElement1598() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1598()
}

func (c *current) onListContinuationElement1583(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement1583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1583(stack["style"])
}

func (c *current) onListContinuationElement1613() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1613() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1613()
}

func (c *current) onListContinuationElement1616() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1616()
}

func (c *current) onListContinuationElement1607() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1607()
}

func (c *current) onListContinuationElement1627() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1627()
}

func (c *current) onListContinuationElement1629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1629()
}

func (c *current) onListContinuationElement1638() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1638()
}

func (c *current) onListContinuationElement1645() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement1645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1645()
}

func (c *current) onListContinuationElement1648(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement1648() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1648(stack["depth"])
}

func (c *current) onListContinuationElement1642(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement1642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1642(stack["depth"])
}

func (c *current) onListContinuationElement1649() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement1649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1649()
}

func (c *current) onListContinuationElement1654() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement1654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1654()
}

func (c *current) onListContinuationElement1658() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement1658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1658()
}

func (c *current) onListContinuationElement1662() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement1662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1662()
}

func (c *current) onListContinuationElement1667() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement1667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1667()
}

func (c *current) onListContinuationElement1672(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1672() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1672(stack["prefix"])
}

func (c *current) onListContinuationElement1635(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement1635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1635(stack["prefix"])
}

func (c *current) onListContinuationElement1679() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1679()
}

func (c *current) onListContinuationElement1682() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1682()
}

func (c *current) onListContinuationElement1687(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement1687() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1687(stack["style"])
}

func (c *current) onListContinuationElement1688(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1688(stack["style"])
}

func (c *current) onListContinuationElement1676(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement1676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1676(stack["style"])
}

func (c *current) onListContinuationElement1696() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement1696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1696()
}

func (c *current) onListContinuationElement1700(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1700() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1700(stack["ref"])
}

func (c *current) onListContinuationElement1692(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement1692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1692(stack["ref"])
}

func (c *current) onListContinuationElement1712() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1712()
}

func (c *current) onListContinuationElement1715(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1715() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1715(stack["separator"])
}

func (c *current) onListContinuationElement1709(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1709(stack["separator"])
}

func (c *current) onListContinuationElement1718() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1718()
}

func (c *current) onListContinuationElement1705() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement1705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1705()
}

func (c *current) onListContinuationElement1729() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1729()
}

func (c *current) onListContinuationElement1732(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1732() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1732(stack["separator"])
}

func (c *current) onListContinuationElement1726(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1726(stack["separator"])
}

func (c *current) onListContinuationElement1743() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1743()
}

func (c *current) onListContinuationElement1749() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1749() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1749()
}

func (c *current) onListContinuationElement1752() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1752()
}

func (c *current) onListContinuationElement1740(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1740(stack["delimiter"])
}

func (c *current) onListContinuationElement1762() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1762()
}

func (c *current) onListContinuationElement1768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1768()
}

func (c *current) onListContinuationElement1771() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1771()
}

func (c *current) onListContinuationElement1759(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1759(stack["delimiter"])
}

func (c *current) onListContinuationElement1782() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1782()
}

func (c *current) onListContinuationElement1786() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1786() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1786()
}

func (c *current) onListContinuationElement1789() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1789()
}

func (c *current) onListContinuationElement1778(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement1778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1778(stack["language"])
}

func (c *current) onListContinuationElement1799() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1799() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1799()
}

func (c *current) onListContinuationElement1805() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1805()
}

func (c *current) onListContinuationElement1808() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1808()
}

func (c *current) onListContinuationElement1796(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1796(stack["delimiter"])
}

func (c *current) onListContinuationElement1818() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1818() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1818()
}

func (c *current) onListContinuationElement1824() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1824() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1824()
}

func (c *current) onListContinuationElement1827() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1827()
}

func (c *current) onListContinuationElement1815(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1815(stack["delimiter"])
}

func (c *current) onListContinuationElement1837() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1837()
}

func (c *current) onListContinuationElement1843() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1843() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1843()
}

func (c *current) onListContinuationElement1846() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1846() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1846()
}

func (c *current) onListContinuationElement1834(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1834(stack["delimiter"])
}

func (c *current) onListContinuationElement1856() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1856()
}

func (c *current) onListContinuationElement1862() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1862() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1862()
}

func (c *current) onListContinuationElement1865() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1865() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1865()
}

func (c *current) onListContinuationElement1853(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1853(stack["delimiter"])
}

func (c *current) onListContinuationElement1875() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1875()
}

func (c *current) onListContinuationElement1881() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1881() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1881()
}

func (c *current) onListContinuationElement1884() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1884()
}

func (c *current) onListContinuationElement1872(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1872(stack["delimiter"])
}

func (c *current) onListContinuationElement1894() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1894()
}

func (c *current) onListContinuationElement1900() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1900()
}

func (c *current) onListContinuationElement1903() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1903() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1903()
}

func (c *current) onListContinuationElement1891(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1891(stack["delimiter"])
}

func (c *current) onListContinuationElement1734(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListContinuationElement1734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1734(stack["delimiter"])
}

func (c *current) onListContinuationElement1911() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1911() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1911()
}

func (c *current) onListContinuationElement1915() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1915() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1915()
}

func (c *current) onListContinuationElement1604(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1604(stack["content"])
}

func (c *current) onListContinuationElement1579(style, content interface{}) (interface{}, error) {
	return types.NewParagraph(style, content)

}

func (p *parser) callonListContinuationElement1579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1579(stack["style"], stack["content"])
}

func (c *current) onListContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonListContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts), nil

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph9() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph9()
}

func (c *current) onShortcutParagraph16() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonShortcutParagraph16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph16()
}

func (c *current) onShortcutParagraph19() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonShortcutParagraph19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph19()
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph23() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonShortcutParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph23()
}

func (c *current) onShortcutParagraph25() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonShortcutParagraph25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph25()
}

func (c *current) onShortcutParagraph27() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonShortcutParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph27()
}

func (c *current) onShortcutParagraph31() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph31()
}

func (c *current) onShortcutParagraph29() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonShortcutParagraph29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph29()
}

func (c *current) onShortcutParagraph14(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["style"])
}

func (c *current) onShortcutParagraph38() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph38()
}

func (c *current) onShortcutParagraph41(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph41(stack["content"])
}

func (c *current) onShortcutParagraph43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph43()
}

func (c *current) onShortcutParagraph35(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph35(stack["content"])
}

func (c *current) onShortcutParagraph50(style, firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph50() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph50(stack["style"], stack["firstLine"])
}

func (c *current) onShortcutParagraph65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph65()
}

func (c *current) onShortcutParagraph68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph68()
}

func (c *current) onShortcutParagraph59() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph59()
}

func (c *current) onShortcutParagraph87() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph87()
}

func (c *current) onShortcutParagraph93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph93()
}

func (c *current) onShortcutParagraph96() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph96()
}

func (c *current) onShortcutParagraph84(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph84(stack["delimiter"])
}

func (c *current) onShortcutParagraph106() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph106()
}

func (c *current) onShortcutParagraph112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph112()
}

func (c *current) onShortcutParagraph115() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph115()
}

func (c *current) onShortcutParagraph103(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph103(stack["delimiter"])
}

func (c *current) onShortcutParagraph126() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph126()
}

func (c *current) onShortcutParagraph130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph130()
}

func (c *current) onShortcutParagraph133() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph133()
}

func (c *current) onShortcutParagraph122(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonShortcutParagraph122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph122(stack["language"])
}

func (c *current) onShortcutParagraph143() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph143()
}

func (c *current) onShortcutParagraph149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph149()
}

func (c *current) onShortcutParagraph152() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph152()
}

func (c *current) onShortcutParagraph140(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph140(stack["delimiter"])
}

func (c *current) onShortcutParagraph162() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph162()
}

func (c *current) onShortcutParagraph168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph168()
}

func (c *current) onShortcutParagraph171() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph171()
}

func (c *current) onShortcutParagraph159(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph159(stack["delimiter"])
}

func (c *current) onShortcutParagraph181() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph181()
}

func (c *current) onShortcutParagraph187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph187()
}

func (c *current) onShortcutParagraph190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph190()
}

func (c *current) onShortcutParagraph178(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph178(stack["delimiter"])
}

func (c *current) onShortcutParagraph200() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph200()
}

func (c *current) onShortcutParagraph206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph206()
}

func (c *current) onShortcutParagraph209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph209()
}

func (c *current) onShortcutParagraph197(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph197(stack["delimiter"])
}

func (c *current) onShortcutParagraph219() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph219()
}

func (c *current) onShortcutParagraph225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph225()
}

func (c *current) onShortcutParagraph228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph228()
}

func (c *current) onShortcutParagraph216(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph216(stack["delimiter"])
}

func (c *current) onShortcutParagraph238() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph238()
}

func (c *current) onShortcutParagraph244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph244()
}

func (c *current) onShortcutParagraph247() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph247()
}

func (c *current) onShortcutParagraph235(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph235(stack["delimiter"])
}

func (c *current) onShortcutParagraph78(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonShortcutParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph78(stack["delimiter"])
}

func (c *current) onShortcutParagraph258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph258()
}

func (c *current) onShortcutParagraph260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph260()
}

func (c *current) onShortcutParagraph273() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph273()
}

func (c *current) onShortcutParagraph277() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph277()
}

func (c *current) onShortcutParagraph267(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonShortcutParagraph267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph267(stack["content"])
}

func (c *current) onShortcutParagraph287() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph287()
}

func (c *current) onShortcutParagraph290(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph290() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph290(stack["content"])
}

func (c *current) onShortcutParagraph292() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph292()
}

func (c *current) onShortcutParagraph284(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph284(stack["content"])
}

func (c *current) onShortcutParagraph53(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph53(stack["line"])
}

func (c *current) onShortcutParagraph1(style, firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10()
}

func (c *current) onParagraph12() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph14() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph14()
}

func (c *current) onParagraph16() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonParagraph16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph16()
}

func (c *current) onParagraph18() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonParagraph18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18()
}

func (c *current) onParagraph22() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonParagraph22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph22()
}

func (c *current) onParagraph20() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonParagraph20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph20()
}

func (c *current) onParagraph5(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph5(stack["style"])
}

func (c *current) onParagraph29() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph29()
}

func (c *current) onParagraph32(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph32(stack["content"])
}

func (c *current) onParagraph34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph34()
}

func (c *current) onParagraph26(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["content"])
}

func (c *current) onParagraph55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph55()
}

func (c *current) onParagraph58() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph58()
}

func (c *current) onParagraph49() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph49()
}

func (c *current) onParagraph75() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph75()
}

func (c *current) onParagraph79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph79()
}

func (c *current) onParagraph69(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonParagraph69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph69(stack["content"])
}

func (c *current) onParagraph89() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph89()
}

func (c *current) onParagraph92(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph92(stack["content"])
}

func (c *current) onParagraph94() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph94()
}

func (c *current) onParagraph86(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph86(stack["content"])
}

func (c *current) onParagraph43(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph43(stack["line"])
}

func (c *current) onParagraph1(style, firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onEscapedQuotedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedQuotedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText5()
}

func (c *current) onEscapedQuotedText1(attributes, element interface{}) (interface{}, error) {
	return append([]interface{}{attributes}, element.([]interface{})...), nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onUnescapedQuotedText1(attributes, element interface{}) (interface{}, error) {
	return element.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonUnescapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnescapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement17()
}

func (c *current) onDoubleQuoteBoldTextElement10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement10()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement25()
}

func (c *current) onDoubleQuoteBoldTextElement31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31()
}

func (c *current) onDoubleQuoteBoldTextElement23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement23()
}

func (c *current) onDoubleQuoteBoldTextElement38() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement38()
}

func (c *current) onDoubleQuoteBoldTextElement45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement45()
}

func (c *current) onDoubleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement57()
}

func (c *current) onDoubleQuoteBoldTextElement59() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement59()
}

func (c *current) onDoubleQuoteBoldTextElement52(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement41(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement41(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement67()
}

func (c *current) onDoubleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement79()
}

func (c *current) onDoubleQuoteBoldTextElement81() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement81()
}

func (c *current) onDoubleQuoteBoldTextElement74(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement63(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement63(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement89()
}

func (c *current) onDoubleQuoteBoldTextElement85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement85(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement99()
}

func (c *current) onDoubleQuoteBoldTextElement95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement95(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement108() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement108()
}

func (c *current) onDoubleQuoteBoldTextElement115() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteBoldTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement115()
}

func (c *current) onDoubleQuoteBoldTextElement117() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteBoldTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement117()
}

func (c *current) onDoubleQuoteBoldTextElement119() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteBoldTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement119()
}

func (c *current) onDoubleQuoteBoldTextElement121() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteBoldTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement121()
}

func (c *current) onDoubleQuoteBoldTextElement123() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteBoldTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement123()
}

func (c *current) onDoubleQuoteBoldTextElement125() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteBoldTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement125()
}

func (c *current) onDoubleQuoteBoldTextElement127() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement127()
}

func (c *current) onDoubleQuoteBoldTextElement129() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteBoldTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement129()
}

func (c *current) onDoubleQuoteBoldTextElement131() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteBoldTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement131()
}

func (c *current) onDoubleQuoteBoldTextElement136() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement136()
}

func (c *current) onDoubleQuoteBoldTextElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement138()
}

func (c *current) onDoubleQuoteBoldTextElement142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement142()
}

func (c *current) onDoubleQuoteBoldTextElement133() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteBoldTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement133()
}

func (c *current) onDoubleQuoteBoldTextElement152() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement152()
}

func (c *current) onDoubleQuoteBoldTextElement156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement156()
}

func (c *current) onDoubleQuoteBoldTextElement149() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement149()
}

func (c *current) onDoubleQuoteBoldTextElement163() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteBoldTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement163()
}

func (c *current) onDoubleQuoteBoldTextElement165() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement165()
}

func (c *current) onDoubleQuoteBoldTextElement167() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteBoldTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement167()
}

func (c *current) onDoubleQuoteBoldTextElement111() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement111()
}

func (c *current) onDoubleQuoteBoldTextElement169() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteBoldTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement169()
}

func (c *current) onDoubleQuoteBoldTextElement171() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteBoldTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement171()
}

func (c *current) onDoubleQuoteBoldTextElement173() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement173()
}

func (c *current) onDoubleQuoteBoldTextElement175() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteBoldTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement175()
}

func (c *current) onDoubleQuoteBoldTextElement177() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteBoldTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement177()
}

func (c *current) onDoubleQuoteBoldTextElement179() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteBoldTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement179()
}

func (c *current) onDoubleQuoteBoldTextElement181() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement181()
}

func (c *current) onDoubleQuoteBoldTextElement183() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteBoldTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement183()
}

func (c *current) onDoubleQuoteBoldTextElement188() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement188()
}

func (c *current) onDoubleQuoteBoldTextElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement190()
}

func (c *current) onDoubleQuoteBoldTextElement194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement194()
}

func (c *current) onDoubleQuoteBoldTextElement185() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement185()
}

func (c *current) onDoubleQuoteBoldTextElement204() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement204() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement204()
}

func (c *current) onDoubleQuoteBoldTextElement208() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement208()
}

func (c *current) onDoubleQuoteBoldTextElement201() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteBoldTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement201()
}

func (c *current) onDoubleQuoteBoldTextElement215() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteBoldTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement215()
}

func (c *current) onDoubleQuoteBoldTextElement217() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteBoldTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement217()
}

func (c *current) onDoubleQuoteBoldTextElement219() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteBoldTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement219()
}

func (c *current) onDoubleQuoteBoldTextElement221() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteBoldTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement221()
}

func (c *current) onDoubleQuoteBoldTextElement223() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteBoldTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement223()
}

func (c *current) onDoubleQuoteBoldTextElement230() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement230()
}

func (c *current) onDoubleQuoteBoldTextElement228() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonDoubleQuoteBoldTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement228()
}

func (c *current) onDoubleQuoteBoldTextElement106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement106(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement236() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement236() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement236()
}

func (c *current) onDoubleQuoteBoldTextElement245() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement245()
}

func (c *current) onDoubleQuoteBoldTextElement249() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement249()
}

func (c *current) onDoubleQuoteBoldTextElement255() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement255()
}

func (c *current) onDoubleQuoteBoldTextElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement264()
}

func (c *current) onDoubleQuoteBoldTextElement260(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement260(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement274()
}

func (c *current) onDoubleQuoteBoldTextElement270(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement270(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement280() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement280()
}

func (c *current) onDoubleQuoteBoldTextElement241(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement241(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement287() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement287()
}

func (c *current) onDoubleQuoteBoldTextElement283(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement283(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement239() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement239()
}

func (c *current) onDoubleQuoteBoldTextElement291() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement291()
}

func (c *current) onDoubleQuoteBoldTextElement234(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement234(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement298()
}

func (c *current) onDoubleQuoteBoldTextElement294(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement294(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement302()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onSingleQuoteBoldText4() (bool, error) {
	log.Debug("SingleQuoteBoldTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteBoldText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText4()
}

func (c *current) onSingleQuoteBoldText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText13(stack["elements"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements4()
}

func (c *current) onSingleQuoteBoldTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement11() (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement24()
}

func (c *current) onSingleQuoteBoldTextElement17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement17()
}

func (c *current) onSingleQuoteBoldTextElement27() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement27()
}

func (c *current) onSingleQuoteBoldTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement32()
}

func (c *current) onSingleQuoteBoldTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement38()
}

func (c *current) onSingleQuoteBoldTextElement30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement30()
}

func (c *current) onSingleQuoteBoldTextElement46() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSingleQuoteBoldTextElement46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement46()
}

func (c *current) onSingleQuoteBoldTextElement53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53()
}

func (c *current) onSingleQuoteBoldTextElement65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement65()
}

func (c *current) onSingleQuoteBoldTextElement67() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement67()
}

func (c *current) onSingleQuoteBoldTextElement60(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement60(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement49(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75()
}

func (c *current) onSingleQuoteBoldTextElement87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement87()
}

func (c *current) onSingleQuoteBoldTextElement89() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement89()
}

func (c *current) onSingleQuoteBoldTextElement82(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement82(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement71(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement97() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement97()
}

func (c *current) onSingleQuoteBoldTextElement93(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement93(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement107()
}

func (c *current) onSingleQuoteBoldTextElement103(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement103(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement44(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement44(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement115() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSingleQuoteBoldTextElement115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement115()
}

func (c *current) onSingleQuoteBoldTextElement122() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement122()
}

func (c *current) onSingleQuoteBoldTextElement124() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteBoldTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement124()
}

func (c *current) onSingleQuoteBoldTextElement126() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteBoldTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement126()
}

func (c *current) onSingleQuoteBoldTextElement128() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteBoldTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement128()
}

func (c *current) onSingleQuoteBoldTextElement130() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteBoldTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement130()
}

func (c *current) onSingleQuoteBoldTextElement132() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement132()
}

func (c *current) onSingleQuoteBoldTextElement134() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteBoldTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement134()
}

func (c *current) onSingleQuoteBoldTextElement136() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteBoldTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement136()
}

func (c *current) onSingleQuoteBoldTextElement138() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteBoldTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement138()
}

func (c *current) onSingleQuoteBoldTextElement143() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement143() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement143()
}

func (c *current) onSingleQuoteBoldTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement145()
}

func (c *current) onSingleQuoteBoldTextElement149() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement149()
}

func (c *current) onSingleQuoteBoldTextElement140() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteBoldTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement140()
}

func (c *current) onSingleQuoteBoldTextElement159() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement159() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement159()
}

func (c *current) onSingleQuoteBoldTextElement163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement163()
}

func (c *current) onSingleQuoteBoldTextElement156() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteBoldTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement156()
}

func (c *current) onSingleQuoteBoldTextElement170() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement170()
}

func (c *current) onSingleQuoteBoldTextElement172() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement172()
}

func (c *current) onSingleQuoteBoldTextElement174() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteBoldTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement174()
}

func (c *current) onSingleQuoteBoldTextElement118() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement118()
}

func (c *current) onSingleQuoteBoldTextElement176() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteBoldTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement176()
}

func (c *current) onSingleQuoteBoldTextElement178() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement178()
}

func (c *current) onSingleQuoteBoldTextElement180() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteBoldTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement180()
}

func (c *current) onSingleQuoteBoldTextElement182() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteBoldTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement182()
}

func (c *current) onSingleQuoteBoldTextElement184() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteBoldTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement184()
}

func (c *current) onSingleQuoteBoldTextElement186() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement186()
}

func (c *current) onSingleQuoteBoldTextElement188() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteBoldTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement188()
}

func (c *current) onSingleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement190()
}

func (c *current) onSingleQuoteBoldTextElement195() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement195() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement195()
}

func (c *current) onSingleQuoteBoldTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement197()
}

func (c *current) onSingleQuoteBoldTextElement201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement201()
}

func (c *current) onSingleQuoteBoldTextElement192() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteBoldTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement192()
}

func (c *current) onSingleQuoteBoldTextElement211() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement211() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement211()
}

func (c *current) onSingleQuoteBoldTextElement215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement215()
}

func (c *current) onSingleQuoteBoldTextElement208() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteBoldTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement208()
}

func (c *current) onSingleQuoteBoldTextElement222() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteBoldTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement222()
}

func (c *current) onSingleQuoteBoldTextElement224() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteBoldTextElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement224()
}

func (c *current) onSingleQuoteBoldTextElement226() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteBoldTextElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement226()
}

func (c *current) onSingleQuoteBoldTextElement228() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteBoldTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement228()
}

func (c *current) onSingleQuoteBoldTextElement230() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteBoldTextElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement230()
}

func (c *current) onSingleQuoteBoldTextElement237() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement237() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement237()
}

func (c *current) onSingleQuoteBoldTextElement235() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSingleQuoteBoldTextElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement235()
}

func (c *current) onSingleQuoteBoldTextElement113(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement113(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement243() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteBoldTextElement243() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement243()
}

func (c *current) onSingleQuoteBoldTextElement252() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement252()
}

func (c *current) onSingleQuoteBoldTextElement256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement256()
}

func (c *current) onSingleQuoteBoldTextElement262() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement262()
}

func (c *current) onSingleQuoteBoldTextElement271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement271()
}

func (c *current) onSingleQuoteBoldTextElement267(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement267(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement281() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement281()
}

func (c *current) onSingleQuoteBoldTextElement277(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement277(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement287() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement287()
}

func (c *current) onSingleQuoteBoldTextElement248(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement248(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement294() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement294()
}

func (c *current) onSingleQuoteBoldTextElement290(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement290(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement246() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement246()
}

func (c *current) onSingleQuoteBoldTextElement298() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement298()
}

func (c *current) onSingleQuoteBoldTextElement241(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement241(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement305() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement305()
}

func (c *current) onSingleQuoteBoldTextElement301(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement301(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement309() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement309()
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {

	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement17()
}

func (c *current) onDoubleQuoteItalicTextElement10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement10()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement25()
}

func (c *current) onDoubleQuoteItalicTextElement31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31()
}

func (c *current) onDoubleQuoteItalicTextElement23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement23()
}

func (c *current) onDoubleQuoteItalicTextElement38() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement38()
}

func (c *current) onDoubleQuoteItalicTextElement45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement45()
}

func (c *current) onDoubleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement57()
}

func (c *current) onDoubleQuoteItalicTextElement59() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement59()
}

func (c *current) onDoubleQuoteItalicTextElement52(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement41(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement41(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement67()
}

func (c *current) onDoubleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement79()
}

func (c *current) onDoubleQuoteItalicTextElement81() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement81()
}

func (c *current) onDoubleQuoteItalicTextElement74(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement63(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement63(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement89()
}

func (c *current) onDoubleQuoteItalicTextElement85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement85(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement99()
}

func (c *current) onDoubleQuoteItalicTextElement95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement95(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement108() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement108()
}

func (c *current) onDoubleQuoteItalicTextElement115() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteItalicTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement115()
}

func (c *current) onDoubleQuoteItalicTextElement117() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteItalicTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement117()
}

func (c *current) onDoubleQuoteItalicTextElement119() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteItalicTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement119()
}

func (c *current) onDoubleQuoteItalicTextElement121() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteItalicTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement121()
}

func (c *current) onDoubleQuoteItalicTextElement123() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteItalicTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement123()
}

func (c *current) onDoubleQuoteItalicTextElement125() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteItalicTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement125()
}

func (c *current) onDoubleQuoteItalicTextElement127() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement127()
}

func (c *current) onDoubleQuoteItalicTextElement129() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteItalicTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement129()
}

func (c *current) onDoubleQuoteItalicTextElement131() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteItalicTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement131()
}

func (c *current) onDoubleQuoteItalicTextElement136() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement136()
}

func (c *current) onDoubleQuoteItalicTextElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement138()
}

func (c *current) onDoubleQuoteItalicTextElement142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement142()
}

func (c *current) onDoubleQuoteItalicTextElement133() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteItalicTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement133()
}

func (c *current) onDoubleQuoteItalicTextElement152() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement152()
}

func (c *current) onDoubleQuoteItalicTextElement156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement156()
}

func (c *current) onDoubleQuoteItalicTextElement149() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement149()
}

func (c *current) onDoubleQuoteItalicTextElement163() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement163()
}

func (c *current) onDoubleQuoteItalicTextElement165() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement165()
}

func (c *current) onDoubleQuoteItalicTextElement167() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement167()
}

func (c *current) onDoubleQuoteItalicTextElement111() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement111()
}

func (c *current) onDoubleQuoteItalicTextElement169() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteItalicTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement169()
}

func (c *current) onDoubleQuoteItalicTextElement171() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteItalicTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement171()
}

func (c *current) onDoubleQuoteItalicTextElement173() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement173()
}

func (c *current) onDoubleQuoteItalicTextElement175() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteItalicTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement175()
}

func (c *current) onDoubleQuoteItalicTextElement177() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement177()
}

func (c *current) onDoubleQuoteItalicTextElement179() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteItalicTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement179()
}

func (c *current) onDoubleQuoteItalicTextElement181() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteItalicTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement181()
}

func (c *current) onDoubleQuoteItalicTextElement183() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteItalicTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement183()
}

func (c *current) onDoubleQuoteItalicTextElement188() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement188()
}

func (c *current) onDoubleQuoteItalicTextElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement190()
}

func (c *current) onDoubleQuoteItalicTextElement194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement194()
}

func (c *current) onDoubleQuoteItalicTextElement185() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement185()
}

func (c *current) onDoubleQuoteItalicTextElement204() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement204() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement204()
}

func (c *current) onDoubleQuoteItalicTextElement208() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement208()
}

func (c *current) onDoubleQuoteItalicTextElement201() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteItalicTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement201()
}

func (c *current) onDoubleQuoteItalicTextElement215() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteItalicTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement215()
}

func (c *current) onDoubleQuoteItalicTextElement217() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteItalicTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement217()
}

func (c *current) onDoubleQuoteItalicTextElement219() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteItalicTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement219()
}

func (c *current) onDoubleQuoteItalicTextElement221() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteItalicTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement221()
}

func (c *current) onDoubleQuoteItalicTextElement223() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteItalicTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement223()
}

func (c *current) onDoubleQuoteItalicTextElement230() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement230()
}

func (c *current) onDoubleQuoteItalicTextElement228() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonDoubleQuoteItalicTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement228()
}

func (c *current) onDoubleQuoteItalicTextElement106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement106(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement236() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement236() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement236()
}

func (c *current) onDoubleQuoteItalicTextElement245() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement245()
}

func (c *current) onDoubleQuoteItalicTextElement249() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement249()
}

func (c *current) onDoubleQuoteItalicTextElement255() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement255()
}

func (c *current) onDoubleQuoteItalicTextElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement264()
}

func (c *current) onDoubleQuoteItalicTextElement260(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement260(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement274()
}

func (c *current) onDoubleQuoteItalicTextElement270(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement270(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement280() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement280()
}

func (c *current) onDoubleQuoteItalicTextElement241(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement241(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement287() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement287()
}

func (c *current) onDoubleQuoteItalicTextElement283(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement283(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement239() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement239()
}

func (c *current) onDoubleQuoteItalicTextElement291() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement291()
}

func (c *current) onDoubleQuoteItalicTextElement234(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement234(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement298()
}

func (c *current) onDoubleQuoteItalicTextElement294(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement294(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement302()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onSingleQuoteItalicText4() (bool, error) {
	log.Debug("SingleQuoteItalicTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteItalicText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText4()
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements4()
}

func (c *current) onSingleQuoteItalicTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement11() (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement24()
}

func (c *current) onSingleQuoteItalicTextElement17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement17()
}

func (c *current) onSingleQuoteItalicTextElement27() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement27()
}

func (c *current) onSingleQuoteItalicTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement32()
}

func (c *current) onSingleQuoteItalicTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement38()
}

func (c *current) onSingleQuoteItalicTextElement30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement30()
}

func (c *current) onSingleQuoteItalicTextElement45() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSingleQuoteItalicTextElement45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement45()
}

func (c *current) onSingleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement52()
}

func (c *current) onSingleQuoteItalicTextElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64()
}

func (c *current) onSingleQuoteItalicTextElement66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement66()
}

func (c *current) onSingleQuoteItalicTextElement59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement59(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement48(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement74()
}

func (c *current) onSingleQuoteItalicTextElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement86()
}

func (c *current) onSingleQuoteItalicTextElement88() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement88()
}

func (c *current) onSingleQuoteItalicTextElement81(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement81(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement70(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement70(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement96() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement96()
}

func (c *current) onSingleQuoteItalicTextElement92(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement92(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement106()
}

func (c *current) onSingleQuoteItalicTextElement102(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement102(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement43(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement43(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement115() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSingleQuoteItalicTextElement115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement115()
}

func (c *current) onSingleQuoteItalicTextElement122() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement122()
}

func (c *current) onSingleQuoteItalicTextElement124() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteItalicTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement124()
}

func (c *current) onSingleQuoteItalicTextElement126() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteItalicTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement126()
}

func (c *current) onSingleQuoteItalicTextElement128() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteItalicTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement128()
}

func (c *current) onSingleQuoteItalicTextElement130() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteItalicTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement130()
}

func (c *current) onSingleQuoteItalicTextElement132() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement132()
}

func (c *current) onSingleQuoteItalicTextElement134() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteItalicTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement134()
}

func (c *current) onSingleQuoteItalicTextElement136() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteItalicTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement136()
}

func (c *current) onSingleQuoteItalicTextElement138() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteItalicTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement138()
}

func (c *current) onSingleQuoteItalicTextElement143() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement143() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement143()
}

func (c *current) onSingleQuoteItalicTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145()
}

func (c *current) onSingleQuoteItalicTextElement149() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149()
}

func (c *current) onSingleQuoteItalicTextElement140() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteItalicTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement140()
}

func (c *current) onSingleQuoteItalicTextElement159() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement159() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement159()
}

func (c *current) onSingleQuoteItalicTextElement163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement163()
}

func (c *current) onSingleQuoteItalicTextElement156() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteItalicTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement156()
}

func (c *current) onSingleQuoteItalicTextElement170() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement170()
}

func (c *current) onSingleQuoteItalicTextElement172() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteItalicTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement172()
}

func (c *current) onSingleQuoteItalicTextElement174() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteItalicTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement174()
}

func (c *current) onSingleQuoteItalicTextElement118() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement118()
}

func (c *current) onSingleQuoteItalicTextElement176() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteItalicTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement176()
}

func (c *current) onSingleQuoteItalicTextElement178() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement178()
}

func (c *current) onSingleQuoteItalicTextElement180() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement180()
}

func (c *current) onSingleQuoteItalicTextElement182() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteItalicTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement182()
}

func (c *current) onSingleQuoteItalicTextElement184() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteItalicTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement184()
}

func (c *current) onSingleQuoteItalicTextElement186() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement186()
}

func (c *current) onSingleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement188()
}

func (c *current) onSingleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement190()
}

func (c *current) onSingleQuoteItalicTextElement195() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement195() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement195()
}

func (c *current) onSingleQuoteItalicTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement197()
}

func (c *current) onSingleQuoteItalicTextElement201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement201()
}

func (c *current) onSingleQuoteItalicTextElement192() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteItalicTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement192()
}

func (c *current) onSingleQuoteItalicTextElement211() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement211() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement211()
}

func (c *current) onSingleQuoteItalicTextElement215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement215()
}

func (c *current) onSingleQuoteItalicTextElement208() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteItalicTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement208()
}

func (c *current) onSingleQuoteItalicTextElement222() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteItalicTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement222()
}

func (c *current) onSingleQuoteItalicTextElement224() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteItalicTextElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement224()
}

func (c *current) onSingleQuoteItalicTextElement226() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteItalicTextElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement226()
}

func (c *current) onSingleQuoteItalicTextElement228() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteItalicTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement228()
}

func (c *current) onSingleQuoteItalicTextElement230() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteItalicTextElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement230()
}

func (c *current) onSingleQuoteItalicTextElement237() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement237() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement237()
}

func (c *current) onSingleQuoteItalicTextElement235() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSingleQuoteItalicTextElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement235()
}

func (c *current) onSingleQuoteItalicTextElement113(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement113(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement243() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteItalicTextElement243() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement243()
}

func (c *current) onSingleQuoteItalicTextElement252() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement252()
}

func (c *current) onSingleQuoteItalicTextElement256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement256()
}

func (c *current) onSingleQuoteItalicTextElement262() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement262()
}

func (c *current) onSingleQuoteItalicTextElement271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement271()
}

func (c *current) onSingleQuoteItalicTextElement267(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement267(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement281() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement281()
}

func (c *current) onSingleQuoteItalicTextElement277(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement277(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement287() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement287()
}

func (c *current) onSingleQuoteItalicTextElement248(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement248(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement294() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement294()
}

func (c *current) onSingleQuoteItalicTextElement290(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement290(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement246() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement246()
}

func (c *current) onSingleQuoteItalicTextElement298() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement298()
}

func (c *current) onSingleQuoteItalicTextElement241(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement241(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement305() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement305()
}

func (c *current) onSingleQuoteItalicTextElement301(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement301(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement309() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement309()
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement17()
}

func (c *current) onDoubleQuoteMonospaceTextElement10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement10()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement25()
}

func (c *current) onDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31()
}

func (c *current) onDoubleQuoteMonospaceTextElement23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement23()
}

func (c *current) onDoubleQuoteMonospaceTextElement38() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement38()
}

func (c *current) onDoubleQuoteMonospaceTextElement45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement45()
}

func (c *current) onDoubleQuoteMonospaceTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement57()
}

func (c *current) onDoubleQuoteMonospaceTextElement59() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement59()
}

func (c *current) onDoubleQuoteMonospaceTextElement52(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement41(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement41(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement67()
}

func (c *current) onDoubleQuoteMonospaceTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement79()
}

func (c *current) onDoubleQuoteMonospaceTextElement81() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement81()
}

func (c *current) onDoubleQuoteMonospaceTextElement74(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement63(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement63(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement89()
}

func (c *current) onDoubleQuoteMonospaceTextElement85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement85(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement99()
}

func (c *current) onDoubleQuoteMonospaceTextElement95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement95(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement108() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement108()
}

func (c *current) onDoubleQuoteMonospaceTextElement115() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement115()
}

func (c *current) onDoubleQuoteMonospaceTextElement117() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement117()
}

func (c *current) onDoubleQuoteMonospaceTextElement119() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement119()
}

func (c *current) onDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement121()
}

func (c *current) onDoubleQuoteMonospaceTextElement123() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement123()
}

func (c *current) onDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement125()
}

func (c *current) onDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement127()
}

func (c *current) onDoubleQuoteMonospaceTextElement129() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement129()
}

func (c *current) onDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement131()
}

func (c *current) onDoubleQuoteMonospaceTextElement136() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement136()
}

func (c *current) onDoubleQuoteMonospaceTextElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement138()
}

func (c *current) onDoubleQuoteMonospaceTextElement142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement142()
}

func (c *current) onDoubleQuoteMonospaceTextElement133() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement133()
}

func (c *current) onDoubleQuoteMonospaceTextElement152() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement152()
}

func (c *current) onDoubleQuoteMonospaceTextElement156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement156()
}

func (c *current) onDoubleQuoteMonospaceTextElement149() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement149()
}

func (c *current) onDoubleQuoteMonospaceTextElement163() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement163()
}

func (c *current) onDoubleQuoteMonospaceTextElement165() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement165()
}

func (c *current) onDoubleQuoteMonospaceTextElement167() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement167()
}

func (c *current) onDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement111()
}

func (c *current) onDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement169()
}

func (c *current) onDoubleQuoteMonospaceTextElement171() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement171()
}

func (c *current) onDoubleQuoteMonospaceTextElement173() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement173()
}

func (c *current) onDoubleQuoteMonospaceTextElement175() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement175()
}

func (c *current) onDoubleQuoteMonospaceTextElement177() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement177()
}

func (c *current) onDoubleQuoteMonospaceTextElement179() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement179()
}

func (c *current) onDoubleQuoteMonospaceTextElement181() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement181()
}

func (c *current) onDoubleQuoteMonospaceTextElement183() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement183()
}

func (c *current) onDoubleQuoteMonospaceTextElement188() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement188()
}

func (c *current) onDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement190()
}

func (c *current) onDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement194()
}

func (c *current) onDoubleQuoteMonospaceTextElement185() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement185()
}

func (c *current) onDoubleQuoteMonospaceTextElement204() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement204() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement204()
}

func (c *current) onDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement208()
}

func (c *current) onDoubleQuoteMonospaceTextElement201() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement201()
}

func (c *current) onDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement215()
}

func (c *current) onDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement217()
}

func (c *current) onDoubleQuoteMonospaceTextElement219() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement219()
}

func (c *current) onDoubleQuoteMonospaceTextElement221() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement221()
}

func (c *current) onDoubleQuoteMonospaceTextElement223() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMonospaceTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement223()
}

func (c *current) onDoubleQuoteMonospaceTextElement230() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement230()
}

func (c *current) onDoubleQuoteMonospaceTextElement228() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement228()
}

func (c *current) onDoubleQuoteMonospaceTextElement106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement106(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement236() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement236() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement236()
}

func (c *current) onDoubleQuoteMonospaceTextElement245() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement245()
}

func (c *current) onDoubleQuoteMonospaceTextElement249() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement249()
}

func (c *current) onDoubleQuoteMonospaceTextElement255() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement255()
}

func (c *current) onDoubleQuoteMonospaceTextElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement264()
}

func (c *current) onDoubleQuoteMonospaceTextElement260(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement260(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement274()
}

func (c *current) onDoubleQuoteMonospaceTextElement270(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement270(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement280() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement280()
}

func (c *current) onDoubleQuoteMonospaceTextElement241(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement241(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement287() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement287()
}

func (c *current) onDoubleQuoteMonospaceTextElement283(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement283(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement239() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement239()
}

func (c *current) onDoubleQuoteMonospaceTextElement291() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement291()
}

func (c *current) onDoubleQuoteMonospaceTextElement234(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement234(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement298()
}

func (c *current) onDoubleQuoteMonospaceTextElement294(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement294(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement302()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMonospaceText4() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMonospaceText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText4()
}

func (c *current) onSingleQuoteMonospaceText12() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12()
}

func (c *current) onSingleQuoteMonospaceText14() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14()
}

func (c *current) onSingleQuoteMonospaceText16() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText16()
}

func (c *current) onSingleQuoteMonospaceText18() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText18()
}

func (c *current) onSingleQuoteMonospaceText21(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteMonospaceTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceText21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText21(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements4()
}

func (c *current) onSingleQuoteMonospaceTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement10() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement10()
}

func (c *current) onSingleQuoteMonospaceTextElement12() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceTextElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement12()
}

func (c *current) onSingleQuoteMonospaceTextElement14() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement14()
}

func (c *current) onSingleQuoteMonospaceTextElement16() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement16()
}

func (c *current) onSingleQuoteMonospaceTextElement19() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement19()
}

func (c *current) onSingleQuoteMonospaceTextElement32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement32()
}

func (c *current) onSingleQuoteMonospaceTextElement25() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement25()
}

func (c *current) onSingleQuoteMonospaceTextElement35() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35()
}

func (c *current) onSingleQuoteMonospaceTextElement40() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40()
}

func (c *current) onSingleQuoteMonospaceTextElement46() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement46()
}

func (c *current) onSingleQuoteMonospaceTextElement38() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement38()
}

func (c *current) onSingleQuoteMonospaceTextElement53() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement53()
}

func (c *current) onSingleQuoteMonospaceTextElement60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement60()
}

func (c *current) onSingleQuoteMonospaceTextElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement72()
}

func (c *current) onSingleQuoteMonospaceTextElement74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement74()
}

func (c *current) onSingleQuoteMonospaceTextElement67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement67(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement82()
}

func (c *current) onSingleQuoteMonospaceTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94()
}

func (c *current) onSingleQuoteMonospaceTextElement96() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement96()
}

func (c *current) onSingleQuoteMonospaceTextElement89(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement89(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement78(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement104()
}

func (c *current) onSingleQuoteMonospaceTextElement100(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement100(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement114()
}

func (c *current) onSingleQuoteMonospaceTextElement110(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement110(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement123() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement123() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement123()
}

func (c *current) onSingleQuoteMonospaceTextElement130() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement130()
}

func (c *current) onSingleQuoteMonospaceTextElement132() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement132()
}

func (c *current) onSingleQuoteMonospaceTextElement134() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement134()
}

func (c *current) onSingleQuoteMonospaceTextElement136() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement136()
}

func (c *current) onSingleQuoteMonospaceTextElement138() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement138()
}

func (c *current) onSingleQuoteMonospaceTextElement140() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement140()
}

func (c *current) onSingleQuoteMonospaceTextElement142() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement142()
}

func (c *current) onSingleQuoteMonospaceTextElement144() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMonospaceTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement144()
}

func (c *current) onSingleQuoteMonospaceTextElement146() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteMonospaceTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement146()
}

func (c *current) onSingleQuoteMonospaceTextElement151() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement151() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement151()
}

func (c *current) onSingleQuoteMonospaceTextElement153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement153()
}

func (c *current) onSingleQuoteMonospaceTextElement157() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement157()
}

func (c *current) onSingleQuoteMonospaceTextElement148() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteMonospaceTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement148()
}

func (c *current) onSingleQuoteMonospaceTextElement167() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement167() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement167()
}

func (c *current) onSingleQuoteMonospaceTextElement171() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement171()
}

func (c *current) onSingleQuoteMonospaceTextElement164() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement164()
}

func (c *current) onSingleQuoteMonospaceTextElement178() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement178()
}

func (c *current) onSingleQuoteMonospaceTextElement180() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement180()
}

func (c *current) onSingleQuoteMonospaceTextElement182() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement182()
}

func (c *current) onSingleQuoteMonospaceTextElement126() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement126()
}

func (c *current) onSingleQuoteMonospaceTextElement184() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement184()
}

func (c *current) onSingleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement186()
}

func (c *current) onSingleQuoteMonospaceTextElement188() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement188()
}

func (c *current) onSingleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement190()
}

func (c *current) onSingleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement192()
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement196()
}

func (c *current) onSingleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement198()
}

func (c *current) onSingleQuoteMonospaceTextElement203() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement203() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement203()
}

func (c *current) onSingleQuoteMonospaceTextElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement205()
}

func (c *current) onSingleQuoteMonospaceTextElement209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement209()
}

func (c *current) onSingleQuoteMonospaceTextElement200() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteMonospaceTextElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement200()
}

func (c *current) onSingleQuoteMonospaceTextElement219() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement219() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement219()
}

func (c *current) onSingleQuoteMonospaceTextElement223() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement223()
}

func (c *current) onSingleQuoteMonospaceTextElement216() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteMonospaceTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement216()
}

func (c *current) onSingleQuoteMonospaceTextElement230() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteMonospaceTextElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement230()
}

func (c *current) onSingleQuoteMonospaceTextElement232() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteMonospaceTextElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement232()
}

func (c *current) onSingleQuoteMonospaceTextElement234() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteMonospaceTextElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement234()
}

func (c *current) onSingleQuoteMonospaceTextElement236() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteMonospaceTextElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement236()
}

func (c *current) onSingleQuoteMonospaceTextElement238() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMonospaceTextElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement238()
}

func (c *current) onSingleQuoteMonospaceTextElement245() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement245() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement245()
}

func (c *current) onSingleQuoteMonospaceTextElement243() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement243()
}

func (c *current) onSingleQuoteMonospaceTextElement121(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement121(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement251() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement251() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement251()
}

func (c *current) onSingleQuoteMonospaceTextElement260() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement260()
}

func (c *current) onSingleQuoteMonospaceTextElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement264()
}

func (c *current) onSingleQuoteMonospaceTextElement270() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement270()
}

func (c *current) onSingleQuoteMonospaceTextElement279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement279()
}

func (c *current) onSingleQuoteMonospaceTextElement275(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement275(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement289() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement289()
}

func (c *current) onSingleQuoteMonospaceTextElement285(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement285(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement295() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement295()
}

func (c *current) onSingleQuoteMonospaceTextElement256(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement256(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement302() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement302()
}

func (c *current) onSingleQuoteMonospaceTextElement298(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement298(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement254() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement254()
}

func (c *current) onSingleQuoteMonospaceTextElement306() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement306()
}

func (c *current) onSingleQuoteMonospaceTextElement249(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement249(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement313() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement313()
}

func (c *current) onSingleQuoteMonospaceTextElement309(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement309(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement317() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement317()
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement17()
}

func (c *current) onDoubleQuoteMarkedTextElement10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement10()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement25()
}

func (c *current) onDoubleQuoteMarkedTextElement31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31()
}

func (c *current) onDoubleQuoteMarkedTextElement23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement23()
}

func (c *current) onDoubleQuoteMarkedTextElement38() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement38()
}

func (c *current) onDoubleQuoteMarkedTextElement45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement45()
}

func (c *current) onDoubleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement57()
}

func (c *current) onDoubleQuoteMarkedTextElement59() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement59()
}

func (c *current) onDoubleQuoteMarkedTextElement52(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement41(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement41(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement67()
}

func (c *current) onDoubleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement79()
}

func (c *current) onDoubleQuoteMarkedTextElement81() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement81()
}

func (c *current) onDoubleQuoteMarkedTextElement74(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement63(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement63(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement89()
}

func (c *current) onDoubleQuoteMarkedTextElement85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement85(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement99()
}

func (c *current) onDoubleQuoteMarkedTextElement95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement95(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement108() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement108()
}

func (c *current) onDoubleQuoteMarkedTextElement115() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement115()
}

func (c *current) onDoubleQuoteMarkedTextElement117() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMarkedTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement117()
}

func (c *current) onDoubleQuoteMarkedTextElement119() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement119()
}

func (c *current) onDoubleQuoteMarkedTextElement121() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121()
}

func (c *current) onDoubleQuoteMarkedTextElement123() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement123()
}

func (c *current) onDoubleQuoteMarkedTextElement125() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement125()
}

func (c *current) onDoubleQuoteMarkedTextElement127() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement127()
}

func (c *current) onDoubleQuoteMarkedTextElement129() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMarkedTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement129()
}

func (c *current) onDoubleQuoteMarkedTextElement131() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteMarkedTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement131()
}

func (c *current) onDoubleQuoteMarkedTextElement136() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement136()
}

func (c *current) onDoubleQuoteMarkedTextElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement138()
}

func (c *current) onDoubleQuoteMarkedTextElement142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement142()
}

func (c *current) onDoubleQuoteMarkedTextElement133() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteMarkedTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement133()
}

func (c *current) onDoubleQuoteMarkedTextElement152() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement152()
}

func (c *current) onDoubleQuoteMarkedTextElement156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement156()
}

func (c *current) onDoubleQuoteMarkedTextElement149() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement149()
}

func (c *current) onDoubleQuoteMarkedTextElement163() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteMarkedTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement163()
}

func (c *current) onDoubleQuoteMarkedTextElement165() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement165()
}

func (c *current) onDoubleQuoteMarkedTextElement167() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteMarkedTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement167()
}

func (c *current) onDoubleQuoteMarkedTextElement111() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement111()
}

func (c *current) onDoubleQuoteMarkedTextElement169() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement169()
}

func (c *current) onDoubleQuoteMarkedTextElement171() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMarkedTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement171()
}

func (c *current) onDoubleQuoteMarkedTextElement173() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement173()
}

func (c *current) onDoubleQuoteMarkedTextElement175() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMarkedTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement175()
}

func (c *current) onDoubleQuoteMarkedTextElement177() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement177()
}

func (c *current) onDoubleQuoteMarkedTextElement179() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement179()
}

func (c *current) onDoubleQuoteMarkedTextElement181() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement181()
}

func (c *current) onDoubleQuoteMarkedTextElement183() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMarkedTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement183()
}

func (c *current) onDoubleQuoteMarkedTextElement188() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement188()
}

func (c *current) onDoubleQuoteMarkedTextElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement190()
}

func (c *current) onDoubleQuoteMarkedTextElement194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement194()
}

func (c *current) onDoubleQuoteMarkedTextElement185() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonDoubleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement185()
}

func (c *current) onDoubleQuoteMarkedTextElement204() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement204() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement204()
}

func (c *current) onDoubleQuoteMarkedTextElement208() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement208()
}

func (c *current) onDoubleQuoteMarkedTextElement201() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonDoubleQuoteMarkedTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement201()
}

func (c *current) onDoubleQuoteMarkedTextElement215() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonDoubleQuoteMarkedTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement215()
}

func (c *current) onDoubleQuoteMarkedTextElement217() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonDoubleQuoteMarkedTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement217()
}

func (c *current) onDoubleQuoteMarkedTextElement219() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonDoubleQuoteMarkedTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement219()
}

func (c *current) onDoubleQuoteMarkedTextElement221() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonDoubleQuoteMarkedTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement221()
}

func (c *current) onDoubleQuoteMarkedTextElement223() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMarkedTextElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement223()
}

func (c *current) onDoubleQuoteMarkedTextElement230() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement230()
}

func (c *current) onDoubleQuoteMarkedTextElement228() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonDoubleQuoteMarkedTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement228()
}

func (c *current) onDoubleQuoteMarkedTextElement106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement106(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement236() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement236() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement236()
}

func (c *current) onDoubleQuoteMarkedTextElement245() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement245()
}

func (c *current) onDoubleQuoteMarkedTextElement249() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement249()
}

func (c *current) onDoubleQuoteMarkedTextElement255() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement255()
}

func (c *current) onDoubleQuoteMarkedTextElement264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement264()
}

func (c *current) onDoubleQuoteMarkedTextElement260(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement260(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement274()
}

func (c *current) onDoubleQuoteMarkedTextElement270(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement270(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement280() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement280()
}

func (c *current) onDoubleQuoteMarkedTextElement241(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement241(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement287() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement287()
}

func (c *current) onDoubleQuoteMarkedTextElement283(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement283(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement239() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement239()
}

func (c *current) onDoubleQuoteMarkedTextElement291() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement291()
}

func (c *current) onDoubleQuoteMarkedTextElement234(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement234(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement298()
}

func (c *current) onDoubleQuoteMarkedTextElement294(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement294(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement302()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMarkedText4() (bool, error) {
	log.Debug("SingleQuoteMarkedTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMarkedText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText4()
}

func (c *current) onSingleQuoteMarkedText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText13(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements4()
}

func (c *current) onSingleQuoteMarkedTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement11() (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement24()
}

func (c *current) onSingleQuoteMarkedTextElement17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement17()
}

func (c *current) onSingleQuoteMarkedTextElement27() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement27()
}

func (c *current) onSingleQuoteMarkedTextElement32() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement32()
}

func (c *current) onSingleQuoteMarkedTextElement38() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement38()
}

func (c *current) onSingleQuoteMarkedTextElement30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement30()
}

func (c *current) onSingleQuoteMarkedTextElement45() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement45()
}

func (c *current) onSingleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement52()
}

func (c *current) onSingleQuoteMarkedTextElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64()
}

func (c *current) onSingleQuoteMarkedTextElement66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement66()
}

func (c *current) onSingleQuoteMarkedTextElement59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement59(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement48(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement74()
}

func (c *current) onSingleQuoteMarkedTextElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement86()
}

func (c *current) onSingleQuoteMarkedTextElement88() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement88()
}

func (c *current) onSingleQuoteMarkedTextElement81(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement81(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement70(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement70(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement96() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96()
}

func (c *current) onSingleQuoteMarkedTextElement92(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement92(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement106()
}

func (c *current) onSingleQuoteMarkedTextElement102(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement102(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement43(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement43(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement115() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement115()
}

func (c *current) onSingleQuoteMarkedTextElement122() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement122()
}

func (c *current) onSingleQuoteMarkedTextElement124() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMarkedTextElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement124()
}

func (c *current) onSingleQuoteMarkedTextElement126() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMarkedTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement126()
}

func (c *current) onSingleQuoteMarkedTextElement128() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMarkedTextElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement128()
}

func (c *current) onSingleQuoteMarkedTextElement130() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMarkedTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement130()
}

func (c *current) onSingleQuoteMarkedTextElement132() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement132()
}

func (c *current) onSingleQuoteMarkedTextElement134() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMarkedTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement134()
}

func (c *current) onSingleQuoteMarkedTextElement136() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMarkedTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement136()
}

func (c *current) onSingleQuoteMarkedTextElement138() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteMarkedTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement138()
}

func (c *current) onSingleQuoteMarkedTextElement143() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement143() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement143()
}

func (c *current) onSingleQuoteMarkedTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement145()
}

func (c *current) onSingleQuoteMarkedTextElement149() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement149()
}

func (c *current) onSingleQuoteMarkedTextElement140() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteMarkedTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement140()
}

func (c *current) onSingleQuoteMarkedTextElement159() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement159() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement159()
}

func (c *current) onSingleQuoteMarkedTextElement163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement163()
}

func (c *current) onSingleQuoteMarkedTextElement156() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteMarkedTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement156()
}

func (c *current) onSingleQuoteMarkedTextElement170() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement170()
}

func (c *current) onSingleQuoteMarkedTextElement172() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement172()
}

func (c *current) onSingleQuoteMarkedTextElement174() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteMarkedTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement174()
}

func (c *current) onSingleQuoteMarkedTextElement118() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement118()
}

func (c *current) onSingleQuoteMarkedTextElement176() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMarkedTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement176()
}

func (c *current) onSingleQuoteMarkedTextElement178() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement178()
}

func (c *current) onSingleQuoteMarkedTextElement180() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMarkedTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement180()
}

func (c *current) onSingleQuoteMarkedTextElement182() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMarkedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement182()
}

func (c *current) onSingleQuoteMarkedTextElement184() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMarkedTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement184()
}

func (c *current) onSingleQuoteMarkedTextElement186() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMarkedTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement186()
}

func (c *current) onSingleQuoteMarkedTextElement188() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMarkedTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement188()
}

func (c *current) onSingleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement190()
}

func (c *current) onSingleQuoteMarkedTextElement195() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement195() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement195()
}

func (c *current) onSingleQuoteMarkedTextElement197() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement197()
}

func (c *current) onSingleQuoteMarkedTextElement201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement201()
}

func (c *current) onSingleQuoteMarkedTextElement192() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSingleQuoteMarkedTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement192()
}

func (c *current) onSingleQuoteMarkedTextElement211() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement211() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement211()
}

func (c *current) onSingleQuoteMarkedTextElement215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement215()
}

func (c *current) onSingleQuoteMarkedTextElement208() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSingleQuoteMarkedTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement208()
}

func (c *current) onSingleQuoteMarkedTextElement222() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSingleQuoteMarkedTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement222()
}

func (c *current) onSingleQuoteMarkedTextElement224() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSingleQuoteMarkedTextElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement224()
}

func (c *current) onSingleQuoteMarkedTextElement226() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSingleQuoteMarkedTextElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement226()
}

func (c *current) onSingleQuoteMarkedTextElement228() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSingleQuoteMarkedTextElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement228()
}

func (c *current) onSingleQuoteMarkedTextElement230() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMarkedTextElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement230()
}

func (c *current) onSingleQuoteMarkedTextElement237() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement237() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement237()
}

func (c *current) onSingleQuoteMarkedTextElement235() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSingleQuoteMarkedTextElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement235()
}

func (c *current) onSingleQuoteMarkedTextElement113(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement113(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement243() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement243() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement243()
}

func (c *current) onSingleQuoteMarkedTextElement252() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement252()
}

func (c *current) onSingleQuoteMarkedTextElement256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement256()
}

func (c *current) onSingleQuoteMarkedTextElement262() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement262()
}

func (c *current) onSingleQuoteMarkedTextElement271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement271()
}

func (c *current) onSingleQuoteMarkedTextElement267(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement267(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement281() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement281()
}

func (c *current) onSingleQuoteMarkedTextElement277(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement277(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement287() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement287()
}

func (c *current) onSingleQuoteMarkedTextElement248(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement248(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement294() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement294()
}

func (c *current) onSingleQuoteMarkedTextElement290(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement290(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement246() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement246()
}

func (c *current) onSingleQuoteMarkedTextElement298() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement298()
}

func (c *current) onSingleQuoteMarkedTextElement241(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement241(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement305() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement305()
}

func (c *current) onSingleQuoteMarkedTextElement301(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement301(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement309() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement309()
}

func (c *current) onSingleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSection3() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection9(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection9(stack["level"])
}

func (c *current) onSection15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSection15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection15()
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitle3() error {
	// enable substitutions
	c.withSubstitutions(headerSubstitutions())
	return nil

}

func (p *parser) callonSectionTitle3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle3()
}

func (c *current) onSectionTitle1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle1(stack["elements"])
}

func (c *current) onSectionTitleElement5() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement5()
}

func (c *current) onSectionTitleElement21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement21()
}

func (c *current) onSectionTitleElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement24()
}

func (c *current) onSectionTitleElement14() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement14()
}

func (c *current) onSectionTitleElement34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement34()
}

func (c *current) onSectionTitleElement45() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement45()
}

func (c *current) onSectionTitleElement52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement52()
}

func (c *current) onSectionTitleElement48(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement48(stack["ref"])
}

func (c *current) onSectionTitleElement58() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSectionTitleElement58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement58()
}

func (c *current) onSectionTitleElement65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement65()
}

func (c *current) onSectionTitleElement77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement77()
}

func (c *current) onSectionTitleElement79() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement79()
}

func (c *current) onSectionTitleElement72(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement72(stack["start"])
}

func (c *current) onSectionTitleElement61(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement61(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement87()
}

func (c *current) onSectionTitleElement99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement99()
}

func (c *current) onSectionTitleElement101() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement101()
}

func (c *current) onSectionTitleElement94(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement94(stack["start"])
}

func (c *current) onSectionTitleElement83(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement83(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement109()
}

func (c *current) onSectionTitleElement105(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement105(stack["name"])
}

func (c *current) onSectionTitleElement119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement119()
}

func (c *current) onSectionTitleElement115(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement115(stack["name"])
}

func (c *current) onSectionTitleElement56(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement56(stack["element"])
}

func (c *current) onSectionTitleElement125() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement125()
}

func (c *current) onSectionTitleElement41(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonSectionTitleElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement41(stack["elements"])
}

func (c *current) onSectionTitleElement37(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonSectionTitleElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement37(stack["id"])
}

func (c *current) onSectionTitleElement129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement129()
}

func (c *current) onSectionTitleElement133() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement133()
}

func (c *current) onSectionTitleElement31(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSectionTitleElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement31(stack["id"])
}

func (c *current) onSectionTitleElement140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement140()
}

func (c *current) onSectionTitleElement147() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSectionTitleElement147() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement147()
}

func (c *current) onSectionTitleElement154() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSectionTitleElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement154()
}

func (c *current) onSectionTitleElement156() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSectionTitleElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement156()
}

func (c *current) onSectionTitleElement158() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSectionTitleElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement158()
}

func (c *current) onSectionTitleElement160() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSectionTitleElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement160()
}

func (c *current) onSectionTitleElement162() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSectionTitleElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement162()
}

func (c *current) onSectionTitleElement164() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSectionTitleElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement164()
}

func (c *current) onSectionTitleElement166() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSectionTitleElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement166()
}

func (c *current) onSectionTitleElement168() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSectionTitleElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement168()
}

func (c *current) onSectionTitleElement170() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSectionTitleElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement170()
}

func (c *current) onSectionTitleElement175() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSectionTitleElement175() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement175()
}

func (c *current) onSectionTitleElement177() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement177()
}

func (c *current) onSectionTitleElement181() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement181()
}

func (c *current) onSectionTitleElement172() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSectionTitleElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement172()
}

func (c *current) onSectionTitleElement191() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSectionTitleElement191() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement191()
}

func (c *current) onSectionTitleElement195() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement195()
}

func (c *current) onSectionTitleElement188() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSectionTitleElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement188()
}

func (c *current) onSectionTitleElement202() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSectionTitleElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement202()
}

func (c *current) onSectionTitleElement204() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSectionTitleElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement204()
}

func (c *current) onSectionTitleElement206() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSectionTitleElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement206()
}

func (c *current) onSectionTitleElement150() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement150()
}

func (c *current) onSectionTitleElement208() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSectionTitleElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement208()
}

func (c *current) onSectionTitleElement210() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSectionTitleElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement210()
}

func (c *current) onSectionTitleElement212() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSectionTitleElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement212()
}

func (c *current) onSectionTitleElement214() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSectionTitleElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement214()
}

func (c *current) onSectionTitleElement216() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSectionTitleElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement216()
}

func (c *current) onSectionTitleElement218() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSectionTitleElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement218()
}

func (c *current) onSectionTitleElement220() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSectionTitleElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement220()
}

func (c *current) onSectionTitleElement222() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSectionTitleElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement222()
}

func (c *current) onSectionTitleElement227() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSectionTitleElement227() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement227()
}

func (c *current) onSectionTitleElement229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement229()
}

func (c *current) onSectionTitleElement233() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement233()
}

func (c *current) onSectionTitleElement224() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSectionTitleElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement224()
}

func (c *current) onSectionTitleElement243() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSectionTitleElement243() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement243()
}

func (c *current) onSectionTitleElement247() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement247()
}

func (c *current) onSectionTitleElement240() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSectionTitleElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement240()
}

func (c *current) onSectionTitleElement254() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSectionTitleElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement254()
}

func (c *current) onSectionTitleElement256() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSectionTitleElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement256()
}

func (c *current) onSectionTitleElement258() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSectionTitleElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement258()
}

func (c *current) onSectionTitleElement260() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSectionTitleElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement260()
}

func (c *current) onSectionTitleElement262() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSectionTitleElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement262()
}

func (c *current) onSectionTitleElement269() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSectionTitleElement269() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement269()
}

func (c *current) onSectionTitleElement267() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSectionTitleElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement267()
}

func (c *current) onSectionTitleElement145(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement145(stack["element"])
}

func (c *current) onSectionTitleElement275() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSectionTitleElement275() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement275()
}

func (c *current) onSectionTitleElement284() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement284()
}

func (c *current) onSectionTitleElement288() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement288()
}

func (c *current) onSectionTitleElement294() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement294()
}

func (c *current) onSectionTitleElement303() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement303()
}

func (c *current) onSectionTitleElement299(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement299(stack["name"])
}

func (c *current) onSectionTitleElement313() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement313()
}

func (c *current) onSectionTitleElement309(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement309(stack["name"])
}

func (c *current) onSectionTitleElement319() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement319()
}

func (c *current) onSectionTitleElement280(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSectionTitleElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement280(stack["id"], stack["label"])
}

func (c *current) onSectionTitleElement326() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement326()
}

func (c *current) onSectionTitleElement322(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSectionTitleElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement322(stack["id"])
}

func (c *current) onSectionTitleElement278() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement278()
}

func (c *current) onSectionTitleElement330() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSectionTitleElement330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement330()
}

func (c *current) onSectionTitleElement273(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement273(stack["element"])
}

func (c *current) onSectionTitleElement335() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSectionTitleElement335() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement335()
}

func (c *current) onSectionTitleElement342() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement342()
}

func (c *current) onSectionTitleElement354() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement354()
}

func (c *current) onSectionTitleElement356() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement356()
}

func (c *current) onSectionTitleElement349(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement349(stack["start"])
}

func (c *current) onSectionTitleElement338(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement338(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement364() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement364()
}

func (c *current) onSectionTitleElement376() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement376()
}

func (c *current) onSectionTitleElement378() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement378()
}

func (c *current) onSectionTitleElement371(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement371(stack["start"])
}

func (c *current) onSectionTitleElement360(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement360(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement386() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement386()
}

func (c *current) onSectionTitleElement382(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement382(stack["name"])
}

func (c *current) onSectionTitleElement396() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement396()
}

func (c *current) onSectionTitleElement392(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement392(stack["name"])
}

func (c *current) onSectionTitleElement333(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement333(stack["element"])
}

func (c *current) onSectionTitleElement406() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement406()
}

func (c *current) onSectionTitleElement402(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement402(stack["ref"])
}

func (c *current) onSectionTitleElement414() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement414()
}

func (c *current) onSectionTitleElement410(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement410(stack["id"])
}

func (c *current) onSectionTitleElement422() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement422()
}

func (c *current) onSectionTitleElement418(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonSectionTitleElement418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement418(stack["id"])
}

func (c *current) onSectionTitleElement427() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement427()
}

func (c *current) onSectionTitleElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSectionTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement1(stack["element"])
}

func (c *current) onNormalGroup19() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup19()
}

func (c *current) onNormalGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup22()
}

func (c *current) onNormalGroup12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup12()
}

func (c *current) onNormalGroup29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup29()
}

func (c *current) onNormalGroup31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup31()
}

func (c *current) onNormalGroup42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup42()
}

func (c *current) onNormalGroup38(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup38(stack["ref"])
}

func (c *current) onNormalGroup48() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonNormalGroup48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup48()
}

func (c *current) onNormalGroup55() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonNormalGroup55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup55()
}

func (c *current) onNormalGroup57() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonNormalGroup57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup57()
}

func (c *current) onNormalGroup59() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonNormalGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup59()
}

func (c *current) onNormalGroup61() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonNormalGroup61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup61()
}

func (c *current) onNormalGroup63() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonNormalGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup63()
}

func (c *current) onNormalGroup65() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonNormalGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup65()
}

func (c *current) onNormalGroup67() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonNormalGroup67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup67()
}

func (c *current) onNormalGroup69() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonNormalGroup69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup69()
}

func (c *current) onNormalGroup71() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonNormalGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup71()
}

func (c *current) onNormalGroup76() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonNormalGroup76() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup76()
}

func (c *current) onNormalGroup78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup78()
}

func (c *current) onNormalGroup82() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup82()
}

func (c *current) onNormalGroup73() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonNormalGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup73()
}

func (c *current) onNormalGroup92() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonNormalGroup92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup92()
}

func (c *current) onNormalGroup96() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup96()
}

func (c *current) onNormalGroup89() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonNormalGroup89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup89()
}

func (c *current) onNormalGroup103() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonNormalGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup103()
}

func (c *current) onNormalGroup105() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonNormalGroup105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup105()
}

func (c *current) onNormalGroup107() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonNormalGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup107()
}

func (c *current) onNormalGroup51() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonNormalGroup51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup51()
}

func (c *current) onNormalGroup109() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonNormalGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup109()
}

func (c *current) onNormalGroup111() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonNormalGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup111()
}

func (c *current) onNormalGroup113() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonNormalGroup113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup113()
}

func (c *current) onNormalGroup115() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonNormalGroup115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup115()
}

func (c *current) onNormalGroup117() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonNormalGroup117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup117()
}

func (c *current) onNormalGroup119() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonNormalGroup119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup119()
}

func (c *current) onNormalGroup121() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonNormalGroup121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup121()
}

func (c *current) onNormalGroup123() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonNormalGroup123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup123()
}

func (c *current) onNormalGroup128() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonNormalGroup128() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup128()
}

func (c *current) onNormalGroup130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup130()
}

func (c *current) onNormalGroup134() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup134()
}

func (c *current) onNormalGroup125() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonNormalGroup125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup125()
}

func (c *current) onNormalGroup144() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonNormalGroup144() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup144()
}

func (c *current) onNormalGroup148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup148()
}

func (c *current) onNormalGroup141() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonNormalGroup141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup141()
}

func (c *current) onNormalGroup155() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonNormalGroup155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup155()
}

func (c *current) onNormalGroup157() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonNormalGroup157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup157()
}

func (c *current) onNormalGroup159() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonNormalGroup159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup159()
}

func (c *current) onNormalGroup161() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonNormalGroup161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup161()
}

func (c *current) onNormalGroup163() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonNormalGroup163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup163()
}

func (c *current) onNormalGroup170() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonNormalGroup170() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup170()
}

func (c *current) onNormalGroup168() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonNormalGroup168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup168()
}

func (c *current) onNormalGroup46(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup46(stack["element"])
}

func (c *current) onNormalGroup176() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements), nil

}

func (p *parser) callonNormalGroup176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup176()
}

func (c *current) onNormalGroup178() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonNormalGroup178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup178()
}

func (c *current) onNormalGroup180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup180()
}

func (c *current) onNormalGroup184() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup184()
}

func (c *current) onNormalGroup174() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroup174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup174()
}

func (c *current) onNormalGroup195() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonNormalGroup195() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup195()
}

func (c *current) onNormalGroup204() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroup204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup204()
}

func (c *current) onNormalGroup208() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup208()
}

func (c *current) onNormalGroup214() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup214()
}

func (c *current) onNormalGroup223() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup223()
}

func (c *current) onNormalGroup219(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonNormalGroup219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup219(stack["name"])
}

func (c *current) onNormalGroup233() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup233()
}

func (c *current) onNormalGroup229(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonNormalGroup229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup229(stack["name"])
}

func (c *current) onNormalGroup239() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup239()
}

func (c *current) onNormalGroup200(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonNormalGroup200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup200(stack["id"], stack["label"])
}

func (c *current) onNormalGroup246() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroup246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup246()
}

func (c *current) onNormalGroup242(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonNormalGroup242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup242(stack["id"])
}

func (c *current) onNormalGroup198() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup198()
}

func (c *current) onNormalGroup250() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroup250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup250()
}

func (c *current) onNormalGroup193(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroup193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup193(stack["element"])
}

func (c *current) onNormalGroup254() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonNormalGroup254() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup254()
}

func (c *current) onNormalGroup261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup261()
}

func (c *current) onNormalGroup273() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup273()
}

func (c *current) onNormalGroup275() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup275()
}

func (c *current) onNormalGroup268(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroup268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup268(stack["start"])
}

func (c *current) onNormalGroup257(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonNormalGroup257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup257(stack["name"], stack["start"])
}

func (c *current) onNormalGroup283() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup283()
}

func (c *current) onNormalGroup295() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup295()
}

func (c *current) onNormalGroup297() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup297()
}

func (c *current) onNormalGroup290(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroup290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup290(stack["start"])
}

func (c *current) onNormalGroup279(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonNormalGroup279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup279(stack["name"], stack["start"])
}

func (c *current) onNormalGroup305() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup305()
}

func (c *current) onNormalGroup301(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonNormalGroup301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup301(stack["name"])
}

func (c *current) onNormalGroup315() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup315()
}

func (c *current) onNormalGroup311(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonNormalGroup311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup311(stack["name"])
}

func (c *current) onNormalGroup252(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroup252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup252(stack["element"])
}

func (c *current) onNormalGroup321() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup321()
}

func (c *current) onNormalGroup5(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonNormalGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup5(stack["element"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onAttributeStructuredValue1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonAttributeStructuredValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValue1(stack["elements"])
}

func (c *current) onAttributeStructuredValueElement15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement15()
}

func (c *current) onAttributeStructuredValueElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement18()
}

func (c *current) onAttributeStructuredValueElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement8()
}

func (c *current) onAttributeStructuredValueElement25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement25()
}

func (c *current) onAttributeStructuredValueElement31() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonAttributeStructuredValueElement31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement31()
}

func (c *current) onAttributeStructuredValueElement40() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement40()
}

func (c *current) onAttributeStructuredValueElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement44()
}

func (c *current) onAttributeStructuredValueElement50() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement50()
}

func (c *current) onAttributeStructuredValueElement59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement59()
}

func (c *current) onAttributeStructuredValueElement55(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeStructuredValueElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement55(stack["name"])
}

func (c *current) onAttributeStructuredValueElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement69()
}

func (c *current) onAttributeStructuredValueElement65(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement65(stack["name"])
}

func (c *current) onAttributeStructuredValueElement75() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement75()
}

func (c *current) onAttributeStructuredValueElement36(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonAttributeStructuredValueElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement36(stack["id"], stack["label"])
}

func (c *current) onAttributeStructuredValueElement82() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement82()
}

func (c *current) onAttributeStructuredValueElement78(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonAttributeStructuredValueElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement78(stack["id"])
}

func (c *current) onAttributeStructuredValueElement34() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement34()
}

func (c *current) onAttributeStructuredValueElement86() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement86()
}

func (c *current) onAttributeStructuredValueElement29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement29(stack["element"])
}

func (c *current) onAttributeStructuredValueElement92() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonAttributeStructuredValueElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement92()
}

func (c *current) onAttributeStructuredValueElement94() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonAttributeStructuredValueElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement94()
}

func (c *current) onAttributeStructuredValueElement96() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonAttributeStructuredValueElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement96()
}

func (c *current) onAttributeStructuredValueElement98() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonAttributeStructuredValueElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement98()
}

func (c *current) onAttributeStructuredValueElement100() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonAttributeStructuredValueElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement100()
}

func (c *current) onAttributeStructuredValueElement102() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonAttributeStructuredValueElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement102()
}

func (c *current) onAttributeStructuredValueElement104() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonAttributeStructuredValueElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement104()
}

func (c *current) onAttributeStructuredValueElement106() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonAttributeStructuredValueElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement106()
}

func (c *current) onAttributeStructuredValueElement108() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonAttributeStructuredValueElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement108()
}

func (c *current) onAttributeStructuredValueElement113() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonAttributeStructuredValueElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement113()
}

func (c *current) onAttributeStructuredValueElement115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement115()
}

func (c *current) onAttributeStructuredValueElement119() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement119()
}

func (c *current) onAttributeStructuredValueElement110() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonAttributeStructuredValueElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement110()
}

func (c *current) onAttributeStructuredValueElement129() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonAttributeStructuredValueElement129() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement129()
}

func (c *current) onAttributeStructuredValueElement133() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement133()
}

func (c *current) onAttributeStructuredValueElement126() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonAttributeStructuredValueElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement126()
}

func (c *current) onAttributeStructuredValueElement140() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonAttributeStructuredValueElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement140()
}

func (c *current) onAttributeStructuredValueElement142() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonAttributeStructuredValueElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement142()
}

func (c *current) onAttributeStructuredValueElement144() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonAttributeStructuredValueElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement144()
}

func (c *current) onAttributeStructuredValueElement88() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeStructuredValueElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement88()
}

func (c *current) onAttributeStructuredValueElement146() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonAttributeStructuredValueElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement146()
}

func (c *current) onAttributeStructuredValueElement148() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonAttributeStructuredValueElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement148()
}

func (c *current) onAttributeStructuredValueElement150() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonAttributeStructuredValueElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement150()
}

func (c *current) onAttributeStructuredValueElement152() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonAttributeStructuredValueElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement152()
}

func (c *current) onAttributeStructuredValueElement154() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonAttributeStructuredValueElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement154()
}

func (c *current) onAttributeStructuredValueElement156() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonAttributeStructuredValueElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement156()
}

func (c *current) onAttributeStructuredValueElement158() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonAttributeStructuredValueElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement158()
}

func (c *current) onAttributeStructuredValueElement160() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonAttributeStructuredValueElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement160()
}

func (c *current) onAttributeStructuredValueElement165() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonAttributeStructuredValueElement165() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement165()
}

func (c *current) onAttributeStructuredValueElement167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement167()
}

func (c *current) onAttributeStructuredValueElement171() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement171()
}

func (c *current) onAttributeStructuredValueElement162() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonAttributeStructuredValueElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement162()
}

func (c *current) onAttributeStructuredValueElement181() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonAttributeStructuredValueElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement181()
}

func (c *current) onAttributeStructuredValueElement185() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement185()
}

func (c *current) onAttributeStructuredValueElement178() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonAttributeStructuredValueElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement178()
}

func (c *current) onAttributeStructuredValueElement192() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonAttributeStructuredValueElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement192()
}

func (c *current) onAttributeStructuredValueElement194() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonAttributeStructuredValueElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement194()
}

func (c *current) onAttributeStructuredValueElement196() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonAttributeStructuredValueElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement196()
}

func (c *current) onAttributeStructuredValueElement198() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonAttributeStructuredValueElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement198()
}

func (c *current) onAttributeStructuredValueElement200() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonAttributeStructuredValueElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement200()
}

func (c *current) onAttributeStructuredValueElement207() (bool, error) {
	log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonAttributeStructuredValueElement207() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement207()
}

func (c *current) onAttributeStructuredValueElement205() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonAttributeStructuredValueElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement205()
}

func (c *current) onAttributeStructuredValueElement215() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement215()
}

func (c *current) onAttributeStructuredValueElement211(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributeStructuredValueElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement211(stack["ref"])
}

func (c *current) onAttributeStructuredValueElement219() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement219()
}

func (c *current) onAttributeStructuredValueElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros), nil

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro25() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro21(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonInlineMacro21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["id"])
}

func (c *current) onInlineMacro37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro37()
}

func (c *current) onInlineMacro33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33()
}

func (c *current) onInlineMacro44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro44()
}

func (c *current) onInlineMacro48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro48()
}

func (c *current) onInlineMacro55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro55()
}

func (c *current) onInlineMacro51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51()
}

func (c *current) onInlineMacro41(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro41(stack["content"])
}

func (c *current) onInlineMacro62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro62()
}

func (c *current) onInlineMacro66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro66()
}

func (c *current) onInlineMacro73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro73()
}

func (c *current) onInlineMacro69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro69()
}

func (c *current) onInlineMacro59(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro59(stack["content"])
}

func (c *current) onInlineMacro29(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs), nil

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote2() (bool, error) {
	return c.isSubstitutionEnabled(Quotes), nil

}

func (p *parser) callonQuote2() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote2()
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute25() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute25()
}

func (c *current) onTableColumnsAttribute27() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute27()
}

func (c *current) onTableColumnsAttribute29() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute29()
}

func (c *current) onTableColumnsAttribute34() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute34()
}

func (c *current) onTableColumnsAttribute36() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute36()
}

func (c *current) onTableColumnsAttribute38() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute38()
}

func (c *current) onTableColumnsAttribute43() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute43()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute53()
}

func (c *current) onTableColumnsAttribute58(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute58(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation12() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation16()
}

func (c *current) onFileLocation23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation23()
}

func (c *current) onFileLocation27() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonFileLocation27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation27()
}

func (c *current) onFileLocation34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation34()
}

func (c *current) onFileLocation46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation46()
}

func (c *current) onFileLocation48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation48()
}

func (c *current) onFileLocation41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation41(stack["start"])
}

func (c *current) onFileLocation30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation30(stack["name"], stack["start"])
}

func (c *current) onFileLocation56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation56()
}

func (c *current) onFileLocation68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation68()
}

func (c *current) onFileLocation70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70()
}

func (c *current) onFileLocation63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation63(stack["start"])
}

func (c *current) onFileLocation52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation52(stack["name"], stack["start"])
}

func (c *current) onFileLocation78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78()
}

func (c *current) onFileLocation74(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74(stack["name"])
}

func (c *current) onFileLocation88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation84(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileLocation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation84(stack["name"])
}

func (c *current) onFileLocation25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation25(stack["element"])
}

func (c *current) onFileLocation94() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation100() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation100()
}

func (c *current) onFileLocation96(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation96(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
