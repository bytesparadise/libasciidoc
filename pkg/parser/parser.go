// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 8315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 8315},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 249, col: 5, offset: 8315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 249, col: 5, offset: 8315},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 10, offset: 8320},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 249, col: 24, offset: 8334},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 249, col: 28, offset: 8338},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 249, col: 34, offset: 8344},
										expr: &ruleRefExpr{
											pos:  position{line: 249, col: 35, offset: 8345},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 249, col: 52, offset: 8362},
									expr: &litMatcher{
										pos:        position{line: 249, col: 52, offset: 8362},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 249, col: 57, offset: 8367},
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 57, offset: 8367},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 9, offset: 8472},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 251, col: 9, offset: 8472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 9, offset: 8472},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 14, offset: 8477},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 251, col: 28, offset: 8491},
									expr: &litMatcher{
										pos:        position{line: 251, col: 28, offset: 8491},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 251, col: 33, offset: 8496},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 33, offset: 8496},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 255, col: 1, offset: 8589},
			expr: &actionExpr{
				pos: position{line: 255, col: 17, offset: 8605},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 255, col: 17, offset: 8605},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 255, col: 17, offset: 8605},
							expr: &litMatcher{
								pos:        position{line: 255, col: 18, offset: 8606},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 26, offset: 8614},
							expr: &litMatcher{
								pos:        position{line: 255, col: 27, offset: 8615},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 35, offset: 8623},
							expr: &litMatcher{
								pos:        position{line: 255, col: 36, offset: 8624},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 46, offset: 8634},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 47, offset: 8635},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 54, offset: 8642},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 255, col: 58, offset: 8646},
								expr: &choiceExpr{
									pos: position{line: 255, col: 59, offset: 8647},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 255, col: 59, offset: 8647},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 71, offset: 8659},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 92, offset: 8680},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 92, offset: 8680},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 259, col: 1, offset: 8720},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8738},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 259, col: 19, offset: 8738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 259, col: 19, offset: 8738},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 259, col: 25, offset: 8744},
								expr: &choiceExpr{
									pos: position{line: 259, col: 26, offset: 8745},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 259, col: 26, offset: 8745},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 38, offset: 8757},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 47, offset: 8766},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 259, col: 68, offset: 8787},
							expr: &litMatcher{
								pos:        position{line: 259, col: 69, offset: 8788},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 263, col: 1, offset: 8943},
			expr: &seqExpr{
				pos: position{line: 263, col: 24, offset: 8966},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 263, col: 24, offset: 8966},
						expr: &litMatcher{
							pos:        position{line: 263, col: 25, offset: 8967},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 29, offset: 8971},
						expr: &litMatcher{
							pos:        position{line: 263, col: 30, offset: 8972},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 34, offset: 8976},
						expr: &litMatcher{
							pos:        position{line: 263, col: 35, offset: 8977},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 263, col: 39, offset: 8981,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 265, col: 1, offset: 8985},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 9005},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 9005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 9005},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 36, offset: 9020},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 269, col: 1, offset: 9094},
			expr: &actionExpr{
				pos: position{line: 269, col: 20, offset: 9113},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 269, col: 20, offset: 9113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 20, offset: 9113},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 29, offset: 9122},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 29, offset: 9122},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 33, offset: 9126},
							expr: &litMatcher{
								pos:        position{line: 269, col: 33, offset: 9126},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 38, offset: 9131},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 45, offset: 9138},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 46, offset: 9139},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 63, offset: 9156},
							expr: &litMatcher{
								pos:        position{line: 269, col: 63, offset: 9156},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 68, offset: 9161},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 9167},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 75, offset: 9168},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 92, offset: 9185},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 96, offset: 9189},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 273, col: 1, offset: 9259},
			expr: &actionExpr{
				pos: position{line: 273, col: 20, offset: 9278},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 20, offset: 9278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 20, offset: 9278},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 29, offset: 9287},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 29, offset: 9287},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 33, offset: 9291},
							expr: &litMatcher{
								pos:        position{line: 273, col: 33, offset: 9291},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 38, offset: 9296},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 45, offset: 9303},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 46, offset: 9304},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 63, offset: 9321},
							expr: &litMatcher{
								pos:        position{line: 273, col: 63, offset: 9321},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 68, offset: 9326},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 74, offset: 9332},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 75, offset: 9333},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 92, offset: 9350},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 96, offset: 9354},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 277, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 277, col: 19, offset: 9460},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 277, col: 19, offset: 9460},
					expr: &choiceExpr{
						pos: position{line: 277, col: 20, offset: 9461},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 277, col: 20, offset: 9461},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 277, col: 32, offset: 9473},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 277, col: 42, offset: 9483},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 277, col: 42, offset: 9483},
										expr: &litMatcher{
											pos:        position{line: 277, col: 43, offset: 9484},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 47, offset: 9488},
										expr: &litMatcher{
											pos:        position{line: 277, col: 48, offset: 9489},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 52, offset: 9493},
										expr: &ruleRefExpr{
											pos:  position{line: 277, col: 53, offset: 9494},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 277, col: 57, offset: 9498,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 281, col: 1, offset: 9539},
			expr: &actionExpr{
				pos: position{line: 281, col: 21, offset: 9559},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 21, offset: 9559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 21, offset: 9559},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 25, offset: 9563},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 31, offset: 9569},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 32, offset: 9570},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 51, offset: 9589},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 288, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 288, col: 12, offset: 9774},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 288, col: 12, offset: 9774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 12, offset: 9774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 23, offset: 9785},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 24, offset: 9786},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9810},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 289, col: 12, offset: 9817},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 289, col: 12, offset: 9817},
									expr: &litMatcher{
										pos:        position{line: 289, col: 13, offset: 9818},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 293, col: 5, offset: 9909},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 297, col: 5, offset: 10061},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 5, offset: 10061},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 9, offset: 10065},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 16, offset: 10072},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 31, offset: 10087},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 35, offset: 10091},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 35, offset: 10091},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 53, offset: 10109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 302, col: 1, offset: 10223},
			expr: &actionExpr{
				pos: position{line: 302, col: 18, offset: 10240},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 302, col: 18, offset: 10240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 302, col: 27, offset: 10249},
						expr: &seqExpr{
							pos: position{line: 302, col: 28, offset: 10250},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 302, col: 28, offset: 10250},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 29, offset: 10251},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 302, col: 37, offset: 10259},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 38, offset: 10260},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 54, offset: 10276},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 306, col: 1, offset: 10397},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10413},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 17, offset: 10413},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 306, col: 26, offset: 10422},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 306, col: 26, offset: 10422},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10443},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10461},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10486},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10508},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10531},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10546},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10571},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 314, col: 11, offset: 10592},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 315, col: 11, offset: 10632},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10652},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 323, col: 1, offset: 10805},
			expr: &seqExpr{
				pos: position{line: 323, col: 25, offset: 10829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 323, col: 25, offset: 10829},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 35, offset: 10839},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 328, col: 1, offset: 10950},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10968},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 10968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 25, offset: 10974},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 40, offset: 10989},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 45, offset: 10994},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 52, offset: 11001},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 68, offset: 11017},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 75, offset: 11024},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 332, col: 1, offset: 11165},
			expr: &actionExpr{
				pos: position{line: 332, col: 20, offset: 11184},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 332, col: 20, offset: 11184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 332, col: 20, offset: 11184},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 26, offset: 11190},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 41, offset: 11205},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 45, offset: 11209},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 52, offset: 11216},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 68, offset: 11232},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 75, offset: 11239},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 336, col: 1, offset: 11381},
			expr: &actionExpr{
				pos: position{line: 336, col: 18, offset: 11398},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 336, col: 18, offset: 11398},
					expr: &choiceExpr{
						pos: position{line: 336, col: 19, offset: 11399},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 336, col: 19, offset: 11399},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 33, offset: 11413},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 39, offset: 11419},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 340, col: 1, offset: 11461},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11479},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 340, col: 19, offset: 11479},
					expr: &choiceExpr{
						pos: position{line: 340, col: 20, offset: 11480},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 340, col: 20, offset: 11480},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 340, col: 33, offset: 11493},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 340, col: 33, offset: 11493},
										expr: &litMatcher{
											pos:        position{line: 340, col: 34, offset: 11494},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 38, offset: 11498},
										expr: &litMatcher{
											pos:        position{line: 340, col: 39, offset: 11499},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 43, offset: 11503},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 44, offset: 11504},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 340, col: 48, offset: 11508,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 344, col: 1, offset: 11549},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11572},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11572},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11576},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 344, col: 34, offset: 11582},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 35, offset: 11583},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 54, offset: 11602},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 351, col: 1, offset: 11782},
			expr: &actionExpr{
				pos: position{line: 351, col: 18, offset: 11799},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 351, col: 18, offset: 11799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 18, offset: 11799},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 351, col: 24, offset: 11805},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 351, col: 24, offset: 11805},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 351, col: 24, offset: 11805},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 351, col: 36, offset: 11817},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 42, offset: 11823},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 351, col: 56, offset: 11837},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 74, offset: 11855},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 8, offset: 12009},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 357, col: 1, offset: 12062},
			expr: &actionExpr{
				pos: position{line: 357, col: 26, offset: 12087},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 26, offset: 12087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 26, offset: 12087},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 30, offset: 12091},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 36, offset: 12097},
								expr: &choiceExpr{
									pos: position{line: 357, col: 37, offset: 12098},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 357, col: 37, offset: 12098},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 59, offset: 12120},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 78, offset: 12139},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 361, col: 1, offset: 12209},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12232},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12232},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12232},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 33, offset: 12241},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 40, offset: 12248},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 66, offset: 12274},
							expr: &litMatcher{
								pos:        position{line: 361, col: 66, offset: 12274},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 366, col: 1, offset: 12370},
			expr: &actionExpr{
				pos: position{line: 366, col: 29, offset: 12398},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 366, col: 29, offset: 12398},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 366, col: 29, offset: 12398},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 366, col: 36, offset: 12405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 366, col: 36, offset: 12405},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12510},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12542},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12568},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 11, offset: 12600},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 11, offset: 12632},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 372, col: 11, offset: 12659},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 31, offset: 12679},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 31, offset: 12679},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 372, col: 36, offset: 12684},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 372, col: 36, offset: 12684},
									expr: &litMatcher{
										pos:        position{line: 372, col: 37, offset: 12685},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 372, col: 43, offset: 12691},
									expr: &litMatcher{
										pos:        position{line: 372, col: 44, offset: 12692},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 376, col: 1, offset: 12724},
			expr: &actionExpr{
				pos: position{line: 376, col: 19, offset: 12742},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 376, col: 19, offset: 12742},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 376, col: 19, offset: 12742},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 376, col: 26, offset: 12749},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 376, col: 26, offset: 12749},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 43, offset: 12766},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 5, offset: 12788},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 377, col: 12, offset: 12795},
								expr: &actionExpr{
									pos: position{line: 377, col: 13, offset: 12796},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 377, col: 13, offset: 12796},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 377, col: 13, offset: 12796},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 377, col: 17, offset: 12800},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 377, col: 24, offset: 12807},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 377, col: 24, offset: 12807},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 377, col: 41, offset: 12824},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 383, col: 1, offset: 12962},
			expr: &actionExpr{
				pos: position{line: 383, col: 25, offset: 12986},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 383, col: 25, offset: 12986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 25, offset: 12986},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 383, col: 30, offset: 12991},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 383, col: 37, offset: 12998},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 383, col: 37, offset: 12998},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 54, offset: 13015},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 384, col: 5, offset: 13037},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 384, col: 12, offset: 13044},
								expr: &actionExpr{
									pos: position{line: 384, col: 13, offset: 13045},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 384, col: 13, offset: 13045},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 384, col: 13, offset: 13045},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 384, col: 17, offset: 13049},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 384, col: 24, offset: 13056},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 384, col: 24, offset: 13056},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 384, col: 41, offset: 13073},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 386, col: 9, offset: 13126},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 390, col: 1, offset: 13216},
			expr: &actionExpr{
				pos: position{line: 390, col: 19, offset: 13234},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 390, col: 19, offset: 13234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 390, col: 19, offset: 13234},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 26, offset: 13241},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 34, offset: 13249},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 390, col: 39, offset: 13254},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 44, offset: 13259},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 394, col: 1, offset: 13352},
			expr: &actionExpr{
				pos: position{line: 394, col: 25, offset: 13376},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 394, col: 25, offset: 13376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 25, offset: 13376},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 394, col: 30, offset: 13381},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 37, offset: 13388},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 45, offset: 13396},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 394, col: 50, offset: 13401},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 55, offset: 13406},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 63, offset: 13414},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 398, col: 1, offset: 13504},
			expr: &actionExpr{
				pos: position{line: 398, col: 20, offset: 13523},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 398, col: 20, offset: 13523},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 398, col: 32, offset: 13535},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 402, col: 1, offset: 13618},
			expr: &actionExpr{
				pos: position{line: 402, col: 26, offset: 13643},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 402, col: 26, offset: 13643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 402, col: 26, offset: 13643},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 402, col: 31, offset: 13648},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 43, offset: 13660},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 51, offset: 13668},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 406, col: 1, offset: 13748},
			expr: &actionExpr{
				pos: position{line: 406, col: 23, offset: 13770},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 406, col: 23, offset: 13770},
					expr: &seqExpr{
						pos: position{line: 406, col: 24, offset: 13771},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 406, col: 24, offset: 13771},
								expr: &litMatcher{
									pos:        position{line: 406, col: 25, offset: 13772},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 406, col: 29, offset: 13776},
								expr: &litMatcher{
									pos:        position{line: 406, col: 30, offset: 13777},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 406, col: 34, offset: 13781},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 35, offset: 13782},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 406, col: 38, offset: 13785,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 413, col: 1, offset: 13926},
			expr: &oneOrMoreExpr{
				pos: position{line: 413, col: 14, offset: 13939},
				expr: &ruleRefExpr{
					pos:  position{line: 413, col: 14, offset: 13939},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 415, col: 1, offset: 13950},
			expr: &choiceExpr{
				pos: position{line: 415, col: 13, offset: 13962},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 415, col: 13, offset: 13962},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 31, offset: 13980},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 51, offset: 14000},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 69, offset: 14018},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 417, col: 1, offset: 14044},
			expr: &choiceExpr{
				pos: position{line: 417, col: 18, offset: 14061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 18, offset: 14061},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 417, col: 18, offset: 14061},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 27, offset: 14070},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 9, offset: 14127},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 419, col: 9, offset: 14127},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 419, col: 15, offset: 14133},
								expr: &ruleRefExpr{
									pos:  position{line: 419, col: 16, offset: 14134},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 423, col: 1, offset: 14226},
			expr: &actionExpr{
				pos: position{line: 423, col: 22, offset: 14247},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 423, col: 22, offset: 14247},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 423, col: 22, offset: 14247},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 23, offset: 14248},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 424, col: 5, offset: 14256},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 6, offset: 14257},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 425, col: 5, offset: 14272},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 6, offset: 14273},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 426, col: 5, offset: 14295},
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 6, offset: 14296},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 427, col: 5, offset: 14322},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 6, offset: 14323},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 428, col: 5, offset: 14351},
							expr: &seqExpr{
								pos: position{line: 428, col: 7, offset: 14353},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 428, col: 7, offset: 14353},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 428, col: 27, offset: 14373},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 429, col: 5, offset: 14404},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 6, offset: 14405},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 430, col: 5, offset: 14430},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 6, offset: 14431},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 431, col: 5, offset: 14452},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 6, offset: 14453},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 5, offset: 14472},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 433, col: 9, offset: 14487},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 433, col: 9, offset: 14487},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 433, col: 9, offset: 14487},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 433, col: 18, offset: 14496},
												expr: &ruleRefExpr{
													pos:  position{line: 433, col: 19, offset: 14497},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 433, col: 35, offset: 14513},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 433, col: 45, offset: 14523},
												expr: &ruleRefExpr{
													pos:  position{line: 433, col: 46, offset: 14524},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 12, offset: 14676},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 439, col: 1, offset: 14723},
			expr: &seqExpr{
				pos: position{line: 439, col: 25, offset: 14747},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 439, col: 25, offset: 14747},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 29, offset: 14751},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 441, col: 1, offset: 14758},
			expr: &actionExpr{
				pos: position{line: 441, col: 29, offset: 14786},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 441, col: 29, offset: 14786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 29, offset: 14786},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 441, col: 41, offset: 14798},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 41, offset: 14798},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 53, offset: 14810},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 74, offset: 14831},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 82, offset: 14839},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 448, col: 1, offset: 15081},
			expr: &actionExpr{
				pos: position{line: 448, col: 20, offset: 15100},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 448, col: 20, offset: 15100},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 448, col: 20, offset: 15100},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 31, offset: 15111},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 32, offset: 15112},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 52, offset: 15132},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 60, offset: 15140},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 83, offset: 15163},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 92, offset: 15172},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 452, col: 1, offset: 15312},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 15342},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 15342},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 453, col: 5, offset: 15342},
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 5, offset: 15342},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 9, offset: 15346},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 455, col: 9, offset: 15409},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 455, col: 9, offset: 15409},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 455, col: 9, offset: 15409},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 455, col: 9, offset: 15409},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 455, col: 16, offset: 15416},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 455, col: 16, offset: 15416},
															expr: &litMatcher{
																pos:        position{line: 455, col: 17, offset: 15417},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 459, col: 9, offset: 15517},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 478, col: 11, offset: 16234},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 478, col: 11, offset: 16234},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 478, col: 11, offset: 16234},
													expr: &charClassMatcher{
														pos:        position{line: 478, col: 12, offset: 16235},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 478, col: 20, offset: 16243},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 480, col: 13, offset: 16354},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 480, col: 13, offset: 16354},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 480, col: 14, offset: 16355},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 480, col: 21, offset: 16362},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 482, col: 13, offset: 16476},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 482, col: 13, offset: 16476},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 482, col: 14, offset: 16477},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 482, col: 21, offset: 16484},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 484, col: 13, offset: 16598},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 484, col: 13, offset: 16598},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 484, col: 13, offset: 16598},
													expr: &charClassMatcher{
														pos:        position{line: 484, col: 14, offset: 16599},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 484, col: 22, offset: 16607},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 486, col: 13, offset: 16721},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 486, col: 13, offset: 16721},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 486, col: 13, offset: 16721},
													expr: &charClassMatcher{
														pos:        position{line: 486, col: 14, offset: 16722},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 486, col: 22, offset: 16730},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 488, col: 12, offset: 16843},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 12, offset: 16843},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 492, col: 1, offset: 16875},
			expr: &actionExpr{
				pos: position{line: 492, col: 27, offset: 16901},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 492, col: 27, offset: 16901},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 492, col: 37, offset: 16911},
						expr: &ruleRefExpr{
							pos:  position{line: 492, col: 37, offset: 16911},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 499, col: 1, offset: 17111},
			expr: &actionExpr{
				pos: position{line: 499, col: 22, offset: 17132},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 499, col: 22, offset: 17132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 499, col: 22, offset: 17132},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 499, col: 33, offset: 17143},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 34, offset: 17144},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 54, offset: 17164},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 62, offset: 17172},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 87, offset: 17197},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 499, col: 98, offset: 17208},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 99, offset: 17209},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 129, offset: 17239},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 138, offset: 17248},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 503, col: 1, offset: 17406},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 17438},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 17438},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 504, col: 5, offset: 17438},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 5, offset: 17438},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 9, offset: 17442},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 504, col: 17, offset: 17450},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 506, col: 9, offset: 17507},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 506, col: 9, offset: 17507},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 506, col: 9, offset: 17507},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 506, col: 16, offset: 17514},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 506, col: 16, offset: 17514},
															expr: &litMatcher{
																pos:        position{line: 506, col: 17, offset: 17515},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 510, col: 9, offset: 17615},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 527, col: 14, offset: 18322},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 527, col: 21, offset: 18329},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 527, col: 22, offset: 18330},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 529, col: 13, offset: 18416},
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 13, offset: 18416},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 533, col: 1, offset: 18449},
			expr: &actionExpr{
				pos: position{line: 533, col: 32, offset: 18480},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 533, col: 32, offset: 18480},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 533, col: 32, offset: 18480},
							expr: &litMatcher{
								pos:        position{line: 533, col: 33, offset: 18481},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 533, col: 37, offset: 18485},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 534, col: 7, offset: 18499},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 534, col: 7, offset: 18499},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 534, col: 7, offset: 18499},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 7, offset: 18544},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 535, col: 7, offset: 18544},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 536, col: 7, offset: 18587},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 536, col: 7, offset: 18587},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 537, col: 7, offset: 18629},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 7, offset: 18629},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 541, col: 1, offset: 18668},
			expr: &actionExpr{
				pos: position{line: 541, col: 29, offset: 18696},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 541, col: 29, offset: 18696},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 541, col: 39, offset: 18706},
						expr: &ruleRefExpr{
							pos:  position{line: 541, col: 39, offset: 18706},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 548, col: 1, offset: 19022},
			expr: &actionExpr{
				pos: position{line: 548, col: 20, offset: 19041},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 548, col: 20, offset: 19041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 20, offset: 19041},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 548, col: 31, offset: 19052},
								expr: &ruleRefExpr{
									pos:  position{line: 548, col: 32, offset: 19053},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 52, offset: 19073},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 58, offset: 19079},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 79, offset: 19100},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 90, offset: 19111},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 116, offset: 19137},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 548, col: 128, offset: 19149},
								expr: &ruleRefExpr{
									pos:  position{line: 548, col: 129, offset: 19150},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 552, col: 1, offset: 19289},
			expr: &actionExpr{
				pos: position{line: 552, col: 24, offset: 19312},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 552, col: 24, offset: 19312},
					expr: &choiceExpr{
						pos: position{line: 552, col: 25, offset: 19313},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 552, col: 25, offset: 19313},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 37, offset: 19325},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 552, col: 47, offset: 19335},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 552, col: 47, offset: 19335},
										expr: &ruleRefExpr{
											pos:  position{line: 552, col: 48, offset: 19336},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 552, col: 56, offset: 19344},
										expr: &litMatcher{
											pos:        position{line: 552, col: 57, offset: 19345},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 552, col: 62, offset: 19350,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 556, col: 1, offset: 19392},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 19425},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 19425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 19425},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 557, col: 16, offset: 19436},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 557, col: 16, offset: 19436},
									expr: &litMatcher{
										pos:        position{line: 557, col: 17, offset: 19437},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 560, col: 5, offset: 19495},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 564, col: 6, offset: 19671},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 564, col: 6, offset: 19671},
									expr: &choiceExpr{
										pos: position{line: 564, col: 7, offset: 19672},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 564, col: 7, offset: 19672},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 564, col: 12, offset: 19677},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 564, col: 24, offset: 19689},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 568, col: 1, offset: 19729},
			expr: &actionExpr{
				pos: position{line: 568, col: 31, offset: 19759},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 568, col: 31, offset: 19759},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 568, col: 40, offset: 19768},
						expr: &ruleRefExpr{
							pos:  position{line: 568, col: 41, offset: 19769},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 575, col: 1, offset: 19960},
			expr: &choiceExpr{
				pos: position{line: 575, col: 19, offset: 19978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 575, col: 19, offset: 19978},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 575, col: 19, offset: 19978},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 577, col: 9, offset: 20024},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 577, col: 9, offset: 20024},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 9, offset: 20072},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 579, col: 9, offset: 20072},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 581, col: 9, offset: 20130},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 581, col: 9, offset: 20130},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 9, offset: 20184},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 583, col: 9, offset: 20184},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 592, col: 1, offset: 20491},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 20538},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 20538},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 20538},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 594, col: 5, offset: 20538},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 594, col: 16, offset: 20549},
										expr: &ruleRefExpr{
											pos:  position{line: 594, col: 17, offset: 20550},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 594, col: 37, offset: 20570},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 40, offset: 20573},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 594, col: 56, offset: 20589},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 594, col: 61, offset: 20594},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 594, col: 67, offset: 20600},
										expr: &ruleRefExpr{
											pos:  position{line: 594, col: 68, offset: 20601},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 20793},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 20793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 598, col: 5, offset: 20793},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 598, col: 16, offset: 20804},
										expr: &ruleRefExpr{
											pos:  position{line: 598, col: 17, offset: 20805},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 598, col: 37, offset: 20825},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 598, col: 43, offset: 20831},
										expr: &ruleRefExpr{
											pos:  position{line: 598, col: 44, offset: 20832},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 603, col: 1, offset: 20997},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 21016},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 21016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 21016},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 21027},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 21028},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 604, col: 5, offset: 21053},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 21344},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 16, offset: 21355},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 5, offset: 21378},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 16, offset: 21389},
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 17, offset: 21390},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 617, col: 1, offset: 21524},
			expr: &actionExpr{
				pos: position{line: 617, col: 19, offset: 21542},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 617, col: 19, offset: 21542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 19, offset: 21542},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 30, offset: 21553},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 50, offset: 21573},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 617, col: 61, offset: 21584},
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 62, offset: 21585},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 621, col: 1, offset: 21691},
			expr: &actionExpr{
				pos: position{line: 621, col: 23, offset: 21713},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 621, col: 23, offset: 21713},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 621, col: 23, offset: 21713},
							expr: &seqExpr{
								pos: position{line: 621, col: 25, offset: 21715},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 621, col: 25, offset: 21715},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 621, col: 45, offset: 21735},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 5, offset: 21765},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 622, col: 15, offset: 21775},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 622, col: 15, offset: 21775},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 622, col: 26, offset: 21786},
										expr: &ruleRefExpr{
											pos:  position{line: 622, col: 26, offset: 21786},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 42, offset: 21802},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 622, col: 52, offset: 21812},
								expr: &ruleRefExpr{
									pos:  position{line: 622, col: 53, offset: 21813},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 65, offset: 21825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 626, col: 1, offset: 21915},
			expr: &actionExpr{
				pos: position{line: 626, col: 23, offset: 21937},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 626, col: 23, offset: 21937},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 626, col: 33, offset: 21947},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 630, col: 1, offset: 21993},
			expr: &choiceExpr{
				pos: position{line: 632, col: 5, offset: 22045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 22045},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 632, col: 5, offset: 22045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 632, col: 5, offset: 22045},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 632, col: 16, offset: 22056},
										expr: &ruleRefExpr{
											pos:  position{line: 632, col: 17, offset: 22057},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 633, col: 5, offset: 22081},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 640, col: 5, offset: 22293},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 8, offset: 22296},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 640, col: 24, offset: 22312},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 640, col: 29, offset: 22317},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 640, col: 35, offset: 22323},
										expr: &ruleRefExpr{
											pos:  position{line: 640, col: 36, offset: 22324},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 22516},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 22516},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 22516},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 644, col: 16, offset: 22527},
										expr: &ruleRefExpr{
											pos:  position{line: 644, col: 17, offset: 22528},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 645, col: 5, offset: 22552},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 652, col: 5, offset: 22764},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 652, col: 11, offset: 22770},
										expr: &ruleRefExpr{
											pos:  position{line: 652, col: 12, offset: 22771},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 656, col: 1, offset: 22872},
			expr: &actionExpr{
				pos: position{line: 656, col: 19, offset: 22890},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 656, col: 19, offset: 22890},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 656, col: 19, offset: 22890},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 20, offset: 22891},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 24, offset: 22895},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 25, offset: 22896},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 22910},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 657, col: 15, offset: 22920},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 657, col: 15, offset: 22920},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 657, col: 15, offset: 22920},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 657, col: 24, offset: 22929},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 659, col: 9, offset: 23021},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 659, col: 9, offset: 23021},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 659, col: 9, offset: 23021},
													expr: &ruleRefExpr{
														pos:  position{line: 659, col: 10, offset: 23022},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 659, col: 25, offset: 23037},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 659, col: 34, offset: 23046},
														expr: &ruleRefExpr{
															pos:  position{line: 659, col: 35, offset: 23047},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 659, col: 51, offset: 23063},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 659, col: 61, offset: 23073},
														expr: &ruleRefExpr{
															pos:  position{line: 659, col: 62, offset: 23074},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 659, col: 74, offset: 23086},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 665, col: 1, offset: 23222},
			expr: &actionExpr{
				pos: position{line: 665, col: 18, offset: 23239},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 665, col: 18, offset: 23239},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 665, col: 18, offset: 23239},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 19, offset: 23240},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 665, col: 23, offset: 23244},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 24, offset: 23245},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 23260},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 666, col: 14, offset: 23269},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 666, col: 14, offset: 23269},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 23290},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 23308},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 23331},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 23347},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 23370},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 23396},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 23423},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 23445},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 23471},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 23512},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 23539},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 684, col: 1, offset: 23799},
			expr: &actionExpr{
				pos: position{line: 684, col: 37, offset: 23835},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 684, col: 37, offset: 23835},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 684, col: 37, offset: 23835},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 38, offset: 23836},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 684, col: 48, offset: 23846},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 49, offset: 23847},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 64, offset: 23862},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 684, col: 73, offset: 23871},
								expr: &ruleRefExpr{
									pos:  position{line: 684, col: 74, offset: 23872},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 108, offset: 23906},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 684, col: 118, offset: 23916},
								expr: &ruleRefExpr{
									pos:  position{line: 684, col: 119, offset: 23917},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 131, offset: 23929},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 688, col: 1, offset: 24020},
			expr: &actionExpr{
				pos: position{line: 688, col: 36, offset: 24055},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 688, col: 36, offset: 24055},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 688, col: 36, offset: 24055},
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 37, offset: 24056},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 688, col: 41, offset: 24060},
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 42, offset: 24061},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 24076},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 689, col: 14, offset: 24085},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 689, col: 14, offset: 24085},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 24106},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 24124},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 24147},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 24163},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 24186},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 11, offset: 24208},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 11, offset: 24234},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 24260},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 702, col: 1, offset: 24394},
			expr: &actionExpr{
				pos: position{line: 702, col: 18, offset: 24411},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 702, col: 18, offset: 24411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 702, col: 18, offset: 24411},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 702, col: 27, offset: 24420},
								expr: &choiceExpr{
									pos: position{line: 702, col: 28, offset: 24421},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 702, col: 28, offset: 24421},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 702, col: 40, offset: 24433},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 702, col: 56, offset: 24449},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 702, col: 76, offset: 24469},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 706, col: 1, offset: 24503},
			expr: &actionExpr{
				pos: position{line: 706, col: 22, offset: 24524},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 706, col: 22, offset: 24524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 706, col: 22, offset: 24524},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 706, col: 33, offset: 24535},
								expr: &ruleRefExpr{
									pos:  position{line: 706, col: 34, offset: 24536},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 54, offset: 24556},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 706, col: 60, offset: 24562},
								expr: &actionExpr{
									pos: position{line: 706, col: 61, offset: 24563},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 706, col: 61, offset: 24563},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 706, col: 61, offset: 24563},
												expr: &ruleRefExpr{
													pos:  position{line: 706, col: 62, offset: 24564},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 706, col: 66, offset: 24568},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 706, col: 72, offset: 24574},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 712, col: 1, offset: 24694},
			expr: &actionExpr{
				pos: position{line: 712, col: 26, offset: 24719},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 712, col: 26, offset: 24719},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 712, col: 26, offset: 24719},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 27, offset: 24720},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 712, col: 42, offset: 24735},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 43, offset: 24736},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 53, offset: 24746},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 712, col: 62, offset: 24755},
								expr: &ruleRefExpr{
									pos:  position{line: 712, col: 63, offset: 24756},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 94, offset: 24787},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 712, col: 104, offset: 24797},
								expr: &ruleRefExpr{
									pos:  position{line: 712, col: 105, offset: 24798},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 712, col: 117, offset: 24810},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 716, col: 1, offset: 24901},
			expr: &actionExpr{
				pos: position{line: 716, col: 33, offset: 24933},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 716, col: 33, offset: 24933},
					expr: &seqExpr{
						pos: position{line: 716, col: 34, offset: 24934},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 716, col: 34, offset: 24934},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 35, offset: 24935},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 716, col: 39, offset: 24939},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 40, offset: 24940},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 716, col: 50, offset: 24950,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 723, col: 1, offset: 25174},
			expr: &actionExpr{
				pos: position{line: 723, col: 14, offset: 25187},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 723, col: 14, offset: 25187},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 723, col: 14, offset: 25187},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 723, col: 17, offset: 25190},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 723, col: 21, offset: 25194},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 21, offset: 25194},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 723, col: 25, offset: 25198},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 26, offset: 25199},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 730, col: 1, offset: 25483},
			expr: &actionExpr{
				pos: position{line: 730, col: 15, offset: 25497},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 730, col: 15, offset: 25497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 730, col: 15, offset: 25497},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 16, offset: 25498},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 19, offset: 25501},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 730, col: 25, offset: 25507},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 730, col: 25, offset: 25507},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 15, offset: 25531},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 25557},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 15, offset: 25586},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 15, offset: 25615},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 735, col: 15, offset: 25646},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 25677},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 737, col: 15, offset: 25710},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 738, col: 15, offset: 25746},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 739, col: 15, offset: 25782},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 740, col: 15, offset: 25819},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 744, col: 1, offset: 25973},
			expr: &choiceExpr{
				pos: position{line: 744, col: 21, offset: 25993},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 744, col: 21, offset: 25993},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 28, offset: 26000},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 34, offset: 26006},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 41, offset: 26013},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 47, offset: 26019},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 54, offset: 26026},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 60, offset: 26032},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 744, col: 66, offset: 26038},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 746, col: 1, offset: 26043},
			expr: &choiceExpr{
				pos: position{line: 746, col: 33, offset: 26075},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 746, col: 33, offset: 26075},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 746, col: 39, offset: 26081},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 746, col: 39, offset: 26081},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 750, col: 1, offset: 26214},
			expr: &actionExpr{
				pos: position{line: 750, col: 25, offset: 26238},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 750, col: 25, offset: 26238},
					expr: &litMatcher{
						pos:        position{line: 750, col: 25, offset: 26238},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 754, col: 1, offset: 26279},
			expr: &actionExpr{
				pos: position{line: 754, col: 25, offset: 26303},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 754, col: 25, offset: 26303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 754, col: 25, offset: 26303},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 754, col: 30, offset: 26308},
							expr: &litMatcher{
								pos:        position{line: 754, col: 30, offset: 26308},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 762, col: 1, offset: 26405},
			expr: &choiceExpr{
				pos: position{line: 762, col: 13, offset: 26417},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 762, col: 13, offset: 26417},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 35, offset: 26439},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 764, col: 1, offset: 26460},
			expr: &actionExpr{
				pos: position{line: 764, col: 24, offset: 26483},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 764, col: 24, offset: 26483},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 764, col: 24, offset: 26483},
							expr: &litMatcher{
								pos:        position{line: 764, col: 25, offset: 26484},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 764, col: 30, offset: 26489},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 764, col: 35, offset: 26494},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 44, offset: 26503},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 764, col: 72, offset: 26531},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 768, col: 1, offset: 26656},
			expr: &seqExpr{
				pos: position{line: 768, col: 31, offset: 26686},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 768, col: 31, offset: 26686},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 768, col: 58, offset: 26713},
						expr: &actionExpr{
							pos: position{line: 768, col: 59, offset: 26714},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 768, col: 59, offset: 26714},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 768, col: 59, offset: 26714},
										expr: &litMatcher{
											pos:        position{line: 768, col: 61, offset: 26716},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 768, col: 67, offset: 26722},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 768, col: 76, offset: 26731},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 768, col: 76, offset: 26731},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 768, col: 81, offset: 26736},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 772, col: 1, offset: 26828},
			expr: &actionExpr{
				pos: position{line: 772, col: 31, offset: 26858},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 772, col: 31, offset: 26858},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 772, col: 31, offset: 26858},
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 32, offset: 26859},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 40, offset: 26867},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 772, col: 49, offset: 26876},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 772, col: 49, offset: 26876},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26907},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26929},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26953},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26977},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 27003},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 27026},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 27042},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 27065},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 784, col: 1, offset: 27221},
			expr: &actionExpr{
				pos: position{line: 784, col: 27, offset: 27247},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 784, col: 27, offset: 27247},
					exprs: []interface{}{
						&anyMatcher{
							line: 784, col: 28, offset: 27248,
						},
						&zeroOrMoreExpr{
							pos: position{line: 784, col: 31, offset: 27251},
							expr: &seqExpr{
								pos: position{line: 784, col: 32, offset: 27252},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 784, col: 32, offset: 27252},
										expr: &litMatcher{
											pos:        position{line: 784, col: 33, offset: 27253},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 784, col: 38, offset: 27258},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 39, offset: 27259},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 784, col: 42, offset: 27262},
										expr: &litMatcher{
											pos:        position{line: 784, col: 43, offset: 27263},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 784, col: 47, offset: 27267},
										expr: &litMatcher{
											pos:        position{line: 784, col: 48, offset: 27268},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 784, col: 52, offset: 27272},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 53, offset: 27273},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 784, col: 61, offset: 27281,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 788, col: 1, offset: 27341},
			expr: &choiceExpr{
				pos: position{line: 788, col: 24, offset: 27364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 788, col: 24, offset: 27364},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 788, col: 24, offset: 27364},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 788, col: 24, offset: 27364},
									expr: &litMatcher{
										pos:        position{line: 788, col: 25, offset: 27365},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 788, col: 29, offset: 27369},
									expr: &litMatcher{
										pos:        position{line: 788, col: 30, offset: 27370},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 35, offset: 27375},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 788, col: 39, offset: 27379},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 48, offset: 27388},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 76, offset: 27416},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 27596},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 790, col: 5, offset: 27596},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 790, col: 5, offset: 27596},
									expr: &litMatcher{
										pos:        position{line: 790, col: 6, offset: 27597},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 790, col: 11, offset: 27602},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 790, col: 16, offset: 27607},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 790, col: 25, offset: 27616},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 790, col: 53, offset: 27644},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 794, col: 1, offset: 27902},
			expr: &seqExpr{
				pos: position{line: 794, col: 31, offset: 27932},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 794, col: 31, offset: 27932},
						expr: &ruleRefExpr{
							pos:  position{line: 794, col: 32, offset: 27933},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 794, col: 35, offset: 27936},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 794, col: 62, offset: 27963},
						expr: &actionExpr{
							pos: position{line: 794, col: 63, offset: 27964},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 794, col: 63, offset: 27964},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 794, col: 63, offset: 27964},
										expr: &seqExpr{
											pos: position{line: 794, col: 65, offset: 27966},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 794, col: 65, offset: 27966},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 794, col: 69, offset: 27970},
													expr: &ruleRefExpr{
														pos:  position{line: 794, col: 70, offset: 27971},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 794, col: 80, offset: 27981},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 794, col: 88, offset: 27989},
											expr: &ruleRefExpr{
												pos:  position{line: 794, col: 88, offset: 27989},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 794, col: 93, offset: 27994},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 794, col: 102, offset: 28003},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 798, col: 1, offset: 28094},
			expr: &actionExpr{
				pos: position{line: 798, col: 31, offset: 28124},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 798, col: 31, offset: 28124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 798, col: 31, offset: 28124},
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 32, offset: 28125},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 40, offset: 28133},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 798, col: 49, offset: 28142},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 798, col: 49, offset: 28142},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 28172},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 28194},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 801, col: 11, offset: 28218},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 802, col: 11, offset: 28242},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 803, col: 11, offset: 28268},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 804, col: 11, offset: 28291},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 805, col: 11, offset: 28307},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 11, offset: 28330},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 810, col: 1, offset: 28486},
			expr: &actionExpr{
				pos: position{line: 810, col: 27, offset: 28512},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 810, col: 27, offset: 28512},
					exprs: []interface{}{
						&anyMatcher{
							line: 810, col: 28, offset: 28513,
						},
						&zeroOrMoreExpr{
							pos: position{line: 810, col: 31, offset: 28516},
							expr: &seqExpr{
								pos: position{line: 810, col: 32, offset: 28517},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 810, col: 32, offset: 28517},
										expr: &litMatcher{
											pos:        position{line: 810, col: 33, offset: 28518},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 810, col: 37, offset: 28522},
										expr: &ruleRefExpr{
											pos:  position{line: 810, col: 38, offset: 28523},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 810, col: 41, offset: 28526},
										expr: &litMatcher{
											pos:        position{line: 810, col: 42, offset: 28527},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 810, col: 46, offset: 28531},
										expr: &litMatcher{
											pos:        position{line: 810, col: 47, offset: 28532},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 810, col: 51, offset: 28536},
										expr: &ruleRefExpr{
											pos:  position{line: 810, col: 52, offset: 28537},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 810, col: 60, offset: 28545,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 814, col: 1, offset: 28605},
			expr: &choiceExpr{
				pos: position{line: 815, col: 5, offset: 28629},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 28629},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 28629},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 815, col: 5, offset: 28629},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 18, offset: 28642},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 40, offset: 28664},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 815, col: 45, offset: 28669},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 54, offset: 28678},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 82, offset: 28706},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 9, offset: 28862},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 817, col: 9, offset: 28862},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 28862},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 22, offset: 28875},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 44, offset: 28897},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 49, offset: 28902},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 58, offset: 28911},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 86, offset: 28939},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 9, offset: 29138},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 820, col: 9, offset: 29138},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 820, col: 9, offset: 29138},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 22, offset: 29151},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 820, col: 44, offset: 29173},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 820, col: 48, offset: 29177},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 57, offset: 29186},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 820, col: 85, offset: 29214},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 828, col: 1, offset: 29421},
			expr: &choiceExpr{
				pos: position{line: 828, col: 15, offset: 29435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 828, col: 15, offset: 29435},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 39, offset: 29459},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 830, col: 1, offset: 29482},
			expr: &actionExpr{
				pos: position{line: 830, col: 26, offset: 29507},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 830, col: 26, offset: 29507},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 830, col: 26, offset: 29507},
							expr: &litMatcher{
								pos:        position{line: 830, col: 27, offset: 29508},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 830, col: 32, offset: 29513},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 830, col: 37, offset: 29518},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 46, offset: 29527},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 830, col: 76, offset: 29557},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 834, col: 1, offset: 29683},
			expr: &seqExpr{
				pos: position{line: 834, col: 33, offset: 29715},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 834, col: 33, offset: 29715},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 834, col: 62, offset: 29744},
						expr: &actionExpr{
							pos: position{line: 834, col: 63, offset: 29745},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 834, col: 63, offset: 29745},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 834, col: 63, offset: 29745},
										expr: &litMatcher{
											pos:        position{line: 834, col: 65, offset: 29747},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 834, col: 71, offset: 29753},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 834, col: 80, offset: 29762},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 834, col: 80, offset: 29762},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 834, col: 85, offset: 29767},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 838, col: 1, offset: 29861},
			expr: &actionExpr{
				pos: position{line: 838, col: 33, offset: 29893},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 838, col: 33, offset: 29893},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 838, col: 33, offset: 29893},
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 34, offset: 29894},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 42, offset: 29902},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 838, col: 51, offset: 29911},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 838, col: 51, offset: 29911},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29944},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 840, col: 11, offset: 29964},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 841, col: 11, offset: 29988},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 842, col: 11, offset: 30012},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 843, col: 11, offset: 30038},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 30061},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 845, col: 11, offset: 30077},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 846, col: 11, offset: 30100},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 850, col: 1, offset: 30258},
			expr: &actionExpr{
				pos: position{line: 850, col: 29, offset: 30286},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 850, col: 29, offset: 30286},
					exprs: []interface{}{
						&anyMatcher{
							line: 850, col: 30, offset: 30287,
						},
						&zeroOrMoreExpr{
							pos: position{line: 850, col: 33, offset: 30290},
							expr: &seqExpr{
								pos: position{line: 850, col: 34, offset: 30291},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 850, col: 34, offset: 30291},
										expr: &litMatcher{
											pos:        position{line: 850, col: 35, offset: 30292},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 850, col: 40, offset: 30297},
										expr: &litMatcher{
											pos:        position{line: 850, col: 41, offset: 30298},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 850, col: 45, offset: 30302},
										expr: &litMatcher{
											pos:        position{line: 850, col: 46, offset: 30303},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 850, col: 50, offset: 30307},
										expr: &ruleRefExpr{
											pos:  position{line: 850, col: 51, offset: 30308},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 850, col: 59, offset: 30316,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 854, col: 1, offset: 30376},
			expr: &choiceExpr{
				pos: position{line: 854, col: 26, offset: 30401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 854, col: 26, offset: 30401},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 854, col: 26, offset: 30401},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 854, col: 26, offset: 30401},
									expr: &litMatcher{
										pos:        position{line: 854, col: 27, offset: 30402},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 854, col: 31, offset: 30406},
									expr: &litMatcher{
										pos:        position{line: 854, col: 32, offset: 30407},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 854, col: 37, offset: 30412},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 854, col: 41, offset: 30416},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 854, col: 50, offset: 30425},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 854, col: 80, offset: 30455},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 30637},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 30637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 856, col: 5, offset: 30637},
									expr: &litMatcher{
										pos:        position{line: 856, col: 6, offset: 30638},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 856, col: 11, offset: 30643},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 856, col: 16, offset: 30648},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 25, offset: 30657},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 856, col: 55, offset: 30687},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 860, col: 1, offset: 30949},
			expr: &seqExpr{
				pos: position{line: 860, col: 33, offset: 30981},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 860, col: 33, offset: 30981},
						expr: &ruleRefExpr{
							pos:  position{line: 860, col: 34, offset: 30982},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 860, col: 37, offset: 30985},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 860, col: 66, offset: 31014},
						expr: &actionExpr{
							pos: position{line: 860, col: 67, offset: 31015},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 860, col: 67, offset: 31015},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 860, col: 67, offset: 31015},
										expr: &seqExpr{
											pos: position{line: 860, col: 69, offset: 31017},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 860, col: 69, offset: 31017},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 860, col: 73, offset: 31021},
													expr: &ruleRefExpr{
														pos:  position{line: 860, col: 74, offset: 31022},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 860, col: 84, offset: 31032},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 860, col: 92, offset: 31040},
											expr: &ruleRefExpr{
												pos:  position{line: 860, col: 92, offset: 31040},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 860, col: 97, offset: 31045},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 860, col: 106, offset: 31054},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 864, col: 1, offset: 31147},
			expr: &actionExpr{
				pos: position{line: 864, col: 33, offset: 31179},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 864, col: 33, offset: 31179},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 864, col: 33, offset: 31179},
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 34, offset: 31180},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 42, offset: 31188},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 864, col: 51, offset: 31197},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 864, col: 51, offset: 31197},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 865, col: 11, offset: 31229},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 31249},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 867, col: 11, offset: 31273},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 868, col: 11, offset: 31297},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 869, col: 11, offset: 31323},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 870, col: 11, offset: 31346},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 871, col: 11, offset: 31362},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 872, col: 11, offset: 31385},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 876, col: 1, offset: 31543},
			expr: &actionExpr{
				pos: position{line: 876, col: 29, offset: 31571},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 876, col: 29, offset: 31571},
					exprs: []interface{}{
						&anyMatcher{
							line: 876, col: 30, offset: 31572,
						},
						&zeroOrMoreExpr{
							pos: position{line: 876, col: 33, offset: 31575},
							expr: &seqExpr{
								pos: position{line: 876, col: 34, offset: 31576},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 876, col: 34, offset: 31576},
										expr: &litMatcher{
											pos:        position{line: 876, col: 35, offset: 31577},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 876, col: 39, offset: 31581},
										expr: &ruleRefExpr{
											pos:  position{line: 876, col: 40, offset: 31582},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 876, col: 43, offset: 31585},
										expr: &litMatcher{
											pos:        position{line: 876, col: 44, offset: 31586},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 876, col: 48, offset: 31590},
										expr: &litMatcher{
											pos:        position{line: 876, col: 49, offset: 31591},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 876, col: 53, offset: 31595},
										expr: &ruleRefExpr{
											pos:  position{line: 876, col: 54, offset: 31596},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 876, col: 62, offset: 31604,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 880, col: 1, offset: 31664},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 31690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 31690},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 31690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 31690},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 18, offset: 31703},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 881, col: 40, offset: 31725},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 881, col: 45, offset: 31730},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 54, offset: 31739},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 881, col: 84, offset: 31769},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 9, offset: 31925},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 883, col: 9, offset: 31925},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 883, col: 9, offset: 31925},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 22, offset: 31938},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 44, offset: 31960},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 883, col: 49, offset: 31965},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 58, offset: 31974},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 88, offset: 32004},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 9, offset: 32203},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 886, col: 9, offset: 32203},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 886, col: 9, offset: 32203},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 22, offset: 32216},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 886, col: 44, offset: 32238},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 886, col: 48, offset: 32242},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 57, offset: 32251},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 886, col: 87, offset: 32281},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 893, col: 1, offset: 32490},
			expr: &choiceExpr{
				pos: position{line: 893, col: 18, offset: 32507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 893, col: 18, offset: 32507},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 45, offset: 32534},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 895, col: 1, offset: 32560},
			expr: &actionExpr{
				pos: position{line: 895, col: 29, offset: 32588},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 895, col: 29, offset: 32588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 895, col: 29, offset: 32588},
							expr: &litMatcher{
								pos:        position{line: 895, col: 30, offset: 32589},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 895, col: 35, offset: 32594},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 895, col: 40, offset: 32599},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 49, offset: 32608},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 895, col: 82, offset: 32641},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 899, col: 1, offset: 32770},
			expr: &seqExpr{
				pos: position{line: 899, col: 36, offset: 32805},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 36, offset: 32805},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 899, col: 68, offset: 32837},
						expr: &actionExpr{
							pos: position{line: 899, col: 69, offset: 32838},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 899, col: 69, offset: 32838},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 899, col: 69, offset: 32838},
										expr: &litMatcher{
											pos:        position{line: 899, col: 71, offset: 32840},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 899, col: 77, offset: 32846},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 899, col: 86, offset: 32855},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 899, col: 86, offset: 32855},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 899, col: 91, offset: 32860},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 903, col: 1, offset: 32957},
			expr: &actionExpr{
				pos: position{line: 903, col: 36, offset: 32992},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 903, col: 36, offset: 32992},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 903, col: 36, offset: 32992},
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 37, offset: 32993},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 45, offset: 33001},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 903, col: 54, offset: 33010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 903, col: 54, offset: 33010},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 33046},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 33065},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 33087},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 907, col: 11, offset: 33111},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 908, col: 11, offset: 33137},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 11, offset: 33160},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 33176},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 11, offset: 33199},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 915, col: 1, offset: 33360},
			expr: &actionExpr{
				pos: position{line: 915, col: 32, offset: 33391},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 915, col: 32, offset: 33391},
					exprs: []interface{}{
						&anyMatcher{
							line: 915, col: 33, offset: 33392,
						},
						&zeroOrMoreExpr{
							pos: position{line: 915, col: 36, offset: 33395},
							expr: &seqExpr{
								pos: position{line: 915, col: 37, offset: 33396},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 915, col: 37, offset: 33396},
										expr: &litMatcher{
											pos:        position{line: 915, col: 38, offset: 33397},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 43, offset: 33402},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 44, offset: 33403},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 915, col: 47, offset: 33406},
										expr: &litMatcher{
											pos:        position{line: 915, col: 48, offset: 33407},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 52, offset: 33411},
										expr: &litMatcher{
											pos:        position{line: 915, col: 53, offset: 33412},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 915, col: 57, offset: 33416},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 58, offset: 33417},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 915, col: 66, offset: 33425,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 919, col: 1, offset: 33485},
			expr: &choiceExpr{
				pos: position{line: 919, col: 29, offset: 33513},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 29, offset: 33513},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 919, col: 29, offset: 33513},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 919, col: 29, offset: 33513},
									expr: &litMatcher{
										pos:        position{line: 919, col: 30, offset: 33514},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 919, col: 34, offset: 33518},
									expr: &litMatcher{
										pos:        position{line: 919, col: 35, offset: 33519},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 40, offset: 33524},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 919, col: 44, offset: 33528},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 53, offset: 33537},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 86, offset: 33570},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 921, col: 5, offset: 33755},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 921, col: 5, offset: 33755},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 921, col: 5, offset: 33755},
									expr: &litMatcher{
										pos:        position{line: 921, col: 6, offset: 33756},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 921, col: 11, offset: 33761},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 921, col: 16, offset: 33766},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 921, col: 25, offset: 33775},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 921, col: 58, offset: 33808},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 925, col: 1, offset: 34076},
			expr: &seqExpr{
				pos: position{line: 925, col: 36, offset: 34111},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 925, col: 36, offset: 34111},
						expr: &ruleRefExpr{
							pos:  position{line: 925, col: 37, offset: 34112},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 40, offset: 34115},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 925, col: 72, offset: 34147},
						expr: &actionExpr{
							pos: position{line: 925, col: 73, offset: 34148},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 925, col: 73, offset: 34148},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 925, col: 73, offset: 34148},
										expr: &seqExpr{
											pos: position{line: 925, col: 75, offset: 34150},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 925, col: 75, offset: 34150},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 925, col: 79, offset: 34154},
													expr: &ruleRefExpr{
														pos:  position{line: 925, col: 80, offset: 34155},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 925, col: 90, offset: 34165},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 925, col: 98, offset: 34173},
											expr: &ruleRefExpr{
												pos:  position{line: 925, col: 98, offset: 34173},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 925, col: 103, offset: 34178},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 112, offset: 34187},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 929, col: 1, offset: 34283},
			expr: &actionExpr{
				pos: position{line: 929, col: 37, offset: 34319},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 929, col: 37, offset: 34319},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 929, col: 46, offset: 34328},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 929, col: 46, offset: 34328},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 930, col: 11, offset: 34366},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 931, col: 11, offset: 34402},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 932, col: 11, offset: 34422},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 933, col: 11, offset: 34443},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 934, col: 11, offset: 34467},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 935, col: 11, offset: 34493},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 936, col: 11, offset: 34516},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 937, col: 11, offset: 34532},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 938, col: 11, offset: 34555},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 942, col: 1, offset: 34716},
			expr: &actionExpr{
				pos: position{line: 942, col: 32, offset: 34747},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 942, col: 32, offset: 34747},
					exprs: []interface{}{
						&anyMatcher{
							line: 942, col: 33, offset: 34748,
						},
						&zeroOrMoreExpr{
							pos: position{line: 942, col: 36, offset: 34751},
							expr: &seqExpr{
								pos: position{line: 942, col: 37, offset: 34752},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 942, col: 37, offset: 34752},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 38, offset: 34753},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 942, col: 41, offset: 34756},
										expr: &litMatcher{
											pos:        position{line: 942, col: 42, offset: 34757},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 942, col: 46, offset: 34761},
										expr: &litMatcher{
											pos:        position{line: 942, col: 47, offset: 34762},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 942, col: 51, offset: 34766},
										expr: &litMatcher{
											pos:        position{line: 942, col: 52, offset: 34767},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 942, col: 56, offset: 34771},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 57, offset: 34772},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 942, col: 65, offset: 34780,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 946, col: 1, offset: 34861},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 34890},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 34890},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 34890},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 5, offset: 34890},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 18, offset: 34903},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 947, col: 40, offset: 34925},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 947, col: 45, offset: 34930},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 54, offset: 34939},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 947, col: 87, offset: 34972},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 9, offset: 35128},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 949, col: 9, offset: 35128},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 9, offset: 35128},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 22, offset: 35141},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 44, offset: 35163},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 949, col: 49, offset: 35168},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 58, offset: 35177},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 91, offset: 35210},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 9, offset: 35409},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 952, col: 9, offset: 35409},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 952, col: 9, offset: 35409},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 22, offset: 35422},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 44, offset: 35444},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 952, col: 48, offset: 35448},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 57, offset: 35457},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 90, offset: 35490},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 956, col: 1, offset: 35639},
			expr: &actionExpr{
				pos: position{line: 956, col: 18, offset: 35656},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 956, col: 18, offset: 35656},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 956, col: 18, offset: 35656},
							expr: &litMatcher{
								pos:        position{line: 956, col: 19, offset: 35657},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 956, col: 23, offset: 35661},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 956, col: 27, offset: 35665},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 36, offset: 35674},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 956, col: 58, offset: 35696},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 960, col: 1, offset: 35785},
			expr: &choiceExpr{
				pos: position{line: 960, col: 25, offset: 35809},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 960, col: 25, offset: 35809},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 38, offset: 35822},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 962, col: 1, offset: 35841},
			expr: &actionExpr{
				pos: position{line: 962, col: 21, offset: 35861},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 962, col: 21, offset: 35861},
					expr: &seqExpr{
						pos: position{line: 962, col: 22, offset: 35862},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 962, col: 22, offset: 35862},
								expr: &ruleRefExpr{
									pos:  position{line: 962, col: 23, offset: 35863},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 962, col: 31, offset: 35871},
								expr: &ruleRefExpr{
									pos:  position{line: 962, col: 32, offset: 35872},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 962, col: 35, offset: 35875},
								expr: &litMatcher{
									pos:        position{line: 962, col: 36, offset: 35876},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 962, col: 40, offset: 35880,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 966, col: 1, offset: 35913},
			expr: &actionExpr{
				pos: position{line: 966, col: 25, offset: 35937},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 966, col: 25, offset: 35937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 966, col: 25, offset: 35937},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 38, offset: 35950},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 966, col: 60, offset: 35972},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 966, col: 64, offset: 35976},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 73, offset: 35985},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 966, col: 95, offset: 36007},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 970, col: 1, offset: 36136},
			expr: &actionExpr{
				pos: position{line: 970, col: 20, offset: 36155},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 970, col: 20, offset: 36155},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 970, col: 20, offset: 36155},
							expr: &litMatcher{
								pos:        position{line: 970, col: 21, offset: 36156},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 25, offset: 36160},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 970, col: 29, offset: 36164},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 38, offset: 36173},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 62, offset: 36197},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 974, col: 1, offset: 36288},
			expr: &choiceExpr{
				pos: position{line: 974, col: 27, offset: 36314},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 27, offset: 36314},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 40, offset: 36327},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 976, col: 1, offset: 36348},
			expr: &actionExpr{
				pos: position{line: 976, col: 23, offset: 36370},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 976, col: 23, offset: 36370},
					expr: &seqExpr{
						pos: position{line: 976, col: 24, offset: 36371},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 976, col: 24, offset: 36371},
								expr: &ruleRefExpr{
									pos:  position{line: 976, col: 25, offset: 36372},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 976, col: 33, offset: 36380},
								expr: &ruleRefExpr{
									pos:  position{line: 976, col: 34, offset: 36381},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 976, col: 37, offset: 36384},
								expr: &litMatcher{
									pos:        position{line: 976, col: 38, offset: 36385},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 976, col: 42, offset: 36389,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 980, col: 1, offset: 36422},
			expr: &actionExpr{
				pos: position{line: 980, col: 27, offset: 36448},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 980, col: 27, offset: 36448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 980, col: 27, offset: 36448},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 40, offset: 36461},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 980, col: 62, offset: 36483},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 980, col: 66, offset: 36487},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 75, offset: 36496},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 980, col: 99, offset: 36520},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 987, col: 1, offset: 36756},
			expr: &choiceExpr{
				pos: position{line: 987, col: 16, offset: 36771},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 987, col: 16, offset: 36771},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 40, offset: 36795},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 64, offset: 36819},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 989, col: 1, offset: 36837},
			expr: &litMatcher{
				pos:        position{line: 989, col: 32, offset: 36868},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 991, col: 1, offset: 36873},
			expr: &actionExpr{
				pos: position{line: 991, col: 26, offset: 36898},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 991, col: 26, offset: 36898},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 991, col: 26, offset: 36898},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 991, col: 54, offset: 36926},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 63, offset: 36935},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 991, col: 93, offset: 36965},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 991, col: 121, offset: 36993},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 122, offset: 36994},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 995, col: 1, offset: 37093},
			expr: &choiceExpr{
				pos: position{line: 995, col: 33, offset: 37125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 995, col: 34, offset: 37126},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 995, col: 34, offset: 37126},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 995, col: 35, offset: 37127},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 995, col: 35, offset: 37127},
											expr: &ruleRefExpr{
												pos:  position{line: 995, col: 36, offset: 37128},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 995, col: 64, offset: 37156},
											expr: &ruleRefExpr{
												pos:  position{line: 995, col: 65, offset: 37157},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 995, col: 68, offset: 37160},
											expr: &ruleRefExpr{
												pos:  position{line: 995, col: 69, offset: 37161},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 995, col: 77, offset: 37169,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 995, col: 80, offset: 37172},
									expr: &seqExpr{
										pos: position{line: 995, col: 81, offset: 37173},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 995, col: 81, offset: 37173},
												expr: &seqExpr{
													pos: position{line: 995, col: 83, offset: 37175},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 995, col: 83, offset: 37175},
															expr: &ruleRefExpr{
																pos:  position{line: 995, col: 83, offset: 37175},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 995, col: 87, offset: 37179},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 995, col: 116, offset: 37208},
												expr: &ruleRefExpr{
													pos:  position{line: 995, col: 117, offset: 37209},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 995, col: 145, offset: 37237},
												expr: &ruleRefExpr{
													pos:  position{line: 995, col: 146, offset: 37238},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 995, col: 154, offset: 37246,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 997, col: 7, offset: 37388},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 997, col: 8, offset: 37389},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 997, col: 8, offset: 37389},
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 9, offset: 37390},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 997, col: 12, offset: 37393},
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 13, offset: 37394},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 997, col: 21, offset: 37402},
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 22, offset: 37403},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 997, col: 50, offset: 37431,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1001, col: 1, offset: 37513},
			expr: &litMatcher{
				pos:        position{line: 1001, col: 32, offset: 37544},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1003, col: 1, offset: 37551},
			expr: &actionExpr{
				pos: position{line: 1003, col: 26, offset: 37576},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 26, offset: 37576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1003, col: 26, offset: 37576},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 54, offset: 37604},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1003, col: 63, offset: 37613},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1003, col: 93, offset: 37643},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1003, col: 121, offset: 37671},
							expr: &ruleRefExpr{
								pos:  position{line: 1003, col: 122, offset: 37672},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1007, col: 1, offset: 37771},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 33, offset: 37803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 34, offset: 37804},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1007, col: 34, offset: 37804},
							expr: &seqExpr{
								pos: position{line: 1007, col: 35, offset: 37805},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1007, col: 35, offset: 37805},
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 36, offset: 37806},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1007, col: 64, offset: 37834,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1009, col: 7, offset: 37999},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1009, col: 7, offset: 37999},
							expr: &seqExpr{
								pos: position{line: 1009, col: 8, offset: 38000},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1009, col: 8, offset: 38000},
										expr: &ruleRefExpr{
											pos:  position{line: 1009, col: 9, offset: 38001},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1009, col: 12, offset: 38004},
										expr: &ruleRefExpr{
											pos:  position{line: 1009, col: 13, offset: 38005},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1009, col: 21, offset: 38013},
										expr: &ruleRefExpr{
											pos:  position{line: 1009, col: 22, offset: 38014},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1009, col: 50, offset: 38042,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1013, col: 1, offset: 38125},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 21, offset: 38145},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1013, col: 21, offset: 38145},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1013, col: 21, offset: 38145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1013, col: 21, offset: 38145},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1013, col: 30, offset: 38154},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1013, col: 38, offset: 38162},
										expr: &ruleRefExpr{
											pos:  position{line: 1013, col: 39, offset: 38163},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1013, col: 67, offset: 38191},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 38281},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 38281},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1015, col: 5, offset: 38281},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 15, offset: 38291},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1015, col: 23, offset: 38299},
										expr: &choiceExpr{
											pos: position{line: 1015, col: 24, offset: 38300},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1015, col: 24, offset: 38300},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1015, col: 37, offset: 38313},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1015, col: 65, offset: 38341},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1019, col: 1, offset: 38431},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 31, offset: 38461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 31, offset: 38461},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 43, offset: 38473},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1019, col: 52, offset: 38482},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1019, col: 53, offset: 38483},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1019, col: 53, offset: 38483},
									expr: &litMatcher{
										pos:        position{line: 1019, col: 54, offset: 38484},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1019, col: 58, offset: 38488,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1026, col: 1, offset: 38658},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 19, offset: 38676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1026, col: 19, offset: 38676},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1026, col: 19, offset: 38676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1026, col: 19, offset: 38676},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 24, offset: 38681},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 28, offset: 38685},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1026, col: 32, offset: 38689},
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 32, offset: 38689},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1026, col: 36, offset: 38693},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 40, offset: 38697},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 47, offset: 38704},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1026, col: 68, offset: 38725},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 38800},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 38800},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 38800},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 10, offset: 38805},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 14, offset: 38809},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 18, offset: 38813},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1032, col: 1, offset: 38876},
			expr: &actionExpr{
				pos: position{line: 1032, col: 24, offset: 38899},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 24, offset: 38899},
					expr: &choiceExpr{
						pos: position{line: 1032, col: 25, offset: 38900},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1032, col: 25, offset: 38900},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1032, col: 37, offset: 38912},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1032, col: 47, offset: 38922},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1032, col: 47, offset: 38922},
										expr: &litMatcher{
											pos:        position{line: 1032, col: 48, offset: 38923},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1032, col: 54, offset: 38929,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1039, col: 1, offset: 39071},
			expr: &actionExpr{
				pos: position{line: 1039, col: 9, offset: 39079},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1039, col: 9, offset: 39079},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1039, col: 15, offset: 39085},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1039, col: 15, offset: 39085},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1039, col: 30, offset: 39100},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1044, col: 1, offset: 39207},
			expr: &actionExpr{
				pos: position{line: 1044, col: 17, offset: 39223},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 17, offset: 39223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1044, col: 17, offset: 39223},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 25, offset: 39231},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1044, col: 30, offset: 39236},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1044, col: 30, offset: 39236},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1044, col: 41, offset: 39247},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 55, offset: 39261},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 73, offset: 39279},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1048, col: 1, offset: 39397},
			expr: &actionExpr{
				pos: position{line: 1048, col: 17, offset: 39413},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 17, offset: 39413},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1048, col: 17, offset: 39413},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 22, offset: 39418},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 32, offset: 39428},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1048, col: 49, offset: 39445},
								expr: &ruleRefExpr{
									pos:  position{line: 1048, col: 50, offset: 39446},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1052, col: 1, offset: 39539},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 19, offset: 39557},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 19, offset: 39557},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 44, offset: 39582},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1054, col: 1, offset: 39609},
			expr: &actionExpr{
				pos: position{line: 1054, col: 27, offset: 39635},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 27, offset: 39635},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1054, col: 27, offset: 39635},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1054, col: 31, offset: 39639},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1054, col: 36, offset: 39644},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 37, offset: 39645},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1054, col: 66, offset: 39674},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1058, col: 1, offset: 39736},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 39808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 39808},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 39808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 39808},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 10, offset: 39813},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1060, col: 19, offset: 39822},
										expr: &seqExpr{
											pos: position{line: 1060, col: 20, offset: 39823},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1060, col: 20, offset: 39823},
													expr: &litMatcher{
														pos:        position{line: 1060, col: 21, offset: 39824},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1060, col: 25, offset: 39828},
													expr: &litMatcher{
														pos:        position{line: 1060, col: 26, offset: 39829},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1060, col: 30, offset: 39833},
													expr: &litMatcher{
														pos:        position{line: 1060, col: 31, offset: 39834},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1060, col: 37, offset: 39840},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1060, col: 37, offset: 39840},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1060, col: 50, offset: 39853},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1060, col: 63, offset: 39866},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1060, col: 73, offset: 39876},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1060, col: 74, offset: 39877},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1060, col: 74, offset: 39877},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1060, col: 75, offset: 39878},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1060, col: 92, offset: 39895,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 11, offset: 39964},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1062, col: 16, offset: 39969},
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 16, offset: 39969},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1062, col: 24, offset: 39977},
									expr: &notExpr{
										pos: position{line: 1062, col: 26, offset: 39979},
										expr: &litMatcher{
											pos:        position{line: 1062, col: 27, offset: 39980},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 40105},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 40105},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1066, col: 5, offset: 40105},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1066, col: 14, offset: 40114},
										expr: &seqExpr{
											pos: position{line: 1066, col: 15, offset: 40115},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1066, col: 15, offset: 40115},
													expr: &litMatcher{
														pos:        position{line: 1066, col: 16, offset: 40116},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1066, col: 20, offset: 40120},
													expr: &litMatcher{
														pos:        position{line: 1066, col: 21, offset: 40121},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1066, col: 26, offset: 40126},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1066, col: 26, offset: 40126},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1066, col: 39, offset: 40139},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1066, col: 52, offset: 40152},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1066, col: 62, offset: 40162},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1066, col: 63, offset: 40163},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1066, col: 63, offset: 40163},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1066, col: 64, offset: 40164},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1066, col: 81, offset: 40181,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1068, col: 11, offset: 40250},
									expr: &notExpr{
										pos: position{line: 1068, col: 13, offset: 40252},
										expr: &litMatcher{
											pos:        position{line: 1068, col: 14, offset: 40253},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1073, col: 1, offset: 40333},
			expr: &actionExpr{
				pos: position{line: 1073, col: 30, offset: 40362},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1073, col: 30, offset: 40362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1073, col: 30, offset: 40362},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 34, offset: 40366},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1073, col: 39, offset: 40371},
								expr: &ruleRefExpr{
									pos:  position{line: 1073, col: 40, offset: 40372},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1073, col: 60, offset: 40392},
							expr: &litMatcher{
								pos:        position{line: 1073, col: 60, offset: 40392},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1073, col: 65, offset: 40397},
							expr: &ruleRefExpr{
								pos:  position{line: 1073, col: 65, offset: 40397},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 69, offset: 40401},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1073, col: 80, offset: 40412},
								expr: &ruleRefExpr{
									pos:  position{line: 1073, col: 81, offset: 40413},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1073, col: 100, offset: 40432},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1077, col: 1, offset: 40517},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 5, offset: 40580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 40580},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 40580},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 40580},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 10, offset: 40585},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1079, col: 19, offset: 40594},
										expr: &seqExpr{
											pos: position{line: 1079, col: 20, offset: 40595},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1079, col: 20, offset: 40595},
													expr: &litMatcher{
														pos:        position{line: 1079, col: 21, offset: 40596},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1079, col: 25, offset: 40600},
													expr: &litMatcher{
														pos:        position{line: 1079, col: 26, offset: 40601},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1079, col: 30, offset: 40605},
													expr: &litMatcher{
														pos:        position{line: 1079, col: 31, offset: 40606},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1079, col: 37, offset: 40612},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1079, col: 37, offset: 40612},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1079, col: 50, offset: 40625},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1079, col: 63, offset: 40638},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1079, col: 73, offset: 40648},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1079, col: 74, offset: 40649},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1079, col: 74, offset: 40649},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1079, col: 75, offset: 40650},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1079, col: 92, offset: 40667,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 11, offset: 40736},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1081, col: 16, offset: 40741},
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 16, offset: 40741},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1081, col: 24, offset: 40749},
									expr: &notExpr{
										pos: position{line: 1081, col: 26, offset: 40751},
										expr: &litMatcher{
											pos:        position{line: 1081, col: 27, offset: 40752},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 40877},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 40877},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1085, col: 5, offset: 40877},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1085, col: 14, offset: 40886},
										expr: &seqExpr{
											pos: position{line: 1085, col: 15, offset: 40887},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1085, col: 15, offset: 40887},
													expr: &litMatcher{
														pos:        position{line: 1085, col: 16, offset: 40888},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1085, col: 20, offset: 40892},
													expr: &litMatcher{
														pos:        position{line: 1085, col: 21, offset: 40893},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1085, col: 25, offset: 40897},
													expr: &litMatcher{
														pos:        position{line: 1085, col: 26, offset: 40898},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1085, col: 31, offset: 40903},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1085, col: 31, offset: 40903},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1085, col: 44, offset: 40916},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1085, col: 57, offset: 40929},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1085, col: 67, offset: 40939},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1085, col: 68, offset: 40940},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1085, col: 68, offset: 40940},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1085, col: 69, offset: 40941},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1085, col: 86, offset: 40958,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1087, col: 11, offset: 41027},
									expr: &notExpr{
										pos: position{line: 1087, col: 13, offset: 41029},
										expr: &litMatcher{
											pos:        position{line: 1087, col: 14, offset: 41030},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1094, col: 1, offset: 41211},
			expr: &actionExpr{
				pos: position{line: 1094, col: 15, offset: 41225},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1094, col: 15, offset: 41225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1094, col: 15, offset: 41225},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1094, col: 26, offset: 41236},
								expr: &ruleRefExpr{
									pos:  position{line: 1094, col: 27, offset: 41237},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1094, col: 47, offset: 41257},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1094, col: 57, offset: 41267},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1094, col: 63, offset: 41273},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1094, col: 68, offset: 41278},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1094, col: 86, offset: 41296},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1094, col: 103, offset: 41313},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1098, col: 1, offset: 41425},
			expr: &actionExpr{
				pos: position{line: 1098, col: 16, offset: 41440},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 16, offset: 41440},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 16, offset: 41440},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1098, col: 25, offset: 41449},
							expr: &litMatcher{
								pos:        position{line: 1098, col: 26, offset: 41450},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 30, offset: 41454},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 36, offset: 41460},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 41, offset: 41465},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 59, offset: 41483},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1102, col: 1, offset: 41596},
			expr: &actionExpr{
				pos: position{line: 1102, col: 20, offset: 41615},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 20, offset: 41615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1102, col: 20, offset: 41615},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 24, offset: 41619},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1102, col: 28, offset: 41623},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 29, offset: 41624},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1102, col: 46, offset: 41641},
							expr: &litMatcher{
								pos:        position{line: 1102, col: 46, offset: 41641},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 51, offset: 41646},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1102, col: 57, offset: 41652},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 58, offset: 41653},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1102, col: 75, offset: 41670},
							expr: &litMatcher{
								pos:        position{line: 1102, col: 75, offset: 41670},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 80, offset: 41675},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1102, col: 87, offset: 41682},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 88, offset: 41683},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1102, col: 105, offset: 41700},
							expr: &litMatcher{
								pos:        position{line: 1102, col: 105, offset: 41700},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1102, col: 110, offset: 41705},
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 110, offset: 41705},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 114, offset: 41709},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1102, col: 125, offset: 41720},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 126, offset: 41721},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1102, col: 145, offset: 41740},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1109, col: 1, offset: 42030},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 19, offset: 42048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1109, col: 19, offset: 42048},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1109, col: 19, offset: 42048},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 19, offset: 42048},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 32, offset: 42061},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 41, offset: 42070},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 58, offset: 42087},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 42162},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 42162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 42162},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 21, offset: 42178},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 26, offset: 42183},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 39, offset: 42196},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 43, offset: 42200},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 52, offset: 42209},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 69, offset: 42226},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 42311},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 42311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 42311},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 21, offset: 42327},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 26, offset: 42332},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 39, offset: 42345},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1117, col: 1, offset: 42460},
			expr: &actionExpr{
				pos: position{line: 1117, col: 16, offset: 42475},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1117, col: 16, offset: 42475},
					expr: &choiceExpr{
						pos: position{line: 1117, col: 17, offset: 42476},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1117, col: 17, offset: 42476},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1117, col: 29, offset: 42488},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1117, col: 39, offset: 42498},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1117, col: 39, offset: 42498},
										expr: &litMatcher{
											pos:        position{line: 1117, col: 40, offset: 42499},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1117, col: 44, offset: 42503},
										expr: &litMatcher{
											pos:        position{line: 1117, col: 45, offset: 42504},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1117, col: 49, offset: 42508},
										expr: &ruleRefExpr{
											pos:  position{line: 1117, col: 50, offset: 42509},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1117, col: 55, offset: 42514,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1121, col: 1, offset: 42599},
			expr: &actionExpr{
				pos: position{line: 1121, col: 20, offset: 42618},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 20, offset: 42618},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1121, col: 29, offset: 42627},
						expr: &seqExpr{
							pos: position{line: 1121, col: 30, offset: 42628},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1121, col: 30, offset: 42628},
									expr: &litMatcher{
										pos:        position{line: 1121, col: 31, offset: 42629},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1121, col: 35, offset: 42633},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 36, offset: 42634},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1121, col: 40, offset: 42638},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 40, offset: 42638},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1121, col: 44, offset: 42642},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 45, offset: 42643},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 61, offset: 42659},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1121, col: 75, offset: 42673},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 75, offset: 42673},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1128, col: 1, offset: 42987},
			expr: &actionExpr{
				pos: position{line: 1128, col: 19, offset: 43005},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 19, offset: 43005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1128, col: 19, offset: 43005},
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 20, offset: 43006},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 5, offset: 43035},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1129, col: 12, offset: 43042},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1129, col: 12, offset: 43042},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 43065},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 43089},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 43113},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 43135},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 43157},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 43180},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 43208},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1137, col: 11, offset: 43224},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1141, col: 1, offset: 43265},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 19, offset: 43283},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 19, offset: 43283},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 19, offset: 43324},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 19, offset: 43364},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 19, offset: 43405},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 19, offset: 43446},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 19, offset: 43487},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 19, offset: 43525},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1153, col: 1, offset: 43744},
			expr: &seqExpr{
				pos: position{line: 1153, col: 25, offset: 43768},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1153, col: 25, offset: 43768},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 31, offset: 43774},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1155, col: 1, offset: 43780},
			expr: &actionExpr{
				pos: position{line: 1155, col: 16, offset: 43795},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 16, offset: 43795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1155, col: 16, offset: 43795},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1155, col: 27, offset: 43806},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 28, offset: 43807},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1155, col: 48, offset: 43827},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 69, offset: 43848},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1155, col: 77, offset: 43856},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 78, offset: 43857},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1155, col: 100, offset: 43879},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1155, col: 100, offset: 43879},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1155, col: 123, offset: 43902},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1159, col: 1, offset: 44010},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 23, offset: 44032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 23, offset: 44032},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 35, offset: 44044},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 51, offset: 44060},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 62, offset: 44071},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1162, col: 1, offset: 44111},
			expr: &actionExpr{
				pos: position{line: 1162, col: 25, offset: 44135},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1162, col: 25, offset: 44135},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1162, col: 31, offset: 44141},
						expr: &ruleRefExpr{
							pos:  position{line: 1162, col: 32, offset: 44142},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1166, col: 1, offset: 44255},
			expr: &actionExpr{
				pos: position{line: 1166, col: 29, offset: 44283},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 29, offset: 44283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1166, col: 29, offset: 44283},
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 30, offset: 44284},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1166, col: 51, offset: 44305},
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 52, offset: 44306},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 62, offset: 44316},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 68, offset: 44322},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1173, col: 1, offset: 44560},
			expr: &seqExpr{
				pos: position{line: 1173, col: 26, offset: 44585},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1173, col: 26, offset: 44585},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 33, offset: 44592},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1176, col: 1, offset: 44633},
			expr: &actionExpr{
				pos: position{line: 1176, col: 17, offset: 44649},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 17, offset: 44649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1176, col: 17, offset: 44649},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1176, col: 28, offset: 44660},
								expr: &ruleRefExpr{
									pos:  position{line: 1176, col: 29, offset: 44661},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1176, col: 49, offset: 44681},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 71, offset: 44703},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1176, col: 79, offset: 44711},
								expr: &ruleRefExpr{
									pos:  position{line: 1176, col: 80, offset: 44712},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1176, col: 103, offset: 44735},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1176, col: 103, offset: 44735},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1176, col: 127, offset: 44759},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1180, col: 1, offset: 44868},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 24, offset: 44891},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1180, col: 24, offset: 44891},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 40, offset: 44907},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1182, col: 1, offset: 44930},
			expr: &actionExpr{
				pos: position{line: 1182, col: 26, offset: 44955},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1182, col: 26, offset: 44955},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1182, col: 32, offset: 44961},
						expr: &ruleRefExpr{
							pos:  position{line: 1182, col: 33, offset: 44962},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1186, col: 1, offset: 45081},
			expr: &actionExpr{
				pos: position{line: 1186, col: 30, offset: 45110},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 30, offset: 45110},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 30, offset: 45110},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 31, offset: 45111},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 53, offset: 45133},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1186, col: 59, offset: 45139},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1186, col: 59, offset: 45139},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1186, col: 59, offset: 45139},
											expr: &ruleRefExpr{
												pos:  position{line: 1186, col: 60, offset: 45140},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1186, col: 64, offset: 45144},
											expr: &choiceExpr{
												pos: position{line: 1186, col: 65, offset: 45145},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1186, col: 65, offset: 45145},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1186, col: 77, offset: 45157},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1186, col: 87, offset: 45167},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1186, col: 87, offset: 45167},
																expr: &ruleRefExpr{
																	pos:  position{line: 1186, col: 88, offset: 45168},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1186, col: 92, offset: 45172,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1186, col: 128, offset: 45208},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1193, col: 1, offset: 45534},
			expr: &seqExpr{
				pos: position{line: 1193, col: 26, offset: 45559},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1193, col: 26, offset: 45559},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 33, offset: 45566},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1195, col: 1, offset: 45572},
			expr: &actionExpr{
				pos: position{line: 1195, col: 17, offset: 45588},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 17, offset: 45588},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1195, col: 17, offset: 45588},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1195, col: 28, offset: 45599},
								expr: &ruleRefExpr{
									pos:  position{line: 1195, col: 29, offset: 45600},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 49, offset: 45620},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 71, offset: 45642},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1195, col: 79, offset: 45650},
								expr: &choiceExpr{
									pos: position{line: 1195, col: 80, offset: 45651},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1195, col: 80, offset: 45651},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1195, col: 92, offset: 45663},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1195, col: 108, offset: 45679},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1195, col: 119, offset: 45690},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1195, col: 145, offset: 45716},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1195, col: 145, offset: 45716},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1195, col: 169, offset: 45740},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1200, col: 1, offset: 45867},
			expr: &actionExpr{
				pos: position{line: 1200, col: 26, offset: 45892},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1200, col: 26, offset: 45892},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1200, col: 32, offset: 45898},
						expr: &ruleRefExpr{
							pos:  position{line: 1200, col: 33, offset: 45899},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1204, col: 1, offset: 46013},
			expr: &actionExpr{
				pos: position{line: 1204, col: 30, offset: 46042},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 30, offset: 46042},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1204, col: 30, offset: 46042},
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 31, offset: 46043},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1204, col: 53, offset: 46065},
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 54, offset: 46066},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 64, offset: 46076},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 70, offset: 46082},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1211, col: 1, offset: 46318},
			expr: &seqExpr{
				pos: position{line: 1211, col: 24, offset: 46341},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1211, col: 24, offset: 46341},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 31, offset: 46348},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1213, col: 1, offset: 46379},
			expr: &actionExpr{
				pos: position{line: 1213, col: 15, offset: 46393},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 15, offset: 46393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 15, offset: 46393},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1213, col: 26, offset: 46404},
								expr: &ruleRefExpr{
									pos:  position{line: 1213, col: 27, offset: 46405},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1213, col: 47, offset: 46425},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 67, offset: 46445},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1213, col: 75, offset: 46453},
								expr: &ruleRefExpr{
									pos:  position{line: 1213, col: 76, offset: 46454},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1213, col: 97, offset: 46475},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1213, col: 97, offset: 46475},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1213, col: 119, offset: 46497},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1217, col: 1, offset: 46604},
			expr: &actionExpr{
				pos: position{line: 1218, col: 5, offset: 46630},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 5, offset: 46630},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1218, col: 5, offset: 46630},
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 6, offset: 46631},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1218, col: 26, offset: 46651},
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 27, offset: 46652},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 31, offset: 46656},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1218, col: 40, offset: 46665},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1218, col: 40, offset: 46665},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 15, offset: 46690},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1220, col: 15, offset: 46718},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1221, col: 15, offset: 46744},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 15, offset: 46767},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 15, offset: 46793},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1224, col: 15, offset: 46820},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1225, col: 15, offset: 46847},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1226, col: 15, offset: 46874},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 15, offset: 46906},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 15, offset: 46932},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 15, offset: 46959},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 15, offset: 46980},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1231, col: 15, offset: 47008},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 15, offset: 47052},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 15, offset: 47090},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 15, offset: 47125},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1238, col: 1, offset: 47184},
			expr: &actionExpr{
				pos: position{line: 1238, col: 24, offset: 47207},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1238, col: 24, offset: 47207},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1238, col: 30, offset: 47213},
						expr: &ruleRefExpr{
							pos:  position{line: 1238, col: 31, offset: 47214},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1247, col: 1, offset: 47560},
			expr: &actionExpr{
				pos: position{line: 1247, col: 15, offset: 47574},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 15, offset: 47574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1247, col: 15, offset: 47574},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1247, col: 27, offset: 47586},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1248, col: 5, offset: 47610},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1252, col: 5, offset: 47796},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 25, offset: 47816},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1252, col: 33, offset: 47824},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 34, offset: 47825},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1252, col: 55, offset: 47846},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1252, col: 55, offset: 47846},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1252, col: 77, offset: 47868},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1256, col: 1, offset: 47983},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 22, offset: 48004},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 22, offset: 48004},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 41, offset: 48023},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 53, offset: 48035},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1258, col: 1, offset: 48056},
			expr: &actionExpr{
				pos: position{line: 1258, col: 21, offset: 48076},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 21, offset: 48076},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1258, col: 21, offset: 48076},
							expr: &ruleRefExpr{
								pos:  position{line: 1258, col: 22, offset: 48077},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 42, offset: 48097},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1258, col: 51, offset: 48106},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1263, col: 1, offset: 48168},
			expr: &actionExpr{
				pos: position{line: 1263, col: 24, offset: 48191},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1263, col: 24, offset: 48191},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1263, col: 30, offset: 48197},
						expr: &ruleRefExpr{
							pos:  position{line: 1263, col: 31, offset: 48198},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1267, col: 1, offset: 48288},
			expr: &actionExpr{
				pos: position{line: 1267, col: 28, offset: 48315},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 28, offset: 48315},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1267, col: 28, offset: 48315},
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 29, offset: 48316},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1267, col: 49, offset: 48336},
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 50, offset: 48337},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 60, offset: 48347},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1267, col: 66, offset: 48353},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1267, col: 66, offset: 48353},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1267, col: 66, offset: 48353},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1267, col: 75, offset: 48362},
												expr: &ruleRefExpr{
													pos:  position{line: 1267, col: 76, offset: 48363},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1267, col: 109, offset: 48396},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1273, col: 1, offset: 48492},
			expr: &actionExpr{
				pos: position{line: 1273, col: 35, offset: 48526},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 35, offset: 48526},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1273, col: 35, offset: 48526},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 36, offset: 48527},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1273, col: 40, offset: 48531},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 41, offset: 48532},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 5, offset: 48547},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1274, col: 14, offset: 48556},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1274, col: 14, offset: 48556},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 11, offset: 48574},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 11, offset: 48597},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 11, offset: 48613},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 11, offset: 48636},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 11, offset: 48662},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 11, offset: 48689},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 11, offset: 48711},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 11, offset: 48737},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 11, offset: 48778},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 11, offset: 48805},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1291, col: 1, offset: 49035},
			expr: &seqExpr{
				pos: position{line: 1291, col: 26, offset: 49060},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1291, col: 26, offset: 49060},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 33, offset: 49067},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1293, col: 1, offset: 49073},
			expr: &actionExpr{
				pos: position{line: 1293, col: 17, offset: 49089},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1293, col: 17, offset: 49089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1293, col: 17, offset: 49089},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1293, col: 28, offset: 49100},
								expr: &ruleRefExpr{
									pos:  position{line: 1293, col: 29, offset: 49101},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1293, col: 49, offset: 49121},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1293, col: 71, offset: 49143},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1293, col: 79, offset: 49151},
								expr: &ruleRefExpr{
									pos:  position{line: 1293, col: 80, offset: 49152},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1293, col: 104, offset: 49176},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1293, col: 104, offset: 49176},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1293, col: 128, offset: 49200},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1297, col: 1, offset: 49309},
			expr: &choiceExpr{
				pos: position{line: 1297, col: 24, offset: 49332},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1297, col: 24, offset: 49332},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 36, offset: 49344},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 52, offset: 49360},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 63, offset: 49371},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 81, offset: 49389},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1299, col: 1, offset: 49412},
			expr: &actionExpr{
				pos: position{line: 1299, col: 20, offset: 49431},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 20, offset: 49431},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1299, col: 20, offset: 49431},
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 21, offset: 49432},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 34, offset: 49445},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 43, offset: 49454},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1304, col: 1, offset: 49517},
			expr: &actionExpr{
				pos: position{line: 1304, col: 26, offset: 49542},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 26, offset: 49542},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1304, col: 32, offset: 49548},
						expr: &ruleRefExpr{
							pos:  position{line: 1304, col: 33, offset: 49549},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1308, col: 1, offset: 49663},
			expr: &actionExpr{
				pos: position{line: 1308, col: 30, offset: 49692},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 30, offset: 49692},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1308, col: 30, offset: 49692},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 31, offset: 49693},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1308, col: 53, offset: 49715},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 54, offset: 49716},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 64, offset: 49726},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 70, offset: 49732},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1316, col: 1, offset: 49963},
			expr: &actionExpr{
				pos: position{line: 1316, col: 10, offset: 49972},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 10, offset: 49972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1316, col: 10, offset: 49972},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1316, col: 21, offset: 49983},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 22, offset: 49984},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1316, col: 42, offset: 50004},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 5, offset: 50023},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1317, col: 12, offset: 50030},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 13, offset: 50031},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 5, offset: 50053},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1318, col: 11, offset: 50059},
								expr: &ruleRefExpr{
									pos:  position{line: 1318, col: 12, offset: 50060},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1319, col: 6, offset: 50077},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1319, col: 6, offset: 50077},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1319, col: 23, offset: 50094},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1323, col: 1, offset: 50209},
			expr: &seqExpr{
				pos: position{line: 1323, col: 23, offset: 50231},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1323, col: 23, offset: 50231},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1323, col: 27, offset: 50235},
						expr: &ruleRefExpr{
							pos:  position{line: 1323, col: 27, offset: 50235},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1325, col: 1, offset: 50240},
			expr: &seqExpr{
				pos: position{line: 1325, col: 19, offset: 50258},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1325, col: 19, offset: 50258},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 26, offset: 50265},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1328, col: 1, offset: 50334},
			expr: &actionExpr{
				pos: position{line: 1328, col: 20, offset: 50353},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1328, col: 20, offset: 50353},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1328, col: 20, offset: 50353},
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 21, offset: 50354},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1328, col: 36, offset: 50369},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1328, col: 42, offset: 50375},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 43, offset: 50376},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1328, col: 55, offset: 50388},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1328, col: 59, offset: 50392},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1332, col: 1, offset: 50460},
			expr: &actionExpr{
				pos: position{line: 1332, col: 14, offset: 50473},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 14, offset: 50473},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1332, col: 14, offset: 50473},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 15, offset: 50474},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 30, offset: 50489},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1332, col: 36, offset: 50495},
								expr: &ruleRefExpr{
									pos:  position{line: 1332, col: 37, offset: 50496},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1332, col: 49, offset: 50508},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1332, col: 53, offset: 50512},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 53, offset: 50512},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1336, col: 1, offset: 50581},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 50594},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 14, offset: 50594},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1336, col: 14, offset: 50594},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 33, offset: 50613},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1336, col: 42, offset: 50622},
								expr: &seqExpr{
									pos: position{line: 1336, col: 43, offset: 50623},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1336, col: 43, offset: 50623},
											expr: &ruleRefExpr{
												pos:  position{line: 1336, col: 44, offset: 50624},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1336, col: 63, offset: 50643},
											expr: &ruleRefExpr{
												pos:  position{line: 1336, col: 64, offset: 50644},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1336, col: 68, offset: 50648},
											expr: &ruleRefExpr{
												pos:  position{line: 1336, col: 68, offset: 50648},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1336, col: 72, offset: 50652},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1336, col: 86, offset: 50666},
											expr: &ruleRefExpr{
												pos:  position{line: 1336, col: 86, offset: 50666},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1343, col: 1, offset: 50912},
			expr: &litMatcher{
				pos:        position{line: 1343, col: 26, offset: 50937},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1345, col: 1, offset: 50945},
			expr: &actionExpr{
				pos: position{line: 1345, col: 17, offset: 50961},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 17, offset: 50961},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1345, col: 17, offset: 50961},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1345, col: 39, offset: 50983},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 39, offset: 50983},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1345, col: 43, offset: 50987},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 51, offset: 50995},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1345, col: 59, offset: 51003},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 60, offset: 51004},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1345, col: 81, offset: 51025},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1345, col: 82, offset: 51026},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1345, col: 82, offset: 51026},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1345, col: 104, offset: 51048},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1345, col: 112, offset: 51056},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1349, col: 1, offset: 51162},
			expr: &actionExpr{
				pos: position{line: 1349, col: 21, offset: 51182},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 21, offset: 51182},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1349, col: 21, offset: 51182},
							expr: &choiceExpr{
								pos: position{line: 1349, col: 22, offset: 51183},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1349, col: 22, offset: 51183},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 34, offset: 51195},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1349, col: 44, offset: 51205},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1349, col: 44, offset: 51205},
												expr: &ruleRefExpr{
													pos:  position{line: 1349, col: 45, offset: 51206},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1349, col: 67, offset: 51228},
												expr: &ruleRefExpr{
													pos:  position{line: 1349, col: 68, offset: 51229},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1349, col: 73, offset: 51234,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 78, offset: 51239},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1353, col: 1, offset: 51279},
			expr: &actionExpr{
				pos: position{line: 1353, col: 22, offset: 51300},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 22, offset: 51300},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1353, col: 22, offset: 51300},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 23, offset: 51301},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1353, col: 45, offset: 51323},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 45, offset: 51323},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1353, col: 49, offset: 51327},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 54, offset: 51332},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 63, offset: 51341},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1353, col: 89, offset: 51367},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1357, col: 1, offset: 51432},
			expr: &actionExpr{
				pos: position{line: 1357, col: 29, offset: 51460},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1357, col: 29, offset: 51460},
					expr: &choiceExpr{
						pos: position{line: 1357, col: 30, offset: 51461},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1357, col: 30, offset: 51461},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1357, col: 42, offset: 51473},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1357, col: 52, offset: 51483},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1357, col: 52, offset: 51483},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 53, offset: 51484},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1357, col: 58, offset: 51489,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1365, col: 1, offset: 51798},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 17, offset: 51814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 17, offset: 51814},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 49, offset: 51846},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 78, offset: 51875},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1367, col: 1, offset: 51911},
			expr: &litMatcher{
				pos:        position{line: 1367, col: 26, offset: 51936},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1370, col: 1, offset: 52008},
			expr: &actionExpr{
				pos: position{line: 1370, col: 31, offset: 52038},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1370, col: 31, offset: 52038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1370, col: 31, offset: 52038},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1370, col: 42, offset: 52049},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 43, offset: 52050},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 63, offset: 52070},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 70, offset: 52077},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1375, col: 1, offset: 52307},
			expr: &actionExpr{
				pos: position{line: 1376, col: 5, offset: 52347},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 5, offset: 52347},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 5, offset: 52347},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1376, col: 16, offset: 52358},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1376, col: 16, offset: 52358},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1376, col: 16, offset: 52358},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1376, col: 19, offset: 52361},
											expr: &choiceExpr{
												pos: position{line: 1376, col: 20, offset: 52362},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1376, col: 20, offset: 52362},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1376, col: 32, offset: 52374},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1376, col: 41, offset: 52383},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1376, col: 42, offset: 52384},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1376, col: 42, offset: 52384},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1376, col: 43, offset: 52385},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1376, col: 48, offset: 52390,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1380, col: 8, offset: 52481},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 5, offset: 52544},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1381, col: 16, offset: 52555},
								expr: &actionExpr{
									pos: position{line: 1382, col: 9, offset: 52565},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1382, col: 9, offset: 52565},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1382, col: 9, offset: 52565},
												expr: &ruleRefExpr{
													pos:  position{line: 1382, col: 10, offset: 52566},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1383, col: 9, offset: 52585},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1383, col: 20, offset: 52596},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1383, col: 20, offset: 52596},
														expr: &choiceExpr{
															pos: position{line: 1383, col: 21, offset: 52597},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1383, col: 21, offset: 52597},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1383, col: 33, offset: 52609},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1383, col: 43, offset: 52619},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1383, col: 43, offset: 52619},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1383, col: 44, offset: 52620},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1383, col: 49, offset: 52625,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1385, col: 12, offset: 52682},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1392, col: 1, offset: 52912},
			expr: &actionExpr{
				pos: position{line: 1392, col: 39, offset: 52950},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 39, offset: 52950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1392, col: 39, offset: 52950},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1392, col: 50, offset: 52961},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 51, offset: 52962},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1393, col: 9, offset: 52990},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1393, col: 31, offset: 53012},
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 31, offset: 53012},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1393, col: 35, offset: 53016},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 43, offset: 53024},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 50, offset: 53031},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1393, col: 92, offset: 53073},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1393, col: 93, offset: 53074},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1393, col: 93, offset: 53074},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1393, col: 115, offset: 53096},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1393, col: 123, offset: 53104},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1398, col: 1, offset: 53263},
			expr: &actionExpr{
				pos: position{line: 1398, col: 44, offset: 53306},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1398, col: 44, offset: 53306},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1398, col: 50, offset: 53312},
						expr: &ruleRefExpr{
							pos:  position{line: 1398, col: 51, offset: 53313},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1402, col: 1, offset: 53397},
			expr: &actionExpr{
				pos: position{line: 1403, col: 5, offset: 53452},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 5, offset: 53452},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 5, offset: 53452},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1403, col: 11, offset: 53458},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1403, col: 11, offset: 53458},
									expr: &choiceExpr{
										pos: position{line: 1403, col: 12, offset: 53459},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1403, col: 12, offset: 53459},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1403, col: 24, offset: 53471},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1403, col: 34, offset: 53481},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1403, col: 34, offset: 53481},
														expr: &ruleRefExpr{
															pos:  position{line: 1403, col: 35, offset: 53482},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1403, col: 57, offset: 53504},
														expr: &ruleRefExpr{
															pos:  position{line: 1403, col: 58, offset: 53505},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1403, col: 62, offset: 53509,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1405, col: 8, offset: 53558},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1410, col: 1, offset: 53684},
			expr: &actionExpr{
				pos: position{line: 1411, col: 5, offset: 53722},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 5, offset: 53722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1411, col: 5, offset: 53722},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1411, col: 16, offset: 53733},
								expr: &ruleRefExpr{
									pos:  position{line: 1411, col: 17, offset: 53734},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1412, col: 5, offset: 53758},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 5, offset: 53972},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 12, offset: 53979},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1423, col: 1, offset: 54129},
			expr: &actionExpr{
				pos: position{line: 1423, col: 16, offset: 54144},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1423, col: 16, offset: 54144},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1428, col: 1, offset: 54227},
			expr: &actionExpr{
				pos: position{line: 1428, col: 39, offset: 54265},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1428, col: 39, offset: 54265},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1428, col: 45, offset: 54271},
						expr: &ruleRefExpr{
							pos:  position{line: 1428, col: 46, offset: 54272},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1432, col: 1, offset: 54352},
			expr: &actionExpr{
				pos: position{line: 1432, col: 38, offset: 54389},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 38, offset: 54389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1432, col: 38, offset: 54389},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1432, col: 44, offset: 54395},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1432, col: 44, offset: 54395},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1432, col: 44, offset: 54395},
											expr: &ruleRefExpr{
												pos:  position{line: 1432, col: 46, offset: 54397},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1432, col: 57, offset: 54408},
											expr: &choiceExpr{
												pos: position{line: 1432, col: 58, offset: 54409},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1432, col: 58, offset: 54409},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1432, col: 70, offset: 54421},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1432, col: 80, offset: 54431},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1432, col: 80, offset: 54431},
																expr: &ruleRefExpr{
																	pos:  position{line: 1432, col: 81, offset: 54432},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1432, col: 86, offset: 54437,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1434, col: 4, offset: 54478},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1441, col: 1, offset: 54650},
			expr: &actionExpr{
				pos: position{line: 1441, col: 14, offset: 54663},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1441, col: 14, offset: 54663},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1441, col: 14, offset: 54663},
							expr: &ruleRefExpr{
								pos:  position{line: 1441, col: 15, offset: 54664},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1441, col: 19, offset: 54668},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1448, col: 1, offset: 54816},
			expr: &charClassMatcher{
				pos:        position{line: 1448, col: 13, offset: 54828},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1450, col: 1, offset: 54838},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 16, offset: 54853},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1450, col: 16, offset: 54853},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1450, col: 22, offset: 54859},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1450, col: 28, offset: 54865},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1450, col: 34, offset: 54871},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1452, col: 1, offset: 54876},
			expr: &oneOrMoreExpr{
				pos: position{line: 1452, col: 14, offset: 54889},
				expr: &charClassMatcher{
					pos:        position{line: 1452, col: 14, offset: 54889},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1454, col: 1, offset: 54900},
			expr: &litMatcher{
				pos:        position{line: 1454, col: 8, offset: 54907},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1456, col: 1, offset: 54912},
			expr: &actionExpr{
				pos: position{line: 1456, col: 15, offset: 54926},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 15, offset: 54926},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1456, col: 15, offset: 54926},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1456, col: 25, offset: 54936},
							expr: &choiceExpr{
								pos: position{line: 1456, col: 27, offset: 54938},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1456, col: 27, offset: 54938},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 32, offset: 54943},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1461, col: 1, offset: 55208},
			expr: &actionExpr{
				pos: position{line: 1461, col: 14, offset: 55221},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1461, col: 15, offset: 55222},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1461, col: 15, offset: 55222},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1461, col: 27, offset: 55234},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1461, col: 46, offset: 55253},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1461, col: 60, offset: 55267},
							expr: &actionExpr{
								pos: position{line: 1461, col: 61, offset: 55268},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1461, col: 61, offset: 55268},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1461, col: 62, offset: 55269},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1461, col: 62, offset: 55269},
													expr: &ruleRefExpr{
														pos:  position{line: 1461, col: 63, offset: 55270},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1461, col: 71, offset: 55278},
													expr: &ruleRefExpr{
														pos:  position{line: 1461, col: 72, offset: 55279},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1461, col: 75, offset: 55282},
													expr: &ruleRefExpr{
														pos:  position{line: 1461, col: 76, offset: 55283},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1461, col: 80, offset: 55287},
													expr: &ruleRefExpr{
														pos:  position{line: 1461, col: 81, offset: 55288},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1461, col: 98, offset: 55305,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1461, col: 101, offset: 55308},
											expr: &ruleRefExpr{
												pos:  position{line: 1461, col: 101, offset: 55308},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1463, col: 7, offset: 55417},
							expr: &litMatcher{
								pos:        position{line: 1463, col: 7, offset: 55417},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1467, col: 1, offset: 55598},
			expr: &oneOrMoreExpr{
				pos: position{line: 1467, col: 11, offset: 55608},
				expr: &ruleRefExpr{
					pos:  position{line: 1467, col: 11, offset: 55608},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1469, col: 1, offset: 55614},
			expr: &actionExpr{
				pos: position{line: 1469, col: 17, offset: 55630},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1469, col: 17, offset: 55630},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1469, col: 26, offset: 55639},
						expr: &choiceExpr{
							pos: position{line: 1469, col: 27, offset: 55640},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1469, col: 27, offset: 55640},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1469, col: 38, offset: 55651},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1473, col: 1, offset: 55743},
			expr: &actionExpr{
				pos: position{line: 1473, col: 13, offset: 55755},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1473, col: 13, offset: 55755},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1473, col: 23, offset: 55765},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1473, col: 23, offset: 55765},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1473, col: 34, offset: 55776},
								expr: &choiceExpr{
									pos: position{line: 1473, col: 35, offset: 55777},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1473, col: 35, offset: 55777},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1473, col: 46, offset: 55788},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1473, col: 78, offset: 55820},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1473, col: 78, offset: 55820},
													expr: &ruleRefExpr{
														pos:  position{line: 1473, col: 79, offset: 55821},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1473, col: 83, offset: 55825},
													expr: &litMatcher{
														pos:        position{line: 1473, col: 84, offset: 55826},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1473, col: 88, offset: 55830,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1477, col: 1, offset: 55895},
			expr: &oneOrMoreExpr{
				pos: position{line: 1477, col: 13, offset: 55907},
				expr: &choiceExpr{
					pos: position{line: 1477, col: 14, offset: 55908},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1477, col: 14, offset: 55908},
							name: "Alphanums",
						},
						&litMatcher{
							pos:        position{line: 1477, col: 26, offset: 55920},
							val:        ".",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1477, col: 32, offset: 55926},
							val:        "_",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1477, col: 38, offset: 55932},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1477, col: 44, offset: 55938},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1479, col: 1, offset: 55945},
			expr: &actionExpr{
				pos: position{line: 1479, col: 8, offset: 55952},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1479, col: 8, offset: 55952},
					expr: &choiceExpr{
						pos: position{line: 1479, col: 9, offset: 55953},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1479, col: 9, offset: 55953},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1479, col: 22, offset: 55966},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1479, col: 22, offset: 55966},
										expr: &ruleRefExpr{
											pos:  position{line: 1479, col: 23, offset: 55967},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1479, col: 31, offset: 55975},
										expr: &ruleRefExpr{
											pos:  position{line: 1479, col: 32, offset: 55976},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1479, col: 35, offset: 55979},
										expr: &litMatcher{
											pos:        position{line: 1479, col: 36, offset: 55980},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1479, col: 40, offset: 55984},
										expr: &litMatcher{
											pos:        position{line: 1479, col: 41, offset: 55985},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1479, col: 46, offset: 55990,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1483, col: 1, offset: 56031},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 15, offset: 56045},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1483, col: 15, offset: 56045},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 27, offset: 56057},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 40, offset: 56070},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 51, offset: 56081},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 62, offset: 56092},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1485, col: 1, offset: 56103},
			expr: &actionExpr{
				pos: position{line: 1485, col: 7, offset: 56109},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1485, col: 7, offset: 56109},
					expr: &choiceExpr{
						pos: position{line: 1485, col: 8, offset: 56110},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1485, col: 8, offset: 56110},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1485, col: 21, offset: 56123},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1485, col: 21, offset: 56123},
										expr: &ruleRefExpr{
											pos:  position{line: 1485, col: 22, offset: 56124},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 30, offset: 56132},
										expr: &ruleRefExpr{
											pos:  position{line: 1485, col: 31, offset: 56133},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 34, offset: 56136},
										expr: &litMatcher{
											pos:        position{line: 1485, col: 35, offset: 56137},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 39, offset: 56141},
										expr: &litMatcher{
											pos:        position{line: 1485, col: 40, offset: 56142},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 44, offset: 56146},
										expr: &litMatcher{
											pos:        position{line: 1485, col: 45, offset: 56147},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 50, offset: 56152},
										expr: &litMatcher{
											pos:        position{line: 1485, col: 51, offset: 56153},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1485, col: 56, offset: 56158},
										expr: &litMatcher{
											pos:        position{line: 1485, col: 57, offset: 56159},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1485, col: 62, offset: 56164,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1489, col: 1, offset: 56205},
			expr: &actionExpr{
				pos: position{line: 1489, col: 10, offset: 56214},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1489, col: 10, offset: 56214},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1493, col: 1, offset: 56256},
			expr: &actionExpr{
				pos: position{line: 1493, col: 11, offset: 56266},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 11, offset: 56266},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1493, col: 11, offset: 56266},
							expr: &litMatcher{
								pos:        position{line: 1493, col: 11, offset: 56266},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1493, col: 16, offset: 56271},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 16, offset: 56271},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1497, col: 1, offset: 56323},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 7, offset: 56329},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1497, col: 7, offset: 56329},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1497, col: 13, offset: 56335},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1497, col: 13, offset: 56335},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1501, col: 1, offset: 56376},
			expr: &choiceExpr{
				pos: position{line: 1501, col: 12, offset: 56387},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1501, col: 12, offset: 56387},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1501, col: 21, offset: 56396},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1501, col: 28, offset: 56403},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1503, col: 1, offset: 56409},
			expr: &notExpr{
				pos: position{line: 1503, col: 8, offset: 56416},
				expr: &anyMatcher{
					line: 1503, col: 9, offset: 56417,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1505, col: 1, offset: 56420},
			expr: &choiceExpr{
				pos: position{line: 1505, col: 8, offset: 56427},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1505, col: 8, offset: 56427},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1505, col: 18, offset: 56437},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1507, col: 1, offset: 56442},
			expr: &seqExpr{
				pos: position{line: 1507, col: 9, offset: 56450},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1507, col: 9, offset: 56450},
						expr: &ruleRefExpr{
							pos:  position{line: 1507, col: 9, offset: 56450},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1507, col: 13, offset: 56454},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
