// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1188},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1253},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1279},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1331},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1349},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1374},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1398},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1452},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1474},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1501},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1530},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1556},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1591},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1615},
						name: "DocumentAttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1655},
						name: "DocumentAttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1689},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1726},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1751},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1762},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1808},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1815},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1816},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1853},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1890},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1890},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1890},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1891},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1900},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1907},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1907},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1932},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1984},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2008},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2033},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2055},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2082},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2111},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2138},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2173},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2197},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2271},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2308},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2333},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2371},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2393},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2400},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2401},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2422},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2443},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2443},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2443},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2444},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2453},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2460},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2472},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2618},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2633},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2651},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2670},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2670},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2670},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2691},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2699},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2700},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2725},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2805},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2830},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2830},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2836},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2848},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2874},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2874},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2875},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2876},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2876},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2877},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2898,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3064},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3082},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3082},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3086},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3086},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3093},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3100},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3115},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3119},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3119},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3137},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3149},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3150},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3170},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3193},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3202},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3202},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3229},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3230},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3230},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3250},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3273},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3283},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3283},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3384},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3403},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3431},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3461},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3490},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3490},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3490},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3490},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3497},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3498},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3502},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3511},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3511},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3598},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3630},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3630},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3630},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3630},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3637},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3648},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3656},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3672},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3751},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3769},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3769},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3776},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3786},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3806},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3812},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3813},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3835},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3835},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3842},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3842},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3847},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3847},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 3992},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 4014},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 4014},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 4014},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4061},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4084},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4084},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4088},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4095},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4096},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4096},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4143},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4304},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4324},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4324},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4324},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4324},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4331},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4332},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4336},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4355},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4356},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4356},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4356},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4367},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4391},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4391},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4396},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4404},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4405},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4428},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4428},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4433},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4443},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4444},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4561},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4561},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4561},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4570},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4592},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4592},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4597},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4607},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4608},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4717},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4847},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 4873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 4873},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 4873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 4873},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4878},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 4885},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 4885},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4933},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4933},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 4933},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 4939},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 4946},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 4946},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 4957},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 4957},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 4964},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 4965},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 5005},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 5029},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 5029},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 5029},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5075},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5101},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5101},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5101},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5263},
			expr: &actionExpr{
				pos: position{line: 170, col: 33, offset: 5295},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 33, offset: 5295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 33, offset: 5295},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 37, offset: 5299},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 43, offset: 5305},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 66, offset: 5328},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5341},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5347},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5348},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5349},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5349},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5349},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5356},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5363},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 180, col: 1, offset: 5689},
			expr: &actionExpr{
				pos: position{line: 180, col: 26, offset: 5714},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 26, offset: 5714},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 26, offset: 5714},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 36, offset: 5724},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 37, offset: 5725},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 184, col: 1, offset: 5773},
			expr: &actionExpr{
				pos: position{line: 184, col: 27, offset: 5799},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 27, offset: 5799},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 27, offset: 5799},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 188, col: 1, offset: 5844},
			expr: &choiceExpr{
				pos: position{line: 188, col: 27, offset: 5870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 27, offset: 5870},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 27, offset: 5870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 27, offset: 5870},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 32, offset: 5875},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 38, offset: 5881},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 61, offset: 5904},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 65, offset: 5908},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 65, offset: 5908},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 72, offset: 5915},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5983},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 5983},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 5987},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 5993},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 38, offset: 6016},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 43, offset: 6021},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 43, offset: 6021},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 50, offset: 6028},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 6095},
			expr: &actionExpr{
				pos: position{line: 194, col: 34, offset: 6128},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 34, offset: 6128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 34, offset: 6128},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 38, offset: 6132},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 44, offset: 6138},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 67, offset: 6161},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 201, col: 1, offset: 6349},
			expr: &actionExpr{
				pos: position{line: 201, col: 22, offset: 6370},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 22, offset: 6370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 22, offset: 6370},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 28, offset: 6376},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 29, offset: 6377},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 48, offset: 6396},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 48, offset: 6396},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6478},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6498},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6498},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6498},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6500},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6500},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6506},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6512},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6588},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6594},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6594},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6615},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6639},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6662},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6690},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6718},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6745},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6772},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6809},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6837},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6874},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 7057},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 7080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 7080},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 7098},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 7115},
			expr: &choiceExpr{
				pos: position{line: 223, col: 14, offset: 7128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 14, offset: 7128},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 223, col: 14, offset: 7128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 14, offset: 7128},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 19, offset: 7133},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7137},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 27, offset: 7141},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 32, offset: 7146},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 32, offset: 7146},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 39, offset: 7153},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7206},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7206},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 10, offset: 7211},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 14, offset: 7215},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 18, offset: 7219},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 23, offset: 7224},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 23, offset: 7224},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 7231},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 229, col: 1, offset: 7283},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7302},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7302},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7302},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 25, offset: 7307},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 29, offset: 7311},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 33, offset: 7315},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 38, offset: 7320},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 38, offset: 7320},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 235, col: 1, offset: 7597},
			expr: &actionExpr{
				pos: position{line: 235, col: 17, offset: 7613},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 235, col: 17, offset: 7613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 17, offset: 7613},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 7617},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 28, offset: 7624},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 49, offset: 7645},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 239, col: 1, offset: 7703},
			expr: &actionExpr{
				pos: position{line: 239, col: 24, offset: 7726},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 239, col: 24, offset: 7726},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 7726},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 32, offset: 7734},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 32, offset: 7734},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 245, col: 1, offset: 7961},
			expr: &actionExpr{
				pos: position{line: 245, col: 16, offset: 7976},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 245, col: 16, offset: 7976},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 16, offset: 7976},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 7981},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 245, col: 27, offset: 7987},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 245, col: 27, offset: 7987},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 245, col: 27, offset: 7987},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 36, offset: 7996},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 36, offset: 7996},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 4, offset: 8043},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 8, offset: 8047},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 8, offset: 8047},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 8054},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 251, col: 1, offset: 8110},
			expr: &actionExpr{
				pos: position{line: 251, col: 21, offset: 8130},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 251, col: 21, offset: 8130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 8130},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 33, offset: 8142},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 33, offset: 8142},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 40, offset: 8149},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 255, col: 1, offset: 8201},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8230},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8230},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 39, offset: 8239},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 39, offset: 8239},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 46, offset: 8246},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 260, col: 1, offset: 8387},
			expr: &actionExpr{
				pos: position{line: 260, col: 30, offset: 8416},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 260, col: 30, offset: 8416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 30, offset: 8416},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 34, offset: 8420},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 37, offset: 8423},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 53, offset: 8439},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 57, offset: 8443},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 57, offset: 8443},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 64, offset: 8450},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 265, col: 1, offset: 8605},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 8625},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 8625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 8625},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8640},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 14, offset: 8649},
								expr: &actionExpr{
									pos: position{line: 266, col: 15, offset: 8650},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 266, col: 15, offset: 8650},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 266, col: 15, offset: 8650},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 19, offset: 8654},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 266, col: 24, offset: 8659},
													expr: &ruleRefExpr{
														pos:  position{line: 266, col: 25, offset: 8660},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8715},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 12, offset: 8722},
								expr: &actionExpr{
									pos: position{line: 267, col: 13, offset: 8723},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8723},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 267, col: 13, offset: 8723},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 17, offset: 8727},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 267, col: 22, offset: 8732},
													expr: &ruleRefExpr{
														pos:  position{line: 267, col: 23, offset: 8733},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 5, offset: 8780},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 9, offset: 8784},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 9, offset: 8784},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 8791},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 273, col: 1, offset: 8942},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 8960},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 273, col: 19, offset: 8960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 8960},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 8964},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 34, offset: 8975},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 35, offset: 8976},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 54, offset: 8995},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 58, offset: 8999},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 58, offset: 8999},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 65, offset: 9006},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 277, col: 1, offset: 9078},
			expr: &choiceExpr{
				pos: position{line: 277, col: 21, offset: 9098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 21, offset: 9098},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 49, offset: 9126},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 279, col: 1, offset: 9156},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9185},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 30, offset: 9185},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 35, offset: 9190},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 49, offset: 9204},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 53, offset: 9208},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 59, offset: 9214},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 9215},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 9232},
							expr: &litMatcher{
								pos:        position{line: 279, col: 77, offset: 9232},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 82, offset: 9237},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 82, offset: 9237},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 283, col: 1, offset: 9336},
			expr: &actionExpr{
				pos: position{line: 283, col: 33, offset: 9368},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 33, offset: 9368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 33, offset: 9368},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9373},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 52, offset: 9387},
							expr: &litMatcher{
								pos:        position{line: 283, col: 52, offset: 9387},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 57, offset: 9392},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 57, offset: 9392},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 287, col: 1, offset: 9480},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 9496},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 287, col: 17, offset: 9496},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 287, col: 17, offset: 9496},
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 9497},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 26, offset: 9505},
							expr: &litMatcher{
								pos:        position{line: 287, col: 27, offset: 9506},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 35, offset: 9514},
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 9515},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 46, offset: 9525},
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 48, offset: 9527},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 48, offset: 9527},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 56, offset: 9535},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 61, offset: 9540},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 61, offset: 9540},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 75, offset: 9554},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 75, offset: 9554},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 291, col: 1, offset: 9597},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9615},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9615},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 291, col: 26, offset: 9622},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 26, offset: 9622},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 295, col: 1, offset: 9673},
			expr: &actionExpr{
				pos: position{line: 295, col: 29, offset: 9701},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 295, col: 29, offset: 9701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 295, col: 29, offset: 9701},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 295, col: 36, offset: 9708},
								expr: &charClassMatcher{
									pos:        position{line: 295, col: 36, offset: 9708},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 295, col: 50, offset: 9722},
							expr: &litMatcher{
								pos:        position{line: 295, col: 51, offset: 9723},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 299, col: 1, offset: 9889},
			expr: &actionExpr{
				pos: position{line: 299, col: 21, offset: 9909},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 299, col: 21, offset: 9909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 21, offset: 9909},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 9924},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 9924},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 43, offset: 9931},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 303, col: 1, offset: 10004},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 10023},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 10023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 20, offset: 10023},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 29, offset: 10032},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 10032},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 36, offset: 10039},
							expr: &litMatcher{
								pos:        position{line: 303, col: 36, offset: 10039},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 41, offset: 10044},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 48, offset: 10051},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 49, offset: 10052},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 66, offset: 10069},
							expr: &litMatcher{
								pos:        position{line: 303, col: 66, offset: 10069},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 71, offset: 10074},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 77, offset: 10080},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 78, offset: 10081},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 95, offset: 10098},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 99, offset: 10102},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 99, offset: 10102},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 106, offset: 10109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 307, col: 1, offset: 10178},
			expr: &actionExpr{
				pos: position{line: 307, col: 20, offset: 10197},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 307, col: 20, offset: 10197},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 10197},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 10206},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 29, offset: 10206},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 36, offset: 10213},
							expr: &litMatcher{
								pos:        position{line: 307, col: 36, offset: 10213},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 10218},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 48, offset: 10225},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 49, offset: 10226},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 66, offset: 10243},
							expr: &litMatcher{
								pos:        position{line: 307, col: 66, offset: 10243},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 71, offset: 10248},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 77, offset: 10254},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 78, offset: 10255},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 95, offset: 10272},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 99, offset: 10276},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 99, offset: 10276},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 106, offset: 10283},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 311, col: 1, offset: 10370},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 10388},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 311, col: 20, offset: 10389},
					expr: &charClassMatcher{
						pos:        position{line: 311, col: 20, offset: 10389},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 315, col: 1, offset: 10438},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 10458},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 10458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 21, offset: 10458},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 25, offset: 10462},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 31, offset: 10468},
								expr: &ruleRefExpr{
									pos:  position{line: 315, col: 32, offset: 10469},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 10488},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 322, col: 1, offset: 10662},
			expr: &actionExpr{
				pos: position{line: 322, col: 12, offset: 10673},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 322, col: 12, offset: 10673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 12, offset: 10673},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 23, offset: 10684},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 24, offset: 10685},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10709},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 323, col: 12, offset: 10716},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 323, col: 12, offset: 10716},
									expr: &litMatcher{
										pos:        position{line: 323, col: 13, offset: 10717},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 327, col: 5, offset: 10808},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 331, col: 5, offset: 10960},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 5, offset: 10960},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 12, offset: 10967},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 19, offset: 10974},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 34, offset: 10989},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 331, col: 38, offset: 10993},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 38, offset: 10993},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 56, offset: 11011},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 335, col: 1, offset: 11117},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 11134},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 335, col: 18, offset: 11134},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 335, col: 27, offset: 11143},
						expr: &seqExpr{
							pos: position{line: 335, col: 28, offset: 11144},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 335, col: 28, offset: 11144},
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 29, offset: 11145},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 335, col: 37, offset: 11153},
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 38, offset: 11154},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 54, offset: 11170},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 339, col: 1, offset: 11291},
			expr: &actionExpr{
				pos: position{line: 339, col: 17, offset: 11307},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 339, col: 17, offset: 11307},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 339, col: 26, offset: 11316},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 339, col: 26, offset: 11316},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 11, offset: 11331},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 341, col: 11, offset: 11376},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 11, offset: 11376},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 11394},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 343, col: 11, offset: 11419},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 344, col: 11, offset: 11447},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 345, col: 11, offset: 11470},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 346, col: 11, offset: 11485},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 347, col: 11, offset: 11510},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 348, col: 11, offset: 11531},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 349, col: 11, offset: 11571},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 356, col: 1, offset: 11722},
			expr: &seqExpr{
				pos: position{line: 356, col: 31, offset: 11752},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 356, col: 31, offset: 11752},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 356, col: 41, offset: 11762},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 361, col: 1, offset: 11873},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 11891},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 361, col: 19, offset: 11891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 19, offset: 11891},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 25, offset: 11897},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 40, offset: 11912},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 45, offset: 11917},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 52, offset: 11924},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 68, offset: 11940},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 75, offset: 11947},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 365, col: 1, offset: 12088},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 12107},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 12107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 20, offset: 12107},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 26, offset: 12113},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 41, offset: 12128},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 45, offset: 12132},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 52, offset: 12139},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 68, offset: 12155},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 75, offset: 12162},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 369, col: 1, offset: 12304},
			expr: &actionExpr{
				pos: position{line: 369, col: 18, offset: 12321},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 369, col: 19, offset: 12322},
					expr: &charClassMatcher{
						pos:        position{line: 369, col: 19, offset: 12322},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 373, col: 1, offset: 12371},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 12389},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 373, col: 19, offset: 12389},
					expr: &charClassMatcher{
						pos:        position{line: 373, col: 19, offset: 12389},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 377, col: 1, offset: 12437},
			expr: &actionExpr{
				pos: position{line: 377, col: 24, offset: 12460},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 377, col: 24, offset: 12460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 24, offset: 12460},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 28, offset: 12464},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 377, col: 34, offset: 12470},
								expr: &ruleRefExpr{
									pos:  position{line: 377, col: 35, offset: 12471},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 377, col: 54, offset: 12490},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 384, col: 1, offset: 12670},
			expr: &actionExpr{
				pos: position{line: 384, col: 18, offset: 12687},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 384, col: 18, offset: 12687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 18, offset: 12687},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 384, col: 24, offset: 12693},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 384, col: 24, offset: 12693},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 384, col: 24, offset: 12693},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 384, col: 36, offset: 12705},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 42, offset: 12711},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 56, offset: 12725},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 74, offset: 12743},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 386, col: 8, offset: 12897},
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 8, offset: 12897},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 15, offset: 12904},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 390, col: 1, offset: 12956},
			expr: &actionExpr{
				pos: position{line: 390, col: 26, offset: 12981},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 390, col: 26, offset: 12981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 26, offset: 12981},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 30, offset: 12985},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 390, col: 36, offset: 12991},
								expr: &choiceExpr{
									pos: position{line: 390, col: 37, offset: 12992},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 390, col: 37, offset: 12992},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 390, col: 59, offset: 13014},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 390, col: 80, offset: 13035},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 99, offset: 13054},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 394, col: 1, offset: 13124},
			expr: &actionExpr{
				pos: position{line: 394, col: 24, offset: 13147},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 394, col: 24, offset: 13147},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 24, offset: 13147},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 33, offset: 13156},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 40, offset: 13163},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 394, col: 66, offset: 13189},
							expr: &litMatcher{
								pos:        position{line: 394, col: 66, offset: 13189},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 398, col: 1, offset: 13248},
			expr: &actionExpr{
				pos: position{line: 398, col: 29, offset: 13276},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 398, col: 29, offset: 13276},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 398, col: 29, offset: 13276},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 398, col: 36, offset: 13283},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 398, col: 36, offset: 13283},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 13400},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 400, col: 11, offset: 13436},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 401, col: 11, offset: 13462},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 11, offset: 13494},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 11, offset: 13526},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 404, col: 11, offset: 13553},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 404, col: 31, offset: 13573},
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 31, offset: 13573},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 404, col: 39, offset: 13581},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 404, col: 39, offset: 13581},
									expr: &litMatcher{
										pos:        position{line: 404, col: 40, offset: 13582},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 404, col: 46, offset: 13588},
									expr: &litMatcher{
										pos:        position{line: 404, col: 47, offset: 13589},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 408, col: 1, offset: 13621},
			expr: &actionExpr{
				pos: position{line: 408, col: 23, offset: 13643},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 13643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 23, offset: 13643},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 408, col: 30, offset: 13650},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 408, col: 30, offset: 13650},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 408, col: 47, offset: 13667},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 5, offset: 13689},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 409, col: 12, offset: 13696},
								expr: &actionExpr{
									pos: position{line: 409, col: 13, offset: 13697},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 409, col: 13, offset: 13697},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 409, col: 13, offset: 13697},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 409, col: 17, offset: 13701},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 409, col: 24, offset: 13708},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 409, col: 24, offset: 13708},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 409, col: 41, offset: 13725},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 415, col: 1, offset: 13863},
			expr: &actionExpr{
				pos: position{line: 415, col: 29, offset: 13891},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 415, col: 29, offset: 13891},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 29, offset: 13891},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 34, offset: 13896},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 415, col: 41, offset: 13903},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 415, col: 41, offset: 13903},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 415, col: 58, offset: 13920},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 5, offset: 13942},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 416, col: 12, offset: 13949},
								expr: &actionExpr{
									pos: position{line: 416, col: 13, offset: 13950},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 416, col: 13, offset: 13950},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 416, col: 13, offset: 13950},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 416, col: 17, offset: 13954},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 416, col: 24, offset: 13961},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 416, col: 24, offset: 13961},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 416, col: 41, offset: 13978},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 9, offset: 14031},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 422, col: 1, offset: 14121},
			expr: &actionExpr{
				pos: position{line: 422, col: 19, offset: 14139},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 422, col: 19, offset: 14139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 422, col: 19, offset: 14139},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 26, offset: 14146},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 422, col: 34, offset: 14154},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 39, offset: 14159},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 44, offset: 14164},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 426, col: 1, offset: 14252},
			expr: &actionExpr{
				pos: position{line: 426, col: 25, offset: 14276},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 426, col: 25, offset: 14276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 25, offset: 14276},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 30, offset: 14281},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 37, offset: 14288},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 426, col: 45, offset: 14296},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 50, offset: 14301},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 55, offset: 14306},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 426, col: 63, offset: 14314},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 430, col: 1, offset: 14399},
			expr: &actionExpr{
				pos: position{line: 430, col: 20, offset: 14418},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 430, col: 20, offset: 14418},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 430, col: 32, offset: 14430},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 434, col: 1, offset: 14525},
			expr: &actionExpr{
				pos: position{line: 434, col: 26, offset: 14550},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 434, col: 26, offset: 14550},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 26, offset: 14550},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 434, col: 31, offset: 14555},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 43, offset: 14567},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 434, col: 51, offset: 14575},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 438, col: 1, offset: 14667},
			expr: &actionExpr{
				pos: position{line: 438, col: 23, offset: 14689},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 438, col: 23, offset: 14689},
					expr: &charClassMatcher{
						pos:        position{line: 438, col: 23, offset: 14689},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 442, col: 1, offset: 14734},
			expr: &actionExpr{
				pos: position{line: 442, col: 23, offset: 14756},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 442, col: 23, offset: 14756},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 442, col: 24, offset: 14757},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 442, col: 24, offset: 14757},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 442, col: 34, offset: 14767},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 42, offset: 14775},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 48, offset: 14781},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 442, col: 73, offset: 14806},
							expr: &litMatcher{
								pos:        position{line: 442, col: 73, offset: 14806},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 446, col: 1, offset: 14955},
			expr: &actionExpr{
				pos: position{line: 446, col: 28, offset: 14982},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 446, col: 28, offset: 14982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 28, offset: 14982},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 35, offset: 14989},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 54, offset: 15008},
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 54, offset: 15008},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 446, col: 62, offset: 15016},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 446, col: 62, offset: 15016},
									expr: &litMatcher{
										pos:        position{line: 446, col: 63, offset: 15017},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 446, col: 69, offset: 15023},
									expr: &litMatcher{
										pos:        position{line: 446, col: 70, offset: 15024},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 450, col: 1, offset: 15056},
			expr: &actionExpr{
				pos: position{line: 450, col: 22, offset: 15077},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 450, col: 22, offset: 15077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 450, col: 22, offset: 15077},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 29, offset: 15084},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 15098},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 12, offset: 15105},
								expr: &actionExpr{
									pos: position{line: 451, col: 13, offset: 15106},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 451, col: 13, offset: 15106},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 451, col: 13, offset: 15106},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 451, col: 17, offset: 15110},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 451, col: 24, offset: 15117},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 457, col: 1, offset: 15248},
			expr: &choiceExpr{
				pos: position{line: 457, col: 13, offset: 15260},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 457, col: 13, offset: 15260},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 457, col: 13, offset: 15260},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 457, col: 18, offset: 15265},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 457, col: 18, offset: 15265},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 457, col: 30, offset: 15277},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 15345},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 459, col: 5, offset: 15345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 459, col: 5, offset: 15345},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 459, col: 9, offset: 15349},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 459, col: 14, offset: 15354},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 459, col: 14, offset: 15354},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 459, col: 26, offset: 15366},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 463, col: 1, offset: 15434},
			expr: &actionExpr{
				pos: position{line: 463, col: 16, offset: 15449},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 463, col: 16, offset: 15449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 463, col: 16, offset: 15449},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 463, col: 23, offset: 15456},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 463, col: 23, offset: 15456},
									expr: &litMatcher{
										pos:        position{line: 463, col: 24, offset: 15457},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 466, col: 5, offset: 15511},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 474, col: 1, offset: 15753},
			expr: &zeroOrMoreExpr{
				pos: position{line: 474, col: 24, offset: 15776},
				expr: &choiceExpr{
					pos: position{line: 474, col: 25, offset: 15777},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 25, offset: 15777},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 41, offset: 15793},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 476, col: 1, offset: 15813},
			expr: &actionExpr{
				pos: position{line: 476, col: 21, offset: 15833},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 476, col: 21, offset: 15833},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 476, col: 21, offset: 15833},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 22, offset: 15834},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 26, offset: 15838},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 476, col: 35, offset: 15847},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 476, col: 35, offset: 15847},
									expr: &charClassMatcher{
										pos:        position{line: 476, col: 35, offset: 15847},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 12, offset: 15909},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 485, col: 1, offset: 16108},
			expr: &actionExpr{
				pos: position{line: 485, col: 21, offset: 16128},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 485, col: 21, offset: 16128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 21, offset: 16128},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 485, col: 29, offset: 16136},
								expr: &choiceExpr{
									pos: position{line: 485, col: 30, offset: 16137},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 485, col: 30, offset: 16137},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 485, col: 53, offset: 16160},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 485, col: 74, offset: 16181},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 485, col: 74, offset: 16181,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 107, offset: 16214},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 489, col: 1, offset: 16285},
			expr: &actionExpr{
				pos: position{line: 489, col: 25, offset: 16309},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 489, col: 25, offset: 16309},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 489, col: 25, offset: 16309},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 33, offset: 16317},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 489, col: 38, offset: 16322},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 38, offset: 16322},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 489, col: 78, offset: 16362},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 493, col: 1, offset: 16427},
			expr: &actionExpr{
				pos: position{line: 493, col: 23, offset: 16449},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 493, col: 23, offset: 16449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 493, col: 23, offset: 16449},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 31, offset: 16457},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 493, col: 36, offset: 16462},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 493, col: 36, offset: 16462},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 493, col: 76, offset: 16502},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 500, col: 1, offset: 16666},
			expr: &choiceExpr{
				pos: position{line: 500, col: 18, offset: 16683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 18, offset: 16683},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 500, col: 18, offset: 16683},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 27, offset: 16692},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 9, offset: 16749},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 502, col: 9, offset: 16749},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 502, col: 15, offset: 16755},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 16, offset: 16756},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 506, col: 1, offset: 16848},
			expr: &actionExpr{
				pos: position{line: 506, col: 22, offset: 16869},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 506, col: 22, offset: 16869},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 506, col: 22, offset: 16869},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 23, offset: 16870},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 16878},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 6, offset: 16879},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 508, col: 5, offset: 16894},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 6, offset: 16895},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 509, col: 5, offset: 16917},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 6, offset: 16918},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 510, col: 5, offset: 16944},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 6, offset: 16945},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 511, col: 5, offset: 16973},
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 6, offset: 16974},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 512, col: 5, offset: 17000},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 6, offset: 17001},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 513, col: 5, offset: 17026},
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 6, offset: 17027},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 514, col: 5, offset: 17048},
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 6, offset: 17049},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 515, col: 5, offset: 17068},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 6, offset: 17069},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 17096},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 516, col: 11, offset: 17102},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 516, col: 11, offset: 17102},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 516, col: 20, offset: 17111},
										expr: &ruleRefExpr{
											pos:  position{line: 516, col: 21, offset: 17112},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 12, offset: 17211},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 522, col: 1, offset: 17250},
			expr: &seqExpr{
				pos: position{line: 522, col: 25, offset: 17274},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 522, col: 25, offset: 17274},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 522, col: 29, offset: 17278},
						expr: &ruleRefExpr{
							pos:  position{line: 522, col: 29, offset: 17278},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 36, offset: 17285},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 524, col: 1, offset: 17357},
			expr: &actionExpr{
				pos: position{line: 524, col: 29, offset: 17385},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 524, col: 29, offset: 17385},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 524, col: 29, offset: 17385},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 50, offset: 17406},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 58, offset: 17414},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 528, col: 1, offset: 17520},
			expr: &actionExpr{
				pos: position{line: 528, col: 29, offset: 17548},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 528, col: 29, offset: 17548},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 528, col: 29, offset: 17548},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 30, offset: 17549},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 529, col: 5, offset: 17558},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 529, col: 14, offset: 17567},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 529, col: 14, offset: 17567},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17592},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17616},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17670},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17692},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17719},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 17748},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 17813},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 17864},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 17888},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 17928},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 11, offset: 17962},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 542, col: 11, offset: 17999},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 11, offset: 18024},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 550, col: 1, offset: 18187},
			expr: &actionExpr{
				pos: position{line: 550, col: 20, offset: 18206},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 550, col: 20, offset: 18206},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 20, offset: 18206},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 550, col: 31, offset: 18217},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 32, offset: 18218},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 52, offset: 18238},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 60, offset: 18246},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 83, offset: 18269},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 92, offset: 18278},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 554, col: 1, offset: 18418},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 18448},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 18448},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 5, offset: 18448},
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 5, offset: 18448},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 12, offset: 18455},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 557, col: 9, offset: 18518},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 557, col: 9, offset: 18518},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 557, col: 9, offset: 18518},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 557, col: 9, offset: 18518},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 557, col: 16, offset: 18525},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 557, col: 16, offset: 18525},
															expr: &litMatcher{
																pos:        position{line: 557, col: 17, offset: 18526},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 561, col: 9, offset: 18626},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 580, col: 11, offset: 19343},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 580, col: 11, offset: 19343},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 580, col: 11, offset: 19343},
													expr: &charClassMatcher{
														pos:        position{line: 580, col: 12, offset: 19344},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 580, col: 20, offset: 19352},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 582, col: 13, offset: 19463},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 582, col: 13, offset: 19463},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 582, col: 14, offset: 19464},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 582, col: 21, offset: 19471},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 584, col: 13, offset: 19585},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 584, col: 13, offset: 19585},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 584, col: 14, offset: 19586},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 584, col: 21, offset: 19593},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 586, col: 13, offset: 19707},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 586, col: 13, offset: 19707},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 586, col: 13, offset: 19707},
													expr: &charClassMatcher{
														pos:        position{line: 586, col: 14, offset: 19708},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 586, col: 22, offset: 19716},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 588, col: 13, offset: 19830},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 588, col: 13, offset: 19830},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 588, col: 13, offset: 19830},
													expr: &charClassMatcher{
														pos:        position{line: 588, col: 14, offset: 19831},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 588, col: 22, offset: 19839},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 590, col: 12, offset: 19952},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 12, offset: 19952},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 594, col: 1, offset: 19987},
			expr: &actionExpr{
				pos: position{line: 594, col: 27, offset: 20013},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 594, col: 27, offset: 20013},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 594, col: 37, offset: 20023},
						expr: &ruleRefExpr{
							pos:  position{line: 594, col: 37, offset: 20023},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 601, col: 1, offset: 20223},
			expr: &actionExpr{
				pos: position{line: 601, col: 22, offset: 20244},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 601, col: 22, offset: 20244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 22, offset: 20244},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 601, col: 33, offset: 20255},
								expr: &ruleRefExpr{
									pos:  position{line: 601, col: 34, offset: 20256},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 54, offset: 20276},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 62, offset: 20284},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 87, offset: 20309},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 601, col: 98, offset: 20320},
								expr: &ruleRefExpr{
									pos:  position{line: 601, col: 99, offset: 20321},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 129, offset: 20351},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 138, offset: 20360},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 605, col: 1, offset: 20518},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 20550},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 20550},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 606, col: 5, offset: 20550},
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 5, offset: 20550},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 12, offset: 20557},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 606, col: 20, offset: 20565},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 608, col: 9, offset: 20622},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 608, col: 9, offset: 20622},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 608, col: 9, offset: 20622},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 608, col: 16, offset: 20629},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 608, col: 16, offset: 20629},
															expr: &litMatcher{
																pos:        position{line: 608, col: 17, offset: 20630},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 612, col: 9, offset: 20730},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 629, col: 14, offset: 21437},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 629, col: 21, offset: 21444},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 629, col: 22, offset: 21445},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 631, col: 13, offset: 21531},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 13, offset: 21531},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 635, col: 1, offset: 21567},
			expr: &actionExpr{
				pos: position{line: 635, col: 32, offset: 21598},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 635, col: 32, offset: 21598},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 635, col: 32, offset: 21598},
							expr: &litMatcher{
								pos:        position{line: 635, col: 33, offset: 21599},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 37, offset: 21603},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 636, col: 7, offset: 21617},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 636, col: 7, offset: 21617},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 636, col: 7, offset: 21617},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 637, col: 7, offset: 21662},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 637, col: 7, offset: 21662},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 638, col: 7, offset: 21705},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 638, col: 7, offset: 21705},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 639, col: 7, offset: 21747},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 7, offset: 21747},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 643, col: 1, offset: 21789},
			expr: &actionExpr{
				pos: position{line: 643, col: 29, offset: 21817},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 643, col: 29, offset: 21817},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 643, col: 39, offset: 21827},
						expr: &ruleRefExpr{
							pos:  position{line: 643, col: 39, offset: 21827},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 650, col: 1, offset: 22143},
			expr: &actionExpr{
				pos: position{line: 650, col: 20, offset: 22162},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 650, col: 20, offset: 22162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 20, offset: 22162},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 650, col: 31, offset: 22173},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 32, offset: 22174},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 52, offset: 22194},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 58, offset: 22200},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 87, offset: 22229},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 98, offset: 22240},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 124, offset: 22266},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 650, col: 136, offset: 22278},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 137, offset: 22279},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 654, col: 1, offset: 22425},
			expr: &seqExpr{
				pos: position{line: 654, col: 26, offset: 22450},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 654, col: 26, offset: 22450},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 654, col: 54, offset: 22478},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 656, col: 1, offset: 22504},
			expr: &actionExpr{
				pos: position{line: 656, col: 32, offset: 22535},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 32, offset: 22535},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 656, col: 41, offset: 22544},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 656, col: 41, offset: 22544},
							expr: &charClassMatcher{
								pos:        position{line: 656, col: 41, offset: 22544},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 662, col: 1, offset: 22678},
			expr: &actionExpr{
				pos: position{line: 662, col: 24, offset: 22701},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 662, col: 24, offset: 22701},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 662, col: 33, offset: 22710},
						expr: &seqExpr{
							pos: position{line: 662, col: 34, offset: 22711},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 662, col: 34, offset: 22711},
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 35, offset: 22712},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 662, col: 43, offset: 22720},
									expr: &litMatcher{
										pos:        position{line: 662, col: 44, offset: 22721},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 49, offset: 22726},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 666, col: 1, offset: 22853},
			expr: &actionExpr{
				pos: position{line: 666, col: 31, offset: 22883},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 666, col: 31, offset: 22883},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 666, col: 40, offset: 22892},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 666, col: 40, offset: 22892},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 22907},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 668, col: 11, offset: 22956},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 11, offset: 22956},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 22974},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 22999},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 23028},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 23048},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 23076},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 23099},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 11, offset: 23114},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 676, col: 11, offset: 23139},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 677, col: 11, offset: 23160},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 23200},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 682, col: 1, offset: 23239},
			expr: &actionExpr{
				pos: position{line: 683, col: 5, offset: 23272},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 683, col: 5, offset: 23272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 23272},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 683, col: 16, offset: 23283},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 683, col: 16, offset: 23283},
									expr: &litMatcher{
										pos:        position{line: 683, col: 17, offset: 23284},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 686, col: 5, offset: 23342},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 690, col: 6, offset: 23518},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 690, col: 6, offset: 23518},
									expr: &choiceExpr{
										pos: position{line: 690, col: 7, offset: 23519},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 690, col: 7, offset: 23519},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 690, col: 15, offset: 23527},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 27, offset: 23539},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 694, col: 1, offset: 23579},
			expr: &actionExpr{
				pos: position{line: 694, col: 31, offset: 23609},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 694, col: 31, offset: 23609},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 694, col: 40, offset: 23618},
						expr: &ruleRefExpr{
							pos:  position{line: 694, col: 41, offset: 23619},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 701, col: 1, offset: 23810},
			expr: &choiceExpr{
				pos: position{line: 701, col: 19, offset: 23828},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 701, col: 19, offset: 23828},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 701, col: 19, offset: 23828},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 9, offset: 23874},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 703, col: 9, offset: 23874},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 9, offset: 23922},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 705, col: 9, offset: 23922},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 9, offset: 23980},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 707, col: 9, offset: 23980},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 9, offset: 24034},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 709, col: 9, offset: 24034},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 718, col: 1, offset: 24341},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 24388},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 24388},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 24388},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 24388},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 720, col: 16, offset: 24399},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 17, offset: 24400},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 720, col: 37, offset: 24420},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 40, offset: 24423},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 720, col: 56, offset: 24439},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 61, offset: 24444},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 720, col: 67, offset: 24450},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 68, offset: 24451},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 24632},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 24632},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 724, col: 5, offset: 24632},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 724, col: 16, offset: 24643},
										expr: &ruleRefExpr{
											pos:  position{line: 724, col: 17, offset: 24644},
											name: "ElementAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 724, col: 37, offset: 24664},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 724, col: 42, offset: 24669},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 51, offset: 24678},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 24873},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 24873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 24873},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 728, col: 16, offset: 24884},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 17, offset: 24885},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 728, col: 37, offset: 24905},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 735, col: 7, offset: 25189},
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 8, offset: 25190},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 735, col: 23, offset: 25205},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 32, offset: 25214},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 25411},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 25411},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 25411},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 739, col: 16, offset: 25422},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 17, offset: 25423},
											name: "ElementAttributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 739, col: 37, offset: 25443},
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 38, offset: 25444},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 739, col: 53, offset: 25459},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 739, col: 59, offset: 25465},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 60, offset: 25466},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 743, col: 1, offset: 25562},
			expr: &oneOrMoreExpr{
				pos: position{line: 743, col: 38, offset: 25599},
				expr: &actionExpr{
					pos: position{line: 743, col: 39, offset: 25600},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 743, col: 39, offset: 25600},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 743, col: 39, offset: 25600},
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 40, offset: 25601},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 743, col: 50, offset: 25611},
								expr: &litMatcher{
									pos:        position{line: 743, col: 50, offset: 25611},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 743, col: 56, offset: 25617},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 65, offset: 25626},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 747, col: 1, offset: 25767},
			expr: &actionExpr{
				pos: position{line: 747, col: 34, offset: 25800},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 747, col: 34, offset: 25800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 747, col: 34, offset: 25800},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 40, offset: 25806},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 747, col: 48, offset: 25814},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 747, col: 49, offset: 25815},
									expr: &charClassMatcher{
										pos:        position{line: 747, col: 49, offset: 25815},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 8, offset: 25865},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 753, col: 1, offset: 25897},
			expr: &oneOrMoreExpr{
				pos: position{line: 753, col: 36, offset: 25932},
				expr: &actionExpr{
					pos: position{line: 753, col: 37, offset: 25933},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 753, col: 37, offset: 25933},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 753, col: 37, offset: 25933},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 38, offset: 25934},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 753, col: 48, offset: 25944},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 57, offset: 25953},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 758, col: 1, offset: 26166},
			expr: &actionExpr{
				pos: position{line: 758, col: 20, offset: 26185},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 758, col: 20, offset: 26185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 758, col: 20, offset: 26185},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 758, col: 31, offset: 26196},
								expr: &ruleRefExpr{
									pos:  position{line: 758, col: 32, offset: 26197},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 759, col: 5, offset: 26222},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 767, col: 5, offset: 26513},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 16, offset: 26524},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 26547},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 768, col: 16, offset: 26558},
								expr: &ruleRefExpr{
									pos:  position{line: 768, col: 17, offset: 26559},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 772, col: 1, offset: 26693},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 26720},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 26720},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 26720},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 773, col: 15, offset: 26730},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 773, col: 15, offset: 26730},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 773, col: 20, offset: 26735},
										expr: &ruleRefExpr{
											pos:  position{line: 773, col: 20, offset: 26735},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 36, offset: 26751},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 777, col: 1, offset: 26822},
			expr: &actionExpr{
				pos: position{line: 777, col: 23, offset: 26844},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 777, col: 23, offset: 26844},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 777, col: 33, offset: 26854},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 782, col: 1, offset: 26974},
			expr: &choiceExpr{
				pos: position{line: 784, col: 5, offset: 27030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 27030},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 27030},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 784, col: 5, offset: 27030},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 784, col: 16, offset: 27041},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 17, offset: 27042},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 784, col: 37, offset: 27062},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 40, offset: 27065},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 784, col: 56, offset: 27081},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 784, col: 61, offset: 27086},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 68, offset: 27093},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 27293},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 27293},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 27293},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 788, col: 16, offset: 27304},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 17, offset: 27305},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 788, col: 37, offset: 27325},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 44, offset: 27332},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 792, col: 1, offset: 27433},
			expr: &actionExpr{
				pos: position{line: 792, col: 28, offset: 27460},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 792, col: 28, offset: 27460},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 28, offset: 27460},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 39, offset: 27471},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 59, offset: 27491},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 792, col: 70, offset: 27502},
								expr: &seqExpr{
									pos: position{line: 792, col: 71, offset: 27503},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 792, col: 71, offset: 27503},
											expr: &ruleRefExpr{
												pos:  position{line: 792, col: 72, offset: 27504},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 792, col: 93, offset: 27525},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 796, col: 1, offset: 27631},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 27683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 27683},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 27683},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 798, col: 5, offset: 27683},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 798, col: 16, offset: 27694},
										expr: &ruleRefExpr{
											pos:  position{line: 798, col: 17, offset: 27695},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 799, col: 5, offset: 27719},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 806, col: 5, offset: 27931},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 8, offset: 27934},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 806, col: 24, offset: 27950},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 29, offset: 27955},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 806, col: 35, offset: 27961},
										expr: &ruleRefExpr{
											pos:  position{line: 806, col: 36, offset: 27962},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 28154},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 28154},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 810, col: 5, offset: 28154},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 810, col: 16, offset: 28165},
										expr: &ruleRefExpr{
											pos:  position{line: 810, col: 17, offset: 28166},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 811, col: 5, offset: 28190},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 818, col: 5, offset: 28402},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 818, col: 11, offset: 28408},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 12, offset: 28409},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 822, col: 1, offset: 28510},
			expr: &actionExpr{
				pos: position{line: 822, col: 19, offset: 28528},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 822, col: 19, offset: 28528},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 822, col: 19, offset: 28528},
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 20, offset: 28529},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 28543},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 823, col: 15, offset: 28553},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 823, col: 15, offset: 28553},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 823, col: 15, offset: 28553},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 823, col: 24, offset: 28562},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 9, offset: 28654},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 825, col: 9, offset: 28654},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 825, col: 9, offset: 28654},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 825, col: 18, offset: 28663},
														expr: &ruleRefExpr{
															pos:  position{line: 825, col: 19, offset: 28664},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 825, col: 35, offset: 28680},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 831, col: 1, offset: 28797},
			expr: &actionExpr{
				pos: position{line: 832, col: 5, offset: 28820},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 832, col: 5, offset: 28820},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 832, col: 14, offset: 28829},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 832, col: 14, offset: 28829},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 28880},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 834, col: 11, offset: 28925},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 11, offset: 28925},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 835, col: 11, offset: 28943},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 835, col: 11, offset: 28943},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 12, offset: 28944},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 836, col: 13, offset: 28963},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 836, col: 13, offset: 28963},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 28989},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 29016},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 29036},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 29069},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 29099},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 29129},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 29160},
												name: "DocumentAttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 29205},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 845, col: 15, offset: 29236},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 846, col: 15, offset: 29269},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 847, col: 15, offset: 29293},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 854, col: 1, offset: 29516},
			expr: &actionExpr{
				pos: position{line: 854, col: 14, offset: 29529},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 854, col: 14, offset: 29529},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 854, col: 14, offset: 29529},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 854, col: 20, offset: 29535},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 854, col: 24, offset: 29539},
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 24, offset: 29539},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 854, col: 31, offset: 29546},
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 32, offset: 29547},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 861, col: 1, offset: 29831},
			expr: &choiceExpr{
				pos: position{line: 861, col: 15, offset: 29845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 15, offset: 29845},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 41, offset: 29871},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 65, offset: 29895},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 863, col: 1, offset: 29914},
			expr: &choiceExpr{
				pos: position{line: 863, col: 32, offset: 29945},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 863, col: 32, offset: 29945},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 32, offset: 29945},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 863, col: 36, offset: 29949},
								expr: &litMatcher{
									pos:        position{line: 863, col: 37, offset: 29950},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 863, col: 43, offset: 29956},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 43, offset: 29956},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 863, col: 47, offset: 29960},
								expr: &litMatcher{
									pos:        position{line: 863, col: 48, offset: 29961},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 863, col: 54, offset: 29967},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 54, offset: 29967},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 863, col: 58, offset: 29971},
								expr: &litMatcher{
									pos:        position{line: 863, col: 59, offset: 29972},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 865, col: 1, offset: 29978},
			expr: &choiceExpr{
				pos: position{line: 865, col: 34, offset: 30011},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 865, col: 34, offset: 30011},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 41, offset: 30018},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 48, offset: 30025},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 55, offset: 30032},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 61, offset: 30038},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 867, col: 1, offset: 30043},
			expr: &actionExpr{
				pos: position{line: 867, col: 26, offset: 30068},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 867, col: 26, offset: 30068},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 867, col: 32, offset: 30074},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 867, col: 32, offset: 30074},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 868, col: 15, offset: 30109},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 869, col: 15, offset: 30146},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 870, col: 15, offset: 30186},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 871, col: 15, offset: 30215},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 872, col: 15, offset: 30246},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 876, col: 1, offset: 30400},
			expr: &choiceExpr{
				pos: position{line: 876, col: 28, offset: 30427},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 876, col: 28, offset: 30427},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 15, offset: 30461},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 15, offset: 30497},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 880, col: 1, offset: 30523},
			expr: &choiceExpr{
				pos: position{line: 880, col: 22, offset: 30544},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 880, col: 22, offset: 30544},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 15, offset: 30575},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 15, offset: 30608},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 883, col: 15, offset: 30644},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 884, col: 15, offset: 30680},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 886, col: 1, offset: 30704},
			expr: &choiceExpr{
				pos: position{line: 886, col: 33, offset: 30736},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 886, col: 33, offset: 30736},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 886, col: 39, offset: 30742},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 886, col: 39, offset: 30742},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 890, col: 1, offset: 30875},
			expr: &actionExpr{
				pos: position{line: 890, col: 25, offset: 30899},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 890, col: 25, offset: 30899},
					expr: &litMatcher{
						pos:        position{line: 890, col: 25, offset: 30899},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 894, col: 1, offset: 30940},
			expr: &actionExpr{
				pos: position{line: 894, col: 25, offset: 30964},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 894, col: 25, offset: 30964},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 894, col: 25, offset: 30964},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 894, col: 30, offset: 30969},
							expr: &litMatcher{
								pos:        position{line: 894, col: 30, offset: 30969},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 902, col: 1, offset: 31066},
			expr: &choiceExpr{
				pos: position{line: 902, col: 13, offset: 31078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 902, col: 13, offset: 31078},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 902, col: 35, offset: 31100},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 904, col: 1, offset: 31167},
			expr: &actionExpr{
				pos: position{line: 904, col: 24, offset: 31190},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 904, col: 24, offset: 31190},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 904, col: 24, offset: 31190},
							expr: &litMatcher{
								pos:        position{line: 904, col: 25, offset: 31191},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 904, col: 30, offset: 31196},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 35, offset: 31201},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 45, offset: 31211},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 904, col: 74, offset: 31240},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 908, col: 1, offset: 31321},
			expr: &seqExpr{
				pos: position{line: 908, col: 32, offset: 31352},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 908, col: 32, offset: 31352},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 908, col: 59, offset: 31379},
						expr: &seqExpr{
							pos: position{line: 908, col: 60, offset: 31380},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 908, col: 60, offset: 31380},
									expr: &litMatcher{
										pos:        position{line: 908, col: 62, offset: 31382},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 908, col: 69, offset: 31389},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 908, col: 69, offset: 31389},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 908, col: 77, offset: 31397},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 910, col: 1, offset: 31462},
			expr: &choiceExpr{
				pos: position{line: 910, col: 31, offset: 31492},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 910, col: 31, offset: 31492},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 11, offset: 31508},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 11, offset: 31539},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 11, offset: 31561},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 11, offset: 31585},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 11, offset: 31609},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 11, offset: 31635},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 11, offset: 31658},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 11, offset: 31674},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 919, col: 11, offset: 31703},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 11, offset: 31743},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 11, offset: 31786},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 924, col: 1, offset: 31825},
			expr: &actionExpr{
				pos: position{line: 924, col: 37, offset: 31861},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 924, col: 37, offset: 31861},
					expr: &seqExpr{
						pos: position{line: 924, col: 38, offset: 31862},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 924, col: 38, offset: 31862},
								expr: &litMatcher{
									pos:        position{line: 924, col: 39, offset: 31863},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 924, col: 44, offset: 31868},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 928, col: 1, offset: 31939},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 31984},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 929, col: 5, offset: 31984},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 930, col: 7, offset: 32081},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 930, col: 7, offset: 32081},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 930, col: 7, offset: 32081},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 12, offset: 32086},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 934, col: 1, offset: 32249},
			expr: &choiceExpr{
				pos: position{line: 934, col: 24, offset: 32272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 24, offset: 32272},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 934, col: 24, offset: 32272},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 934, col: 25, offset: 32273},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 934, col: 25, offset: 32273},
											expr: &litMatcher{
												pos:        position{line: 934, col: 26, offset: 32274},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 934, col: 30, offset: 32278},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 934, col: 34, offset: 32282},
											expr: &litMatcher{
												pos:        position{line: 934, col: 35, offset: 32283},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 934, col: 40, offset: 32288},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 50, offset: 32298},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 79, offset: 32327},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 934, col: 83, offset: 32331},
									expr: &notExpr{
										pos: position{line: 934, col: 85, offset: 32333},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 86, offset: 32334},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 32521},
						run: (*parser).callonSingleQuoteBoldText16,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 32521},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 936, col: 5, offset: 32521},
									expr: &litMatcher{
										pos:        position{line: 936, col: 6, offset: 32522},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 11, offset: 32527},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 15, offset: 32531},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 936, col: 25, offset: 32541},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 936, col: 25, offset: 32541},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 936, col: 29, offset: 32545},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 58, offset: 32574},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 940, col: 1, offset: 32773},
			expr: &seqExpr{
				pos: position{line: 940, col: 32, offset: 32804},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 940, col: 32, offset: 32804},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 33, offset: 32805},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 940, col: 39, offset: 32811},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 39, offset: 32811},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 942, col: 1, offset: 32840},
			expr: &choiceExpr{
				pos: position{line: 942, col: 31, offset: 32870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 942, col: 31, offset: 32870},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 11, offset: 32886},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 944, col: 11, offset: 32916},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 944, col: 11, offset: 32916},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 11, offset: 32916},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 944, col: 18, offset: 32923},
								expr: &seqExpr{
									pos: position{line: 944, col: 19, offset: 32924},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 944, col: 19, offset: 32924},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 944, col: 23, offset: 32928},
											expr: &litMatcher{
												pos:        position{line: 944, col: 24, offset: 32929},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 11, offset: 32945},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 11, offset: 32967},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 11, offset: 32991},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 11, offset: 33015},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 11, offset: 33041},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 11, offset: 33064},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 11, offset: 33081},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 11, offset: 33110},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 11, offset: 33150},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 11, offset: 33193},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 956, col: 1, offset: 33231},
			expr: &actionExpr{
				pos: position{line: 956, col: 37, offset: 33267},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 956, col: 37, offset: 33267},
					expr: &charClassMatcher{
						pos:        position{line: 956, col: 37, offset: 33267},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 960, col: 1, offset: 33501},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 33546},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 961, col: 5, offset: 33546},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 962, col: 7, offset: 33643},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 962, col: 7, offset: 33643},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 962, col: 7, offset: 33643},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 11, offset: 33647},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 966, col: 1, offset: 33810},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 33834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 33834},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 33834},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 5, offset: 33834},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 18, offset: 33847},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 40, offset: 33869},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 967, col: 45, offset: 33874},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 55, offset: 33884},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 84, offset: 33913},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 9, offset: 34070},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 969, col: 9, offset: 34070},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 34070},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 22, offset: 34083},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 44, offset: 34105},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 49, offset: 34110},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 59, offset: 34120},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 88, offset: 34149},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 9, offset: 34349},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 972, col: 9, offset: 34349},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 9, offset: 34349},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 22, offset: 34362},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 44, offset: 34384},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 48, offset: 34388},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 58, offset: 34398},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 87, offset: 34427},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 980, col: 1, offset: 34635},
			expr: &choiceExpr{
				pos: position{line: 980, col: 15, offset: 34649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 15, offset: 34649},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 39, offset: 34673},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 982, col: 1, offset: 34696},
			expr: &actionExpr{
				pos: position{line: 982, col: 26, offset: 34721},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 982, col: 26, offset: 34721},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 982, col: 26, offset: 34721},
							expr: &litMatcher{
								pos:        position{line: 982, col: 27, offset: 34722},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 982, col: 32, offset: 34727},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 982, col: 37, offset: 34732},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 47, offset: 34742},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 982, col: 78, offset: 34773},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 986, col: 1, offset: 34900},
			expr: &seqExpr{
				pos: position{line: 986, col: 34, offset: 34933},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 34, offset: 34933},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 986, col: 63, offset: 34962},
						expr: &seqExpr{
							pos: position{line: 986, col: 64, offset: 34963},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 986, col: 64, offset: 34963},
									expr: &litMatcher{
										pos:        position{line: 986, col: 66, offset: 34965},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 986, col: 73, offset: 34972},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 986, col: 73, offset: 34972},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 986, col: 81, offset: 34980},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 988, col: 1, offset: 35047},
			expr: &choiceExpr{
				pos: position{line: 988, col: 33, offset: 35079},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 33, offset: 35079},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 11, offset: 35095},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 11, offset: 35128},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 11, offset: 35148},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 11, offset: 35172},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 35196},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 35222},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 11, offset: 35245},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 11, offset: 35261},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 11, offset: 35290},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 11, offset: 35335},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1000, col: 1, offset: 35375},
			expr: &actionExpr{
				pos: position{line: 1000, col: 39, offset: 35413},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1000, col: 39, offset: 35413},
					expr: &seqExpr{
						pos: position{line: 1000, col: 40, offset: 35414},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1000, col: 40, offset: 35414},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 41, offset: 35415},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1000, col: 46, offset: 35420},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1004, col: 1, offset: 35491},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 35538},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1005, col: 5, offset: 35538},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1006, col: 7, offset: 35637},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1006, col: 7, offset: 35637},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1006, col: 7, offset: 35637},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1006, col: 12, offset: 35642},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1010, col: 1, offset: 35807},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 26, offset: 35832},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 26, offset: 35832},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 26, offset: 35832},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1010, col: 27, offset: 35833},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1010, col: 27, offset: 35833},
											expr: &litMatcher{
												pos:        position{line: 1010, col: 28, offset: 35834},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1010, col: 32, offset: 35838},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1010, col: 36, offset: 35842},
											expr: &litMatcher{
												pos:        position{line: 1010, col: 37, offset: 35843},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 42, offset: 35848},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 52, offset: 35858},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 83, offset: 35889},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 36072},
						run: (*parser).callonSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 36072},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1012, col: 5, offset: 36072},
									expr: &litMatcher{
										pos:        position{line: 1012, col: 6, offset: 36073},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 11, offset: 36078},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 15, offset: 36082},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1012, col: 25, offset: 36092},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1012, col: 25, offset: 36092},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1012, col: 29, offset: 36096},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 60, offset: 36127},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1016, col: 1, offset: 36330},
			expr: &seqExpr{
				pos: position{line: 1016, col: 34, offset: 36363},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1016, col: 34, offset: 36363},
						expr: &ruleRefExpr{
							pos:  position{line: 1016, col: 35, offset: 36364},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1016, col: 41, offset: 36370},
						expr: &ruleRefExpr{
							pos:  position{line: 1016, col: 41, offset: 36370},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1018, col: 1, offset: 36401},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 33, offset: 36433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1018, col: 33, offset: 36433},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 11, offset: 36449},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1020, col: 11, offset: 36481},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1020, col: 11, offset: 36481},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 11, offset: 36481},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1020, col: 18, offset: 36488},
								expr: &seqExpr{
									pos: position{line: 1020, col: 19, offset: 36489},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1020, col: 19, offset: 36489},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1020, col: 23, offset: 36493},
											expr: &litMatcher{
												pos:        position{line: 1020, col: 24, offset: 36494},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 11, offset: 36510},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 11, offset: 36530},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 11, offset: 36554},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 11, offset: 36578},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 11, offset: 36604},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 11, offset: 36627},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 11, offset: 36644},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 11, offset: 36673},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 11, offset: 36713},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 11, offset: 36758},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1032, col: 1, offset: 36798},
			expr: &actionExpr{
				pos: position{line: 1032, col: 39, offset: 36836},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 39, offset: 36836},
					expr: &charClassMatcher{
						pos:        position{line: 1032, col: 39, offset: 36836},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1036, col: 1, offset: 37070},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 37117},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1037, col: 5, offset: 37117},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1038, col: 7, offset: 37216},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1038, col: 7, offset: 37216},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1038, col: 7, offset: 37216},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1038, col: 11, offset: 37220},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1042, col: 1, offset: 37386},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 37412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 37412},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 37412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 37412},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 18, offset: 37425},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1043, col: 40, offset: 37447},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 45, offset: 37452},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 55, offset: 37462},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1043, col: 86, offset: 37493},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1045, col: 9, offset: 37650},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1045, col: 9, offset: 37650},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1045, col: 9, offset: 37650},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 22, offset: 37663},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 44, offset: 37685},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1045, col: 49, offset: 37690},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 59, offset: 37700},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 90, offset: 37731},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 9, offset: 37931},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1048, col: 9, offset: 37931},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1048, col: 9, offset: 37931},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 22, offset: 37944},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 44, offset: 37966},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 48, offset: 37970},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 58, offset: 37980},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 89, offset: 38011},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1055, col: 1, offset: 38221},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 18, offset: 38238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1055, col: 18, offset: 38238},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 45, offset: 38265},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1057, col: 1, offset: 38291},
			expr: &actionExpr{
				pos: position{line: 1057, col: 29, offset: 38319},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 29, offset: 38319},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1057, col: 29, offset: 38319},
							expr: &litMatcher{
								pos:        position{line: 1057, col: 30, offset: 38320},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1057, col: 35, offset: 38325},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 40, offset: 38330},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 50, offset: 38340},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1057, col: 84, offset: 38374},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1061, col: 1, offset: 38504},
			expr: &seqExpr{
				pos: position{line: 1061, col: 37, offset: 38540},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1061, col: 37, offset: 38540},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1061, col: 69, offset: 38572},
						expr: &seqExpr{
							pos: position{line: 1061, col: 70, offset: 38573},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 70, offset: 38573},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 72, offset: 38575},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1061, col: 79, offset: 38582},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1061, col: 79, offset: 38582},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1061, col: 87, offset: 38590},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1063, col: 1, offset: 38659},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 36, offset: 38694},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1063, col: 36, offset: 38694},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 38710},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 38746},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 38765},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 38787},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 38811},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 38837},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 38860},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 11, offset: 38876},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 38905},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 38953},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1075, col: 1, offset: 38996},
			expr: &actionExpr{
				pos: position{line: 1075, col: 42, offset: 39037},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1075, col: 42, offset: 39037},
					expr: &seqExpr{
						pos: position{line: 1075, col: 43, offset: 39038},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1075, col: 43, offset: 39038},
								expr: &litMatcher{
									pos:        position{line: 1075, col: 44, offset: 39039},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1075, col: 49, offset: 39044},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1079, col: 1, offset: 39115},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 39165},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1080, col: 5, offset: 39165},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1081, col: 7, offset: 39267},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1081, col: 7, offset: 39267},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 7, offset: 39267},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1081, col: 12, offset: 39272},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1085, col: 1, offset: 39440},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 29, offset: 39468},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 29, offset: 39468},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1085, col: 29, offset: 39468},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1085, col: 30, offset: 39469},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1085, col: 30, offset: 39469},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 31, offset: 39470},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1085, col: 35, offset: 39474},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1085, col: 39, offset: 39478},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 40, offset: 39479},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 45, offset: 39484},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 55, offset: 39494},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 89, offset: 39528},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 39714},
						run: (*parser).callonSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 1087, col: 5, offset: 39714},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1087, col: 5, offset: 39714},
									expr: &litMatcher{
										pos:        position{line: 1087, col: 6, offset: 39715},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 11, offset: 39720},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 15, offset: 39724},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1087, col: 25, offset: 39734},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1087, col: 25, offset: 39734},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1087, col: 29, offset: 39738},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 63, offset: 39772},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1091, col: 1, offset: 39981},
			expr: &seqExpr{
				pos: position{line: 1091, col: 37, offset: 40017},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1091, col: 37, offset: 40017},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 38, offset: 40018},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1091, col: 44, offset: 40024},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 44, offset: 40024},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1093, col: 1, offset: 40058},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 37, offset: 40094},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 37, offset: 40094},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 40110},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1095, col: 11, offset: 40146},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1095, col: 11, offset: 40146},
								expr: &ruleRefExpr{
									pos:  position{line: 1095, col: 11, offset: 40146},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1095, col: 18, offset: 40153},
								expr: &seqExpr{
									pos: position{line: 1095, col: 19, offset: 40154},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1095, col: 19, offset: 40154},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1095, col: 23, offset: 40158},
											expr: &litMatcher{
												pos:        position{line: 1095, col: 24, offset: 40159},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 40287},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 40325},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 40344},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 40365},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 40389},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 40415},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 40438},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 40454},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 40483},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 11, offset: 40523},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 11, offset: 40571},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1108, col: 1, offset: 40614},
			expr: &actionExpr{
				pos: position{line: 1108, col: 42, offset: 40655},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1108, col: 42, offset: 40655},
					expr: &charClassMatcher{
						pos:        position{line: 1108, col: 42, offset: 40655},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1112, col: 1, offset: 40881},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 5, offset: 40931},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1113, col: 5, offset: 40931},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1114, col: 7, offset: 41033},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1114, col: 7, offset: 41033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 7, offset: 41033},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 11, offset: 41037},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1118, col: 1, offset: 41206},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 41235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1119, col: 5, offset: 41235},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1119, col: 5, offset: 41235},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1119, col: 5, offset: 41235},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 18, offset: 41248},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 40, offset: 41270},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 45, offset: 41275},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 55, offset: 41285},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 89, offset: 41319},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 9, offset: 41476},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1121, col: 9, offset: 41476},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 9, offset: 41476},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 22, offset: 41489},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 44, offset: 41511},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 49, offset: 41516},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 59, offset: 41526},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 93, offset: 41560},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1124, col: 9, offset: 41760},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1124, col: 9, offset: 41760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 9, offset: 41760},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 22, offset: 41773},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 44, offset: 41795},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 48, offset: 41799},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 58, offset: 41809},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 92, offset: 41843},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1128, col: 1, offset: 41993},
			expr: &actionExpr{
				pos: position{line: 1128, col: 18, offset: 42010},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 18, offset: 42010},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1128, col: 18, offset: 42010},
							expr: &litMatcher{
								pos:        position{line: 1128, col: 19, offset: 42011},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 23, offset: 42015},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 27, offset: 42019},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 36, offset: 42028},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 58, offset: 42050},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1132, col: 1, offset: 42139},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 25, offset: 42163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 25, offset: 42163},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 38, offset: 42176},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1134, col: 1, offset: 42195},
			expr: &actionExpr{
				pos: position{line: 1134, col: 21, offset: 42215},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1134, col: 21, offset: 42215},
					expr: &charClassMatcher{
						pos:        position{line: 1134, col: 21, offset: 42215},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1138, col: 1, offset: 42292},
			expr: &actionExpr{
				pos: position{line: 1138, col: 25, offset: 42316},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 25, offset: 42316},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1138, col: 25, offset: 42316},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 38, offset: 42329},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1138, col: 60, offset: 42351},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1138, col: 64, offset: 42355},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 73, offset: 42364},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1138, col: 95, offset: 42386},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1142, col: 1, offset: 42515},
			expr: &actionExpr{
				pos: position{line: 1142, col: 20, offset: 42534},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 20, offset: 42534},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1142, col: 20, offset: 42534},
							expr: &litMatcher{
								pos:        position{line: 1142, col: 21, offset: 42535},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1142, col: 25, offset: 42539},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 29, offset: 42543},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 38, offset: 42552},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1142, col: 62, offset: 42576},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1146, col: 1, offset: 42667},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 27, offset: 42693},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 27, offset: 42693},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 40, offset: 42706},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1148, col: 1, offset: 42727},
			expr: &actionExpr{
				pos: position{line: 1148, col: 23, offset: 42749},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1148, col: 23, offset: 42749},
					expr: &charClassMatcher{
						pos:        position{line: 1148, col: 23, offset: 42749},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1152, col: 1, offset: 42826},
			expr: &actionExpr{
				pos: position{line: 1152, col: 27, offset: 42852},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 27, offset: 42852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1152, col: 27, offset: 42852},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 40, offset: 42865},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1152, col: 62, offset: 42887},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 66, offset: 42891},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 75, offset: 42900},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1152, col: 99, offset: 42924},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1159, col: 1, offset: 43166},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 22, offset: 43187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 22, offset: 43187},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 46, offset: 43211},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 70, offset: 43235},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1161, col: 1, offset: 43253},
			expr: &litMatcher{
				pos:        position{line: 1161, col: 32, offset: 43284},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1163, col: 1, offset: 43289},
			expr: &actionExpr{
				pos: position{line: 1163, col: 26, offset: 43314},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 26, offset: 43314},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1163, col: 26, offset: 43314},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 54, offset: 43342},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 63, offset: 43351},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1163, col: 93, offset: 43381},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1163, col: 121, offset: 43409},
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 122, offset: 43410},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1167, col: 1, offset: 43515},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 33, offset: 43547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1167, col: 34, offset: 43548},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1167, col: 34, offset: 43548},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1167, col: 35, offset: 43549},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1167, col: 35, offset: 43549},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 36, offset: 43550},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1167, col: 64, offset: 43578},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 65, offset: 43579},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1167, col: 71, offset: 43585},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 72, offset: 43586},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1167, col: 80, offset: 43594,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1167, col: 83, offset: 43597},
									expr: &seqExpr{
										pos: position{line: 1167, col: 84, offset: 43598},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1167, col: 84, offset: 43598},
												expr: &seqExpr{
													pos: position{line: 1167, col: 86, offset: 43600},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1167, col: 86, offset: 43600},
															expr: &ruleRefExpr{
																pos:  position{line: 1167, col: 86, offset: 43600},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 93, offset: 43607},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1167, col: 122, offset: 43636},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 123, offset: 43637},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1167, col: 151, offset: 43665},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 152, offset: 43666},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1167, col: 160, offset: 43674,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 7, offset: 43816},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1169, col: 8, offset: 43817},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1169, col: 8, offset: 43817},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 9, offset: 43818},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1169, col: 15, offset: 43824},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 16, offset: 43825},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1169, col: 24, offset: 43833},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 25, offset: 43834},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1169, col: 53, offset: 43862,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1173, col: 1, offset: 43944},
			expr: &litMatcher{
				pos:        position{line: 1173, col: 32, offset: 43975},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1175, col: 1, offset: 43982},
			expr: &actionExpr{
				pos: position{line: 1175, col: 26, offset: 44007},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 26, offset: 44007},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1175, col: 26, offset: 44007},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 54, offset: 44035},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 63, offset: 44044},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 93, offset: 44074},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1175, col: 121, offset: 44102},
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 122, offset: 44103},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1179, col: 1, offset: 44208},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 33, offset: 44240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1179, col: 34, offset: 44241},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1179, col: 34, offset: 44241},
							expr: &seqExpr{
								pos: position{line: 1179, col: 35, offset: 44242},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1179, col: 35, offset: 44242},
										expr: &ruleRefExpr{
											pos:  position{line: 1179, col: 36, offset: 44243},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1179, col: 64, offset: 44271,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1181, col: 7, offset: 44436},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1181, col: 7, offset: 44436},
							expr: &seqExpr{
								pos: position{line: 1181, col: 8, offset: 44437},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1181, col: 8, offset: 44437},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 9, offset: 44438},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1181, col: 15, offset: 44444},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 16, offset: 44445},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1181, col: 24, offset: 44453},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 25, offset: 44454},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1181, col: 53, offset: 44482,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1185, col: 1, offset: 44565},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 21, offset: 44585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1185, col: 21, offset: 44585},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1185, col: 21, offset: 44585},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1185, col: 21, offset: 44585},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 30, offset: 44594},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1185, col: 38, offset: 44602},
										expr: &ruleRefExpr{
											pos:  position{line: 1185, col: 39, offset: 44603},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1185, col: 67, offset: 44631},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 44727},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 44727},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1187, col: 5, offset: 44727},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 15, offset: 44737},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1187, col: 23, offset: 44745},
										expr: &choiceExpr{
											pos: position{line: 1187, col: 24, offset: 44746},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1187, col: 24, offset: 44746},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1187, col: 37, offset: 44759},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 65, offset: 44787},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1191, col: 1, offset: 44883},
			expr: &actionExpr{
				pos: position{line: 1191, col: 30, offset: 44912},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1191, col: 30, offset: 44912},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1198, col: 1, offset: 45085},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 19, offset: 45103},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 19, offset: 45103},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 44, offset: 45128},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1200, col: 1, offset: 45153},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 27, offset: 45179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1200, col: 27, offset: 45179},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1200, col: 27, offset: 45179},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 27, offset: 45179},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 32, offset: 45184},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 36, offset: 45188},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1200, col: 40, offset: 45192},
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 40, offset: 45192},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 47, offset: 45199},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 51, offset: 45203},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 58, offset: 45210},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 79, offset: 45231},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1202, col: 5, offset: 45314},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1202, col: 5, offset: 45314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1202, col: 5, offset: 45314},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1202, col: 10, offset: 45319},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1202, col: 14, offset: 45323},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1202, col: 18, offset: 45327},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1206, col: 1, offset: 45399},
			expr: &actionExpr{
				pos: position{line: 1206, col: 27, offset: 45425},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 27, offset: 45425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1206, col: 27, offset: 45425},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 35, offset: 45433},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 40, offset: 45438},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 54, offset: 45452},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 72, offset: 45470},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1210, col: 1, offset: 45600},
			expr: &ruleRefExpr{
				pos:  position{line: 1210, col: 24, offset: 45623},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1215, col: 1, offset: 45745},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 9, offset: 45753},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 9, offset: 45753},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 24, offset: 45768},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1218, col: 1, offset: 45849},
			expr: &actionExpr{
				pos: position{line: 1218, col: 17, offset: 45865},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 17, offset: 45865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1218, col: 17, offset: 45865},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 25, offset: 45873},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 30, offset: 45878},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 40, offset: 45888},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 58, offset: 45906},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1222, col: 1, offset: 46024},
			expr: &actionExpr{
				pos: position{line: 1222, col: 17, offset: 46040},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 17, offset: 46040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1222, col: 17, offset: 46040},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 22, offset: 46045},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 42, offset: 46065},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1222, col: 59, offset: 46082},
								expr: &ruleRefExpr{
									pos:  position{line: 1222, col: 60, offset: 46083},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1226, col: 1, offset: 46176},
			expr: &actionExpr{
				pos: position{line: 1226, col: 19, offset: 46194},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 19, offset: 46194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1226, col: 19, offset: 46194},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 23, offset: 46198},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1226, col: 33, offset: 46208},
								expr: &ruleRefExpr{
									pos:  position{line: 1226, col: 34, offset: 46209},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1227, col: 5, offset: 46241},
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 5, offset: 46241},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 12, offset: 46248},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1227, col: 23, offset: 46259},
								expr: &ruleRefExpr{
									pos:  position{line: 1227, col: 24, offset: 46260},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1227, col: 43, offset: 46279},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1231, col: 1, offset: 46396},
			expr: &actionExpr{
				pos: position{line: 1231, col: 30, offset: 46425},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 30, offset: 46425},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1233, col: 5, offset: 46476},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1233, col: 6, offset: 46477},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1233, col: 6, offset: 46477},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1233, col: 6, offset: 46477},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1233, col: 11, offset: 46482},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1233, col: 20, offset: 46491},
												expr: &choiceExpr{
													pos: position{line: 1233, col: 21, offset: 46492},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1233, col: 21, offset: 46492},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1233, col: 34, offset: 46505},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1233, col: 56, offset: 46527},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1233, col: 61, offset: 46532},
											expr: &notExpr{
												pos: position{line: 1233, col: 63, offset: 46534},
												expr: &litMatcher{
													pos:        position{line: 1233, col: 64, offset: 46535},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1233, col: 69, offset: 46540},
											expr: &litMatcher{
												pos:        position{line: 1233, col: 69, offset: 46540},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1237, col: 6, offset: 46667},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1237, col: 6, offset: 46667},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1237, col: 6, offset: 46667},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1237, col: 15, offset: 46676},
												expr: &choiceExpr{
													pos: position{line: 1237, col: 16, offset: 46677},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1237, col: 16, offset: 46677},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1237, col: 29, offset: 46690},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1237, col: 53, offset: 46714},
											expr: &notExpr{
												pos: position{line: 1237, col: 55, offset: 46716},
												expr: &litMatcher{
													pos:        position{line: 1237, col: 56, offset: 46717},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1237, col: 61, offset: 46722},
											expr: &litMatcher{
												pos:        position{line: 1237, col: 61, offset: 46722},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1243, col: 1, offset: 46836},
			expr: &actionExpr{
				pos: position{line: 1243, col: 18, offset: 46853},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1243, col: 18, offset: 46853},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1247, col: 1, offset: 46939},
			expr: &actionExpr{
				pos: position{line: 1247, col: 24, offset: 46962},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1247, col: 24, offset: 46962},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1251, col: 1, offset: 47055},
			expr: &actionExpr{
				pos: position{line: 1251, col: 26, offset: 47080},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1251, col: 26, offset: 47080},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1256, col: 1, offset: 47237},
			expr: &actionExpr{
				pos: position{line: 1257, col: 5, offset: 47257},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 5, offset: 47257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1257, col: 5, offset: 47257},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1257, col: 14, offset: 47266},
								expr: &choiceExpr{
									pos: position{line: 1257, col: 15, offset: 47267},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1257, col: 15, offset: 47267},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1258, col: 11, offset: 47282},
											expr: &ruleRefExpr{
												pos:  position{line: 1258, col: 11, offset: 47282},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 47300},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1260, col: 11, offset: 47324},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1261, col: 11, offset: 47346},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1262, col: 11, offset: 47364},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1262, col: 21, offset: 47374},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1266, col: 1, offset: 47444},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 17, offset: 47460},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 17, offset: 47460},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 40, offset: 47483},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1269, col: 1, offset: 47619},
			expr: &actionExpr{
				pos: position{line: 1269, col: 25, offset: 47643},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 25, offset: 47643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1269, col: 25, offset: 47643},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 33, offset: 47651},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1269, col: 38, offset: 47656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 38, offset: 47656},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 57, offset: 47675},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 79, offset: 47697},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 97, offset: 47715},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1273, col: 1, offset: 47833},
			expr: &actionExpr{
				pos: position{line: 1273, col: 25, offset: 47857},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 25, offset: 47857},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1273, col: 25, offset: 47857},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 30, offset: 47862},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 48, offset: 47880},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1273, col: 65, offset: 47897},
								expr: &ruleRefExpr{
									pos:  position{line: 1273, col: 66, offset: 47898},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1280, col: 1, offset: 48093},
			expr: &actionExpr{
				pos: position{line: 1280, col: 15, offset: 48107},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 15, offset: 48107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 15, offset: 48107},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1280, col: 26, offset: 48118},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 27, offset: 48119},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1280, col: 47, offset: 48139},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 57, offset: 48149},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 63, offset: 48155},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 73, offset: 48165},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 91, offset: 48183},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1280, col: 108, offset: 48200},
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 108, offset: 48200},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1280, col: 115, offset: 48207},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1284, col: 1, offset: 48326},
			expr: &actionExpr{
				pos: position{line: 1284, col: 16, offset: 48341},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 16, offset: 48341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1284, col: 16, offset: 48341},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1284, col: 25, offset: 48350},
							expr: &litMatcher{
								pos:        position{line: 1284, col: 26, offset: 48351},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 30, offset: 48355},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 36, offset: 48361},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 46, offset: 48371},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 64, offset: 48389},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1288, col: 1, offset: 48510},
			expr: &actionExpr{
				pos: position{line: 1288, col: 20, offset: 48529},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 20, offset: 48529},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1288, col: 20, offset: 48529},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 24, offset: 48533},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 28, offset: 48537},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 29, offset: 48538},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 56, offset: 48565},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 56, offset: 48565},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 61, offset: 48570},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 67, offset: 48576},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 68, offset: 48577},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 95, offset: 48604},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 95, offset: 48604},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 100, offset: 48609},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 107, offset: 48616},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 108, offset: 48617},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 135, offset: 48644},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 135, offset: 48644},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1288, col: 140, offset: 48649},
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 140, offset: 48649},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 147, offset: 48656},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1288, col: 158, offset: 48667},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 159, offset: 48668},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1288, col: 178, offset: 48687},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1295, col: 1, offset: 48977},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 19, offset: 48995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1295, col: 19, offset: 48995},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1295, col: 19, offset: 48995},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 19, offset: 48995},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1295, col: 32, offset: 49008},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 41, offset: 49017},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1295, col: 58, offset: 49034},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 49102},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1297, col: 5, offset: 49102},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 5, offset: 49102},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1297, col: 17, offset: 49114},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1297, col: 22, offset: 49119},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 35, offset: 49132},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1297, col: 39, offset: 49136},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1297, col: 47, offset: 49144},
										expr: &ruleRefExpr{
											pos:  position{line: 1297, col: 48, offset: 49145},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 66, offset: 49163},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1301, col: 1, offset: 49224},
			expr: &ruleRefExpr{
				pos:  position{line: 1301, col: 16, offset: 49239},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1303, col: 1, offset: 49250},
			expr: &actionExpr{
				pos: position{line: 1303, col: 20, offset: 49269},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1303, col: 20, offset: 49269},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1303, col: 29, offset: 49278},
						expr: &seqExpr{
							pos: position{line: 1303, col: 30, offset: 49279},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1303, col: 30, offset: 49279},
									expr: &litMatcher{
										pos:        position{line: 1303, col: 31, offset: 49280},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1303, col: 35, offset: 49284},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1310, col: 1, offset: 49608},
			expr: &actionExpr{
				pos: position{line: 1310, col: 19, offset: 49626},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 19, offset: 49626},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1310, col: 19, offset: 49626},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 20, offset: 49627},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1311, col: 5, offset: 49715},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1311, col: 12, offset: 49722},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1311, col: 12, offset: 49722},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 49745},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 49769},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 11, offset: 49793},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 11, offset: 49815},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 11, offset: 49837},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 11, offset: 49860},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1318, col: 11, offset: 49888},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1319, col: 11, offset: 49915},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 11, offset: 49931},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1324, col: 1, offset: 49972},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 19, offset: 49990},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1324, col: 19, offset: 49990},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1324, col: 19, offset: 49990},
								expr: &ruleRefExpr{
									pos:  position{line: 1324, col: 21, offset: 49992},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1324, col: 31, offset: 50002},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 19, offset: 50073},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 19, offset: 50113},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 19, offset: 50154},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 19, offset: 50195},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 19, offset: 50236},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 19, offset: 50274},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 19, offset: 50314},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1333, col: 1, offset: 50341},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 20, offset: 50360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 20, offset: 50360},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 36, offset: 50376},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1335, col: 1, offset: 50390},
			expr: &actionExpr{
				pos: position{line: 1335, col: 17, offset: 50406},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 17, offset: 50406},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1335, col: 17, offset: 50406},
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 18, offset: 50407},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 22, offset: 50411},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 31, offset: 50420},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 52, offset: 50441},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1335, col: 61, offset: 50450},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 62, offset: 50451},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1335, col: 73, offset: 50462},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1339, col: 1, offset: 50532},
			expr: &actionExpr{
				pos: position{line: 1339, col: 24, offset: 50555},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1339, col: 24, offset: 50555},
					expr: &seqExpr{
						pos: position{line: 1339, col: 25, offset: 50556},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1339, col: 25, offset: 50556},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 26, offset: 50557},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1339, col: 36, offset: 50567},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1339, col: 36, offset: 50567},
										expr: &ruleRefExpr{
											pos:  position{line: 1339, col: 36, offset: 50567},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1339, col: 45, offset: 50576},
										expr: &charClassMatcher{
											pos:        position{line: 1339, col: 45, offset: 50576},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1343, col: 1, offset: 50626},
			expr: &oneOrMoreExpr{
				pos: position{line: 1343, col: 13, offset: 50638},
				expr: &ruleRefExpr{
					pos:  position{line: 1343, col: 13, offset: 50638},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1345, col: 1, offset: 50648},
			expr: &actionExpr{
				pos: position{line: 1345, col: 12, offset: 50659},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 12, offset: 50659},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1345, col: 12, offset: 50659},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 16, offset: 50663},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1345, col: 21, offset: 50668},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1345, col: 21, offset: 50668},
									expr: &charClassMatcher{
										pos:        position{line: 1345, col: 21, offset: 50668},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1345, col: 69, offset: 50716},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1345, col: 73, offset: 50720},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 73, offset: 50720},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1345, col: 80, offset: 50727},
							expr: &choiceExpr{
								pos: position{line: 1345, col: 82, offset: 50729},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1345, col: 82, offset: 50729},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 88, offset: 50735},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1349, col: 1, offset: 50788},
			expr: &actionExpr{
				pos: position{line: 1349, col: 20, offset: 50807},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 20, offset: 50807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 20, offset: 50807},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 25, offset: 50812},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 48, offset: 50835},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1349, col: 61, offset: 50848},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 61, offset: 50848},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1353, col: 1, offset: 50945},
			expr: &actionExpr{
				pos: position{line: 1353, col: 26, offset: 50970},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 26, offset: 50970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1353, col: 26, offset: 50970},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 30, offset: 50974},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1353, col: 35, offset: 50979},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1353, col: 35, offset: 50979},
									expr: &charClassMatcher{
										pos:        position{line: 1353, col: 35, offset: 50979},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1353, col: 83, offset: 51027},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1353, col: 87, offset: 51031},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 87, offset: 51031},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1360, col: 1, offset: 51258},
			expr: &seqExpr{
				pos: position{line: 1360, col: 25, offset: 51282},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1360, col: 25, offset: 51282},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1360, col: 31, offset: 51288},
						expr: &ruleRefExpr{
							pos:  position{line: 1360, col: 31, offset: 51288},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 38, offset: 51295},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1362, col: 1, offset: 51355},
			expr: &seqExpr{
				pos: position{line: 1362, col: 30, offset: 51384},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1362, col: 30, offset: 51384},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1362, col: 36, offset: 51390},
						expr: &ruleRefExpr{
							pos:  position{line: 1362, col: 36, offset: 51390},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 43, offset: 51397},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1364, col: 1, offset: 51402},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 28, offset: 51429},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1364, col: 29, offset: 51430},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1364, col: 29, offset: 51430},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1364, col: 35, offset: 51436},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 35, offset: 51436},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1364, col: 42, offset: 51443},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 49, offset: 51450},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1366, col: 1, offset: 51455},
			expr: &actionExpr{
				pos: position{line: 1366, col: 16, offset: 51470},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 16, offset: 51470},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1366, col: 16, offset: 51470},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1366, col: 27, offset: 51481},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 28, offset: 51482},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1366, col: 48, offset: 51502},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 74, offset: 51528},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 83, offset: 51537},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1366, col: 111, offset: 51565},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1370, col: 1, offset: 51680},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1370, col: 31, offset: 51710},
				expr: &actionExpr{
					pos: position{line: 1370, col: 32, offset: 51711},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1370, col: 32, offset: 51711},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1370, col: 32, offset: 51711},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 33, offset: 51712},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1370, col: 57, offset: 51736},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 66, offset: 51745},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1377, col: 1, offset: 52082},
			expr: &seqExpr{
				pos: position{line: 1377, col: 26, offset: 52107},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1377, col: 26, offset: 52107},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1377, col: 33, offset: 52114},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 33, offset: 52114},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 40, offset: 52121},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1379, col: 1, offset: 52126},
			expr: &seqExpr{
				pos: position{line: 1379, col: 31, offset: 52156},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1379, col: 31, offset: 52156},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1379, col: 38, offset: 52163},
						expr: &ruleRefExpr{
							pos:  position{line: 1379, col: 38, offset: 52163},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 45, offset: 52170},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1381, col: 1, offset: 52175},
			expr: &choiceExpr{
				pos: position{line: 1381, col: 29, offset: 52203},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1381, col: 30, offset: 52204},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1381, col: 30, offset: 52204},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1381, col: 37, offset: 52211},
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 37, offset: 52211},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1381, col: 44, offset: 52218},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 51, offset: 52225},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1383, col: 1, offset: 52230},
			expr: &actionExpr{
				pos: position{line: 1383, col: 17, offset: 52246},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 17, offset: 52246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1383, col: 17, offset: 52246},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1383, col: 28, offset: 52257},
								expr: &ruleRefExpr{
									pos:  position{line: 1383, col: 29, offset: 52258},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 49, offset: 52278},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 76, offset: 52305},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 85, offset: 52314},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 114, offset: 52343},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1387, col: 1, offset: 52460},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1387, col: 32, offset: 52491},
				expr: &actionExpr{
					pos: position{line: 1387, col: 33, offset: 52492},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1387, col: 33, offset: 52492},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1387, col: 33, offset: 52492},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 34, offset: 52493},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1387, col: 59, offset: 52518},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 68, offset: 52527},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1394, col: 1, offset: 52864},
			expr: &seqExpr{
				pos: position{line: 1394, col: 26, offset: 52889},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1394, col: 26, offset: 52889},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1394, col: 33, offset: 52896},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 33, offset: 52896},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 40, offset: 52903},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1396, col: 1, offset: 52908},
			expr: &seqExpr{
				pos: position{line: 1396, col: 31, offset: 52938},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1396, col: 31, offset: 52938},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1396, col: 38, offset: 52945},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 38, offset: 52945},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 45, offset: 52952},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1398, col: 1, offset: 52957},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 29, offset: 52985},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1398, col: 30, offset: 52986},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1398, col: 30, offset: 52986},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1398, col: 37, offset: 52993},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 37, offset: 52993},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1398, col: 44, offset: 53000},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 51, offset: 53007},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1400, col: 1, offset: 53012},
			expr: &actionExpr{
				pos: position{line: 1400, col: 17, offset: 53028},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 17, offset: 53028},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 17, offset: 53028},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1400, col: 28, offset: 53039},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 29, offset: 53040},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 49, offset: 53060},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 76, offset: 53087},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 85, offset: 53096},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 114, offset: 53125},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1404, col: 1, offset: 53242},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1404, col: 32, offset: 53273},
				expr: &actionExpr{
					pos: position{line: 1404, col: 33, offset: 53274},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1404, col: 33, offset: 53274},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1404, col: 33, offset: 53274},
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 34, offset: 53275},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1404, col: 59, offset: 53300},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 68, offset: 53309},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1411, col: 1, offset: 53644},
			expr: &seqExpr{
				pos: position{line: 1411, col: 24, offset: 53667},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1411, col: 24, offset: 53667},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1411, col: 31, offset: 53674},
						expr: &ruleRefExpr{
							pos:  position{line: 1411, col: 31, offset: 53674},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 38, offset: 53681},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1413, col: 1, offset: 53711},
			expr: &seqExpr{
				pos: position{line: 1413, col: 29, offset: 53739},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1413, col: 29, offset: 53739},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1413, col: 36, offset: 53746},
						expr: &ruleRefExpr{
							pos:  position{line: 1413, col: 36, offset: 53746},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 43, offset: 53753},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1415, col: 1, offset: 53783},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 27, offset: 53809},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1415, col: 28, offset: 53810},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1415, col: 28, offset: 53810},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1415, col: 35, offset: 53817},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 35, offset: 53817},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1415, col: 42, offset: 53824},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 49, offset: 53831},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1417, col: 1, offset: 53861},
			expr: &actionExpr{
				pos: position{line: 1417, col: 15, offset: 53875},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 15, offset: 53875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 15, offset: 53875},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1417, col: 26, offset: 53886},
								expr: &ruleRefExpr{
									pos:  position{line: 1417, col: 27, offset: 53887},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1417, col: 47, offset: 53907},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 72, offset: 53932},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 81, offset: 53941},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1417, col: 108, offset: 53968},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1421, col: 1, offset: 54081},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1421, col: 30, offset: 54110},
				expr: &actionExpr{
					pos: position{line: 1421, col: 31, offset: 54111},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1421, col: 31, offset: 54111},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1421, col: 31, offset: 54111},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 32, offset: 54112},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1421, col: 55, offset: 54135},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 64, offset: 54144},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1430, col: 1, offset: 54528},
			expr: &actionExpr{
				pos: position{line: 1430, col: 15, offset: 54542},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 15, offset: 54542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1430, col: 15, offset: 54542},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 27, offset: 54554},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1431, col: 5, offset: 54578},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 5, offset: 54764},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 30, offset: 54789},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 39, offset: 54798},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 66, offset: 54825},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1439, col: 1, offset: 54946},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1439, col: 30, offset: 54975},
				expr: &actionExpr{
					pos: position{line: 1439, col: 31, offset: 54976},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1439, col: 31, offset: 54976},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1439, col: 31, offset: 54976},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 32, offset: 54977},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1439, col: 55, offset: 55000},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 64, offset: 55009},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1446, col: 1, offset: 55346},
			expr: &seqExpr{
				pos: position{line: 1446, col: 26, offset: 55371},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1446, col: 26, offset: 55371},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1446, col: 33, offset: 55378},
						expr: &ruleRefExpr{
							pos:  position{line: 1446, col: 33, offset: 55378},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 40, offset: 55385},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1448, col: 1, offset: 55390},
			expr: &seqExpr{
				pos: position{line: 1448, col: 31, offset: 55420},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1448, col: 31, offset: 55420},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1448, col: 38, offset: 55427},
						expr: &ruleRefExpr{
							pos:  position{line: 1448, col: 38, offset: 55427},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 45, offset: 55434},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1450, col: 1, offset: 55439},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 29, offset: 55467},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1450, col: 30, offset: 55468},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1450, col: 30, offset: 55468},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1450, col: 37, offset: 55475},
								expr: &ruleRefExpr{
									pos:  position{line: 1450, col: 37, offset: 55475},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1450, col: 44, offset: 55482},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 51, offset: 55489},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1452, col: 1, offset: 55494},
			expr: &actionExpr{
				pos: position{line: 1452, col: 17, offset: 55510},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 17, offset: 55510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 17, offset: 55510},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 28, offset: 55521},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 29, offset: 55522},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 49, offset: 55542},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 76, offset: 55569},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 85, offset: 55578},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 114, offset: 55607},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1456, col: 1, offset: 55724},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1456, col: 32, offset: 55755},
				expr: &actionExpr{
					pos: position{line: 1456, col: 33, offset: 55756},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1456, col: 33, offset: 55756},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1456, col: 33, offset: 55756},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 34, offset: 55757},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1456, col: 59, offset: 55782},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 68, offset: 55791},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1463, col: 1, offset: 56132},
			expr: &seqExpr{
				pos: position{line: 1463, col: 30, offset: 56161},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1463, col: 30, offset: 56161},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1463, col: 37, offset: 56168},
						expr: &ruleRefExpr{
							pos:  position{line: 1463, col: 37, offset: 56168},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 44, offset: 56175},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1465, col: 1, offset: 56180},
			expr: &seqExpr{
				pos: position{line: 1465, col: 35, offset: 56214},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 35, offset: 56214},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 42, offset: 56221},
						expr: &ruleRefExpr{
							pos:  position{line: 1465, col: 42, offset: 56221},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 49, offset: 56228},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1467, col: 1, offset: 56233},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 33, offset: 56265},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1467, col: 34, offset: 56266},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1467, col: 34, offset: 56266},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1467, col: 41, offset: 56273},
								expr: &ruleRefExpr{
									pos:  position{line: 1467, col: 41, offset: 56273},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1467, col: 48, offset: 56280},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 55, offset: 56287},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1469, col: 1, offset: 56292},
			expr: &actionExpr{
				pos: position{line: 1469, col: 21, offset: 56312},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 21, offset: 56312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1469, col: 21, offset: 56312},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1469, col: 32, offset: 56323},
								expr: &ruleRefExpr{
									pos:  position{line: 1469, col: 33, offset: 56324},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1469, col: 53, offset: 56344},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 84, offset: 56375},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 93, offset: 56384},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1469, col: 126, offset: 56417},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1473, col: 1, offset: 56542},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1473, col: 36, offset: 56577},
				expr: &actionExpr{
					pos: position{line: 1473, col: 37, offset: 56578},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1473, col: 37, offset: 56578},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1473, col: 37, offset: 56578},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 38, offset: 56579},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1473, col: 67, offset: 56608},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 76, offset: 56617},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1481, col: 1, offset: 56963},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1481, col: 23, offset: 56985},
				expr: &ruleRefExpr{
					pos:  position{line: 1481, col: 23, offset: 56985},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1483, col: 1, offset: 57006},
			expr: &actionExpr{
				pos: position{line: 1484, col: 5, offset: 57033},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1484, col: 5, offset: 57033},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1484, col: 5, offset: 57033},
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 6, offset: 57034},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 10, offset: 57038},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1484, col: 19, offset: 57047},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1484, col: 19, offset: 57047},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1485, col: 15, offset: 57072},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 15, offset: 57100},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 15, offset: 57126},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 15, offset: 57157},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 15, offset: 57190},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1490, col: 15, offset: 57221},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1491, col: 15, offset: 57260},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1492, col: 15, offset: 57289},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 15, offset: 57317},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1494, col: 15, offset: 57361},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1495, col: 15, offset: 57399},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1496, col: 15, offset: 57440},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1500, col: 1, offset: 57489},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1500, col: 22, offset: 57510},
				expr: &ruleRefExpr{
					pos:  position{line: 1500, col: 22, offset: 57510},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1502, col: 1, offset: 57530},
			expr: &actionExpr{
				pos: position{line: 1502, col: 22, offset: 57551},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 22, offset: 57551},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1502, col: 22, offset: 57551},
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 23, offset: 57552},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 27, offset: 57556},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1502, col: 36, offset: 57565},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1502, col: 36, offset: 57565},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1502, col: 48, offset: 57577},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1506, col: 1, offset: 57627},
			expr: &actionExpr{
				pos: position{line: 1506, col: 24, offset: 57650},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1506, col: 24, offset: 57650},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1506, col: 30, offset: 57656},
						expr: &ruleRefExpr{
							pos:  position{line: 1506, col: 31, offset: 57657},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1510, col: 1, offset: 57747},
			expr: &actionExpr{
				pos: position{line: 1510, col: 28, offset: 57774},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 28, offset: 57774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 28, offset: 57774},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1510, col: 37, offset: 57783},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 38, offset: 57784},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 54, offset: 57800},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1517, col: 1, offset: 58042},
			expr: &actionExpr{
				pos: position{line: 1517, col: 10, offset: 58051},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 10, offset: 58051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1517, col: 10, offset: 58051},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 21, offset: 58062},
								expr: &ruleRefExpr{
									pos:  position{line: 1517, col: 22, offset: 58063},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1517, col: 42, offset: 58083},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 5, offset: 58102},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 12, offset: 58109},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 13, offset: 58110},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 5, offset: 58132},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1519, col: 11, offset: 58138},
								expr: &ruleRefExpr{
									pos:  position{line: 1519, col: 12, offset: 58139},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1520, col: 6, offset: 58156},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1520, col: 6, offset: 58156},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1520, col: 23, offset: 58173},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1524, col: 1, offset: 58288},
			expr: &seqExpr{
				pos: position{line: 1524, col: 23, offset: 58310},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1524, col: 23, offset: 58310},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1524, col: 27, offset: 58314},
						expr: &ruleRefExpr{
							pos:  position{line: 1524, col: 27, offset: 58314},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1526, col: 1, offset: 58322},
			expr: &seqExpr{
				pos: position{line: 1526, col: 19, offset: 58340},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1526, col: 19, offset: 58340},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1526, col: 26, offset: 58347},
						expr: &ruleRefExpr{
							pos:  position{line: 1526, col: 26, offset: 58347},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 33, offset: 58354},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1529, col: 1, offset: 58422},
			expr: &actionExpr{
				pos: position{line: 1529, col: 20, offset: 58441},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 20, offset: 58441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1529, col: 20, offset: 58441},
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 21, offset: 58442},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 36, offset: 58457},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1529, col: 42, offset: 58463},
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 43, offset: 58464},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 55, offset: 58476},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 59, offset: 58480},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1533, col: 1, offset: 58548},
			expr: &actionExpr{
				pos: position{line: 1533, col: 14, offset: 58561},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 14, offset: 58561},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1533, col: 14, offset: 58561},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 15, offset: 58562},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 30, offset: 58577},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1533, col: 36, offset: 58583},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 37, offset: 58584},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 49, offset: 58596},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1533, col: 53, offset: 58600},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 53, offset: 58600},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1537, col: 1, offset: 58669},
			expr: &actionExpr{
				pos: position{line: 1537, col: 14, offset: 58682},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 14, offset: 58682},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1537, col: 14, offset: 58682},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 33, offset: 58701},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1537, col: 42, offset: 58710},
								expr: &seqExpr{
									pos: position{line: 1537, col: 43, offset: 58711},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1537, col: 43, offset: 58711},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 44, offset: 58712},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1537, col: 63, offset: 58731},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 64, offset: 58732},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1537, col: 68, offset: 58736},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 68, offset: 58736},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1537, col: 75, offset: 58743},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1537, col: 89, offset: 58757},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 89, offset: 58757},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1544, col: 1, offset: 59006},
			expr: &seqExpr{
				pos: position{line: 1544, col: 26, offset: 59031},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1544, col: 26, offset: 59031},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1544, col: 33, offset: 59038},
						expr: &ruleRefExpr{
							pos:  position{line: 1544, col: 33, offset: 59038},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 40, offset: 59045},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1546, col: 1, offset: 59050},
			expr: &seqExpr{
				pos: position{line: 1546, col: 31, offset: 59080},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1546, col: 31, offset: 59080},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1546, col: 38, offset: 59087},
						expr: &ruleRefExpr{
							pos:  position{line: 1546, col: 38, offset: 59087},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1546, col: 45, offset: 59094},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1548, col: 1, offset: 59099},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 29, offset: 59127},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1548, col: 30, offset: 59128},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1548, col: 30, offset: 59128},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1548, col: 37, offset: 59135},
								expr: &ruleRefExpr{
									pos:  position{line: 1548, col: 37, offset: 59135},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1548, col: 44, offset: 59142},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 51, offset: 59149},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1550, col: 1, offset: 59154},
			expr: &actionExpr{
				pos: position{line: 1550, col: 17, offset: 59170},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 17, offset: 59170},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1550, col: 17, offset: 59170},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 44, offset: 59197},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 53, offset: 59206},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1550, col: 83, offset: 59236},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1554, col: 1, offset: 59346},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1554, col: 32, offset: 59377},
				expr: &actionExpr{
					pos: position{line: 1554, col: 33, offset: 59378},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1554, col: 33, offset: 59378},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1554, col: 33, offset: 59378},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 34, offset: 59379},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1554, col: 59, offset: 59404},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 68, offset: 59413},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1558, col: 1, offset: 59554},
			expr: &actionExpr{
				pos: position{line: 1558, col: 22, offset: 59575},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 22, offset: 59575},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1558, col: 22, offset: 59575},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 23, offset: 59576},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1558, col: 45, offset: 59598},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 45, offset: 59598},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1558, col: 52, offset: 59605},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 57, offset: 59610},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 66, offset: 59619},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1558, col: 92, offset: 59645},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1562, col: 1, offset: 59710},
			expr: &actionExpr{
				pos: position{line: 1562, col: 29, offset: 59738},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1562, col: 29, offset: 59738},
					expr: &charClassMatcher{
						pos:        position{line: 1562, col: 29, offset: 59738},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1570, col: 1, offset: 60051},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 17, offset: 60067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1570, col: 17, offset: 60067},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 49, offset: 60099},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 78, offset: 60128},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1572, col: 1, offset: 60164},
			expr: &litMatcher{
				pos:        position{line: 1572, col: 26, offset: 60189},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1575, col: 1, offset: 60261},
			expr: &actionExpr{
				pos: position{line: 1575, col: 31, offset: 60291},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 31, offset: 60291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1575, col: 31, offset: 60291},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1575, col: 42, offset: 60302},
								expr: &ruleRefExpr{
									pos:  position{line: 1575, col: 43, offset: 60303},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 63, offset: 60323},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 70, offset: 60330},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1580, col: 1, offset: 60560},
			expr: &actionExpr{
				pos: position{line: 1581, col: 5, offset: 60600},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 5, offset: 60600},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1581, col: 5, offset: 60600},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1581, col: 16, offset: 60611},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1581, col: 16, offset: 60611},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1581, col: 16, offset: 60611},
											expr: &ruleRefExpr{
												pos:  position{line: 1581, col: 16, offset: 60611},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1581, col: 23, offset: 60618},
											expr: &charClassMatcher{
												pos:        position{line: 1581, col: 23, offset: 60618},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1583, col: 8, offset: 60671},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 5, offset: 60734},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1584, col: 16, offset: 60745},
								expr: &actionExpr{
									pos: position{line: 1585, col: 9, offset: 60755},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1585, col: 9, offset: 60755},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1585, col: 9, offset: 60755},
												expr: &ruleRefExpr{
													pos:  position{line: 1585, col: 10, offset: 60756},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1586, col: 9, offset: 60775},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1586, col: 20, offset: 60786},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1586, col: 20, offset: 60786},
														expr: &charClassMatcher{
															pos:        position{line: 1586, col: 20, offset: 60786},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1588, col: 12, offset: 60847},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1595, col: 1, offset: 61077},
			expr: &actionExpr{
				pos: position{line: 1595, col: 39, offset: 61115},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 39, offset: 61115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1595, col: 39, offset: 61115},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1595, col: 50, offset: 61126},
								expr: &ruleRefExpr{
									pos:  position{line: 1595, col: 51, offset: 61127},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 9, offset: 61155},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1596, col: 31, offset: 61177},
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 31, offset: 61177},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 38, offset: 61184},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 46, offset: 61192},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 53, offset: 61199},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1596, col: 95, offset: 61241},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1596, col: 96, offset: 61242},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1596, col: 96, offset: 61242},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1596, col: 118, offset: 61264},
											expr: &ruleRefExpr{
												pos:  position{line: 1596, col: 118, offset: 61264},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1596, col: 125, offset: 61271},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1596, col: 132, offset: 61278},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1601, col: 1, offset: 61437},
			expr: &actionExpr{
				pos: position{line: 1601, col: 44, offset: 61480},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 44, offset: 61480},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1601, col: 50, offset: 61486},
						expr: &ruleRefExpr{
							pos:  position{line: 1601, col: 51, offset: 61487},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1605, col: 1, offset: 61571},
			expr: &actionExpr{
				pos: position{line: 1606, col: 5, offset: 61626},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1606, col: 5, offset: 61626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1606, col: 5, offset: 61626},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1606, col: 11, offset: 61632},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1606, col: 11, offset: 61632},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1606, col: 11, offset: 61632},
											expr: &ruleRefExpr{
												pos:  position{line: 1606, col: 12, offset: 61633},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1606, col: 34, offset: 61655},
											expr: &charClassMatcher{
												pos:        position{line: 1606, col: 34, offset: 61655},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1608, col: 8, offset: 61708},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1613, col: 1, offset: 61834},
			expr: &actionExpr{
				pos: position{line: 1614, col: 5, offset: 61872},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1614, col: 5, offset: 61872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1614, col: 5, offset: 61872},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1614, col: 16, offset: 61883},
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 17, offset: 61884},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1615, col: 5, offset: 61908},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 5, offset: 62122},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 12, offset: 62129},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1626, col: 1, offset: 62279},
			expr: &actionExpr{
				pos: position{line: 1626, col: 16, offset: 62294},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1626, col: 16, offset: 62294},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1631, col: 1, offset: 62377},
			expr: &actionExpr{
				pos: position{line: 1631, col: 39, offset: 62415},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1631, col: 39, offset: 62415},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1631, col: 45, offset: 62421},
						expr: &ruleRefExpr{
							pos:  position{line: 1631, col: 46, offset: 62422},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1635, col: 1, offset: 62502},
			expr: &actionExpr{
				pos: position{line: 1635, col: 38, offset: 62539},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 38, offset: 62539},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1635, col: 38, offset: 62539},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 39, offset: 62540},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 49, offset: 62550},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1635, col: 58, offset: 62559},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1635, col: 58, offset: 62559},
									expr: &charClassMatcher{
										pos:        position{line: 1635, col: 58, offset: 62559},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1637, col: 4, offset: 62604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1644, col: 1, offset: 62790},
			expr: &actionExpr{
				pos: position{line: 1644, col: 14, offset: 62803},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 14, offset: 62803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1644, col: 14, offset: 62803},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 19, offset: 62808},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 25, offset: 62814},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 43, offset: 62832},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1648, col: 1, offset: 62897},
			expr: &actionExpr{
				pos: position{line: 1648, col: 21, offset: 62917},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1648, col: 21, offset: 62917},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1648, col: 30, offset: 62926},
						expr: &choiceExpr{
							pos: position{line: 1648, col: 31, offset: 62927},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1648, col: 31, offset: 62927},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1648, col: 38, offset: 62934},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1648, col: 51, offset: 62947},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1648, col: 59, offset: 62955},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1648, col: 60, offset: 62956},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1648, col: 60, offset: 62956},
												expr: &litMatcher{
													pos:        position{line: 1648, col: 61, offset: 62957},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1648, col: 66, offset: 62962,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1654, col: 1, offset: 63068},
			expr: &actionExpr{
				pos: position{line: 1654, col: 23, offset: 63090},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 23, offset: 63090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1654, col: 23, offset: 63090},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 29, offset: 63096},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 36, offset: 63103},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1655, col: 5, offset: 63135},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1655, col: 11, offset: 63141},
								expr: &actionExpr{
									pos: position{line: 1655, col: 12, offset: 63142},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1655, col: 12, offset: 63142},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1655, col: 12, offset: 63142},
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 12, offset: 63142},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1655, col: 19, offset: 63149},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1655, col: 23, offset: 63153},
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 23, offset: 63153},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1655, col: 30, offset: 63160},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 39, offset: 63169},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 5, offset: 63227},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1656, col: 11, offset: 63233},
								expr: &actionExpr{
									pos: position{line: 1656, col: 12, offset: 63234},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1656, col: 12, offset: 63234},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1656, col: 12, offset: 63234},
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 12, offset: 63234},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1656, col: 19, offset: 63241},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1656, col: 23, offset: 63245},
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 23, offset: 63245},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1656, col: 30, offset: 63252},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 39, offset: 63261},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1657, col: 5, offset: 63319},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1661, col: 1, offset: 63398},
			expr: &actionExpr{
				pos: position{line: 1661, col: 30, offset: 63427},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1661, col: 30, offset: 63427},
					expr: &choiceExpr{
						pos: position{line: 1661, col: 31, offset: 63428},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1661, col: 31, offset: 63428},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1661, col: 42, offset: 63439},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1668, col: 1, offset: 63588},
			expr: &actionExpr{
				pos: position{line: 1668, col: 14, offset: 63601},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 14, offset: 63601},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1668, col: 14, offset: 63601},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 15, offset: 63602},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 19, offset: 63606},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 19, offset: 63606},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 26, offset: 63613},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1675, col: 1, offset: 63760},
			expr: &charClassMatcher{
				pos:        position{line: 1675, col: 13, offset: 63772},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1677, col: 1, offset: 63782},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 16, offset: 63797},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1677, col: 16, offset: 63797},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 22, offset: 63803},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 28, offset: 63809},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 34, offset: 63815},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 40, offset: 63821},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 46, offset: 63827},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1679, col: 1, offset: 63833},
			expr: &actionExpr{
				pos: position{line: 1679, col: 14, offset: 63846},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1679, col: 14, offset: 63846},
					expr: &charClassMatcher{
						pos:        position{line: 1679, col: 14, offset: 63846},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1683, col: 1, offset: 63892},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 5, offset: 64220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1687, col: 5, offset: 64220},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1687, col: 5, offset: 64220},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1687, col: 5, offset: 64220},
									expr: &charClassMatcher{
										pos:        position{line: 1687, col: 5, offset: 64220},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1687, col: 15, offset: 64230},
									expr: &choiceExpr{
										pos: position{line: 1687, col: 17, offset: 64232},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1687, col: 17, offset: 64232},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1687, col: 30, offset: 64245},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1689, col: 9, offset: 64315},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1689, col: 9, offset: 64315},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1689, col: 9, offset: 64315},
									expr: &charClassMatcher{
										pos:        position{line: 1689, col: 9, offset: 64315},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1689, col: 19, offset: 64325},
									expr: &seqExpr{
										pos: position{line: 1689, col: 20, offset: 64326},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1689, col: 20, offset: 64326},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1689, col: 27, offset: 64333},
												expr: &charClassMatcher{
													pos:        position{line: 1689, col: 27, offset: 64333},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1693, col: 1, offset: 64409},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 5, offset: 64490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1694, col: 5, offset: 64490},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1694, col: 5, offset: 64490},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1694, col: 5, offset: 64490},
									expr: &charClassMatcher{
										pos:        position{line: 1694, col: 5, offset: 64490},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1694, col: 20, offset: 64505},
									expr: &choiceExpr{
										pos: position{line: 1694, col: 22, offset: 64507},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1694, col: 22, offset: 64507},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1694, col: 32, offset: 64517},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 9, offset: 64587},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1699, col: 1, offset: 64687},
			expr: &actionExpr{
				pos: position{line: 1699, col: 12, offset: 64698},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1699, col: 12, offset: 64698},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1703, col: 1, offset: 64763},
			expr: &actionExpr{
				pos: position{line: 1703, col: 17, offset: 64779},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1703, col: 17, offset: 64779},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1703, col: 22, offset: 64784},
						expr: &choiceExpr{
							pos: position{line: 1703, col: 23, offset: 64785},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1703, col: 23, offset: 64785},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1703, col: 34, offset: 64796},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1707, col: 1, offset: 64888},
			expr: &actionExpr{
				pos: position{line: 1707, col: 25, offset: 64912},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1707, col: 25, offset: 64912},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1707, col: 30, offset: 64917},
						expr: &charClassMatcher{
							pos:        position{line: 1707, col: 31, offset: 64918},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1711, col: 1, offset: 64990},
			expr: &actionExpr{
				pos: position{line: 1711, col: 13, offset: 65002},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 13, offset: 65002},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1711, col: 13, offset: 65002},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1711, col: 20, offset: 65009},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 21, offset: 65010},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1711, col: 34, offset: 65023},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1711, col: 39, offset: 65028},
								expr: &choiceExpr{
									pos: position{line: 1711, col: 40, offset: 65029},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1711, col: 40, offset: 65029},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1711, col: 51, offset: 65040},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1715, col: 1, offset: 65136},
			expr: &actionExpr{
				pos: position{line: 1715, col: 23, offset: 65158},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1715, col: 23, offset: 65158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1715, col: 23, offset: 65158},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1715, col: 31, offset: 65166},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1715, col: 43, offset: 65178},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1715, col: 48, offset: 65183},
								expr: &choiceExpr{
									pos: position{line: 1715, col: 49, offset: 65184},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1715, col: 49, offset: 65184},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1715, col: 60, offset: 65195},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1719, col: 1, offset: 65291},
			expr: &oneOrMoreExpr{
				pos: position{line: 1719, col: 13, offset: 65303},
				expr: &charClassMatcher{
					pos:        position{line: 1719, col: 14, offset: 65304},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1721, col: 1, offset: 65438},
			expr: &actionExpr{
				pos: position{line: 1721, col: 21, offset: 65458},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1721, col: 21, offset: 65458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1721, col: 21, offset: 65458},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1721, col: 29, offset: 65466},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1721, col: 41, offset: 65478},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1721, col: 47, offset: 65484},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1726, col: 1, offset: 65732},
			expr: &oneOrMoreExpr{
				pos: position{line: 1726, col: 22, offset: 65753},
				expr: &charClassMatcher{
					pos:        position{line: 1726, col: 23, offset: 65754},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1728, col: 1, offset: 65886},
			expr: &actionExpr{
				pos: position{line: 1728, col: 9, offset: 65894},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1728, col: 9, offset: 65894},
					expr: &charClassMatcher{
						pos:        position{line: 1728, col: 9, offset: 65894},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1732, col: 1, offset: 65942},
			expr: &choiceExpr{
				pos: position{line: 1732, col: 15, offset: 65956},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1732, col: 15, offset: 65956},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 27, offset: 65968},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 40, offset: 65981},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 51, offset: 65992},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 62, offset: 66003},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1734, col: 1, offset: 66014},
			expr: &actionExpr{
				pos: position{line: 1734, col: 7, offset: 66020},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1734, col: 7, offset: 66020},
					expr: &charClassMatcher{
						pos:        position{line: 1734, col: 7, offset: 66020},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1738, col: 1, offset: 66145},
			expr: &actionExpr{
				pos: position{line: 1738, col: 10, offset: 66154},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1738, col: 10, offset: 66154},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1742, col: 1, offset: 66196},
			expr: &actionExpr{
				pos: position{line: 1742, col: 11, offset: 66206},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 11, offset: 66206},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1742, col: 11, offset: 66206},
							expr: &litMatcher{
								pos:        position{line: 1742, col: 11, offset: 66206},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1742, col: 16, offset: 66211},
							expr: &ruleRefExpr{
								pos:  position{line: 1742, col: 16, offset: 66211},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1746, col: 1, offset: 66263},
			expr: &choiceExpr{
				pos: position{line: 1746, col: 10, offset: 66272},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1746, col: 10, offset: 66272},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1746, col: 16, offset: 66278},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1746, col: 16, offset: 66278},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1750, col: 1, offset: 66319},
			expr: &choiceExpr{
				pos: position{line: 1750, col: 12, offset: 66330},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1750, col: 12, offset: 66330},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1750, col: 21, offset: 66339},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1750, col: 28, offset: 66346},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1752, col: 1, offset: 66352},
			expr: &notExpr{
				pos: position{line: 1752, col: 8, offset: 66359},
				expr: &anyMatcher{
					line: 1752, col: 9, offset: 66360,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1754, col: 1, offset: 66363},
			expr: &choiceExpr{
				pos: position{line: 1754, col: 8, offset: 66370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1754, col: 8, offset: 66370},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 18, offset: 66380},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return found && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText16(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText16(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText13(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText13(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
