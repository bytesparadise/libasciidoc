// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 19, col: 1, offset: 374},
			expr: &actionExpr{
				pos: position{line: 19, col: 14, offset: 387},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 19, col: 14, offset: 387},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 19, col: 20, offset: 393},
						expr: &choiceExpr{
							pos: position{line: 19, col: 21, offset: 394},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 19, col: 21, offset: 394},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 44, offset: 417},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 57, offset: 430},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 73, offset: 446},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 24, col: 1, offset: 591},
			expr: &actionExpr{
				pos: position{line: 25, col: 5, offset: 610},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 25, col: 5, offset: 610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 5, offset: 610},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 25, col: 12, offset: 617},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 25, col: 12, offset: 617},
									expr: &litMatcher{
										pos:        position{line: 25, col: 13, offset: 618},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 29, col: 5, offset: 709},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 33, col: 5, offset: 861},
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 5, offset: 861},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 12, offset: 868},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 19, offset: 875},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 36, offset: 892},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 37, col: 1, offset: 962},
			expr: &actionExpr{
				pos: position{line: 37, col: 20, offset: 981},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 37, col: 20, offset: 981},
					expr: &charClassMatcher{
						pos:        position{line: 37, col: 20, offset: 981},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 41, col: 1, offset: 1028},
			expr: &actionExpr{
				pos: position{line: 41, col: 12, offset: 1039},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 41, col: 12, offset: 1039},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 12, offset: 1039},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 13, offset: 1040},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 41, col: 17, offset: 1044},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 41, col: 26, offset: 1053},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 41, col: 26, offset: 1053},
									expr: &charClassMatcher{
										pos:        position{line: 41, col: 26, offset: 1053},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 8, offset: 1108},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 50, col: 1, offset: 1387},
			expr: &actionExpr{
				pos: position{line: 50, col: 16, offset: 1402},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 50, col: 16, offset: 1402},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 50, col: 16, offset: 1402},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 50, col: 29, offset: 1415},
								expr: &ruleRefExpr{
									pos:  position{line: 50, col: 29, offset: 1415},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 50, col: 43, offset: 1429},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 51, offset: 1437},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 67, offset: 1453},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 57, col: 1, offset: 1642},
			expr: &actionExpr{
				pos: position{line: 57, col: 19, offset: 1660},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 57, col: 19, offset: 1660},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 57, col: 19, offset: 1660},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 19, offset: 1660},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 28, offset: 1669},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 57, col: 36, offset: 1677},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 36, offset: 1677},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 53, offset: 1694},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 57, col: 61, offset: 1702},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 61, offset: 1702},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 66, col: 1, offset: 1951},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 1973},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 67, col: 5, offset: 1973},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 67, col: 5, offset: 1973},
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 6, offset: 1974},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 68, col: 5, offset: 1982},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 68, col: 16, offset: 1993},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 17, offset: 1994},
									name: "BlockAttributes",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 69, col: 5, offset: 2016},
							run: (*parser).callonDocumentBlock8,
						},
						&labeledExpr{
							pos:   position{line: 73, col: 5, offset: 2098},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 74, col: 9, offset: 2114},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 74, col: 9, offset: 2114},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2179},
										name: "SimpleRawParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2208},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2260},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2278},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2303},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2324},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2352},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2368},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2392},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2418},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2447},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2473},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2508},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2532},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2564},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2590},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 91, col: 11, offset: 2627},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 11, offset: 2652},
										name: "RawParagraph",
									},
									&actionExpr{
										pos: position{line: 93, col: 11, offset: 2675},
										run: (*parser).callonDocumentBlock30,
										expr: &ruleRefExpr{
											pos:  position{line: 93, col: 11, offset: 2675},
											name: "EOF",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 3043},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 3058},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 3076},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 3095},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 3095},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 3095},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 3116},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 3124},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 3125},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3150},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3230},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3255},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3255},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3261},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3261},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3268},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3273},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3299},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3299},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3300},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3301},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3301},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3302},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3323,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3489},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3507},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3507},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3511},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3511},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3518},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3525},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3540},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3544},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3544},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3562},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3574},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3575},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 120, col: 10, offset: 3575},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 120, col: 10, offset: 3575},
												expr: &ruleRefExpr{
													pos:  position{line: 120, col: 10, offset: 3575},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 120, col: 17, offset: 3582},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 37, offset: 3602},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3625},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3634},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3634},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3661},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3662},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 122, col: 10, offset: 3662},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 122, col: 10, offset: 3662},
												expr: &ruleRefExpr{
													pos:  position{line: 122, col: 10, offset: 3662},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 122, col: 17, offset: 3669},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 37, offset: 3689},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3712},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3722},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3722},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3823},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3842},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3842},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3870},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3900},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3929},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3929},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3929},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3929},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3936},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3937},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3941},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3950},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3950},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3967},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 4037},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 4069},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 4069},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 4069},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 4069},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 4076},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 4087},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 4095},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 4111},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4190},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4208},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4208},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4208},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4208},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4215},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4225},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4245},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4251},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4252},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4274},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4274},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4281},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4281},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4286},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4286},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4431},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4453},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4453},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4453},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4500},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4523},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4523},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4523},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4527},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4534},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4535},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4535},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4582},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4743},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4763},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4763},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4763},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4763},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4770},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4771},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4775},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4794},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4795},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4795},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4795},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4806},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4830},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4830},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4835},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4843},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4844},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4867},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4867},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4872},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4882},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4883},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 5000},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 5000},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 5000},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 5009},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 5031},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 5031},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 5036},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 5046},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 5047},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 5156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5286},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5312},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5312},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5312},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5312},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5317},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5324},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5324},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5372},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5372},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5372},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5372},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5378},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5385},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5385},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5396},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5396},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5403},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5404},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5444},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5468},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5468},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5468},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5514},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5540},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5540},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5540},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5693},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5717},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5717},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5721},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5727},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5742},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5755},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5761},
								expr: &ruleRefExpr{
									pos:  position{line: 182, col: 16, offset: 5762},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 44, offset: 5790},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 189, col: 1, offset: 6063},
			expr: &actionExpr{
				pos: position{line: 189, col: 18, offset: 6080},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 189, col: 18, offset: 6080},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 189, col: 18, offset: 6080},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 189, col: 28, offset: 6090},
							expr: &charClassMatcher{
								pos:        position{line: 189, col: 29, offset: 6091},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 193, col: 1, offset: 6139},
			expr: &actionExpr{
				pos: position{line: 193, col: 30, offset: 6168},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 193, col: 30, offset: 6168},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 193, col: 30, offset: 6168},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 30, offset: 6168},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 193, col: 37, offset: 6175},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 193, col: 46, offset: 6184},
								expr: &choiceExpr{
									pos: position{line: 194, col: 5, offset: 6190},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 194, col: 6, offset: 6191},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 194, col: 6, offset: 6191},
												expr: &charClassMatcher{
													pos:        position{line: 194, col: 6, offset: 6191},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 197, col: 5, offset: 6270},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 198, col: 6, offset: 6299},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 198, col: 6, offset: 6299},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 205, col: 1, offset: 6466},
			expr: &choiceExpr{
				pos: position{line: 205, col: 19, offset: 6484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 205, col: 19, offset: 6484},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 205, col: 19, offset: 6484},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 205, col: 19, offset: 6484},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 205, col: 24, offset: 6489},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 30, offset: 6495},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 205, col: 45, offset: 6510},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 205, col: 49, offset: 6514},
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 49, offset: 6514},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 205, col: 56, offset: 6521},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 6581},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 6581},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 207, col: 5, offset: 6581},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 207, col: 9, offset: 6585},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 15, offset: 6591},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 207, col: 30, offset: 6606},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 207, col: 35, offset: 6611},
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 35, offset: 6611},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 42, offset: 6618},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 211, col: 1, offset: 6677},
			expr: &choiceExpr{
				pos: position{line: 211, col: 26, offset: 6702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 26, offset: 6702},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 48, offset: 6724},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 213, col: 1, offset: 6733},
			expr: &actionExpr{
				pos: position{line: 213, col: 12, offset: 6744},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 213, col: 12, offset: 6744},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 12, offset: 6744},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 16, offset: 6748},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 21, offset: 6753},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 35, offset: 6767},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 218, col: 1, offset: 6882},
			expr: &choiceExpr{
				pos: position{line: 218, col: 24, offset: 6905},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 24, offset: 6905},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 47, offset: 6928},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 220, col: 1, offset: 7064},
			expr: &actionExpr{
				pos: position{line: 220, col: 25, offset: 7088},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 220, col: 25, offset: 7088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 25, offset: 7088},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 37, offset: 7100},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 42, offset: 7105},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 220, col: 56, offset: 7119},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 220, col: 62, offset: 7125},
								expr: &ruleRefExpr{
									pos:  position{line: 220, col: 63, offset: 7126},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 78, offset: 7141},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 224, col: 1, offset: 7219},
			expr: &actionExpr{
				pos: position{line: 224, col: 25, offset: 7243},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 224, col: 25, offset: 7243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 25, offset: 7243},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 38, offset: 7256},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 43, offset: 7261},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 224, col: 57, offset: 7275},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 224, col: 63, offset: 7281},
								expr: &ruleRefExpr{
									pos:  position{line: 224, col: 64, offset: 7282},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 79, offset: 7297},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 228, col: 1, offset: 7372},
			expr: &actionExpr{
				pos: position{line: 228, col: 17, offset: 7388},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 228, col: 17, offset: 7388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 228, col: 17, offset: 7388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 21, offset: 7392},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 228, col: 28, offset: 7399},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 228, col: 28, offset: 7399},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 228, col: 28, offset: 7399},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 230, col: 9, offset: 7453},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 230, col: 9, offset: 7453},
											expr: &charClassMatcher{
												pos:        position{line: 230, col: 9, offset: 7453},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 236, col: 1, offset: 7550},
			expr: &actionExpr{
				pos: position{line: 236, col: 20, offset: 7569},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 236, col: 20, offset: 7569},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 236, col: 20, offset: 7569},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 25, offset: 7574},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 29, offset: 7578},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 236, col: 33, offset: 7582},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 38, offset: 7587},
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 38, offset: 7587},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 240, col: 1, offset: 7726},
			expr: &actionExpr{
				pos: position{line: 240, col: 27, offset: 7752},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 240, col: 27, offset: 7752},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 240, col: 27, offset: 7752},
							expr: &litMatcher{
								pos:        position{line: 240, col: 28, offset: 7753},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 240, col: 36, offset: 7761},
							expr: &litMatcher{
								pos:        position{line: 240, col: 37, offset: 7762},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 240, col: 45, offset: 7770},
							expr: &litMatcher{
								pos:        position{line: 240, col: 46, offset: 7771},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 240, col: 56, offset: 7781},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 61, offset: 7786},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 240, col: 80, offset: 7805},
							expr: &seqExpr{
								pos: position{line: 240, col: 81, offset: 7806},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 240, col: 81, offset: 7806},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 240, col: 85, offset: 7810},
										expr: &ruleRefExpr{
											pos:  position{line: 240, col: 85, offset: 7810},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 247, col: 1, offset: 8020},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 8044},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 248, col: 5, offset: 8044},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 248, col: 16, offset: 8055},
						expr: &choiceExpr{
							pos: position{line: 250, col: 9, offset: 8122},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 250, col: 10, offset: 8123},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 250, col: 10, offset: 8123},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 250, col: 10, offset: 8123},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 250, col: 18, offset: 8131},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 250, col: 35, offset: 8148},
												expr: &ruleRefExpr{
													pos:  position{line: 250, col: 35, offset: 8148},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 250, col: 42, offset: 8155},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 254, col: 12, offset: 8273},
									run: (*parser).callonBlockAttributes12,
									expr: &seqExpr{
										pos: position{line: 254, col: 12, offset: 8273},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 254, col: 12, offset: 8273},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 254, col: 19, offset: 8280},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 254, col: 35, offset: 8296},
												expr: &ruleRefExpr{
													pos:  position{line: 254, col: 35, offset: 8296},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 254, col: 42, offset: 8303},
												name: "Newline",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 258, col: 12, offset: 8391},
									run: (*parser).callonBlockAttributes19,
									expr: &seqExpr{
										pos: position{line: 258, col: 12, offset: 8391},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 258, col: 12, offset: 8391},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 258, col: 24, offset: 8403},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 258, col: 44, offset: 8423},
												expr: &ruleRefExpr{
													pos:  position{line: 258, col: 44, offset: 8423},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 258, col: 51, offset: 8430},
												name: "Newline",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 265, col: 1, offset: 8570},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8594},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8594},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 266, col: 5, offset: 8594},
							run: (*parser).callonInlineAttributes3,
						},
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 8645},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 5, offset: 8653},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 16, offset: 8664},
								expr: &choiceExpr{
									pos: position{line: 270, col: 17, offset: 8665},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 270, col: 17, offset: 8665},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 37, offset: 8685},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 8706},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 276, col: 1, offset: 8834},
			expr: &actionExpr{
				pos: position{line: 277, col: 4, offset: 8856},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 277, col: 4, offset: 8856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 4, offset: 8856},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 5, offset: 8866},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 279, col: 9, offset: 8879},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 279, col: 9, offset: 8879},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 279, col: 18, offset: 8888},
										expr: &choiceExpr{
											pos: position{line: 280, col: 13, offset: 8902},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 280, col: 14, offset: 8903},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 280, col: 14, offset: 8903},
														expr: &charClassMatcher{
															pos:        position{line: 280, col: 14, offset: 8903},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 283, col: 13, offset: 9070},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 284, col: 13, offset: 9103},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 285, col: 14, offset: 9126},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 285, col: 14, offset: 9126},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 5, offset: 9312},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 296, col: 1, offset: 9413},
			expr: &actionExpr{
				pos: position{line: 296, col: 19, offset: 9431},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 296, col: 19, offset: 9431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 19, offset: 9431},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 23, offset: 9435},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 297, col: 5, offset: 9447},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 297, col: 5, offset: 9447},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 297, col: 5, offset: 9447},
											expr: &charClassMatcher{
												pos:        position{line: 297, col: 6, offset: 9448},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 298, col: 5, offset: 9560},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 298, col: 14, offset: 9569},
												expr: &choiceExpr{
													pos: position{line: 299, col: 9, offset: 9579},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 299, col: 10, offset: 9580},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 299, col: 10, offset: 9580},
																expr: &charClassMatcher{
																	pos:        position{line: 299, col: 10, offset: 9580},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 302, col: 9, offset: 9678},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 303, col: 9, offset: 9707},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 304, col: 10, offset: 9726},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 304, col: 10, offset: 9726},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 315, col: 1, offset: 10126},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 10152},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 10152},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 316, col: 5, offset: 10152},
							run: (*parser).callonLongHandAttributes3,
						},
						&litMatcher{
							pos:        position{line: 319, col: 5, offset: 10203},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10269},
							label: "firstPositionalAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 30, offset: 10294},
								expr: &ruleRefExpr{
									pos:  position{line: 321, col: 31, offset: 10295},
									name: "FirstPositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10326},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 21, offset: 10342},
								expr: &choiceExpr{
									pos: position{line: 322, col: 22, offset: 10343},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 22, offset: 10343},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 44, offset: 10365},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 5, offset: 10386},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttribute",
			pos:  position{line: 334, col: 1, offset: 10843},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 10876},
				run: (*parser).callonFirstPositionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 10876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 335, col: 5, offset: 10876},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 10, offset: 10881},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 9, offset: 10891},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 5, offset: 10921},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 338, col: 12, offset: 10928},
								expr: &choiceExpr{
									pos: position{line: 339, col: 9, offset: 10939},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 339, col: 9, offset: 10939},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 340, col: 11, offset: 10971},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 341, col: 11, offset: 11006},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 342, col: 8, offset: 11039},
							expr: &seqExpr{
								pos: position{line: 342, col: 9, offset: 11040},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 342, col: 9, offset: 11040},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 342, col: 13, offset: 11044},
										expr: &ruleRefExpr{
											pos:  position{line: 342, col: 13, offset: 11044},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 343, col: 5, offset: 11058},
							run: (*parser).callonFirstPositionalAttribute17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 357, col: 1, offset: 11415},
			expr: &actionExpr{
				pos: position{line: 357, col: 25, offset: 11439},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 357, col: 25, offset: 11439},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 25, offset: 11439},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 29, offset: 11443},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 33, offset: 11447},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 365, col: 1, offset: 11610},
			expr: &actionExpr{
				pos: position{line: 365, col: 23, offset: 11632},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 365, col: 23, offset: 11632},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 365, col: 30, offset: 11639},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 374, col: 1, offset: 11857},
			expr: &actionExpr{
				pos: position{line: 374, col: 30, offset: 11886},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 374, col: 30, offset: 11886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 30, offset: 11886},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 34, offset: 11890},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 40, offset: 11896},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 379, col: 1, offset: 12010},
			expr: &actionExpr{
				pos: position{line: 379, col: 29, offset: 12038},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 379, col: 29, offset: 12038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 29, offset: 12038},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 33, offset: 12042},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 41, offset: 12050},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 384, col: 1, offset: 12155},
			expr: &choiceExpr{
				pos: position{line: 385, col: 5, offset: 12187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 385, col: 5, offset: 12187},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 7, offset: 12221},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 387, col: 7, offset: 12255},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 387, col: 7, offset: 12255},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 387, col: 7, offset: 12255},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 387, col: 16, offset: 12264},
										expr: &choiceExpr{
											pos: position{line: 390, col: 5, offset: 12434},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 390, col: 6, offset: 12435},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 390, col: 6, offset: 12435},
														expr: &charClassMatcher{
															pos:        position{line: 390, col: 6, offset: 12435},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 393, col: 5, offset: 12529},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 394, col: 5, offset: 12554},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 395, col: 6, offset: 12569},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 395, col: 6, offset: 12569},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 397, col: 10, offset: 12639},
									expr: &charClassMatcher{
										pos:        position{line: 397, col: 11, offset: 12640},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 401, col: 1, offset: 12716},
			expr: &choiceExpr{
				pos: position{line: 401, col: 24, offset: 12739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 12745},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 402, col: 5, offset: 12745},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 402, col: 5, offset: 12745},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 402, col: 12, offset: 12752},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 402, col: 29, offset: 12769},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 402, col: 29, offset: 12769},
											expr: &seqExpr{
												pos: position{line: 402, col: 30, offset: 12770},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 402, col: 30, offset: 12770},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 402, col: 34, offset: 12774},
														expr: &ruleRefExpr{
															pos:  position{line: 402, col: 34, offset: 12774},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 402, col: 45, offset: 12785},
											expr: &litMatcher{
												pos:        position{line: 402, col: 46, offset: 12786},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 411, col: 6, offset: 13037},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 411, col: 6, offset: 13037},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 411, col: 6, offset: 13037},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 411, col: 13, offset: 13044},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 411, col: 13, offset: 13044},
												expr: &ruleRefExpr{
													pos:  position{line: 411, col: 13, offset: 13044},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 411, col: 21, offset: 13052},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 411, col: 22, offset: 13053},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 411, col: 22, offset: 13053},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 411, col: 26, offset: 13057},
																expr: &ruleRefExpr{
																	pos:  position{line: 411, col: 26, offset: 13057},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 411, col: 36, offset: 13067},
														expr: &litMatcher{
															pos:        position{line: 411, col: 37, offset: 13068},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 412, col: 5, offset: 13078},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 427, col: 1, offset: 13513},
			expr: &actionExpr{
				pos: position{line: 427, col: 19, offset: 13531},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 427, col: 19, offset: 13531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 19, offset: 13531},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 24, offset: 13536},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 43, offset: 13555},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 47, offset: 13559},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 47, offset: 13559},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 54, offset: 13566},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 61, offset: 13573},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 427, col: 77, offset: 13589},
							expr: &seqExpr{
								pos: position{line: 427, col: 78, offset: 13590},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 427, col: 78, offset: 13590},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 427, col: 82, offset: 13594},
										expr: &ruleRefExpr{
											pos:  position{line: 427, col: 82, offset: 13594},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 436, col: 1, offset: 13907},
			expr: &actionExpr{
				pos: position{line: 436, col: 22, offset: 13928},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 436, col: 22, offset: 13928},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 436, col: 22, offset: 13928},
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 23, offset: 13929},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 436, col: 29, offset: 13935},
							expr: &charClassMatcher{
								pos:        position{line: 436, col: 29, offset: 13935},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 42, offset: 13948},
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 42, offset: 13948},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 440, col: 1, offset: 14010},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 14033},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 14033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 14033},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 442, col: 9, offset: 14049},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 442, col: 9, offset: 14049},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 443, col: 11, offset: 14087},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 444, col: 11, offset: 14125},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 446, col: 5, offset: 14159},
							expr: &notExpr{
								pos: position{line: 446, col: 7, offset: 14161},
								expr: &seqExpr{
									pos: position{line: 446, col: 9, offset: 14163},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 446, col: 9, offset: 14163},
											expr: &ruleRefExpr{
												pos:  position{line: 446, col: 9, offset: 14163},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 446, col: 16, offset: 14170},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 450, col: 1, offset: 14211},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 14246},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 14246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 5, offset: 14246},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 14255},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 14, offset: 14264},
								expr: &choiceExpr{
									pos: position{line: 453, col: 9, offset: 14274},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 453, col: 10, offset: 14275},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 453, col: 10, offset: 14275},
												expr: &charClassMatcher{
													pos:        position{line: 453, col: 10, offset: 14275},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 11, offset: 14421},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 11, offset: 14450},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 458, col: 12, offset: 14469},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 458, col: 12, offset: 14469},
													run: (*parser).callonSingleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 458, col: 12, offset: 14469},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 461, col: 11, offset: 14561},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 461, col: 17, offset: 14567},
													run: (*parser).callonSingleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 461, col: 17, offset: 14567},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 465, col: 5, offset: 14656},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 469, col: 1, offset: 14712},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 14747},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 14747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 14747},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 14757},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 471, col: 14, offset: 14766},
								expr: &choiceExpr{
									pos: position{line: 472, col: 9, offset: 14776},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 472, col: 10, offset: 14777},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 472, col: 10, offset: 14777},
												expr: &charClassMatcher{
													pos:        position{line: 472, col: 10, offset: 14777},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 475, col: 11, offset: 14923},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 476, col: 11, offset: 14952},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 477, col: 12, offset: 14971},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 477, col: 12, offset: 14971},
													run: (*parser).callonDoubleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 477, col: 12, offset: 14971},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 480, col: 11, offset: 15063},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 480, col: 17, offset: 15069},
													run: (*parser).callonDoubleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 480, col: 17, offset: 15069},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 484, col: 5, offset: 15158},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 489, col: 1, offset: 15293},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 15324},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 15324},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 490, col: 5, offset: 15324},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 6, offset: 15325},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 15335},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 491, col: 14, offset: 15344},
								expr: &choiceExpr{
									pos: position{line: 492, col: 9, offset: 15354},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 492, col: 10, offset: 15355},
											run: (*parser).callonUnquotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 492, col: 10, offset: 15355},
												expr: &charClassMatcher{
													pos:        position{line: 492, col: 10, offset: 15355},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 495, col: 11, offset: 15457},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 496, col: 11, offset: 15486},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 497, col: 12, offset: 15505},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &litMatcher{
												pos:        position{line: 497, col: 12, offset: 15505},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 501, col: 5, offset: 15593},
							run: (*parser).callonUnquotedAttributeValue15,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 512, col: 1, offset: 15894},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15910},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 513, col: 5, offset: 15910},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 513, col: 12, offset: 15917},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 513, col: 12, offset: 15917},
									expr: &litMatcher{
										pos:        position{line: 513, col: 13, offset: 15918},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 517, col: 5, offset: 16009},
							run: (*parser).callonSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 5, offset: 16161},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 5, offset: 16161},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 12, offset: 16168},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 19, offset: 16175},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 34, offset: 16190},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 38, offset: 16194},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 38, offset: 16194},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 56, offset: 16212},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 525, col: 1, offset: 16337},
			expr: &actionExpr{
				pos: position{line: 525, col: 18, offset: 16354},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 525, col: 18, offset: 16354},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 525, col: 27, offset: 16363},
						expr: &seqExpr{
							pos: position{line: 525, col: 28, offset: 16364},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 525, col: 28, offset: 16364},
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 29, offset: 16365},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 525, col: 37, offset: 16373},
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 38, offset: 16374},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 54, offset: 16390},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 529, col: 1, offset: 16511},
			expr: &actionExpr{
				pos: position{line: 529, col: 17, offset: 16527},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 529, col: 17, offset: 16527},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 529, col: 26, offset: 16536},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 529, col: 26, offset: 16536},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 16551},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 531, col: 11, offset: 16596},
								expr: &ruleRefExpr{
									pos:  position{line: 531, col: 11, offset: 16596},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 16614},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 16643},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 540, col: 1, offset: 16794},
			expr: &seqExpr{
				pos: position{line: 540, col: 31, offset: 16824},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 540, col: 31, offset: 16824},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 41, offset: 16834},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 545, col: 1, offset: 16945},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 16968},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 16968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 16968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 11, offset: 16974},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 547, col: 5, offset: 16994},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 551, col: 5, offset: 17134},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 5, offset: 17144},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 12, offset: 17151},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 17172},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 23, offset: 17190},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 557, col: 1, offset: 17321},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 17345},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 17345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 17345},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 11, offset: 17351},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 559, col: 5, offset: 17371},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 563, col: 5, offset: 17511},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 17520},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 12, offset: 17527},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 17548},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 23, offset: 17566},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 569, col: 1, offset: 17698},
			expr: &actionExpr{
				pos: position{line: 569, col: 18, offset: 17715},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 569, col: 19, offset: 17716},
					expr: &charClassMatcher{
						pos:        position{line: 569, col: 19, offset: 17716},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 573, col: 1, offset: 17765},
			expr: &actionExpr{
				pos: position{line: 573, col: 19, offset: 17783},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 573, col: 19, offset: 17783},
					expr: &charClassMatcher{
						pos:        position{line: 573, col: 19, offset: 17783},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 580, col: 1, offset: 17942},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 17964},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 17964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 5, offset: 17964},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 582, col: 9, offset: 17979},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 582, col: 9, offset: 17979},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 582, col: 9, offset: 17979},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 583, col: 9, offset: 18000},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 583, col: 15, offset: 18006},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 584, col: 9, offset: 18029},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 584, col: 27, offset: 18047},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 588, col: 5, offset: 18207},
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 5, offset: 18207},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 12, offset: 18214},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 592, col: 1, offset: 18274},
			expr: &ruleRefExpr{
				pos:  position{line: 592, col: 26, offset: 18299},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 595, col: 1, offset: 18339},
			expr: &actionExpr{
				pos: position{line: 595, col: 15, offset: 18353},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 595, col: 15, offset: 18353},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 15, offset: 18353},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 595, col: 22, offset: 18360},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 595, col: 22, offset: 18360},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 596, col: 11, offset: 18390},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 597, col: 11, offset: 18416},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 11, offset: 18443},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 602, col: 1, offset: 18525},
			expr: &actionExpr{
				pos: position{line: 602, col: 23, offset: 18547},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 602, col: 23, offset: 18547},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 23, offset: 18547},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 602, col: 30, offset: 18554},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 602, col: 30, offset: 18554},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 602, col: 47, offset: 18571},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 18593},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 603, col: 12, offset: 18600},
								expr: &actionExpr{
									pos: position{line: 604, col: 9, offset: 18610},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 604, col: 9, offset: 18610},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 604, col: 10, offset: 18611},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 604, col: 10, offset: 18611},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 604, col: 16, offset: 18617},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 605, col: 9, offset: 18728},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 605, col: 16, offset: 18735},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 605, col: 16, offset: 18735},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 605, col: 33, offset: 18752},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 611, col: 1, offset: 18894},
			expr: &actionExpr{
				pos: position{line: 611, col: 19, offset: 18912},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 611, col: 19, offset: 18912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 19, offset: 18912},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 26, offset: 18919},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 611, col: 34, offset: 18927},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 39, offset: 18932},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 44, offset: 18937},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 615, col: 1, offset: 19025},
			expr: &actionExpr{
				pos: position{line: 615, col: 20, offset: 19044},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 615, col: 20, offset: 19044},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 615, col: 32, offset: 19056},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 620, col: 1, offset: 19171},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 19184},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 19184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 620, col: 14, offset: 19184},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 21, offset: 19191},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 40, offset: 19210},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 624, col: 1, offset: 19292},
			expr: &actionExpr{
				pos: position{line: 624, col: 22, offset: 19313},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 624, col: 22, offset: 19313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 22, offset: 19313},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 29, offset: 19320},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 19334},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 625, col: 12, offset: 19341},
								expr: &actionExpr{
									pos: position{line: 626, col: 9, offset: 19351},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 626, col: 9, offset: 19351},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 626, col: 10, offset: 19352},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 626, col: 10, offset: 19352},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 626, col: 16, offset: 19358},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 627, col: 9, offset: 19469},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 16, offset: 19476},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 633, col: 1, offset: 19611},
			expr: &choiceExpr{
				pos: position{line: 633, col: 13, offset: 19623},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 13, offset: 19623},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 633, col: 13, offset: 19623},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 633, col: 18, offset: 19628},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 633, col: 18, offset: 19628},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 633, col: 30, offset: 19640},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 19708},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 635, col: 5, offset: 19708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 635, col: 5, offset: 19708},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 635, col: 9, offset: 19712},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 635, col: 14, offset: 19717},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 635, col: 14, offset: 19717},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 635, col: 26, offset: 19729},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 639, col: 1, offset: 19797},
			expr: &actionExpr{
				pos: position{line: 639, col: 16, offset: 19812},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 639, col: 16, offset: 19812},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 16, offset: 19812},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 639, col: 23, offset: 19819},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 639, col: 23, offset: 19819},
									expr: &litMatcher{
										pos:        position{line: 639, col: 24, offset: 19820},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 642, col: 5, offset: 19874},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 652, col: 1, offset: 20168},
			expr: &actionExpr{
				pos: position{line: 652, col: 21, offset: 20188},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 652, col: 21, offset: 20188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 21, offset: 20188},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 29, offset: 20196},
								expr: &choiceExpr{
									pos: position{line: 652, col: 30, offset: 20197},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 652, col: 30, offset: 20197},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 53, offset: 20220},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 652, col: 74, offset: 20241},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 652, col: 74, offset: 20241,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 107, offset: 20274},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 656, col: 1, offset: 20345},
			expr: &actionExpr{
				pos: position{line: 656, col: 25, offset: 20369},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 656, col: 25, offset: 20369},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 656, col: 25, offset: 20369},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 33, offset: 20377},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 656, col: 38, offset: 20382},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 38, offset: 20382},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 78, offset: 20422},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 660, col: 1, offset: 20487},
			expr: &actionExpr{
				pos: position{line: 660, col: 23, offset: 20509},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 660, col: 23, offset: 20509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 660, col: 23, offset: 20509},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 660, col: 31, offset: 20517},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 660, col: 36, offset: 20522},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 660, col: 36, offset: 20522},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 76, offset: 20562},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 667, col: 1, offset: 20726},
			expr: &choiceExpr{
				pos: position{line: 667, col: 18, offset: 20743},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 667, col: 18, offset: 20743},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 667, col: 18, offset: 20743},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 27, offset: 20752},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 9, offset: 20809},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 669, col: 9, offset: 20809},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 669, col: 15, offset: 20815},
								expr: &ruleRefExpr{
									pos:  position{line: 669, col: 16, offset: 20816},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 673, col: 1, offset: 20908},
			expr: &actionExpr{
				pos: position{line: 673, col: 22, offset: 20929},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 673, col: 22, offset: 20929},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 673, col: 22, offset: 20929},
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 23, offset: 20930},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 674, col: 5, offset: 20938},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 6, offset: 20939},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 675, col: 5, offset: 20953},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 6, offset: 20954},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 676, col: 5, offset: 20976},
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 6, offset: 20977},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 677, col: 5, offset: 21003},
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 6, offset: 21004},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 678, col: 5, offset: 21032},
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 6, offset: 21033},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 679, col: 5, offset: 21059},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 6, offset: 21060},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 680, col: 5, offset: 21085},
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 6, offset: 21086},
								name: "BlockAttributes",
							},
						},
						&notExpr{
							pos: position{line: 681, col: 5, offset: 21106},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 6, offset: 21107},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 682, col: 5, offset: 21126},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 6, offset: 21127},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 21154},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 683, col: 11, offset: 21160},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 683, col: 11, offset: 21160},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 683, col: 11, offset: 21160},
											expr: &ruleRefExpr{
												pos:  position{line: 683, col: 11, offset: 21160},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 683, col: 18, offset: 21167},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 683, col: 27, offset: 21176},
												expr: &ruleRefExpr{
													pos:  position{line: 683, col: 28, offset: 21177},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 12, offset: 21276},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 689, col: 1, offset: 21315},
			expr: &seqExpr{
				pos: position{line: 689, col: 25, offset: 21339},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 689, col: 25, offset: 21339},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 689, col: 29, offset: 21343},
						expr: &ruleRefExpr{
							pos:  position{line: 689, col: 29, offset: 21343},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 689, col: 36, offset: 21350},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 691, col: 1, offset: 21422},
			expr: &actionExpr{
				pos: position{line: 691, col: 29, offset: 21450},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 691, col: 29, offset: 21450},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 29, offset: 21450},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 50, offset: 21471},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 58, offset: 21479},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 695, col: 1, offset: 21585},
			expr: &actionExpr{
				pos: position{line: 695, col: 29, offset: 21613},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 695, col: 29, offset: 21613},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 695, col: 29, offset: 21613},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 30, offset: 21614},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 21623},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 696, col: 14, offset: 21632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 696, col: 14, offset: 21632},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 21657},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 698, col: 11, offset: 21685},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 11, offset: 21701},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 700, col: 11, offset: 21722},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 701, col: 11, offset: 21746},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 702, col: 11, offset: 21773},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 11, offset: 21802},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 11, offset: 21829},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 11, offset: 21880},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 21904},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 21936},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 21962},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 21999},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 22024},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 717, col: 1, offset: 22190},
			expr: &actionExpr{
				pos: position{line: 717, col: 20, offset: 22209},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 717, col: 20, offset: 22209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 717, col: 20, offset: 22209},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 28, offset: 22217},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 51, offset: 22240},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 60, offset: 22249},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 721, col: 1, offset: 22408},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 22438},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 22438},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 722, col: 5, offset: 22438},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 5, offset: 22438},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 12, offset: 22445},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 724, col: 9, offset: 22508},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 724, col: 9, offset: 22508},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 724, col: 9, offset: 22508},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 9, offset: 22508},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 724, col: 16, offset: 22515},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 724, col: 16, offset: 22515},
															expr: &litMatcher{
																pos:        position{line: 724, col: 17, offset: 22516},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 728, col: 9, offset: 22616},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 747, col: 11, offset: 23333},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 747, col: 11, offset: 23333},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 747, col: 11, offset: 23333},
													expr: &charClassMatcher{
														pos:        position{line: 747, col: 12, offset: 23334},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 747, col: 20, offset: 23342},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 749, col: 13, offset: 23453},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 749, col: 13, offset: 23453},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 749, col: 14, offset: 23454},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 749, col: 21, offset: 23461},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 751, col: 13, offset: 23575},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 751, col: 13, offset: 23575},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 751, col: 14, offset: 23576},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 751, col: 21, offset: 23583},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 753, col: 13, offset: 23697},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 753, col: 13, offset: 23697},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 753, col: 13, offset: 23697},
													expr: &charClassMatcher{
														pos:        position{line: 753, col: 14, offset: 23698},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 753, col: 26, offset: 23710},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 755, col: 13, offset: 23824},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 755, col: 13, offset: 23824},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 755, col: 13, offset: 23824},
													expr: &charClassMatcher{
														pos:        position{line: 755, col: 14, offset: 23825},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 755, col: 26, offset: 23837},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 757, col: 12, offset: 23950},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 12, offset: 23950},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 761, col: 1, offset: 23985},
			expr: &actionExpr{
				pos: position{line: 761, col: 27, offset: 24011},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 761, col: 27, offset: 24011},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 761, col: 37, offset: 24021},
						expr: &ruleRefExpr{
							pos:  position{line: 761, col: 37, offset: 24021},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 768, col: 1, offset: 24221},
			expr: &actionExpr{
				pos: position{line: 769, col: 5, offset: 24247},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 769, col: 5, offset: 24247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 769, col: 5, offset: 24247},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 13, offset: 24255},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 5, offset: 24285},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 16, offset: 24296},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 17, offset: 24297},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 5, offset: 24332},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 14, offset: 24341},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 775, col: 1, offset: 24526},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 24558},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 24558},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 776, col: 5, offset: 24558},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 5, offset: 24558},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 12, offset: 24565},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 776, col: 20, offset: 24573},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 778, col: 9, offset: 24630},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 778, col: 9, offset: 24630},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 778, col: 9, offset: 24630},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 778, col: 16, offset: 24637},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 778, col: 16, offset: 24637},
															expr: &litMatcher{
																pos:        position{line: 778, col: 17, offset: 24638},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 782, col: 9, offset: 24738},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 799, col: 14, offset: 25445},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 799, col: 21, offset: 25452},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 799, col: 22, offset: 25453},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 801, col: 13, offset: 25539},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 13, offset: 25539},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 805, col: 1, offset: 25575},
			expr: &actionExpr{
				pos: position{line: 805, col: 32, offset: 25606},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 805, col: 32, offset: 25606},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 805, col: 32, offset: 25606},
							expr: &litMatcher{
								pos:        position{line: 805, col: 33, offset: 25607},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 37, offset: 25611},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 806, col: 7, offset: 25625},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 806, col: 7, offset: 25625},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 806, col: 7, offset: 25625},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 807, col: 7, offset: 25670},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 807, col: 7, offset: 25670},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 808, col: 7, offset: 25713},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 808, col: 7, offset: 25713},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 809, col: 7, offset: 25755},
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 7, offset: 25755},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 813, col: 1, offset: 25797},
			expr: &actionExpr{
				pos: position{line: 813, col: 29, offset: 25825},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 813, col: 29, offset: 25825},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 813, col: 39, offset: 25835},
						expr: &ruleRefExpr{
							pos:  position{line: 813, col: 39, offset: 25835},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 820, col: 1, offset: 26151},
			expr: &actionExpr{
				pos: position{line: 820, col: 20, offset: 26170},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 820, col: 20, offset: 26170},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 820, col: 20, offset: 26170},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 26, offset: 26176},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 55, offset: 26205},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 66, offset: 26216},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 92, offset: 26242},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 820, col: 104, offset: 26254},
								expr: &ruleRefExpr{
									pos:  position{line: 820, col: 105, offset: 26255},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 824, col: 1, offset: 26420},
			expr: &seqExpr{
				pos: position{line: 824, col: 26, offset: 26445},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 26, offset: 26445},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 824, col: 54, offset: 26473},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 826, col: 1, offset: 26499},
			expr: &choiceExpr{
				pos: position{line: 826, col: 33, offset: 26531},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 826, col: 33, offset: 26531},
						expr: &charClassMatcher{
							pos:        position{line: 826, col: 33, offset: 26531},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 826, col: 45, offset: 26543},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 826, col: 45, offset: 26543},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 826, col: 49, offset: 26547},
								expr: &litMatcher{
									pos:        position{line: 826, col: 50, offset: 26548},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 827, col: 1, offset: 26552},
			expr: &actionExpr{
				pos: position{line: 827, col: 32, offset: 26583},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 827, col: 32, offset: 26583},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 827, col: 42, offset: 26593},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 827, col: 42, offset: 26593},
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 42, offset: 26593},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 834, col: 1, offset: 26768},
			expr: &actionExpr{
				pos: position{line: 834, col: 24, offset: 26791},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 834, col: 24, offset: 26791},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 834, col: 33, offset: 26800},
						expr: &seqExpr{
							pos: position{line: 834, col: 34, offset: 26801},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 834, col: 34, offset: 26801},
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 35, offset: 26802},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 834, col: 43, offset: 26810},
									expr: &litMatcher{
										pos:        position{line: 834, col: 44, offset: 26811},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 834, col: 49, offset: 26816},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 838, col: 1, offset: 26913},
			expr: &actionExpr{
				pos: position{line: 838, col: 31, offset: 26943},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 838, col: 31, offset: 26943},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 838, col: 40, offset: 26952},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 838, col: 40, offset: 26952},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 839, col: 11, offset: 26967},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 840, col: 11, offset: 27016},
								expr: &ruleRefExpr{
									pos:  position{line: 840, col: 11, offset: 27016},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 841, col: 11, offset: 27034},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 842, col: 11, offset: 27059},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 843, col: 11, offset: 27088},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 844, col: 11, offset: 27108},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 845, col: 11, offset: 27197},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 846, col: 11, offset: 27218},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 847, col: 11, offset: 27241},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 848, col: 11, offset: 27256},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 849, col: 11, offset: 27281},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 850, col: 11, offset: 27304},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 851, col: 11, offset: 27325},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 852, col: 11, offset: 27352},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 853, col: 11, offset: 27369},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 854, col: 11, offset: 27401},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 858, col: 1, offset: 27440},
			expr: &actionExpr{
				pos: position{line: 859, col: 5, offset: 27473},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 859, col: 5, offset: 27473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 859, col: 5, offset: 27473},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 859, col: 16, offset: 27484},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 859, col: 16, offset: 27484},
									expr: &litMatcher{
										pos:        position{line: 859, col: 17, offset: 27485},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 862, col: 5, offset: 27543},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 866, col: 6, offset: 27719},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 866, col: 6, offset: 27719},
									expr: &choiceExpr{
										pos: position{line: 866, col: 7, offset: 27720},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 866, col: 7, offset: 27720},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 866, col: 15, offset: 27728},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 27, offset: 27740},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 870, col: 1, offset: 27780},
			expr: &actionExpr{
				pos: position{line: 870, col: 31, offset: 27810},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 870, col: 31, offset: 27810},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 870, col: 40, offset: 27819},
						expr: &ruleRefExpr{
							pos:  position{line: 870, col: 41, offset: 27820},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 877, col: 1, offset: 28011},
			expr: &choiceExpr{
				pos: position{line: 877, col: 19, offset: 28029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 19, offset: 28029},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 877, col: 19, offset: 28029},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 28067},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 879, col: 5, offset: 28067},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 28107},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 881, col: 5, offset: 28107},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 28157},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 883, col: 5, offset: 28157},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 885, col: 5, offset: 28203},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 885, col: 5, offset: 28203},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 898, col: 1, offset: 28580},
			expr: &choiceExpr{
				pos: position{line: 900, col: 6, offset: 28631},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 6, offset: 28631},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 900, col: 6, offset: 28631},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 900, col: 6, offset: 28631},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 9, offset: 28634},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 25, offset: 28650},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 30, offset: 28655},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 900, col: 36, offset: 28661},
										expr: &choiceExpr{
											pos: position{line: 900, col: 37, offset: 28662},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 900, col: 37, offset: 28662},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 900, col: 57, offset: 28682},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 28922},
						run: (*parser).callonRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 28922},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 905, col: 5, offset: 28922},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 10, offset: 28927},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 19, offset: 28936},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 909, col: 5, offset: 29128},
						run: (*parser).callonRawParagraph17,
						expr: &seqExpr{
							pos: position{line: 909, col: 5, offset: 29128},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 909, col: 5, offset: 29128},
									run: (*parser).callonRawParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 912, col: 7, offset: 29325},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 912, col: 15, offset: 29333},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 16, offset: 29334},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 29519},
						run: (*parser).callonRawParagraph23,
						expr: &labeledExpr{
							pos:   position{line: 916, col: 5, offset: 29519},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 916, col: 11, offset: 29525},
								expr: &choiceExpr{
									pos: position{line: 916, col: 12, offset: 29526},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 916, col: 12, offset: 29526},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 32, offset: 29546},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 920, col: 1, offset: 29663},
			expr: &oneOrMoreExpr{
				pos: position{line: 920, col: 33, offset: 29695},
				expr: &actionExpr{
					pos: position{line: 920, col: 34, offset: 29696},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 920, col: 34, offset: 29696},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 920, col: 34, offset: 29696},
								expr: &ruleRefExpr{
									pos:  position{line: 920, col: 35, offset: 29697},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 920, col: 45, offset: 29707},
								expr: &litMatcher{
									pos:        position{line: 920, col: 45, offset: 29707},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 920, col: 51, offset: 29713},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 920, col: 60, offset: 29722},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 924, col: 1, offset: 29763},
			expr: &actionExpr{
				pos: position{line: 924, col: 21, offset: 29783},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 924, col: 21, offset: 29783},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 924, col: 21, offset: 29783},
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 22, offset: 29784},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 29804},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 14, offset: 29813},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 925, col: 39, offset: 29838},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 925, col: 43, offset: 29842},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 935, col: 1, offset: 30077},
			expr: &actionExpr{
				pos: position{line: 935, col: 28, offset: 30104},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 935, col: 28, offset: 30104},
					expr: &charClassMatcher{
						pos:        position{line: 935, col: 28, offset: 30104},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 940, col: 1, offset: 30221},
			expr: &actionExpr{
				pos: position{line: 941, col: 5, offset: 30248},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 941, col: 5, offset: 30248},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 941, col: 5, offset: 30248},
							run: (*parser).callonSimpleRawParagraph3,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 30378},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 30389},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 945, col: 5, offset: 30415},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 945, col: 16, offset: 30426},
								expr: &choiceExpr{
									pos: position{line: 945, col: 17, offset: 30427},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 945, col: 17, offset: 30427},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 945, col: 37, offset: 30447},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 949, col: 1, offset: 30606},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 30636},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 30636},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 30636},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 950, col: 14, offset: 30645},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 950, col: 14, offset: 30645},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 950, col: 14, offset: 30645},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 950, col: 23, offset: 30654},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 950, col: 28, offset: 30659},
											expr: &charClassMatcher{
												pos:        position{line: 950, col: 28, offset: 30659},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 68, offset: 30699},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 961, col: 1, offset: 30951},
			expr: &choiceExpr{
				pos: position{line: 963, col: 5, offset: 31010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 963, col: 5, offset: 31010},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 963, col: 5, offset: 31010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 963, col: 5, offset: 31010},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 8, offset: 31013},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 24, offset: 31029},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 963, col: 29, offset: 31034},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 36, offset: 31041},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 31249},
						run: (*parser).callonContinuedRawParagraph9,
						expr: &labeledExpr{
							pos:   position{line: 967, col: 5, offset: 31249},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 12, offset: 31256},
								name: "ContinuedRawParagraphLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 971, col: 1, offset: 31379},
			expr: &actionExpr{
				pos: position{line: 971, col: 31, offset: 31409},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 971, col: 31, offset: 31409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 971, col: 31, offset: 31409},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 42, offset: 31420},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 971, col: 65, offset: 31443},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 971, col: 76, offset: 31454},
								expr: &actionExpr{
									pos: position{line: 971, col: 77, offset: 31455},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 971, col: 77, offset: 31455},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 971, col: 77, offset: 31455},
												expr: &ruleRefExpr{
													pos:  position{line: 971, col: 78, offset: 31456},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 971, col: 99, offset: 31477},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 971, col: 105, offset: 31483},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 971, col: 105, offset: 31483},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 971, col: 125, offset: 31503},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 979, col: 1, offset: 31745},
			expr: &actionExpr{
				pos: position{line: 979, col: 19, offset: 31763},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 979, col: 19, offset: 31763},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 979, col: 19, offset: 31763},
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 20, offset: 31764},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 5, offset: 31778},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 980, col: 15, offset: 31788},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 980, col: 15, offset: 31788},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 980, col: 15, offset: 31788},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 980, col: 24, offset: 31797},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 982, col: 9, offset: 31889},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 982, col: 9, offset: 31889},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 982, col: 9, offset: 31889},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 982, col: 18, offset: 31898},
														expr: &ruleRefExpr{
															pos:  position{line: 982, col: 19, offset: 31899},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 982, col: 35, offset: 31915},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 988, col: 1, offset: 32032},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 32055},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 989, col: 5, offset: 32055},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 989, col: 14, offset: 32064},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 989, col: 14, offset: 32064},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 11, offset: 32125},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 991, col: 11, offset: 32170},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 11, offset: 32170},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 992, col: 11, offset: 32188},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 992, col: 11, offset: 32188},
										expr: &ruleRefExpr{
											pos:  position{line: 992, col: 12, offset: 32189},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 993, col: 13, offset: 32207},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 993, col: 13, offset: 32207},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 994, col: 15, offset: 32234},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 995, col: 15, offset: 32259},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 996, col: 15, offset: 32284},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 997, col: 15, offset: 32311},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 998, col: 15, offset: 32331},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 999, col: 15, offset: 32424},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1000, col: 15, offset: 32454},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1001, col: 15, offset: 32522},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1002, col: 15, offset: 32553},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1003, col: 15, offset: 32574},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1004, col: 15, offset: 32605},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1005, col: 15, offset: 32642},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1006, col: 15, offset: 32672},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1007, col: 15, offset: 32705},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1008, col: 15, offset: 32729},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 15, offset: 32762},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1016, col: 1, offset: 32985},
			expr: &actionExpr{
				pos: position{line: 1016, col: 14, offset: 32998},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 14, offset: 32998},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1016, col: 14, offset: 32998},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1016, col: 20, offset: 33004},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1016, col: 24, offset: 33008},
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 24, offset: 33008},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1016, col: 31, offset: 33015},
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 32, offset: 33016},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1023, col: 1, offset: 33300},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 15, offset: 33314},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 33314},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 41, offset: 33340},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 65, offset: 33364},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1025, col: 1, offset: 33383},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 32, offset: 33414},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1025, col: 32, offset: 33414},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1025, col: 32, offset: 33414},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1025, col: 36, offset: 33418},
								expr: &litMatcher{
									pos:        position{line: 1025, col: 37, offset: 33419},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1025, col: 43, offset: 33425},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1025, col: 43, offset: 33425},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1025, col: 47, offset: 33429},
								expr: &litMatcher{
									pos:        position{line: 1025, col: 48, offset: 33430},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1025, col: 54, offset: 33436},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1025, col: 54, offset: 33436},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1025, col: 58, offset: 33440},
								expr: &litMatcher{
									pos:        position{line: 1025, col: 59, offset: 33441},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1025, col: 65, offset: 33447},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1025, col: 65, offset: 33447},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1025, col: 69, offset: 33451},
								expr: &litMatcher{
									pos:        position{line: 1025, col: 70, offset: 33452},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1027, col: 1, offset: 33457},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 34, offset: 33490},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1027, col: 34, offset: 33490},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1027, col: 41, offset: 33497},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1027, col: 48, offset: 33504},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1027, col: 55, offset: 33511},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1027, col: 62, offset: 33518},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1027, col: 68, offset: 33524},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1029, col: 1, offset: 33529},
			expr: &actionExpr{
				pos: position{line: 1029, col: 26, offset: 33554},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1029, col: 26, offset: 33554},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1029, col: 32, offset: 33560},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1029, col: 32, offset: 33560},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1030, col: 15, offset: 33595},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1031, col: 15, offset: 33631},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1032, col: 15, offset: 33667},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1033, col: 15, offset: 33707},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1034, col: 15, offset: 33736},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1035, col: 15, offset: 33767},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1039, col: 1, offset: 33921},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 28, offset: 33948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1039, col: 28, offset: 33948},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 15, offset: 33982},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 15, offset: 34018},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 15, offset: 34054},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1044, col: 1, offset: 34080},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 22, offset: 34101},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 22, offset: 34101},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 15, offset: 34132},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 15, offset: 34164},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 15, offset: 34196},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 15, offset: 34232},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 15, offset: 34268},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1051, col: 1, offset: 34292},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 33, offset: 34324},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1051, col: 33, offset: 34324},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1051, col: 39, offset: 34330},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1051, col: 39, offset: 34330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1055, col: 1, offset: 34463},
			expr: &actionExpr{
				pos: position{line: 1055, col: 25, offset: 34487},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1055, col: 25, offset: 34487},
					expr: &litMatcher{
						pos:        position{line: 1055, col: 25, offset: 34487},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1059, col: 1, offset: 34528},
			expr: &actionExpr{
				pos: position{line: 1059, col: 25, offset: 34552},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 25, offset: 34552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1059, col: 25, offset: 34552},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1059, col: 30, offset: 34557},
							expr: &litMatcher{
								pos:        position{line: 1059, col: 30, offset: 34557},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1067, col: 1, offset: 34654},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 13, offset: 34666},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1067, col: 13, offset: 34666},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 35, offset: 34688},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1069, col: 1, offset: 34755},
			expr: &actionExpr{
				pos: position{line: 1069, col: 24, offset: 34778},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 24, offset: 34778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1069, col: 24, offset: 34778},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 35, offset: 34789},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 36, offset: 34790},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1069, col: 57, offset: 34811},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 62, offset: 34816},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 72, offset: 34826},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1069, col: 101, offset: 34855},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1073, col: 1, offset: 34947},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1073, col: 32, offset: 34978},
				expr: &ruleRefExpr{
					pos:  position{line: 1073, col: 32, offset: 34978},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1075, col: 1, offset: 35009},
			expr: &actionExpr{
				pos: position{line: 1075, col: 31, offset: 35039},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 31, offset: 35039},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1075, col: 31, offset: 35039},
							expr: &litMatcher{
								pos:        position{line: 1075, col: 33, offset: 35041},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1075, col: 39, offset: 35047},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1075, col: 48, offset: 35056},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1075, col: 48, offset: 35056},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1076, col: 11, offset: 35071},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1077, col: 11, offset: 35120},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1077, col: 11, offset: 35120},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1077, col: 19, offset: 35128},
												expr: &ruleRefExpr{
													pos:  position{line: 1077, col: 20, offset: 35129},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1078, col: 11, offset: 35147},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1079, col: 11, offset: 35177},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1080, col: 11, offset: 35200},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1081, col: 11, offset: 35221},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1082, col: 11, offset: 35242},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1083, col: 11, offset: 35266},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1084, col: 11, offset: 35290},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1085, col: 11, offset: 35316},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1086, col: 11, offset: 35345},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1090, col: 1, offset: 35412},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 35456},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1091, col: 5, offset: 35456},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1092, col: 7, offset: 35553},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1092, col: 7, offset: 35553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 7, offset: 35553},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 12, offset: 35558},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1096, col: 1, offset: 35721},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 24, offset: 35744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1096, col: 24, offset: 35744},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1096, col: 24, offset: 35744},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1096, col: 24, offset: 35744},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1096, col: 35, offset: 35755},
										expr: &ruleRefExpr{
											pos:  position{line: 1096, col: 36, offset: 35756},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1096, col: 59, offset: 35779},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1096, col: 59, offset: 35779},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1096, col: 63, offset: 35783},
											expr: &litMatcher{
												pos:        position{line: 1096, col: 64, offset: 35784},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 69, offset: 35789},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 79, offset: 35799},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1096, col: 108, offset: 35828},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1096, col: 112, offset: 35832},
									expr: &notExpr{
										pos: position{line: 1096, col: 114, offset: 35834},
										expr: &ruleRefExpr{
											pos:  position{line: 1096, col: 115, offset: 35835},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 36034},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 36034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1098, col: 5, offset: 36034},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1098, col: 16, offset: 36045},
										expr: &ruleRefExpr{
											pos:  position{line: 1098, col: 17, offset: 36046},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 38, offset: 36067},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 42, offset: 36071},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1098, col: 52, offset: 36081},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1098, col: 52, offset: 36081},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1098, col: 56, offset: 36085},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 85, offset: 36114},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1102, col: 1, offset: 36325},
			expr: &seqExpr{
				pos: position{line: 1102, col: 32, offset: 36356},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1102, col: 32, offset: 36356},
						expr: &ruleRefExpr{
							pos:  position{line: 1102, col: 33, offset: 36357},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1102, col: 39, offset: 36363},
						expr: &ruleRefExpr{
							pos:  position{line: 1102, col: 39, offset: 36363},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1104, col: 1, offset: 36392},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 31, offset: 36422},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 31, offset: 36422},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1105, col: 11, offset: 36437},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1105, col: 11, offset: 36437},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1105, col: 19, offset: 36445},
								expr: &ruleRefExpr{
									pos:  position{line: 1105, col: 20, offset: 36446},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 11, offset: 36464},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 11, offset: 36494},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1108, col: 11, offset: 36517},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1108, col: 11, offset: 36517},
								expr: &ruleRefExpr{
									pos:  position{line: 1108, col: 11, offset: 36517},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1108, col: 18, offset: 36524},
								expr: &seqExpr{
									pos: position{line: 1108, col: 19, offset: 36525},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1108, col: 19, offset: 36525},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1108, col: 23, offset: 36529},
											expr: &litMatcher{
												pos:        position{line: 1108, col: 24, offset: 36530},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 11, offset: 36546},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 36567},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 11, offset: 36588},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 36612},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 11, offset: 36636},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 11, offset: 36662},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 11, offset: 36691},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1117, col: 1, offset: 36729},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 5, offset: 36773},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1118, col: 5, offset: 36773},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1119, col: 7, offset: 36870},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1119, col: 7, offset: 36870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 7, offset: 36870},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1119, col: 11, offset: 36874},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1123, col: 1, offset: 37037},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 5, offset: 37061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1124, col: 5, offset: 37061},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1124, col: 5, offset: 37061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 5, offset: 37061},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 18, offset: 37074},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 40, offset: 37096},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 45, offset: 37101},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 55, offset: 37111},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 84, offset: 37140},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 9, offset: 37297},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1126, col: 9, offset: 37297},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 9, offset: 37297},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 22, offset: 37310},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 44, offset: 37332},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 49, offset: 37337},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 59, offset: 37347},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 88, offset: 37376},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 9, offset: 37576},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1129, col: 9, offset: 37576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1129, col: 9, offset: 37576},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 22, offset: 37589},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1129, col: 44, offset: 37611},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 48, offset: 37615},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 58, offset: 37625},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1129, col: 87, offset: 37654},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1137, col: 1, offset: 37862},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 15, offset: 37876},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1137, col: 15, offset: 37876},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 39, offset: 37900},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1139, col: 1, offset: 37923},
			expr: &actionExpr{
				pos: position{line: 1139, col: 26, offset: 37948},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 26, offset: 37948},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1139, col: 26, offset: 37948},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1139, col: 37, offset: 37959},
								expr: &ruleRefExpr{
									pos:  position{line: 1139, col: 38, offset: 37960},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1139, col: 59, offset: 37981},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 64, offset: 37986},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 74, offset: 37996},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1139, col: 105, offset: 38027},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1143, col: 1, offset: 38166},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1143, col: 34, offset: 38199},
				expr: &ruleRefExpr{
					pos:  position{line: 1143, col: 34, offset: 38199},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1145, col: 1, offset: 38231},
			expr: &actionExpr{
				pos: position{line: 1145, col: 33, offset: 38263},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 33, offset: 38263},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1145, col: 33, offset: 38263},
							expr: &litMatcher{
								pos:        position{line: 1145, col: 35, offset: 38265},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1145, col: 41, offset: 38271},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1145, col: 50, offset: 38280},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1145, col: 50, offset: 38280},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1146, col: 11, offset: 38295},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1147, col: 11, offset: 38344},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1147, col: 11, offset: 38344},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1147, col: 19, offset: 38352},
												expr: &ruleRefExpr{
													pos:  position{line: 1147, col: 20, offset: 38353},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1148, col: 11, offset: 38371},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1149, col: 11, offset: 38403},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1150, col: 11, offset: 38426},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1151, col: 11, offset: 38445},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1152, col: 11, offset: 38466},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1153, col: 11, offset: 38490},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1154, col: 11, offset: 38514},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1155, col: 11, offset: 38540},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 11, offset: 38569},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1160, col: 1, offset: 38638},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 38684},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1161, col: 5, offset: 38684},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1162, col: 7, offset: 38783},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1162, col: 7, offset: 38783},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1162, col: 7, offset: 38783},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1162, col: 12, offset: 38788},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1166, col: 1, offset: 38953},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 26, offset: 38978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1166, col: 26, offset: 38978},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1166, col: 26, offset: 38978},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1166, col: 26, offset: 38978},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1166, col: 37, offset: 38989},
										expr: &ruleRefExpr{
											pos:  position{line: 1166, col: 38, offset: 38990},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1166, col: 60, offset: 39012},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1166, col: 60, offset: 39012},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1166, col: 64, offset: 39016},
											expr: &litMatcher{
												pos:        position{line: 1166, col: 65, offset: 39017},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 70, offset: 39022},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 80, offset: 39032},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 111, offset: 39063},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 5, offset: 39258},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1168, col: 5, offset: 39258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1168, col: 5, offset: 39258},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1168, col: 16, offset: 39269},
										expr: &ruleRefExpr{
											pos:  position{line: 1168, col: 17, offset: 39270},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 38, offset: 39291},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 42, offset: 39295},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1168, col: 52, offset: 39305},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1168, col: 52, offset: 39305},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1168, col: 56, offset: 39309},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 87, offset: 39340},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1172, col: 1, offset: 39555},
			expr: &seqExpr{
				pos: position{line: 1172, col: 34, offset: 39588},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1172, col: 34, offset: 39588},
						expr: &ruleRefExpr{
							pos:  position{line: 1172, col: 35, offset: 39589},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1172, col: 41, offset: 39595},
						expr: &ruleRefExpr{
							pos:  position{line: 1172, col: 41, offset: 39595},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1174, col: 1, offset: 39626},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 33, offset: 39658},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1174, col: 33, offset: 39658},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1175, col: 11, offset: 39673},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1175, col: 11, offset: 39673},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1175, col: 19, offset: 39681},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 20, offset: 39682},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 39700},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 39732},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1178, col: 11, offset: 39755},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1178, col: 11, offset: 39755},
								expr: &ruleRefExpr{
									pos:  position{line: 1178, col: 11, offset: 39755},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1178, col: 18, offset: 39762},
								expr: &seqExpr{
									pos: position{line: 1178, col: 19, offset: 39763},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1178, col: 19, offset: 39763},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1178, col: 23, offset: 39767},
											expr: &litMatcher{
												pos:        position{line: 1178, col: 24, offset: 39768},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 39784},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 39803},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 39824},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 39848},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 39872},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 39898},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 39927},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1187, col: 1, offset: 39967},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 40013},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1188, col: 5, offset: 40013},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1189, col: 7, offset: 40112},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1189, col: 7, offset: 40112},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1189, col: 7, offset: 40112},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1189, col: 11, offset: 40116},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1193, col: 1, offset: 40282},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 5, offset: 40308},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 40308},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1194, col: 5, offset: 40308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1194, col: 5, offset: 40308},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 18, offset: 40321},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1194, col: 40, offset: 40343},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 45, offset: 40348},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 55, offset: 40358},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1194, col: 86, offset: 40389},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 9, offset: 40546},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1196, col: 9, offset: 40546},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 9, offset: 40546},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 22, offset: 40559},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 44, offset: 40581},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 49, offset: 40586},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 59, offset: 40596},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 90, offset: 40627},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 9, offset: 40827},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1199, col: 9, offset: 40827},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 9, offset: 40827},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 22, offset: 40840},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 44, offset: 40862},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 48, offset: 40866},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 58, offset: 40876},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 89, offset: 40907},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1206, col: 1, offset: 41117},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 18, offset: 41134},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1206, col: 18, offset: 41134},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 45, offset: 41161},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1208, col: 1, offset: 41187},
			expr: &actionExpr{
				pos: position{line: 1208, col: 29, offset: 41215},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 29, offset: 41215},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1208, col: 29, offset: 41215},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1208, col: 40, offset: 41226},
								expr: &ruleRefExpr{
									pos:  position{line: 1208, col: 41, offset: 41227},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 62, offset: 41248},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 67, offset: 41253},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 77, offset: 41263},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 111, offset: 41297},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1212, col: 1, offset: 41439},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1212, col: 37, offset: 41475},
				expr: &ruleRefExpr{
					pos:  position{line: 1212, col: 37, offset: 41475},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1214, col: 1, offset: 41542},
			expr: &actionExpr{
				pos: position{line: 1214, col: 36, offset: 41577},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1214, col: 36, offset: 41577},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1214, col: 36, offset: 41577},
							expr: &litMatcher{
								pos:        position{line: 1214, col: 38, offset: 41579},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1214, col: 44, offset: 41585},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1214, col: 53, offset: 41594},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1214, col: 53, offset: 41594},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1215, col: 11, offset: 41609},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1216, col: 11, offset: 41658},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1216, col: 11, offset: 41658},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1216, col: 19, offset: 41666},
												expr: &ruleRefExpr{
													pos:  position{line: 1216, col: 20, offset: 41667},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 11, offset: 41685},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1218, col: 11, offset: 41708},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1218, col: 11, offset: 41708},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 41892},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 11, offset: 41927},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1224, col: 11, offset: 41946},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1225, col: 11, offset: 41967},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1226, col: 11, offset: 41988},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 11, offset: 42012},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 11, offset: 42038},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 11, offset: 42067},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1233, col: 1, offset: 42139},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 5, offset: 42188},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1234, col: 5, offset: 42188},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1235, col: 7, offset: 42290},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1235, col: 7, offset: 42290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1235, col: 7, offset: 42290},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1235, col: 12, offset: 42295},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1239, col: 1, offset: 42463},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 29, offset: 42491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1239, col: 29, offset: 42491},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1239, col: 29, offset: 42491},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1239, col: 29, offset: 42491},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1239, col: 40, offset: 42502},
										expr: &ruleRefExpr{
											pos:  position{line: 1239, col: 41, offset: 42503},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1239, col: 63, offset: 42525},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1239, col: 63, offset: 42525},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1239, col: 67, offset: 42529},
											expr: &litMatcher{
												pos:        position{line: 1239, col: 68, offset: 42530},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 73, offset: 42535},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1239, col: 83, offset: 42545},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1239, col: 117, offset: 42579},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 42777},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 42777},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1241, col: 5, offset: 42777},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1241, col: 16, offset: 42788},
										expr: &ruleRefExpr{
											pos:  position{line: 1241, col: 17, offset: 42789},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 38, offset: 42810},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 42, offset: 42814},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1241, col: 52, offset: 42824},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1241, col: 52, offset: 42824},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1241, col: 56, offset: 42828},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 90, offset: 42862},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1245, col: 1, offset: 43081},
			expr: &seqExpr{
				pos: position{line: 1245, col: 37, offset: 43117},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1245, col: 37, offset: 43117},
						expr: &ruleRefExpr{
							pos:  position{line: 1245, col: 38, offset: 43118},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1245, col: 44, offset: 43124},
						expr: &ruleRefExpr{
							pos:  position{line: 1245, col: 44, offset: 43124},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1247, col: 1, offset: 43158},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 37, offset: 43194},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1247, col: 37, offset: 43194},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1248, col: 11, offset: 43209},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1248, col: 11, offset: 43209},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1248, col: 19, offset: 43217},
								expr: &ruleRefExpr{
									pos:  position{line: 1248, col: 20, offset: 43218},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 43236},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 43271},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1251, col: 11, offset: 43294},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1251, col: 11, offset: 43294},
								expr: &ruleRefExpr{
									pos:  position{line: 1251, col: 11, offset: 43294},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1251, col: 18, offset: 43301},
								expr: &seqExpr{
									pos: position{line: 1251, col: 19, offset: 43302},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1251, col: 19, offset: 43302},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1251, col: 23, offset: 43306},
											expr: &litMatcher{
												pos:        position{line: 1251, col: 24, offset: 43307},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 43435},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 43454},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 43475},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 43496},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 43520},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1257, col: 11, offset: 43546},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1257, col: 11, offset: 43546},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 43687},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 43716},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1264, col: 1, offset: 43759},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 43808},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1265, col: 5, offset: 43808},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1266, col: 7, offset: 43910},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1266, col: 7, offset: 43910},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 7, offset: 43910},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1266, col: 11, offset: 43914},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1270, col: 1, offset: 44083},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 44112},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1271, col: 5, offset: 44112},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1271, col: 5, offset: 44112},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1271, col: 5, offset: 44112},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 18, offset: 44125},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 40, offset: 44147},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 45, offset: 44152},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 55, offset: 44162},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 89, offset: 44196},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 9, offset: 44353},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1273, col: 9, offset: 44353},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1273, col: 9, offset: 44353},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 22, offset: 44366},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 44, offset: 44388},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 49, offset: 44393},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 59, offset: 44403},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 93, offset: 44437},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 9, offset: 44637},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1276, col: 9, offset: 44637},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 9, offset: 44637},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 44650},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 44, offset: 44672},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 48, offset: 44676},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 58, offset: 44686},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 92, offset: 44720},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1284, col: 1, offset: 45045},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 17, offset: 45061},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 17, offset: 45061},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 38, offset: 45082},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1286, col: 1, offset: 45102},
			expr: &actionExpr{
				pos: position{line: 1286, col: 23, offset: 45124},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 23, offset: 45124},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1286, col: 23, offset: 45124},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 46, offset: 45147},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1286, col: 55, offset: 45156},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1286, col: 82, offset: 45183},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1290, col: 1, offset: 45287},
			expr: &actionExpr{
				pos: position{line: 1290, col: 31, offset: 45317},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1290, col: 31, offset: 45317},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1290, col: 41, offset: 45327},
						expr: &ruleRefExpr{
							pos:  position{line: 1290, col: 41, offset: 45327},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1294, col: 1, offset: 45405},
			expr: &seqExpr{
				pos: position{line: 1294, col: 27, offset: 45431},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1294, col: 27, offset: 45431},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1294, col: 32, offset: 45436},
						expr: &charClassMatcher{
							pos:        position{line: 1294, col: 33, offset: 45437},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1296, col: 1, offset: 45448},
			expr: &litMatcher{
				pos:        position{line: 1296, col: 25, offset: 45472},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1299, col: 1, offset: 45560},
			expr: &actionExpr{
				pos: position{line: 1299, col: 30, offset: 45589},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1299, col: 30, offset: 45589},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1300, col: 9, offset: 45607},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1300, col: 9, offset: 45607},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1300, col: 9, offset: 45607},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1300, col: 19, offset: 45617},
										expr: &ruleRefExpr{
											pos:  position{line: 1300, col: 20, offset: 45618},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1301, col: 11, offset: 45674},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1301, col: 11, offset: 45674},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 11, offset: 45674},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1301, col: 18, offset: 45681},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 19, offset: 45682},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1302, col: 11, offset: 45713},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1302, col: 11, offset: 45713},
										expr: &litMatcher{
											pos:        position{line: 1302, col: 12, offset: 45714},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 16, offset: 45718},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1303, col: 11, offset: 45766},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1304, col: 11, offset: 45785},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1305, col: 11, offset: 45806},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1306, col: 11, offset: 45827},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1307, col: 11, offset: 45851},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1308, col: 11, offset: 45877},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1308, col: 11, offset: 45877},
										expr: &litMatcher{
											pos:        position{line: 1308, col: 12, offset: 45878},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 17, offset: 45883},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1309, col: 11, offset: 45907},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 45936},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1314, col: 1, offset: 46002},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 41, offset: 46042},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1314, col: 41, offset: 46042},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 55, offset: 46056},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1314, col: 55, offset: 46056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 55, offset: 46056},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1314, col: 59, offset: 46060},
									expr: &litMatcher{
										pos:        position{line: 1314, col: 60, offset: 46061},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1318, col: 1, offset: 46120},
			expr: &actionExpr{
				pos: position{line: 1318, col: 23, offset: 46142},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 23, offset: 46142},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1318, col: 23, offset: 46142},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 46, offset: 46165},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 55, offset: 46174},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1318, col: 82, offset: 46201},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1322, col: 1, offset: 46305},
			expr: &actionExpr{
				pos: position{line: 1322, col: 31, offset: 46335},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1322, col: 31, offset: 46335},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1322, col: 41, offset: 46345},
						expr: &ruleRefExpr{
							pos:  position{line: 1322, col: 41, offset: 46345},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1327, col: 1, offset: 46505},
			expr: &actionExpr{
				pos: position{line: 1327, col: 30, offset: 46534},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1327, col: 30, offset: 46534},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1328, col: 9, offset: 46552},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1328, col: 9, offset: 46552},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1328, col: 9, offset: 46552},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1328, col: 19, offset: 46562},
										expr: &ruleRefExpr{
											pos:  position{line: 1328, col: 20, offset: 46563},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1329, col: 11, offset: 46619},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1329, col: 11, offset: 46619},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 11, offset: 46619},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1329, col: 18, offset: 46626},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 19, offset: 46627},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1330, col: 11, offset: 46658},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1331, col: 11, offset: 46677},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1332, col: 11, offset: 46698},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1333, col: 11, offset: 46719},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1334, col: 11, offset: 46743},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1335, col: 11, offset: 46769},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1335, col: 11, offset: 46769},
										expr: &litMatcher{
											pos:        position{line: 1335, col: 12, offset: 46770},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 18, offset: 46776},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1336, col: 10, offset: 46799},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1337, col: 11, offset: 46828},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1341, col: 1, offset: 46902},
			expr: &seqExpr{
				pos: position{line: 1341, col: 27, offset: 46928},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1341, col: 27, offset: 46928},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1341, col: 33, offset: 46934},
						expr: &charClassMatcher{
							pos:        position{line: 1341, col: 34, offset: 46935},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1343, col: 1, offset: 46946},
			expr: &litMatcher{
				pos:        position{line: 1343, col: 25, offset: 46970},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1345, col: 1, offset: 46977},
			expr: &actionExpr{
				pos: position{line: 1345, col: 41, offset: 47017},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1345, col: 42, offset: 47018},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1345, col: 42, offset: 47018},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1345, col: 56, offset: 47032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1345, col: 56, offset: 47032},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1345, col: 60, offset: 47036},
									expr: &litMatcher{
										pos:        position{line: 1345, col: 61, offset: 47037},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1354, col: 1, offset: 47157},
			expr: &choiceExpr{
				pos: position{line: 1354, col: 15, offset: 47171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1354, col: 15, offset: 47171},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 39, offset: 47195},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1356, col: 1, offset: 47218},
			expr: &actionExpr{
				pos: position{line: 1356, col: 26, offset: 47243},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 26, offset: 47243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1356, col: 26, offset: 47243},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1356, col: 37, offset: 47254},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 38, offset: 47255},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1356, col: 59, offset: 47276},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1356, col: 64, offset: 47281},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1356, col: 74, offset: 47291},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1356, col: 105, offset: 47322},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1360, col: 1, offset: 47461},
			expr: &seqExpr{
				pos: position{line: 1360, col: 34, offset: 47494},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 34, offset: 47494},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1360, col: 63, offset: 47523},
						expr: &seqExpr{
							pos: position{line: 1360, col: 64, offset: 47524},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1360, col: 64, offset: 47524},
									expr: &litMatcher{
										pos:        position{line: 1360, col: 66, offset: 47526},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1360, col: 73, offset: 47533},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1360, col: 73, offset: 47533},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1360, col: 81, offset: 47541},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1362, col: 1, offset: 47608},
			expr: &choiceExpr{
				pos: position{line: 1362, col: 33, offset: 47640},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1362, col: 33, offset: 47640},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 47655},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1364, col: 11, offset: 47687},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1364, col: 11, offset: 47687},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1364, col: 19, offset: 47695},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 20, offset: 47696},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 47714},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 47737},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 47756},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 47777},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 47801},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 47825},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 47851},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 47880},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1374, col: 1, offset: 47920},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 5, offset: 47966},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1375, col: 5, offset: 47966},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1376, col: 7, offset: 48065},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1376, col: 7, offset: 48065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1376, col: 7, offset: 48065},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1376, col: 12, offset: 48070},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1380, col: 1, offset: 48235},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 26, offset: 48260},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1380, col: 26, offset: 48260},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1380, col: 26, offset: 48260},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 26, offset: 48260},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1380, col: 37, offset: 48271},
										expr: &ruleRefExpr{
											pos:  position{line: 1380, col: 38, offset: 48272},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1380, col: 60, offset: 48294},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1380, col: 60, offset: 48294},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1380, col: 64, offset: 48298},
											expr: &litMatcher{
												pos:        position{line: 1380, col: 65, offset: 48299},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 70, offset: 48304},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 80, offset: 48314},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 111, offset: 48345},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 48540},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1382, col: 5, offset: 48540},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1382, col: 5, offset: 48540},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1382, col: 16, offset: 48551},
										expr: &ruleRefExpr{
											pos:  position{line: 1382, col: 17, offset: 48552},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 38, offset: 48573},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1382, col: 42, offset: 48577},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1382, col: 52, offset: 48587},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1382, col: 52, offset: 48587},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1382, col: 56, offset: 48591},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 87, offset: 48622},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1386, col: 1, offset: 48836},
			expr: &seqExpr{
				pos: position{line: 1386, col: 34, offset: 48869},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1386, col: 34, offset: 48869},
						expr: &ruleRefExpr{
							pos:  position{line: 1386, col: 35, offset: 48870},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1386, col: 41, offset: 48876},
						expr: &ruleRefExpr{
							pos:  position{line: 1386, col: 41, offset: 48876},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1388, col: 1, offset: 48907},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 33, offset: 48939},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1388, col: 33, offset: 48939},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 48954},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1390, col: 11, offset: 48986},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1390, col: 11, offset: 48986},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1390, col: 19, offset: 48994},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 20, offset: 48995},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 49013},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1392, col: 11, offset: 49036},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1392, col: 11, offset: 49036},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 11, offset: 49036},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1392, col: 18, offset: 49043},
								expr: &seqExpr{
									pos: position{line: 1392, col: 19, offset: 49044},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1392, col: 19, offset: 49044},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1392, col: 23, offset: 49048},
											expr: &litMatcher{
												pos:        position{line: 1392, col: 24, offset: 49049},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 11, offset: 49065},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 11, offset: 49084},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 49105},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 11, offset: 49129},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 49153},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 49179},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 49208},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1401, col: 1, offset: 49248},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 5, offset: 49294},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1402, col: 5, offset: 49294},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1403, col: 7, offset: 49391},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1403, col: 7, offset: 49391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1403, col: 7, offset: 49391},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1403, col: 11, offset: 49395},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1407, col: 1, offset: 49558},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 49583},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 49583},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1408, col: 5, offset: 49583},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1408, col: 5, offset: 49583},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1408, col: 18, offset: 49596},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1408, col: 40, offset: 49618},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1408, col: 45, offset: 49623},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1408, col: 55, offset: 49633},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1408, col: 86, offset: 49664},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1410, col: 9, offset: 49821},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1410, col: 9, offset: 49821},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1410, col: 9, offset: 49821},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1410, col: 22, offset: 49834},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1410, col: 44, offset: 49856},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1410, col: 49, offset: 49861},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1410, col: 59, offset: 49871},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1410, col: 90, offset: 49902},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1413, col: 9, offset: 50102},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1413, col: 9, offset: 50102},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1413, col: 9, offset: 50102},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 22, offset: 50115},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1413, col: 44, offset: 50137},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 48, offset: 50141},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 58, offset: 50151},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1413, col: 89, offset: 50182},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1418, col: 1, offset: 50332},
			expr: &actionExpr{
				pos: position{line: 1418, col: 18, offset: 50349},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1418, col: 18, offset: 50349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1418, col: 18, offset: 50349},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1418, col: 29, offset: 50360},
								expr: &ruleRefExpr{
									pos:  position{line: 1418, col: 30, offset: 50361},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1418, col: 51, offset: 50382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 55, offset: 50386},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 64, offset: 50395},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1418, col: 86, offset: 50417},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1422, col: 1, offset: 50518},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 25, offset: 50542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1422, col: 25, offset: 50542},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1422, col: 38, offset: 50555},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1424, col: 1, offset: 50574},
			expr: &actionExpr{
				pos: position{line: 1424, col: 21, offset: 50594},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1424, col: 21, offset: 50594},
					expr: &charClassMatcher{
						pos:        position{line: 1424, col: 21, offset: 50594},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1428, col: 1, offset: 50671},
			expr: &actionExpr{
				pos: position{line: 1428, col: 25, offset: 50695},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 25, offset: 50695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1428, col: 25, offset: 50695},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 38, offset: 50708},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1428, col: 60, offset: 50730},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 64, offset: 50734},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 73, offset: 50743},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1428, col: 95, offset: 50765},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1432, col: 1, offset: 50894},
			expr: &actionExpr{
				pos: position{line: 1432, col: 20, offset: 50913},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 20, offset: 50913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1432, col: 20, offset: 50913},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1432, col: 31, offset: 50924},
								expr: &ruleRefExpr{
									pos:  position{line: 1432, col: 32, offset: 50925},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1432, col: 53, offset: 50946},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1432, col: 57, offset: 50950},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 66, offset: 50959},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1432, col: 90, offset: 50983},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1436, col: 1, offset: 51086},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 27, offset: 51112},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1436, col: 27, offset: 51112},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 40, offset: 51125},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1438, col: 1, offset: 51146},
			expr: &actionExpr{
				pos: position{line: 1438, col: 23, offset: 51168},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1438, col: 23, offset: 51168},
					expr: &charClassMatcher{
						pos:        position{line: 1438, col: 23, offset: 51168},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1442, col: 1, offset: 51245},
			expr: &actionExpr{
				pos: position{line: 1442, col: 27, offset: 51271},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 27, offset: 51271},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1442, col: 27, offset: 51271},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 40, offset: 51284},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 62, offset: 51306},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 66, offset: 51310},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 75, offset: 51319},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 99, offset: 51343},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1449, col: 1, offset: 51585},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 22, offset: 51606},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1449, col: 22, offset: 51606},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 46, offset: 51630},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 70, offset: 51654},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1451, col: 1, offset: 51672},
			expr: &litMatcher{
				pos:        position{line: 1451, col: 32, offset: 51703},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1453, col: 1, offset: 51708},
			expr: &actionExpr{
				pos: position{line: 1453, col: 26, offset: 51733},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1453, col: 26, offset: 51733},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1453, col: 26, offset: 51733},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 54, offset: 51761},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1453, col: 63, offset: 51770},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1453, col: 93, offset: 51800},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1453, col: 121, offset: 51828},
							expr: &ruleRefExpr{
								pos:  position{line: 1453, col: 122, offset: 51829},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1457, col: 1, offset: 51934},
			expr: &choiceExpr{
				pos: position{line: 1457, col: 33, offset: 51966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1457, col: 34, offset: 51967},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1457, col: 34, offset: 51967},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1457, col: 35, offset: 51968},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1457, col: 35, offset: 51968},
											expr: &ruleRefExpr{
												pos:  position{line: 1457, col: 36, offset: 51969},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1457, col: 64, offset: 51997},
											expr: &ruleRefExpr{
												pos:  position{line: 1457, col: 65, offset: 51998},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1457, col: 71, offset: 52004},
											expr: &ruleRefExpr{
												pos:  position{line: 1457, col: 72, offset: 52005},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1457, col: 80, offset: 52013,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1457, col: 83, offset: 52016},
									expr: &seqExpr{
										pos: position{line: 1457, col: 84, offset: 52017},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1457, col: 84, offset: 52017},
												expr: &seqExpr{
													pos: position{line: 1457, col: 86, offset: 52019},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1457, col: 86, offset: 52019},
															expr: &ruleRefExpr{
																pos:  position{line: 1457, col: 86, offset: 52019},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1457, col: 93, offset: 52026},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1457, col: 122, offset: 52055},
												expr: &ruleRefExpr{
													pos:  position{line: 1457, col: 123, offset: 52056},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1457, col: 151, offset: 52084},
												expr: &ruleRefExpr{
													pos:  position{line: 1457, col: 152, offset: 52085},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1457, col: 160, offset: 52093,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1459, col: 7, offset: 52235},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1459, col: 8, offset: 52236},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1459, col: 8, offset: 52236},
									expr: &ruleRefExpr{
										pos:  position{line: 1459, col: 9, offset: 52237},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1459, col: 15, offset: 52243},
									expr: &ruleRefExpr{
										pos:  position{line: 1459, col: 16, offset: 52244},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1459, col: 24, offset: 52252},
									expr: &ruleRefExpr{
										pos:  position{line: 1459, col: 25, offset: 52253},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1459, col: 53, offset: 52281,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1463, col: 1, offset: 52363},
			expr: &litMatcher{
				pos:        position{line: 1463, col: 32, offset: 52394},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1465, col: 1, offset: 52401},
			expr: &actionExpr{
				pos: position{line: 1465, col: 26, offset: 52426},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1465, col: 26, offset: 52426},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1465, col: 26, offset: 52426},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1465, col: 54, offset: 52454},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1465, col: 63, offset: 52463},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1465, col: 93, offset: 52493},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1465, col: 121, offset: 52521},
							expr: &ruleRefExpr{
								pos:  position{line: 1465, col: 122, offset: 52522},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1469, col: 1, offset: 52627},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 33, offset: 52659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1469, col: 34, offset: 52660},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1469, col: 34, offset: 52660},
							expr: &seqExpr{
								pos: position{line: 1469, col: 35, offset: 52661},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1469, col: 35, offset: 52661},
										expr: &ruleRefExpr{
											pos:  position{line: 1469, col: 36, offset: 52662},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1469, col: 64, offset: 52690,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1471, col: 7, offset: 52855},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1471, col: 7, offset: 52855},
							expr: &seqExpr{
								pos: position{line: 1471, col: 8, offset: 52856},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1471, col: 8, offset: 52856},
										expr: &ruleRefExpr{
											pos:  position{line: 1471, col: 9, offset: 52857},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1471, col: 15, offset: 52863},
										expr: &ruleRefExpr{
											pos:  position{line: 1471, col: 16, offset: 52864},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1471, col: 24, offset: 52872},
										expr: &ruleRefExpr{
											pos:  position{line: 1471, col: 25, offset: 52873},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1471, col: 53, offset: 52901,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1475, col: 1, offset: 52984},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 21, offset: 53004},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1475, col: 21, offset: 53004},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1475, col: 21, offset: 53004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1475, col: 21, offset: 53004},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 30, offset: 53013},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1475, col: 38, offset: 53021},
										expr: &ruleRefExpr{
											pos:  position{line: 1475, col: 39, offset: 53022},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 67, offset: 53050},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1477, col: 5, offset: 53146},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1477, col: 5, offset: 53146},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1477, col: 5, offset: 53146},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 15, offset: 53156},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1477, col: 23, offset: 53164},
										expr: &choiceExpr{
											pos: position{line: 1477, col: 24, offset: 53165},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1477, col: 24, offset: 53165},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1477, col: 37, offset: 53178},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1477, col: 65, offset: 53206},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1481, col: 1, offset: 53302},
			expr: &actionExpr{
				pos: position{line: 1481, col: 30, offset: 53331},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1481, col: 30, offset: 53331},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1488, col: 1, offset: 53504},
			expr: &choiceExpr{
				pos: position{line: 1488, col: 19, offset: 53522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1488, col: 19, offset: 53522},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 44, offset: 53547},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1490, col: 1, offset: 53572},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 27, offset: 53598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1490, col: 27, offset: 53598},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1490, col: 27, offset: 53598},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1490, col: 27, offset: 53598},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1490, col: 32, offset: 53603},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 36, offset: 53607},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 40, offset: 53611},
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 40, offset: 53611},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 47, offset: 53618},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1490, col: 51, offset: 53622},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 58, offset: 53629},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 79, offset: 53650},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1492, col: 5, offset: 53715},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1492, col: 5, offset: 53715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1492, col: 5, offset: 53715},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1492, col: 10, offset: 53720},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 14, offset: 53724},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1492, col: 18, offset: 53728},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1496, col: 1, offset: 53791},
			expr: &actionExpr{
				pos: position{line: 1496, col: 27, offset: 53817},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 27, offset: 53817},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1496, col: 27, offset: 53817},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 35, offset: 53825},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 40, offset: 53830},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 54, offset: 53844},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 72, offset: 53862},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1500, col: 1, offset: 53987},
			expr: &oneOrMoreExpr{
				pos: position{line: 1500, col: 24, offset: 54010},
				expr: &choiceExpr{
					pos: position{line: 1501, col: 5, offset: 54016},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 1501, col: 6, offset: 54017},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 1501, col: 6, offset: 54017},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 1501, col: 6, offset: 54017},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 1501, col: 14, offset: 54025},
										expr: &charClassMatcher{
											pos:        position{line: 1501, col: 14, offset: 54025},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1504, col: 5, offset: 54220},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 1505, col: 6, offset: 54235},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1505, col: 6, offset: 54235},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1513, col: 1, offset: 54412},
			expr: &choiceExpr{
				pos: position{line: 1513, col: 9, offset: 54420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1513, col: 9, offset: 54420},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1513, col: 24, offset: 54435},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1516, col: 1, offset: 54516},
			expr: &actionExpr{
				pos: position{line: 1516, col: 17, offset: 54532},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 17, offset: 54532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1516, col: 17, offset: 54532},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 25, offset: 54540},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 30, offset: 54545},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 40, offset: 54555},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 58, offset: 54573},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1520, col: 1, offset: 54686},
			expr: &actionExpr{
				pos: position{line: 1520, col: 17, offset: 54702},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1520, col: 17, offset: 54702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1520, col: 17, offset: 54702},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1520, col: 22, offset: 54707},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1520, col: 42, offset: 54727},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1520, col: 59, offset: 54744},
								expr: &ruleRefExpr{
									pos:  position{line: 1520, col: 60, offset: 54745},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1527, col: 1, offset: 54942},
			expr: &actionExpr{
				pos: position{line: 1528, col: 5, offset: 54961},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 5, offset: 54961},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1528, col: 5, offset: 54961},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1532, col: 5, offset: 55113},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 15, offset: 55123},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 21, offset: 55129},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 31, offset: 55139},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 49, offset: 55157},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1532, col: 67, offset: 55175},
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 67, offset: 55175},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1532, col: 74, offset: 55182},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1537, col: 1, offset: 55416},
			expr: &actionExpr{
				pos: position{line: 1537, col: 16, offset: 55431},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 16, offset: 55431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1537, col: 16, offset: 55431},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1537, col: 25, offset: 55440},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 26, offset: 55441},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 30, offset: 55445},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 36, offset: 55451},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 46, offset: 55461},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 64, offset: 55479},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1544, col: 1, offset: 55814},
			expr: &actionExpr{
				pos: position{line: 1544, col: 15, offset: 55828},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 15, offset: 55828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 15, offset: 55828},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 23, offset: 55836},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1544, col: 29, offset: 55842},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1544, col: 29, offset: 55842},
									expr: &charClassMatcher{
										pos:        position{line: 1544, col: 29, offset: 55842},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 73, offset: 55886},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 85, offset: 55898},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1551, col: 1, offset: 56170},
			expr: &choiceExpr{
				pos: position{line: 1551, col: 19, offset: 56188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1551, col: 19, offset: 56188},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1551, col: 19, offset: 56188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1551, col: 19, offset: 56188},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1551, col: 32, offset: 56201},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1551, col: 41, offset: 56210},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1551, col: 58, offset: 56227},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 5, offset: 56295},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1553, col: 5, offset: 56295},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1553, col: 5, offset: 56295},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1553, col: 17, offset: 56307},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1553, col: 22, offset: 56312},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1553, col: 35, offset: 56325},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1553, col: 39, offset: 56329},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1553, col: 47, offset: 56337},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 48, offset: 56338},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1553, col: 66, offset: 56356},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1557, col: 1, offset: 56417},
			expr: &ruleRefExpr{
				pos:  position{line: 1557, col: 16, offset: 56432},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1559, col: 1, offset: 56443},
			expr: &actionExpr{
				pos: position{line: 1559, col: 20, offset: 56462},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1559, col: 20, offset: 56462},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1559, col: 29, offset: 56471},
						expr: &seqExpr{
							pos: position{line: 1559, col: 30, offset: 56472},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1559, col: 30, offset: 56472},
									expr: &litMatcher{
										pos:        position{line: 1559, col: 31, offset: 56473},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1559, col: 35, offset: 56477},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1567, col: 1, offset: 56793},
			expr: &actionExpr{
				pos: position{line: 1567, col: 12, offset: 56804},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 12, offset: 56804},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1567, col: 12, offset: 56804},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1567, col: 16, offset: 56808},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1567, col: 21, offset: 56813},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1567, col: 21, offset: 56813},
									expr: &charClassMatcher{
										pos:        position{line: 1567, col: 21, offset: 56813},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1567, col: 69, offset: 56861},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1567, col: 73, offset: 56865},
							expr: &ruleRefExpr{
								pos:  position{line: 1567, col: 73, offset: 56865},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1567, col: 80, offset: 56872},
							expr: &choiceExpr{
								pos: position{line: 1567, col: 82, offset: 56874},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1567, col: 82, offset: 56874},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1567, col: 88, offset: 56880},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1571, col: 1, offset: 56933},
			expr: &actionExpr{
				pos: position{line: 1571, col: 20, offset: 56952},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1571, col: 20, offset: 56952},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1571, col: 20, offset: 56952},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1571, col: 25, offset: 56957},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1571, col: 48, offset: 56980},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1571, col: 61, offset: 56993},
								expr: &ruleRefExpr{
									pos:  position{line: 1571, col: 61, offset: 56993},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1575, col: 1, offset: 57090},
			expr: &actionExpr{
				pos: position{line: 1575, col: 26, offset: 57115},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 26, offset: 57115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1575, col: 26, offset: 57115},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 30, offset: 57119},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1575, col: 35, offset: 57124},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1575, col: 35, offset: 57124},
									expr: &charClassMatcher{
										pos:        position{line: 1575, col: 35, offset: 57124},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1575, col: 83, offset: 57172},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1575, col: 87, offset: 57176},
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 87, offset: 57176},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1584, col: 1, offset: 57423},
			expr: &actionExpr{
				pos: position{line: 1584, col: 18, offset: 57440},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1584, col: 18, offset: 57440},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1584, col: 19, offset: 57441},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1584, col: 19, offset: 57441},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1584, col: 27, offset: 57449},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1584, col: 37, offset: 57459},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1584, col: 45, offset: 57467},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1584, col: 55, offset: 57477},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1584, col: 63, offset: 57485},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1584, col: 72, offset: 57494},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1594, col: 1, offset: 57744},
			expr: &actionExpr{
				pos: position{line: 1594, col: 19, offset: 57762},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 19, offset: 57762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1594, col: 19, offset: 57762},
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 20, offset: 57763},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 5, offset: 57851},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1595, col: 12, offset: 57858},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1595, col: 12, offset: 57858},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1596, col: 11, offset: 57881},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1597, col: 11, offset: 57905},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1598, col: 11, offset: 57929},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1599, col: 11, offset: 57950},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1600, col: 11, offset: 57971},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1601, col: 11, offset: 57994},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1602, col: 11, offset: 58021},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1606, col: 1, offset: 58062},
			expr: &choiceExpr{
				pos: position{line: 1606, col: 19, offset: 58080},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1606, col: 19, offset: 58080},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1606, col: 19, offset: 58080},
								expr: &ruleRefExpr{
									pos:  position{line: 1606, col: 21, offset: 58082},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1606, col: 31, offset: 58092},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 19, offset: 58163},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 19, offset: 58203},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1609, col: 19, offset: 58244},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1610, col: 19, offset: 58285},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1611, col: 19, offset: 58326},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 19, offset: 58364},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 19, offset: 58404},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1618, col: 1, offset: 58627},
			expr: &actionExpr{
				pos: position{line: 1619, col: 5, offset: 58648},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 5, offset: 58648},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1619, col: 5, offset: 58648},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 5, offset: 58939},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 13, offset: 58947},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1628, col: 5, offset: 58976},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1637, col: 1, offset: 59320},
			expr: &seqExpr{
				pos: position{line: 1637, col: 26, offset: 59345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1637, col: 26, offset: 59345},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1637, col: 33, offset: 59352},
						expr: &ruleRefExpr{
							pos:  position{line: 1637, col: 33, offset: 59352},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1637, col: 40, offset: 59359},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1639, col: 1, offset: 59364},
			expr: &seqExpr{
				pos: position{line: 1639, col: 31, offset: 59394},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1639, col: 31, offset: 59394},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1639, col: 38, offset: 59401},
						expr: &ruleRefExpr{
							pos:  position{line: 1639, col: 38, offset: 59401},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1639, col: 45, offset: 59408},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1641, col: 1, offset: 59413},
			expr: &choiceExpr{
				pos: position{line: 1641, col: 29, offset: 59441},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1641, col: 30, offset: 59442},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1641, col: 30, offset: 59442},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1641, col: 37, offset: 59449},
								expr: &ruleRefExpr{
									pos:  position{line: 1641, col: 37, offset: 59449},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1641, col: 44, offset: 59456},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1641, col: 51, offset: 59463},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1643, col: 1, offset: 59468},
			expr: &actionExpr{
				pos: position{line: 1644, col: 5, offset: 59499},
				run: (*parser).callonExampleBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 5, offset: 59499},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1644, col: 14, offset: 59508},
						expr: &actionExpr{
							pos: position{line: 1645, col: 9, offset: 59518},
							run: (*parser).callonExampleBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1645, col: 9, offset: 59518},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1645, col: 9, offset: 59518},
										expr: &ruleRefExpr{
											pos:  position{line: 1645, col: 10, offset: 59519},
											name: "ExampleBlockEndDelimiter",
										},
									},
									&labeledExpr{
										pos:   position{line: 1646, col: 9, offset: 59553},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1646, col: 20, offset: 59564},
											expr: &ruleRefExpr{
												pos:  position{line: 1646, col: 21, offset: 59565},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1647, col: 9, offset: 59591},
										run: (*parser).callonExampleBlockRawContent11,
									},
									&labeledExpr{
										pos:   position{line: 1655, col: 9, offset: 59905},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1656, col: 13, offset: 59927},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1656, col: 13, offset: 59927},
													name: "LabeledListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1657, col: 15, offset: 59996},
													name: "SimpleRawParagraph",
												},
												&ruleRefExpr{
													pos:  position{line: 1658, col: 15, offset: 60029},
													name: "BlankLine",
												},
												&ruleRefExpr{
													pos:  position{line: 1659, col: 15, offset: 60053},
													name: "ImageBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1660, col: 15, offset: 60078},
													name: "ThematicBreak",
												},
												&ruleRefExpr{
													pos:  position{line: 1661, col: 15, offset: 60106},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1662, col: 15, offset: 60137},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1663, col: 15, offset: 60170},
													name: "ContinuedListItemElement",
												},
												&ruleRefExpr{
													pos:  position{line: 1664, col: 15, offset: 60209},
													name: "FencedBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1665, col: 15, offset: 60236},
													name: "ListingBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1666, col: 15, offset: 60264},
													name: "VerseBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1667, col: 15, offset: 60289},
													name: "QuoteBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1668, col: 15, offset: 60314},
													name: "SidebarBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1669, col: 15, offset: 60341},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1670, col: 15, offset: 60373},
													name: "PassthroughBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1671, col: 15, offset: 60404},
													name: "Table",
												},
												&ruleRefExpr{
													pos:  position{line: 1672, col: 15, offset: 60424},
													name: "CommentBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1673, col: 15, offset: 60451},
													name: "LiteralBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1674, col: 15, offset: 60479},
													name: "RawParagraph",
												},
												&actionExpr{
													pos: position{line: 1675, col: 15, offset: 60506},
													run: (*parser).callonExampleBlockRawContent33,
													expr: &ruleRefExpr{
														pos:  position{line: 1675, col: 15, offset: 60506},
														name: "ExampleBlockDelimiter",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1689, col: 1, offset: 61060},
			expr: &actionExpr{
				pos: position{line: 1690, col: 5, offset: 61079},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1690, col: 5, offset: 61079},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1690, col: 5, offset: 61079},
							run: (*parser).callonQuoteBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 5, offset: 61426},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 30, offset: 61451},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 39, offset: 61460},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 61, offset: 61482},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1703, col: 1, offset: 61605},
			expr: &seqExpr{
				pos: position{line: 1703, col: 24, offset: 61628},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1703, col: 24, offset: 61628},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1703, col: 31, offset: 61635},
						expr: &ruleRefExpr{
							pos:  position{line: 1703, col: 31, offset: 61635},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1703, col: 38, offset: 61642},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1705, col: 1, offset: 61672},
			expr: &seqExpr{
				pos: position{line: 1705, col: 29, offset: 61700},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1705, col: 29, offset: 61700},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1705, col: 36, offset: 61707},
						expr: &ruleRefExpr{
							pos:  position{line: 1705, col: 36, offset: 61707},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1705, col: 43, offset: 61714},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1707, col: 1, offset: 61744},
			expr: &choiceExpr{
				pos: position{line: 1707, col: 27, offset: 61770},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1707, col: 28, offset: 61771},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1707, col: 28, offset: 61771},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1707, col: 35, offset: 61778},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 35, offset: 61778},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1707, col: 42, offset: 61785},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1707, col: 49, offset: 61792},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1709, col: 1, offset: 61822},
			expr: &actionExpr{
				pos: position{line: 1710, col: 5, offset: 61850},
				run: (*parser).callonQuoteBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1710, col: 5, offset: 61850},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1710, col: 14, offset: 61859},
						expr: &actionExpr{
							pos: position{line: 1711, col: 9, offset: 61869},
							run: (*parser).callonQuoteBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1711, col: 9, offset: 61869},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1711, col: 9, offset: 61869},
										expr: &ruleRefExpr{
											pos:  position{line: 1711, col: 10, offset: 61870},
											name: "QuoteBlockEndDelimiter",
										},
									},
									&labeledExpr{
										pos:   position{line: 1712, col: 9, offset: 61902},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1712, col: 20, offset: 61913},
											expr: &ruleRefExpr{
												pos:  position{line: 1712, col: 21, offset: 61914},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1713, col: 9, offset: 61940},
										run: (*parser).callonQuoteBlockRawContent11,
									},
									&labeledExpr{
										pos:   position{line: 1717, col: 9, offset: 62038},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1717, col: 18, offset: 62047},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1717, col: 18, offset: 62047},
													name: "LabeledListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1718, col: 15, offset: 62116},
													name: "SimpleRawParagraph",
												},
												&ruleRefExpr{
													pos:  position{line: 1719, col: 15, offset: 62149},
													name: "BlankLine",
												},
												&ruleRefExpr{
													pos:  position{line: 1720, col: 15, offset: 62173},
													name: "ImageBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1721, col: 15, offset: 62198},
													name: "ThematicBreak",
												},
												&ruleRefExpr{
													pos:  position{line: 1722, col: 15, offset: 62226},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1723, col: 15, offset: 62257},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1724, col: 15, offset: 62290},
													name: "ContinuedListItemElement",
												},
												&ruleRefExpr{
													pos:  position{line: 1725, col: 15, offset: 62329},
													name: "FencedBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1726, col: 15, offset: 62356},
													name: "ListingBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1727, col: 15, offset: 62384},
													name: "VerseBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1728, col: 15, offset: 62409},
													name: "ExampleBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1729, col: 15, offset: 62436},
													name: "SidebarBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1730, col: 15, offset: 62463},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1731, col: 15, offset: 62495},
													name: "PassthroughBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1732, col: 15, offset: 62526},
													name: "Table",
												},
												&ruleRefExpr{
													pos:  position{line: 1733, col: 15, offset: 62546},
													name: "CommentBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1734, col: 15, offset: 62573},
													name: "LiteralBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1735, col: 15, offset: 62601},
													name: "RawParagraph",
												},
												&actionExpr{
													pos: position{line: 1736, col: 15, offset: 62628},
													run: (*parser).callonQuoteBlockRawContent33,
													expr: &ruleRefExpr{
														pos:  position{line: 1736, col: 15, offset: 62628},
														name: "QuoteBlockEndDelimiter",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1751, col: 1, offset: 63186},
			expr: &actionExpr{
				pos: position{line: 1751, col: 17, offset: 63202},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1751, col: 17, offset: 63202},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1751, col: 17, offset: 63202},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1751, col: 44, offset: 63229},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1751, col: 53, offset: 63238},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1751, col: 77, offset: 63262},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1755, col: 1, offset: 63381},
			expr: &seqExpr{
				pos: position{line: 1755, col: 26, offset: 63406},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1755, col: 26, offset: 63406},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1755, col: 33, offset: 63413},
						expr: &ruleRefExpr{
							pos:  position{line: 1755, col: 33, offset: 63413},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 40, offset: 63420},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1757, col: 1, offset: 63425},
			expr: &seqExpr{
				pos: position{line: 1757, col: 31, offset: 63455},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1757, col: 31, offset: 63455},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1757, col: 38, offset: 63462},
						expr: &ruleRefExpr{
							pos:  position{line: 1757, col: 38, offset: 63462},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1757, col: 45, offset: 63469},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1759, col: 1, offset: 63474},
			expr: &choiceExpr{
				pos: position{line: 1759, col: 29, offset: 63502},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1759, col: 30, offset: 63503},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1759, col: 30, offset: 63503},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1759, col: 37, offset: 63510},
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 37, offset: 63510},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1759, col: 44, offset: 63517},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1759, col: 51, offset: 63524},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1761, col: 1, offset: 63529},
			expr: &actionExpr{
				pos: position{line: 1762, col: 5, offset: 63559},
				run: (*parser).callonSidebarBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1762, col: 5, offset: 63559},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1762, col: 14, offset: 63568},
						expr: &actionExpr{
							pos: position{line: 1763, col: 9, offset: 63578},
							run: (*parser).callonSidebarBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1763, col: 9, offset: 63578},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1763, col: 9, offset: 63578},
										expr: &ruleRefExpr{
											pos:  position{line: 1763, col: 10, offset: 63579},
											name: "SidebarBlockEndDelimiter",
										},
									},
									&labeledExpr{
										pos:   position{line: 1764, col: 9, offset: 63613},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1764, col: 20, offset: 63624},
											expr: &ruleRefExpr{
												pos:  position{line: 1764, col: 21, offset: 63625},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1765, col: 9, offset: 63651},
										run: (*parser).callonSidebarBlockRawContent11,
									},
									&labeledExpr{
										pos:   position{line: 1769, col: 9, offset: 63749},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1769, col: 18, offset: 63758},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1769, col: 18, offset: 63758},
													name: "LabeledListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1770, col: 15, offset: 63827},
													name: "SimpleRawParagraph",
												},
												&ruleRefExpr{
													pos:  position{line: 1771, col: 15, offset: 63860},
													name: "BlankLine",
												},
												&ruleRefExpr{
													pos:  position{line: 1772, col: 15, offset: 63884},
													name: "ImageBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1773, col: 15, offset: 63909},
													name: "ThematicBreak",
												},
												&ruleRefExpr{
													pos:  position{line: 1774, col: 15, offset: 63937},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1775, col: 15, offset: 63968},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1776, col: 15, offset: 64001},
													name: "ContinuedListItemElement",
												},
												&ruleRefExpr{
													pos:  position{line: 1777, col: 15, offset: 64040},
													name: "FencedBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1778, col: 15, offset: 64067},
													name: "ListingBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1779, col: 15, offset: 64094},
													name: "VerseBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1780, col: 15, offset: 64120},
													name: "ExampleBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1781, col: 15, offset: 64147},
													name: "QuoteBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1782, col: 15, offset: 64172},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1783, col: 15, offset: 64204},
													name: "PassthroughBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1784, col: 15, offset: 64235},
													name: "Table",
												},
												&ruleRefExpr{
													pos:  position{line: 1785, col: 15, offset: 64255},
													name: "CommentBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1786, col: 15, offset: 64282},
													name: "LiteralBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1787, col: 15, offset: 64310},
													name: "RawParagraph",
												},
												&actionExpr{
													pos: position{line: 1788, col: 15, offset: 64337},
													run: (*parser).callonSidebarBlockRawContent33,
													expr: &ruleRefExpr{
														pos:  position{line: 1788, col: 15, offset: 64337},
														name: "SidebarBlockEndDelimiter",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1802, col: 1, offset: 64895},
			expr: &actionExpr{
				pos: position{line: 1802, col: 16, offset: 64910},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 16, offset: 64910},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1802, col: 16, offset: 64910},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 42, offset: 64936},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 51, offset: 64945},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 74, offset: 64968},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1806, col: 1, offset: 65085},
			expr: &seqExpr{
				pos: position{line: 1806, col: 25, offset: 65109},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1806, col: 25, offset: 65109},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1806, col: 31, offset: 65115},
						expr: &ruleRefExpr{
							pos:  position{line: 1806, col: 31, offset: 65115},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1806, col: 38, offset: 65122},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1808, col: 1, offset: 65182},
			expr: &seqExpr{
				pos: position{line: 1808, col: 30, offset: 65211},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1808, col: 30, offset: 65211},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1808, col: 36, offset: 65217},
						expr: &ruleRefExpr{
							pos:  position{line: 1808, col: 36, offset: 65217},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1808, col: 43, offset: 65224},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1810, col: 1, offset: 65229},
			expr: &choiceExpr{
				pos: position{line: 1810, col: 28, offset: 65256},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1810, col: 29, offset: 65257},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1810, col: 29, offset: 65257},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1810, col: 35, offset: 65263},
								expr: &ruleRefExpr{
									pos:  position{line: 1810, col: 35, offset: 65263},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 42, offset: 65270},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 49, offset: 65277},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1812, col: 1, offset: 65282},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1812, col: 26, offset: 65307},
				expr: &actionExpr{
					pos: position{line: 1812, col: 27, offset: 65308},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1812, col: 27, offset: 65308},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1812, col: 27, offset: 65308},
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 28, offset: 65309},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1812, col: 52, offset: 65333},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 58, offset: 65339},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1819, col: 1, offset: 65573},
			expr: &actionExpr{
				pos: position{line: 1819, col: 17, offset: 65589},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1819, col: 17, offset: 65589},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1819, col: 17, offset: 65589},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1819, col: 44, offset: 65616},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1819, col: 53, offset: 65625},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1819, col: 77, offset: 65649},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1823, col: 1, offset: 65768},
			expr: &seqExpr{
				pos: position{line: 1823, col: 26, offset: 65793},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1823, col: 26, offset: 65793},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1823, col: 33, offset: 65800},
						expr: &ruleRefExpr{
							pos:  position{line: 1823, col: 33, offset: 65800},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 40, offset: 65807},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1825, col: 1, offset: 65812},
			expr: &seqExpr{
				pos: position{line: 1825, col: 31, offset: 65842},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1825, col: 31, offset: 65842},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1825, col: 38, offset: 65849},
						expr: &ruleRefExpr{
							pos:  position{line: 1825, col: 38, offset: 65849},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1825, col: 45, offset: 65856},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1827, col: 1, offset: 65861},
			expr: &choiceExpr{
				pos: position{line: 1827, col: 29, offset: 65889},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1827, col: 30, offset: 65890},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1827, col: 30, offset: 65890},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1827, col: 37, offset: 65897},
								expr: &ruleRefExpr{
									pos:  position{line: 1827, col: 37, offset: 65897},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1827, col: 44, offset: 65904},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 51, offset: 65911},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1829, col: 1, offset: 65916},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1829, col: 27, offset: 65942},
				expr: &actionExpr{
					pos: position{line: 1829, col: 28, offset: 65943},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1829, col: 28, offset: 65943},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1829, col: 28, offset: 65943},
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 29, offset: 65944},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1829, col: 54, offset: 65969},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 60, offset: 65975},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1836, col: 1, offset: 66207},
			expr: &actionExpr{
				pos: position{line: 1837, col: 5, offset: 66226},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1837, col: 5, offset: 66226},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1837, col: 5, offset: 66226},
							run: (*parser).callonVerseBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 5, offset: 66406},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 30, offset: 66431},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1841, col: 39, offset: 66440},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 61, offset: 66462},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1845, col: 1, offset: 66585},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1845, col: 25, offset: 66609},
				expr: &actionExpr{
					pos: position{line: 1845, col: 26, offset: 66610},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1845, col: 26, offset: 66610},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1845, col: 26, offset: 66610},
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 27, offset: 66611},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1845, col: 50, offset: 66634},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 56, offset: 66640},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1852, col: 1, offset: 66878},
			expr: &actionExpr{
				pos: position{line: 1852, col: 21, offset: 66898},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 21, offset: 66898},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1852, col: 21, offset: 66898},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1852, col: 52, offset: 66929},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 61, offset: 66938},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 89, offset: 66966},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1856, col: 1, offset: 67093},
			expr: &seqExpr{
				pos: position{line: 1856, col: 30, offset: 67122},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1856, col: 30, offset: 67122},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1856, col: 37, offset: 67129},
						expr: &ruleRefExpr{
							pos:  position{line: 1856, col: 37, offset: 67129},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1856, col: 44, offset: 67136},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1858, col: 1, offset: 67141},
			expr: &seqExpr{
				pos: position{line: 1858, col: 35, offset: 67175},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1858, col: 35, offset: 67175},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 42, offset: 67182},
						expr: &ruleRefExpr{
							pos:  position{line: 1858, col: 42, offset: 67182},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1858, col: 49, offset: 67189},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1860, col: 1, offset: 67194},
			expr: &choiceExpr{
				pos: position{line: 1860, col: 33, offset: 67226},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1860, col: 34, offset: 67227},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1860, col: 34, offset: 67227},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1860, col: 41, offset: 67234},
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 41, offset: 67234},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1860, col: 48, offset: 67241},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 55, offset: 67248},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1862, col: 1, offset: 67253},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1862, col: 31, offset: 67283},
				expr: &actionExpr{
					pos: position{line: 1862, col: 32, offset: 67284},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1862, col: 32, offset: 67284},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1862, col: 32, offset: 67284},
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 33, offset: 67285},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1862, col: 62, offset: 67314},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 68, offset: 67320},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1869, col: 1, offset: 67554},
			expr: &seqExpr{
				pos: position{line: 1869, col: 26, offset: 67579},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1869, col: 26, offset: 67579},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1869, col: 33, offset: 67586},
						expr: &ruleRefExpr{
							pos:  position{line: 1869, col: 33, offset: 67586},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1869, col: 40, offset: 67593},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1871, col: 1, offset: 67598},
			expr: &seqExpr{
				pos: position{line: 1871, col: 31, offset: 67628},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1871, col: 31, offset: 67628},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1871, col: 38, offset: 67635},
						expr: &ruleRefExpr{
							pos:  position{line: 1871, col: 38, offset: 67635},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1871, col: 45, offset: 67642},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1873, col: 1, offset: 67647},
			expr: &choiceExpr{
				pos: position{line: 1873, col: 29, offset: 67675},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1873, col: 30, offset: 67676},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1873, col: 30, offset: 67676},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1873, col: 37, offset: 67683},
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 37, offset: 67683},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1873, col: 44, offset: 67690},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1873, col: 51, offset: 67697},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1875, col: 1, offset: 67702},
			expr: &actionExpr{
				pos: position{line: 1875, col: 17, offset: 67718},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1875, col: 17, offset: 67718},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1875, col: 17, offset: 67718},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 44, offset: 67745},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1875, col: 53, offset: 67754},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1875, col: 78, offset: 67779},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1879, col: 1, offset: 67872},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1879, col: 27, offset: 67898},
				expr: &actionExpr{
					pos: position{line: 1879, col: 28, offset: 67899},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1879, col: 28, offset: 67899},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1879, col: 28, offset: 67899},
								expr: &ruleRefExpr{
									pos:  position{line: 1879, col: 29, offset: 67900},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1879, col: 54, offset: 67925},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1879, col: 60, offset: 67931},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1883, col: 1, offset: 67969},
			expr: &actionExpr{
				pos: position{line: 1883, col: 22, offset: 67990},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1883, col: 22, offset: 67990},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1883, col: 22, offset: 67990},
							expr: &ruleRefExpr{
								pos:  position{line: 1883, col: 23, offset: 67991},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1883, col: 45, offset: 68013},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1883, col: 50, offset: 68018},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1883, col: 59, offset: 68027},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1883, col: 85, offset: 68053},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1887, col: 1, offset: 68118},
			expr: &actionExpr{
				pos: position{line: 1887, col: 29, offset: 68146},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1887, col: 29, offset: 68146},
					expr: &charClassMatcher{
						pos:        position{line: 1887, col: 29, offset: 68146},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1895, col: 1, offset: 68435},
			expr: &choiceExpr{
				pos: position{line: 1895, col: 17, offset: 68451},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1895, col: 17, offset: 68451},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1896, col: 19, offset: 68480},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1897, col: 19, offset: 68511},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1898, col: 19, offset: 68535},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1899, col: 19, offset: 68572},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1900, col: 19, offset: 68606},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1901, col: 19, offset: 68640},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1902, col: 19, offset: 68675},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1903, col: 19, offset: 68709},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1904, col: 19, offset: 68746},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1906, col: 1, offset: 68757},
			expr: &actionExpr{
				pos: position{line: 1906, col: 23, offset: 68779},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1906, col: 23, offset: 68779},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1906, col: 23, offset: 68779},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1906, col: 32, offset: 68788},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1906, col: 37, offset: 68793},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1906, col: 37, offset: 68793},
									expr: &charClassMatcher{
										pos:        position{line: 1906, col: 37, offset: 68793},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1906, col: 76, offset: 68832},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1911, col: 1, offset: 68984},
			expr: &seqExpr{
				pos: position{line: 1912, col: 5, offset: 69014},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1912, col: 5, offset: 69014},
						expr: &choiceExpr{
							pos: position{line: 1912, col: 6, offset: 69015},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1912, col: 6, offset: 69015},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 11, offset: 69044},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 11, offset: 69105},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1915, col: 11, offset: 69134},
									expr: &ruleRefExpr{
										pos:  position{line: 1915, col: 11, offset: 69134},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 69152},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1917, col: 11, offset: 69170},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1917, col: 21, offset: 69180},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1920, col: 1, offset: 69301},
			expr: &seqExpr{
				pos: position{line: 1921, col: 5, offset: 69330},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1921, col: 5, offset: 69330},
						expr: &choiceExpr{
							pos: position{line: 1921, col: 6, offset: 69331},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1921, col: 6, offset: 69331},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 11, offset: 69392},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 69419},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1924, col: 11, offset: 69448},
									expr: &ruleRefExpr{
										pos:  position{line: 1924, col: 11, offset: 69448},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 11, offset: 69465},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1926, col: 11, offset: 69483},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1926, col: 21, offset: 69493},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1929, col: 1, offset: 69547},
			expr: &seqExpr{
				pos: position{line: 1930, col: 5, offset: 69570},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1930, col: 5, offset: 69570},
						expr: &choiceExpr{
							pos: position{line: 1930, col: 6, offset: 69571},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1930, col: 6, offset: 69571},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1931, col: 11, offset: 69632},
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 11, offset: 69632},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 69650},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 69672},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 69695},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 69724},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 69742},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1936, col: 21, offset: 69752},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1939, col: 1, offset: 69810},
			expr: &seqExpr{
				pos: position{line: 1940, col: 5, offset: 69832},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1940, col: 5, offset: 69832},
						expr: &choiceExpr{
							pos: position{line: 1940, col: 6, offset: 69833},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1940, col: 6, offset: 69833},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1941, col: 11, offset: 69894},
									expr: &ruleRefExpr{
										pos:  position{line: 1941, col: 11, offset: 69894},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1942, col: 11, offset: 69912},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 11, offset: 69944},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 11, offset: 69973},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1945, col: 11, offset: 69991},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1945, col: 21, offset: 70001},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1948, col: 1, offset: 70055},
			expr: &seqExpr{
				pos: position{line: 1949, col: 5, offset: 70079},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1949, col: 5, offset: 70079},
						expr: &choiceExpr{
							pos: position{line: 1949, col: 6, offset: 70080},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1949, col: 6, offset: 70080},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1950, col: 11, offset: 70141},
									expr: &ruleRefExpr{
										pos:  position{line: 1950, col: 11, offset: 70141},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1951, col: 11, offset: 70159},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 11, offset: 70182},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1953, col: 11, offset: 70211},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1954, col: 11, offset: 70229},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1954, col: 21, offset: 70239},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1957, col: 1, offset: 70319},
			expr: &actionExpr{
				pos: position{line: 1957, col: 27, offset: 70345},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1957, col: 27, offset: 70345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1957, col: 27, offset: 70345},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1957, col: 33, offset: 70351},
								expr: &ruleRefExpr{
									pos:  position{line: 1957, col: 34, offset: 70352},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1957, col: 54, offset: 70372},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1961, col: 1, offset: 70439},
			expr: &actionExpr{
				pos: position{line: 1962, col: 5, offset: 70465},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1962, col: 5, offset: 70465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1962, col: 5, offset: 70465},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1962, col: 14, offset: 70474},
								expr: &choiceExpr{
									pos: position{line: 1962, col: 15, offset: 70475},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1962, col: 15, offset: 70475},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1963, col: 11, offset: 70536},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 11, offset: 70536},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1964, col: 11, offset: 70554},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1965, col: 11, offset: 70577},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1966, col: 11, offset: 70606},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1966, col: 21, offset: 70616},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1970, col: 1, offset: 70687},
			expr: &actionExpr{
				pos: position{line: 1970, col: 29, offset: 70715},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1970, col: 29, offset: 70715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1970, col: 29, offset: 70715},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1970, col: 35, offset: 70721},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1970, col: 43, offset: 70729},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1970, col: 44, offset: 70730},
									expr: &charClassMatcher{
										pos:        position{line: 1970, col: 44, offset: 70730},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1972, col: 8, offset: 70780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1977, col: 1, offset: 70867},
			expr: &seqExpr{
				pos: position{line: 1978, col: 5, offset: 70891},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1978, col: 5, offset: 70891},
						expr: &choiceExpr{
							pos: position{line: 1978, col: 6, offset: 70892},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1978, col: 6, offset: 70892},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1979, col: 11, offset: 70953},
									expr: &ruleRefExpr{
										pos:  position{line: 1979, col: 11, offset: 70953},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 11, offset: 70971},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1981, col: 11, offset: 70989},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1982, col: 11, offset: 71018},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 11, offset: 71036},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1983, col: 21, offset: 71046},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1987, col: 1, offset: 71194},
			expr: &seqExpr{
				pos: position{line: 1987, col: 24, offset: 71217},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1987, col: 24, offset: 71217},
						expr: &choiceExpr{
							pos: position{line: 1988, col: 5, offset: 71223},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1988, col: 5, offset: 71223},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1989, col: 7, offset: 71280},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1990, col: 7, offset: 71305},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1991, col: 7, offset: 71348},
									expr: &ruleRefExpr{
										pos:  position{line: 1991, col: 7, offset: 71348},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1992, col: 7, offset: 71362},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1993, col: 7, offset: 71376},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1993, col: 17, offset: 71386},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1996, col: 1, offset: 71443},
			expr: &seqExpr{
				pos: position{line: 1997, col: 5, offset: 71463},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1997, col: 5, offset: 71463},
						expr: &choiceExpr{
							pos: position{line: 1997, col: 6, offset: 71464},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1997, col: 6, offset: 71464},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1998, col: 11, offset: 71525},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1999, col: 11, offset: 71554},
									expr: &ruleRefExpr{
										pos:  position{line: 1999, col: 11, offset: 71554},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 11, offset: 71571},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 2001, col: 11, offset: 71589},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2002, col: 11, offset: 71607},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2002, col: 21, offset: 71617},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 2005, col: 1, offset: 71669},
			expr: &seqExpr{
				pos: position{line: 2005, col: 13, offset: 71681},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2005, col: 13, offset: 71681},
						expr: &choiceExpr{
							pos: position{line: 2006, col: 5, offset: 71687},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2006, col: 5, offset: 71687},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2007, col: 8, offset: 71714},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 2007, col: 8, offset: 71714},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2007, col: 8, offset: 71714},
												expr: &ruleRefExpr{
													pos:  position{line: 2007, col: 9, offset: 71715},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2007, col: 13, offset: 71719},
												expr: &charClassMatcher{
													pos:        position{line: 2007, col: 13, offset: 71719},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2007, col: 22, offset: 71728},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2009, col: 10, offset: 71833},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2014, col: 1, offset: 72026},
			expr: &actionExpr{
				pos: position{line: 2014, col: 10, offset: 72035},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2014, col: 10, offset: 72035},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2014, col: 10, offset: 72035},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2015, col: 5, offset: 72054},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2015, col: 12, offset: 72061},
								expr: &ruleRefExpr{
									pos:  position{line: 2015, col: 13, offset: 72062},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2016, col: 5, offset: 72084},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2016, col: 11, offset: 72090},
								expr: &ruleRefExpr{
									pos:  position{line: 2016, col: 12, offset: 72091},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2017, col: 6, offset: 72108},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2017, col: 6, offset: 72108},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2017, col: 23, offset: 72125},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2021, col: 1, offset: 72263},
			expr: &seqExpr{
				pos: position{line: 2021, col: 23, offset: 72285},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2021, col: 23, offset: 72285},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2021, col: 27, offset: 72289},
						expr: &ruleRefExpr{
							pos:  position{line: 2021, col: 27, offset: 72289},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2023, col: 1, offset: 72297},
			expr: &seqExpr{
				pos: position{line: 2023, col: 19, offset: 72315},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2023, col: 19, offset: 72315},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2023, col: 26, offset: 72322},
						expr: &ruleRefExpr{
							pos:  position{line: 2023, col: 26, offset: 72322},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2023, col: 33, offset: 72329},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2026, col: 1, offset: 72397},
			expr: &actionExpr{
				pos: position{line: 2026, col: 20, offset: 72416},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2026, col: 20, offset: 72416},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2026, col: 20, offset: 72416},
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 21, offset: 72417},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 36, offset: 72432},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2026, col: 42, offset: 72438},
								expr: &ruleRefExpr{
									pos:  position{line: 2026, col: 43, offset: 72439},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 55, offset: 72451},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 59, offset: 72455},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2030, col: 1, offset: 72523},
			expr: &actionExpr{
				pos: position{line: 2030, col: 14, offset: 72536},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 14, offset: 72536},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2030, col: 14, offset: 72536},
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 15, offset: 72537},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 30, offset: 72552},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2030, col: 36, offset: 72558},
								expr: &ruleRefExpr{
									pos:  position{line: 2030, col: 37, offset: 72559},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2030, col: 49, offset: 72571},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2030, col: 53, offset: 72575},
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 53, offset: 72575},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2034, col: 1, offset: 72644},
			expr: &actionExpr{
				pos: position{line: 2034, col: 14, offset: 72657},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2034, col: 14, offset: 72657},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2034, col: 14, offset: 72657},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 33, offset: 72676},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2034, col: 42, offset: 72685},
								expr: &seqExpr{
									pos: position{line: 2034, col: 43, offset: 72686},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2034, col: 43, offset: 72686},
											expr: &ruleRefExpr{
												pos:  position{line: 2034, col: 44, offset: 72687},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2034, col: 63, offset: 72706},
											expr: &ruleRefExpr{
												pos:  position{line: 2034, col: 64, offset: 72707},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2034, col: 68, offset: 72711},
											expr: &ruleRefExpr{
												pos:  position{line: 2034, col: 68, offset: 72711},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2034, col: 75, offset: 72718},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2034, col: 89, offset: 72732},
											expr: &ruleRefExpr{
												pos:  position{line: 2034, col: 89, offset: 72732},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2041, col: 1, offset: 73058},
			expr: &choiceExpr{
				pos: position{line: 2041, col: 17, offset: 73074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2041, col: 17, offset: 73074},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2041, col: 49, offset: 73106},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2041, col: 78, offset: 73135},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2043, col: 1, offset: 73171},
			expr: &litMatcher{
				pos:        position{line: 2043, col: 26, offset: 73196},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2046, col: 1, offset: 73268},
			expr: &actionExpr{
				pos: position{line: 2046, col: 31, offset: 73298},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &labeledExpr{
					pos:   position{line: 2046, col: 31, offset: 73298},
					label: "lines",
					expr: &ruleRefExpr{
						pos:  position{line: 2046, col: 38, offset: 73305},
						name: "ParagraphWithHeadingSpacesLines",
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2051, col: 1, offset: 73554},
			expr: &actionExpr{
				pos: position{line: 2052, col: 5, offset: 73594},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2052, col: 5, offset: 73594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2052, col: 5, offset: 73594},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2052, col: 16, offset: 73605},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 5, offset: 73641},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2053, col: 16, offset: 73652},
								expr: &ruleRefExpr{
									pos:  position{line: 2053, col: 17, offset: 73653},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2057, col: 1, offset: 73762},
			expr: &actionExpr{
				pos: position{line: 2057, col: 35, offset: 73796},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2057, col: 35, offset: 73796},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2057, col: 35, offset: 73796},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2057, col: 41, offset: 73802},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2057, col: 41, offset: 73802},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2057, col: 41, offset: 73802},
											expr: &ruleRefExpr{
												pos:  position{line: 2057, col: 41, offset: 73802},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2057, col: 48, offset: 73809},
											expr: &charClassMatcher{
												pos:        position{line: 2057, col: 48, offset: 73809},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2059, col: 8, offset: 73875},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2064, col: 1, offset: 74015},
			expr: &actionExpr{
				pos: position{line: 2064, col: 39, offset: 74053},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2064, col: 39, offset: 74053},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2064, col: 39, offset: 74053},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2064, col: 61, offset: 74075},
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 61, offset: 74075},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2064, col: 68, offset: 74082},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2064, col: 76, offset: 74090},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 83, offset: 74097},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2064, col: 125, offset: 74139},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2064, col: 126, offset: 74140},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2064, col: 126, offset: 74140},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2064, col: 148, offset: 74162},
											expr: &ruleRefExpr{
												pos:  position{line: 2064, col: 148, offset: 74162},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2064, col: 155, offset: 74169},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2064, col: 162, offset: 74176},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2069, col: 1, offset: 74354},
			expr: &actionExpr{
				pos: position{line: 2069, col: 44, offset: 74397},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2069, col: 44, offset: 74397},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2069, col: 50, offset: 74403},
						expr: &ruleRefExpr{
							pos:  position{line: 2069, col: 51, offset: 74404},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2073, col: 1, offset: 74488},
			expr: &actionExpr{
				pos: position{line: 2074, col: 5, offset: 74543},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2074, col: 5, offset: 74543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2074, col: 5, offset: 74543},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2074, col: 11, offset: 74549},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2074, col: 11, offset: 74549},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2074, col: 11, offset: 74549},
											expr: &ruleRefExpr{
												pos:  position{line: 2074, col: 12, offset: 74550},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2074, col: 34, offset: 74572},
											expr: &charClassMatcher{
												pos:        position{line: 2074, col: 34, offset: 74572},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2076, col: 8, offset: 74638},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2081, col: 1, offset: 74764},
			expr: &actionExpr{
				pos: position{line: 2082, col: 5, offset: 74802},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2082, col: 5, offset: 74802},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2082, col: 5, offset: 74802},
							run: (*parser).callonParagraphWithLiteralAttribute3,
						},
						&labeledExpr{
							pos:   position{line: 2086, col: 5, offset: 74955},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2086, col: 11, offset: 74961},
								expr: &ruleRefExpr{
									pos:  position{line: 2086, col: 12, offset: 74962},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2090, col: 1, offset: 75118},
			expr: &actionExpr{
				pos: position{line: 2090, col: 16, offset: 75133},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2090, col: 16, offset: 75133},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2094, col: 1, offset: 75179},
			expr: &actionExpr{
				pos: position{line: 2094, col: 25, offset: 75203},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2094, col: 25, offset: 75203},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2094, col: 25, offset: 75203},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 26, offset: 75204},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2094, col: 36, offset: 75214},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2094, col: 45, offset: 75223},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2094, col: 45, offset: 75223},
									expr: &charClassMatcher{
										pos:        position{line: 2094, col: 45, offset: 75223},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2096, col: 4, offset: 75281},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2103, col: 1, offset: 75458},
			expr: &actionExpr{
				pos: position{line: 2103, col: 14, offset: 75471},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2103, col: 14, offset: 75471},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2103, col: 14, offset: 75471},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2103, col: 19, offset: 75476},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2103, col: 25, offset: 75482},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2103, col: 43, offset: 75500},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2107, col: 1, offset: 75565},
			expr: &actionExpr{
				pos: position{line: 2107, col: 21, offset: 75585},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2107, col: 21, offset: 75585},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2107, col: 30, offset: 75594},
						expr: &choiceExpr{
							pos: position{line: 2107, col: 31, offset: 75595},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2107, col: 31, offset: 75595},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 38, offset: 75602},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 53, offset: 75617},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 66, offset: 75630},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 74, offset: 75638},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 93, offset: 75657},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2107, col: 114, offset: 75678},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2107, col: 115, offset: 75679},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2107, col: 115, offset: 75679},
												expr: &litMatcher{
													pos:        position{line: 2107, col: 116, offset: 75680},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2107, col: 121, offset: 75685,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2113, col: 1, offset: 75791},
			expr: &actionExpr{
				pos: position{line: 2113, col: 23, offset: 75813},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2113, col: 23, offset: 75813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2113, col: 23, offset: 75813},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2113, col: 29, offset: 75819},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2113, col: 36, offset: 75826},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2114, col: 5, offset: 75858},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2114, col: 11, offset: 75864},
								expr: &actionExpr{
									pos: position{line: 2114, col: 12, offset: 75865},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2114, col: 12, offset: 75865},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2114, col: 12, offset: 75865},
												expr: &ruleRefExpr{
													pos:  position{line: 2114, col: 12, offset: 75865},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2114, col: 19, offset: 75872},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2114, col: 23, offset: 75876},
												expr: &ruleRefExpr{
													pos:  position{line: 2114, col: 23, offset: 75876},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2114, col: 30, offset: 75883},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2114, col: 39, offset: 75892},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2115, col: 5, offset: 75950},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2115, col: 11, offset: 75956},
								expr: &actionExpr{
									pos: position{line: 2115, col: 12, offset: 75957},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2115, col: 12, offset: 75957},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2115, col: 12, offset: 75957},
												expr: &ruleRefExpr{
													pos:  position{line: 2115, col: 12, offset: 75957},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2115, col: 19, offset: 75964},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2115, col: 23, offset: 75968},
												expr: &ruleRefExpr{
													pos:  position{line: 2115, col: 23, offset: 75968},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2115, col: 30, offset: 75975},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2115, col: 39, offset: 75984},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2116, col: 5, offset: 76042},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2120, col: 1, offset: 76121},
			expr: &actionExpr{
				pos: position{line: 2120, col: 30, offset: 76150},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2120, col: 30, offset: 76150},
					expr: &choiceExpr{
						pos: position{line: 2120, col: 31, offset: 76151},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2120, col: 31, offset: 76151},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2120, col: 42, offset: 76162},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2127, col: 1, offset: 76311},
			expr: &actionExpr{
				pos: position{line: 2127, col: 14, offset: 76324},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2127, col: 14, offset: 76324},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2127, col: 14, offset: 76324},
							expr: &ruleRefExpr{
								pos:  position{line: 2127, col: 15, offset: 76325},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2127, col: 19, offset: 76329},
							expr: &ruleRefExpr{
								pos:  position{line: 2127, col: 19, offset: 76329},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2127, col: 26, offset: 76336},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2135, col: 1, offset: 76481},
			expr: &choiceExpr{
				pos: position{line: 2135, col: 11, offset: 76491},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2135, col: 11, offset: 76491},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 24, offset: 76504},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 36, offset: 76516},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 48, offset: 76528},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 61, offset: 76541},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 72, offset: 76552},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2137, col: 1, offset: 76571},
			expr: &actionExpr{
				pos: position{line: 2137, col: 15, offset: 76585},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2137, col: 15, offset: 76585},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2140, col: 1, offset: 76638},
			expr: &actionExpr{
				pos: position{line: 2140, col: 14, offset: 76651},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2140, col: 14, offset: 76651},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2143, col: 1, offset: 76705},
			expr: &actionExpr{
				pos: position{line: 2143, col: 14, offset: 76718},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2143, col: 14, offset: 76718},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2146, col: 1, offset: 76773},
			expr: &actionExpr{
				pos: position{line: 2146, col: 15, offset: 76787},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2146, col: 15, offset: 76787},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2149, col: 1, offset: 76841},
			expr: &actionExpr{
				pos: position{line: 2149, col: 13, offset: 76853},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2149, col: 13, offset: 76853},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2157, col: 1, offset: 77130},
			expr: &actionExpr{
				pos: position{line: 2157, col: 22, offset: 77151},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2157, col: 22, offset: 77151},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2157, col: 22, offset: 77151},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2157, col: 31, offset: 77160},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2157, col: 35, offset: 77164},
							expr: &charClassMatcher{
								pos:        position{line: 2157, col: 36, offset: 77165},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2166, col: 1, offset: 77527},
			expr: &choiceExpr{
				pos: position{line: 2166, col: 21, offset: 77547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2166, col: 21, offset: 77547},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2166, col: 21, offset: 77547},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2169, col: 9, offset: 77710},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2169, col: 10, offset: 77711},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2169, col: 10, offset: 77711},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2169, col: 16, offset: 77717},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2169, col: 22, offset: 77723},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2176, col: 1, offset: 77901},
			expr: &charClassMatcher{
				pos:        position{line: 2176, col: 13, offset: 77913},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2178, col: 1, offset: 77923},
			expr: &choiceExpr{
				pos: position{line: 2178, col: 16, offset: 77938},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2178, col: 16, offset: 77938},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 22, offset: 77944},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 28, offset: 77950},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 34, offset: 77956},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 40, offset: 77962},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 46, offset: 77968},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2180, col: 1, offset: 77974},
			expr: &actionExpr{
				pos: position{line: 2180, col: 14, offset: 77987},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2180, col: 14, offset: 77987},
					expr: &charClassMatcher{
						pos:        position{line: 2180, col: 14, offset: 77987},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2184, col: 1, offset: 78033},
			expr: &choiceExpr{
				pos: position{line: 2188, col: 5, offset: 78360},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2188, col: 5, offset: 78360},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2188, col: 5, offset: 78360},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2188, col: 5, offset: 78360},
									expr: &charClassMatcher{
										pos:        position{line: 2188, col: 5, offset: 78360},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2188, col: 15, offset: 78370},
									expr: &choiceExpr{
										pos: position{line: 2188, col: 17, offset: 78372},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2188, col: 17, offset: 78372},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2188, col: 30, offset: 78385},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2190, col: 9, offset: 78455},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2190, col: 9, offset: 78455},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2190, col: 9, offset: 78455},
									expr: &charClassMatcher{
										pos:        position{line: 2190, col: 9, offset: 78455},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2190, col: 19, offset: 78465},
									expr: &seqExpr{
										pos: position{line: 2190, col: 20, offset: 78466},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2190, col: 20, offset: 78466},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2190, col: 27, offset: 78473},
												expr: &charClassMatcher{
													pos:        position{line: 2190, col: 27, offset: 78473},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2194, col: 1, offset: 78560},
			expr: &choiceExpr{
				pos: position{line: 2195, col: 5, offset: 78641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2195, col: 5, offset: 78641},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2195, col: 5, offset: 78641},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2195, col: 5, offset: 78641},
									expr: &charClassMatcher{
										pos:        position{line: 2195, col: 5, offset: 78641},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2195, col: 19, offset: 78655},
									expr: &choiceExpr{
										pos: position{line: 2195, col: 21, offset: 78657},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2195, col: 21, offset: 78657},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2195, col: 31, offset: 78667},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2197, col: 9, offset: 78736},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2200, col: 1, offset: 78836},
			expr: &actionExpr{
				pos: position{line: 2200, col: 12, offset: 78847},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2200, col: 12, offset: 78847},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2204, col: 1, offset: 78912},
			expr: &actionExpr{
				pos: position{line: 2204, col: 17, offset: 78928},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2204, col: 17, offset: 78928},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2204, col: 22, offset: 78933},
						expr: &choiceExpr{
							pos: position{line: 2204, col: 23, offset: 78934},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2204, col: 23, offset: 78934},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2204, col: 34, offset: 78945},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2208, col: 1, offset: 79026},
			expr: &actionExpr{
				pos: position{line: 2208, col: 13, offset: 79038},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2208, col: 13, offset: 79038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2208, col: 13, offset: 79038},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2208, col: 20, offset: 79045},
								expr: &ruleRefExpr{
									pos:  position{line: 2208, col: 21, offset: 79046},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2208, col: 30, offset: 79055},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2208, col: 35, offset: 79060},
								expr: &choiceExpr{
									pos: position{line: 2208, col: 36, offset: 79061},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2208, col: 36, offset: 79061},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2208, col: 47, offset: 79072},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2212, col: 1, offset: 79157},
			expr: &actionExpr{
				pos: position{line: 2212, col: 23, offset: 79179},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2212, col: 23, offset: 79179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2212, col: 23, offset: 79179},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2212, col: 31, offset: 79187},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2212, col: 39, offset: 79195},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2212, col: 44, offset: 79200},
								expr: &choiceExpr{
									pos: position{line: 2212, col: 45, offset: 79201},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2212, col: 45, offset: 79201},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2212, col: 56, offset: 79212},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2216, col: 1, offset: 79297},
			expr: &actionExpr{
				pos: position{line: 2216, col: 13, offset: 79309},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2216, col: 13, offset: 79309},
					expr: &charClassMatcher{
						pos:        position{line: 2216, col: 14, offset: 79310},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2220, col: 1, offset: 79432},
			expr: &choiceExpr{
				pos: position{line: 2220, col: 11, offset: 79442},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2220, col: 11, offset: 79442},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2220, col: 23, offset: 79454},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2220, col: 36, offset: 79467},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2220, col: 47, offset: 79478},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2220, col: 58, offset: 79489},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2222, col: 1, offset: 79500},
			expr: &actionExpr{
				pos: position{line: 2222, col: 7, offset: 79506},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2222, col: 7, offset: 79506},
					expr: &charClassMatcher{
						pos:        position{line: 2222, col: 7, offset: 79506},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2226, col: 1, offset: 79631},
			expr: &actionExpr{
				pos: position{line: 2226, col: 10, offset: 79640},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2226, col: 10, offset: 79640},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2230, col: 1, offset: 79682},
			expr: &actionExpr{
				pos: position{line: 2230, col: 11, offset: 79692},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2230, col: 11, offset: 79692},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2230, col: 11, offset: 79692},
							expr: &litMatcher{
								pos:        position{line: 2230, col: 11, offset: 79692},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2230, col: 16, offset: 79697},
							expr: &ruleRefExpr{
								pos:  position{line: 2230, col: 16, offset: 79697},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2234, col: 1, offset: 79749},
			expr: &choiceExpr{
				pos: position{line: 2234, col: 10, offset: 79758},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2234, col: 10, offset: 79758},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2234, col: 16, offset: 79764},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2234, col: 16, offset: 79764},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2238, col: 1, offset: 79805},
			expr: &choiceExpr{
				pos: position{line: 2238, col: 12, offset: 79816},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2238, col: 12, offset: 79816},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2238, col: 21, offset: 79825},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2238, col: 28, offset: 79832},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2240, col: 1, offset: 79838},
			expr: &notExpr{
				pos: position{line: 2240, col: 8, offset: 79845},
				expr: &anyMatcher{
					line: 2240, col: 9, offset: 79846,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2242, col: 1, offset: 79849},
			expr: &choiceExpr{
				pos: position{line: 2242, col: 8, offset: 79856},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2242, col: 8, offset: 79856},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2242, col: 18, offset: 79866},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentBlock8(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonDocumentBlock8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock8(stack["attributes"])
}

func (c *current) onDocumentBlock30() (interface{}, error) {
	// for standalone attributes at the end of the doc
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonDocumentBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock30()
}

func (c *current) onDocumentBlock1(attributes, block interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return block, nil

}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["attributes"], stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes12(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonInlineAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes3()
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLongHandAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes3()
}

func (c *current) onLongHandAttributes1(firstPositionalAttribute, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttribute != nil {
		attributes = append(attributes, firstPositionalAttribute.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttribute"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttribute17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttribute17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttribute1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue13()
}

func (c *current) onSingleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue16()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue16()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue8()
}

func (c *current) onUnquotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13()
}

func (c *current) onUnquotedAttributeValue15(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, c.globalStore.getAttributes())
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["t"], stack["lines"])
}

func (c *current) onRawParagraph12(content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph12(stack["content"])
}

func (c *current) onRawParagraph19() (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonRawParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph19()
}

func (c *current) onRawParagraph17(content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonRawParagraph17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph17(stack["content"])
}

func (c *current) onRawParagraph23(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph3() (bool, error) {
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph3()
}

func (c *current) onSimpleRawParagraph1(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), c.globalStore.getAttributes())

}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph9(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonContinuedRawParagraph9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph9(stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(blocks interface{}) (interface{}, error) {
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("current state attributes before initializing ExampleBlock'")
	//     spew.Fdump(log.StandardLogger().Out, c.state)
	// }
	return types.NewExampleBlock(blocks.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["blocks"])
}

func (c *current) onExampleBlockRawContent11(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("added exampleblock block attributes to state:")
	//     spew.Fdump(log.StandardLogger().Out, c.state)
	// }
	return nil

}

func (p *parser) callonExampleBlockRawContent11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent11(stack["attributes"])
}

func (c *current) onExampleBlockRawContent33() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonExampleBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent33()
}

func (c *current) onExampleBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonExampleBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onExampleBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonExampleBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1(stack["elements"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	attrs := c.globalStore.getAttributes()
	if types.HasNotAttribute(attrs, types.AttrPositional1) ||
		types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockRawContent11(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonQuoteBlockRawContent11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent11(stack["attributes"])
}

func (c *current) onQuoteBlockRawContent33() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonQuoteBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent33()
}

func (c *current) onQuoteBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onQuoteBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonQuoteBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1(stack["elements"])
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockRawContent11(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonSidebarBlockRawContent11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent11(stack["attributes"])
}

func (c *current) onSidebarBlockRawContent33() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonSidebarBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent33()
}

func (c *current) onSidebarBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onSidebarBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSidebarBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1(stack["elements"])
}

func (c *current) onFencedBlock1(content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock3() (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonVerseBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock3()
}

func (c *current) onVerseBlock1(content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute3() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute3()
}

func (c *current) onParagraphWithLiteralAttribute1(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
