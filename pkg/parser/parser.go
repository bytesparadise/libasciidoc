// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 332},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 352},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 352},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 365},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 379},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 387},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 411},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 491},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 511},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 511},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 511},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 519},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 540},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 640},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 656},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 656},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 656},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 664},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 684},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 867},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 893},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 893},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 901},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 901},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 918},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 926},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 926},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1175},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1201},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1266},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1292},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1344},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1362},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1387},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1411},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1465},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1487},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1514},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1543},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1569},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1604},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1628},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1660},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1686},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1723},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1748},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1779},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 63, col: 1, offset: 1790},
			expr: &labeledExpr{
				pos:   position{line: 63, col: 47, offset: 1836},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 63, col: 54, offset: 1843},
					expr: &ruleRefExpr{
						pos:  position{line: 63, col: 55, offset: 1844},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1881},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1918},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1918},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1918},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1919},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1928},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 66, col: 12, offset: 1935},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 66, col: 12, offset: 1935},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1960},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2012},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2036},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2061},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2083},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2110},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2139},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2166},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2201},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2225},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2257},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2283},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2320},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2345},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 84, col: 1, offset: 2383},
			expr: &labeledExpr{
				pos:   position{line: 84, col: 23, offset: 2405},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 30, offset: 2412},
					expr: &ruleRefExpr{
						pos:  position{line: 84, col: 31, offset: 2413},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 86, col: 1, offset: 2434},
			expr: &actionExpr{
				pos: position{line: 86, col: 22, offset: 2455},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 86, col: 22, offset: 2455},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 86, col: 22, offset: 2455},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 23, offset: 2456},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2465},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 87, col: 12, offset: 2472},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 12, offset: 2472},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 24, offset: 2484},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 94, col: 1, offset: 2630},
			expr: &ruleRefExpr{
				pos:  position{line: 94, col: 16, offset: 2645},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 96, col: 1, offset: 2663},
			expr: &actionExpr{
				pos: position{line: 96, col: 20, offset: 2682},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 96, col: 20, offset: 2682},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 96, col: 20, offset: 2682},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 41, offset: 2703},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 96, col: 49, offset: 2711},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 50, offset: 2712},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 75, offset: 2737},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 100, col: 1, offset: 2817},
			expr: &seqExpr{
				pos: position{line: 100, col: 26, offset: 2842},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 26, offset: 2842},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 100, col: 32, offset: 2848},
						expr: &ruleRefExpr{
							pos:  position{line: 100, col: 32, offset: 2848},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 39, offset: 2855},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 102, col: 1, offset: 2860},
			expr: &actionExpr{
				pos: position{line: 102, col: 27, offset: 2886},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 102, col: 27, offset: 2886},
					expr: &oneOrMoreExpr{
						pos: position{line: 102, col: 28, offset: 2887},
						expr: &seqExpr{
							pos: position{line: 102, col: 29, offset: 2888},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 29, offset: 2888},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 30, offset: 2889},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 102, col: 51, offset: 2910,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 109, col: 1, offset: 3076},
			expr: &actionExpr{
				pos: position{line: 109, col: 19, offset: 3094},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 109, col: 19, offset: 3094},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 109, col: 19, offset: 3094},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 109, col: 23, offset: 3098},
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 23, offset: 3098},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 30, offset: 3105},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 37, offset: 3112},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 52, offset: 3127},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 56, offset: 3131},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 56, offset: 3131},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 74, offset: 3149},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3161},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3162},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 3162},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 30, offset: 3182},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3205},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 18, offset: 3214},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 18, offset: 3214},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3241},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3242},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3242},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3262},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3285},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 19, offset: 3295},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 19, offset: 3295},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 117, col: 1, offset: 3396},
			expr: &choiceExpr{
				pos: position{line: 117, col: 20, offset: 3415},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 20, offset: 3415},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 117, col: 48, offset: 3443},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 119, col: 1, offset: 3473},
			expr: &actionExpr{
				pos: position{line: 119, col: 30, offset: 3502},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 119, col: 30, offset: 3502},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 30, offset: 3502},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 30, offset: 3502},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 119, col: 37, offset: 3509},
							expr: &litMatcher{
								pos:        position{line: 119, col: 38, offset: 3510},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 42, offset: 3514},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 119, col: 51, offset: 3523},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 51, offset: 3523},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 68, offset: 3540},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 123, col: 1, offset: 3610},
			expr: &actionExpr{
				pos: position{line: 123, col: 33, offset: 3642},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 33, offset: 3642},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 33, offset: 3642},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 33, offset: 3642},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 40, offset: 3649},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 51, offset: 3660},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 59, offset: 3668},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 75, offset: 3684},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 127, col: 1, offset: 3763},
			expr: &actionExpr{
				pos: position{line: 127, col: 19, offset: 3781},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 127, col: 19, offset: 3781},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 19, offset: 3781},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 19, offset: 3781},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 26, offset: 3788},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 3798},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 56, offset: 3818},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 62, offset: 3824},
								expr: &ruleRefExpr{
									pos:  position{line: 127, col: 63, offset: 3825},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 85, offset: 3847},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 85, offset: 3847},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 92, offset: 3854},
							expr: &litMatcher{
								pos:        position{line: 127, col: 92, offset: 3854},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 97, offset: 3859},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 97, offset: 3859},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 132, col: 1, offset: 4004},
			expr: &actionExpr{
				pos: position{line: 132, col: 23, offset: 4026},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 132, col: 23, offset: 4026},
					expr: &charClassMatcher{
						pos:        position{line: 132, col: 23, offset: 4026},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 136, col: 1, offset: 4073},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 4096},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 4096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 24, offset: 4096},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 28, offset: 4100},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 136, col: 35, offset: 4107},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 136, col: 36, offset: 4108},
									expr: &charClassMatcher{
										pos:        position{line: 136, col: 36, offset: 4108},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 4, offset: 4155},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 144, col: 1, offset: 4316},
			expr: &actionExpr{
				pos: position{line: 144, col: 21, offset: 4336},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 144, col: 21, offset: 4336},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 144, col: 21, offset: 4336},
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 21, offset: 4336},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 144, col: 28, offset: 4343},
							expr: &litMatcher{
								pos:        position{line: 144, col: 29, offset: 4344},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 33, offset: 4348},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 145, col: 9, offset: 4367},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 145, col: 10, offset: 4368},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 145, col: 10, offset: 4368},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 10, offset: 4368},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 21, offset: 4379},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 45, offset: 4403},
													expr: &litMatcher{
														pos:        position{line: 145, col: 45, offset: 4403},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 50, offset: 4408},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 58, offset: 4416},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 59, offset: 4417},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 82, offset: 4440},
													expr: &litMatcher{
														pos:        position{line: 145, col: 82, offset: 4440},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 87, offset: 4445},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 97, offset: 4455},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 98, offset: 4456},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 147, col: 15, offset: 4573},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 147, col: 15, offset: 4573},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 15, offset: 4573},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 24, offset: 4582},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 46, offset: 4604},
													expr: &litMatcher{
														pos:        position{line: 147, col: 46, offset: 4604},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 51, offset: 4609},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 61, offset: 4619},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 62, offset: 4620},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 13, offset: 4729},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 154, col: 1, offset: 4859},
			expr: &choiceExpr{
				pos: position{line: 154, col: 27, offset: 4885},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 27, offset: 4885},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 154, col: 27, offset: 4885},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 154, col: 27, offset: 4885},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 32, offset: 4890},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 39, offset: 4897},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 39, offset: 4897},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4945},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4945},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4945},
									expr: &litMatcher{
										pos:        position{line: 156, col: 5, offset: 4945},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 11, offset: 4951},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 4958},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 4958},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 156, col: 29, offset: 4969},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 29, offset: 4969},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 156, col: 36, offset: 4976},
									expr: &litMatcher{
										pos:        position{line: 156, col: 37, offset: 4977},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 160, col: 1, offset: 5017},
			expr: &actionExpr{
				pos: position{line: 160, col: 25, offset: 5041},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 160, col: 25, offset: 5041},
					expr: &charClassMatcher{
						pos:        position{line: 160, col: 25, offset: 5041},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 164, col: 1, offset: 5087},
			expr: &actionExpr{
				pos: position{line: 164, col: 27, offset: 5113},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 164, col: 27, offset: 5113},
					expr: &charClassMatcher{
						pos:        position{line: 164, col: 27, offset: 5113},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 171, col: 1, offset: 5266},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5290},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 171, col: 25, offset: 5290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 171, col: 25, offset: 5290},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 29, offset: 5294},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 35, offset: 5300},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 171, col: 50, offset: 5315},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 9, offset: 5328},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 15, offset: 5334},
								expr: &actionExpr{
									pos: position{line: 172, col: 16, offset: 5335},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 172, col: 17, offset: 5336},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 172, col: 17, offset: 5336},
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 17, offset: 5336},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 172, col: 24, offset: 5343},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 31, offset: 5350},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 174, col: 13, offset: 5424},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 13, offset: 5424},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 20, offset: 5431},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 181, col: 1, offset: 5671},
			expr: &actionExpr{
				pos: position{line: 181, col: 18, offset: 5688},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 181, col: 18, offset: 5688},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 181, col: 18, offset: 5688},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 28, offset: 5698},
							expr: &charClassMatcher{
								pos:        position{line: 181, col: 29, offset: 5699},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 185, col: 1, offset: 5747},
			expr: &actionExpr{
				pos: position{line: 185, col: 30, offset: 5776},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 185, col: 30, offset: 5776},
					expr: &charClassMatcher{
						pos:        position{line: 185, col: 30, offset: 5776},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 189, col: 1, offset: 5821},
			expr: &choiceExpr{
				pos: position{line: 189, col: 19, offset: 5839},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 19, offset: 5839},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 189, col: 19, offset: 5839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 19, offset: 5839},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 24, offset: 5844},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 5850},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 45, offset: 5865},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 49, offset: 5869},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 49, offset: 5869},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 56, offset: 5876},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 5936},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 5936},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 5, offset: 5936},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 9, offset: 5940},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 15, offset: 5946},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 30, offset: 5961},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 35, offset: 5966},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 35, offset: 5966},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 42, offset: 5973},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 195, col: 1, offset: 6032},
			expr: &actionExpr{
				pos: position{line: 195, col: 26, offset: 6057},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 195, col: 26, offset: 6057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 26, offset: 6057},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 30, offset: 6061},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 36, offset: 6067},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 51, offset: 6082},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 199, col: 1, offset: 6148},
			expr: &actionExpr{
				pos: position{line: 199, col: 15, offset: 6162},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 199, col: 15, offset: 6162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 15, offset: 6162},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 21, offset: 6168},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 22, offset: 6169},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 199, col: 41, offset: 6188},
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 41, offset: 6188},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 203, col: 1, offset: 6258},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 6278},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 6278},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 203, col: 21, offset: 6278},
							expr: &choiceExpr{
								pos: position{line: 203, col: 23, offset: 6280},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 203, col: 23, offset: 6280},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 29, offset: 6286},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 35, offset: 6292},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6368},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 204, col: 11, offset: 6374},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 204, col: 11, offset: 6374},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6395},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6419},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6442},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6470},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6498},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6525},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6552},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6589},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6617},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6654},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 219, col: 1, offset: 6837},
			expr: &choiceExpr{
				pos: position{line: 219, col: 24, offset: 6860},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 24, offset: 6860},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 42, offset: 6878},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 221, col: 1, offset: 6895},
			expr: &choiceExpr{
				pos: position{line: 221, col: 14, offset: 6908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 14, offset: 6908},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 221, col: 14, offset: 6908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 221, col: 14, offset: 6908},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 19, offset: 6913},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 23, offset: 6917},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 221, col: 27, offset: 6921},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 221, col: 32, offset: 6926},
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 32, offset: 6926},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 39, offset: 6933},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 6986},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 6986},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 5, offset: 6986},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 10, offset: 6991},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 14, offset: 6995},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 6999},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 23, offset: 7004},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7004},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 30, offset: 7011},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7063},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7082},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7082},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7087},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7091},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7095},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7100},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7100},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7377},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7393},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7393},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7393},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7397},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7404},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 49, offset: 7425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7483},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7506},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7506},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7506},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7514},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7514},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 243, col: 1, offset: 7741},
			expr: &actionExpr{
				pos: position{line: 243, col: 16, offset: 7756},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 243, col: 16, offset: 7756},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 16, offset: 7756},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 21, offset: 7761},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 243, col: 27, offset: 7767},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 243, col: 27, offset: 7767},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 243, col: 27, offset: 7767},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 243, col: 36, offset: 7776},
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 36, offset: 7776},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 4, offset: 7823},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 8, offset: 7827},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 8, offset: 7827},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 7834},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 249, col: 1, offset: 7890},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 7910},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 7910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 7910},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 249, col: 33, offset: 7922},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 33, offset: 7922},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 40, offset: 7929},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 253, col: 1, offset: 7981},
			expr: &actionExpr{
				pos: position{line: 253, col: 30, offset: 8010},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 253, col: 30, offset: 8010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 253, col: 30, offset: 8010},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 39, offset: 8019},
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 39, offset: 8019},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 46, offset: 8026},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 258, col: 1, offset: 8167},
			expr: &actionExpr{
				pos: position{line: 258, col: 30, offset: 8196},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 258, col: 30, offset: 8196},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 30, offset: 8196},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 34, offset: 8200},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 37, offset: 8203},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 53, offset: 8219},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 57, offset: 8223},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 57, offset: 8223},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 64, offset: 8230},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 263, col: 1, offset: 8385},
			expr: &actionExpr{
				pos: position{line: 263, col: 21, offset: 8405},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 263, col: 21, offset: 8405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 21, offset: 8405},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8420},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 14, offset: 8429},
								expr: &actionExpr{
									pos: position{line: 264, col: 15, offset: 8430},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 264, col: 15, offset: 8430},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 15, offset: 8430},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 19, offset: 8434},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 24, offset: 8439},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 25, offset: 8440},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 8495},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 12, offset: 8502},
								expr: &actionExpr{
									pos: position{line: 265, col: 13, offset: 8503},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 265, col: 13, offset: 8503},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 265, col: 13, offset: 8503},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 17, offset: 8507},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 265, col: 22, offset: 8512},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 23, offset: 8513},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8560},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 9, offset: 8564},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 9, offset: 8564},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 16, offset: 8571},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 271, col: 1, offset: 8722},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 8740},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 8740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 19, offset: 8740},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 23, offset: 8744},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 34, offset: 8755},
								expr: &ruleRefExpr{
									pos:  position{line: 271, col: 35, offset: 8756},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 54, offset: 8775},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 58, offset: 8779},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 58, offset: 8779},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 271, col: 65, offset: 8786},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 275, col: 1, offset: 8858},
			expr: &choiceExpr{
				pos: position{line: 275, col: 21, offset: 8878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 21, offset: 8878},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 49, offset: 8906},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 277, col: 1, offset: 8936},
			expr: &actionExpr{
				pos: position{line: 277, col: 30, offset: 8965},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 277, col: 30, offset: 8965},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 30, offset: 8965},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 35, offset: 8970},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 49, offset: 8984},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 53, offset: 8988},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 59, offset: 8994},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 60, offset: 8995},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 277, col: 77, offset: 9012},
							expr: &litMatcher{
								pos:        position{line: 277, col: 77, offset: 9012},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 82, offset: 9017},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 82, offset: 9017},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 281, col: 1, offset: 9116},
			expr: &actionExpr{
				pos: position{line: 281, col: 33, offset: 9148},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 33, offset: 9148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 281, col: 33, offset: 9148},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 38, offset: 9153},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 52, offset: 9167},
							expr: &litMatcher{
								pos:        position{line: 281, col: 52, offset: 9167},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 57, offset: 9172},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 57, offset: 9172},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 285, col: 1, offset: 9260},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 9276},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 9276},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 285, col: 17, offset: 9276},
							expr: &litMatcher{
								pos:        position{line: 285, col: 18, offset: 9277},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 26, offset: 9285},
							expr: &litMatcher{
								pos:        position{line: 285, col: 27, offset: 9286},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 35, offset: 9294},
							expr: &litMatcher{
								pos:        position{line: 285, col: 36, offset: 9295},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 46, offset: 9305},
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 48, offset: 9307},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 48, offset: 9307},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 56, offset: 9315},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 61, offset: 9320},
								expr: &charClassMatcher{
									pos:        position{line: 285, col: 61, offset: 9320},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 75, offset: 9334},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 75, offset: 9334},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 289, col: 1, offset: 9377},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9395},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 289, col: 19, offset: 9395},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 289, col: 26, offset: 9402},
						expr: &charClassMatcher{
							pos:        position{line: 289, col: 26, offset: 9402},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 293, col: 1, offset: 9453},
			expr: &actionExpr{
				pos: position{line: 293, col: 29, offset: 9481},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 293, col: 29, offset: 9481},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 29, offset: 9481},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 293, col: 36, offset: 9488},
								expr: &charClassMatcher{
									pos:        position{line: 293, col: 36, offset: 9488},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 293, col: 50, offset: 9502},
							expr: &litMatcher{
								pos:        position{line: 293, col: 51, offset: 9503},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 297, col: 1, offset: 9669},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9689},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9689},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9689},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 36, offset: 9704},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 36, offset: 9704},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 43, offset: 9711},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 301, col: 1, offset: 9777},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 9796},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 9796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 9796},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 29, offset: 9805},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 29, offset: 9805},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 36, offset: 9812},
							expr: &litMatcher{
								pos:        position{line: 301, col: 36, offset: 9812},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 41, offset: 9817},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 48, offset: 9824},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 49, offset: 9825},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 66, offset: 9842},
							expr: &litMatcher{
								pos:        position{line: 301, col: 66, offset: 9842},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 71, offset: 9847},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 77, offset: 9853},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 78, offset: 9854},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 95, offset: 9871},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 99, offset: 9875},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 99, offset: 9875},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 106, offset: 9882},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 305, col: 1, offset: 9951},
			expr: &actionExpr{
				pos: position{line: 305, col: 20, offset: 9970},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 305, col: 20, offset: 9970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 20, offset: 9970},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 29, offset: 9979},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 29, offset: 9979},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 36, offset: 9986},
							expr: &litMatcher{
								pos:        position{line: 305, col: 36, offset: 9986},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 9991},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 48, offset: 9998},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 49, offset: 9999},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 66, offset: 10016},
							expr: &litMatcher{
								pos:        position{line: 305, col: 66, offset: 10016},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 71, offset: 10021},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 77, offset: 10027},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 78, offset: 10028},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 95, offset: 10045},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 99, offset: 10049},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 99, offset: 10049},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 106, offset: 10056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 309, col: 1, offset: 10143},
			expr: &actionExpr{
				pos: position{line: 309, col: 19, offset: 10161},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 309, col: 20, offset: 10162},
					expr: &charClassMatcher{
						pos:        position{line: 309, col: 20, offset: 10162},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 313, col: 1, offset: 10211},
			expr: &actionExpr{
				pos: position{line: 313, col: 21, offset: 10231},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 313, col: 21, offset: 10231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 21, offset: 10231},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 25, offset: 10235},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 31, offset: 10241},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 32, offset: 10242},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 51, offset: 10261},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 326, col: 1, offset: 10729},
			expr: &actionExpr{
				pos: position{line: 326, col: 20, offset: 10748},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 20, offset: 10748},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 326, col: 27, offset: 10755},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 27, offset: 10755},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 44, offset: 10772},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 333, col: 1, offset: 11034},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11052},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 333, col: 19, offset: 11052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 19, offset: 11052},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 23, offset: 11056},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 28, offset: 11061},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 28, offset: 11061},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 48, offset: 11081},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 337, col: 1, offset: 11137},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 11159},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 11159},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 11159},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 11160},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 11165},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 337, col: 35, offset: 11171},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 337, col: 35, offset: 11171},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 35, offset: 11171},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 346, col: 1, offset: 11478},
			expr: &actionExpr{
				pos: position{line: 346, col: 24, offset: 11501},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 346, col: 24, offset: 11501},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 24, offset: 11501},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 28, offset: 11505},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 346, col: 34, offset: 11511},
								expr: &choiceExpr{
									pos: position{line: 346, col: 36, offset: 11513},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 36, offset: 11513},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 346, col: 58, offset: 11535},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 79, offset: 11556},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 350, col: 1, offset: 11587},
			expr: &actionExpr{
				pos: position{line: 350, col: 24, offset: 11610},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 350, col: 24, offset: 11610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 24, offset: 11610},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 28, offset: 11614},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 350, col: 34, offset: 11620},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 34, offset: 11620},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 34, offset: 11620},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 356, col: 1, offset: 11727},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 11748},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 11748},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 11748},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 11752},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 356, col: 30, offset: 11756},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 356, col: 30, offset: 11756},
									expr: &charClassMatcher{
										pos:        position{line: 356, col: 30, offset: 11756},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 362, col: 1, offset: 11857},
			expr: &actionExpr{
				pos: position{line: 362, col: 25, offset: 11881},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 362, col: 25, offset: 11881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 362, col: 25, offset: 11881},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 362, col: 36, offset: 11892},
								expr: &ruleRefExpr{
									pos:  position{line: 362, col: 37, offset: 11893},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 362, col: 56, offset: 11912},
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 56, offset: 11912},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 67, offset: 11923},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 369, col: 1, offset: 12135},
			expr: &actionExpr{
				pos: position{line: 369, col: 12, offset: 12146},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 369, col: 12, offset: 12146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 369, col: 12, offset: 12146},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 23, offset: 12157},
								expr: &ruleRefExpr{
									pos:  position{line: 369, col: 24, offset: 12158},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 370, col: 5, offset: 12175},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 370, col: 12, offset: 12182},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 370, col: 12, offset: 12182},
									expr: &litMatcher{
										pos:        position{line: 370, col: 13, offset: 12183},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 374, col: 5, offset: 12274},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 378, col: 5, offset: 12426},
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 5, offset: 12426},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 378, col: 12, offset: 12433},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 19, offset: 12440},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 378, col: 34, offset: 12455},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 378, col: 38, offset: 12459},
								expr: &ruleRefExpr{
									pos:  position{line: 378, col: 38, offset: 12459},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 56, offset: 12477},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 382, col: 1, offset: 12583},
			expr: &actionExpr{
				pos: position{line: 382, col: 18, offset: 12600},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 382, col: 18, offset: 12600},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 382, col: 27, offset: 12609},
						expr: &seqExpr{
							pos: position{line: 382, col: 28, offset: 12610},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 382, col: 28, offset: 12610},
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 29, offset: 12611},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 382, col: 37, offset: 12619},
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 38, offset: 12620},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 54, offset: 12636},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 386, col: 1, offset: 12757},
			expr: &actionExpr{
				pos: position{line: 386, col: 17, offset: 12773},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 17, offset: 12773},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 386, col: 26, offset: 12782},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 386, col: 26, offset: 12782},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 387, col: 11, offset: 12797},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 388, col: 11, offset: 12842},
								expr: &ruleRefExpr{
									pos:  position{line: 388, col: 11, offset: 12842},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 389, col: 11, offset: 12860},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 12885},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 12913},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 12936},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 12951},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 12976},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 11, offset: 12997},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13029},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 403, col: 1, offset: 13180},
			expr: &seqExpr{
				pos: position{line: 403, col: 31, offset: 13210},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 403, col: 31, offset: 13210},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 403, col: 41, offset: 13220},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 408, col: 1, offset: 13331},
			expr: &actionExpr{
				pos: position{line: 408, col: 19, offset: 13349},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 408, col: 19, offset: 13349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 19, offset: 13349},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 25, offset: 13355},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 40, offset: 13370},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 45, offset: 13375},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 52, offset: 13382},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 68, offset: 13398},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 75, offset: 13405},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 412, col: 1, offset: 13520},
			expr: &actionExpr{
				pos: position{line: 412, col: 20, offset: 13539},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 412, col: 20, offset: 13539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 412, col: 20, offset: 13539},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 26, offset: 13545},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 41, offset: 13560},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 45, offset: 13564},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 52, offset: 13571},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 68, offset: 13587},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 75, offset: 13594},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 416, col: 1, offset: 13710},
			expr: &actionExpr{
				pos: position{line: 416, col: 18, offset: 13727},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 416, col: 19, offset: 13728},
					expr: &charClassMatcher{
						pos:        position{line: 416, col: 19, offset: 13728},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 420, col: 1, offset: 13777},
			expr: &actionExpr{
				pos: position{line: 420, col: 19, offset: 13795},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 420, col: 19, offset: 13795},
					expr: &charClassMatcher{
						pos:        position{line: 420, col: 19, offset: 13795},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 424, col: 1, offset: 13843},
			expr: &actionExpr{
				pos: position{line: 424, col: 24, offset: 13866},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 424, col: 24, offset: 13866},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 424, col: 24, offset: 13866},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 28, offset: 13870},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 424, col: 34, offset: 13876},
								expr: &ruleRefExpr{
									pos:  position{line: 424, col: 35, offset: 13877},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 54, offset: 13896},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 431, col: 1, offset: 14078},
			expr: &actionExpr{
				pos: position{line: 431, col: 18, offset: 14095},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 431, col: 18, offset: 14095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 18, offset: 14095},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 431, col: 24, offset: 14101},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 431, col: 24, offset: 14101},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 431, col: 24, offset: 14101},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 431, col: 36, offset: 14113},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 431, col: 42, offset: 14119},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 431, col: 56, offset: 14133},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 431, col: 74, offset: 14151},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 433, col: 8, offset: 14298},
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 8, offset: 14298},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 15, offset: 14305},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 437, col: 1, offset: 14357},
			expr: &actionExpr{
				pos: position{line: 437, col: 26, offset: 14382},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 437, col: 26, offset: 14382},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 437, col: 26, offset: 14382},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 30, offset: 14386},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 437, col: 36, offset: 14392},
								expr: &choiceExpr{
									pos: position{line: 437, col: 37, offset: 14393},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 437, col: 37, offset: 14393},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 437, col: 59, offset: 14415},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 437, col: 80, offset: 14436},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 437, col: 99, offset: 14455},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 441, col: 1, offset: 14527},
			expr: &actionExpr{
				pos: position{line: 441, col: 24, offset: 14550},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 441, col: 24, offset: 14550},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 24, offset: 14550},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 33, offset: 14559},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 40, offset: 14566},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 441, col: 66, offset: 14592},
							expr: &litMatcher{
								pos:        position{line: 441, col: 66, offset: 14592},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 445, col: 1, offset: 14651},
			expr: &actionExpr{
				pos: position{line: 445, col: 29, offset: 14679},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 445, col: 29, offset: 14679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 29, offset: 14679},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 445, col: 36, offset: 14686},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 445, col: 36, offset: 14686},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 446, col: 11, offset: 14803},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 447, col: 11, offset: 14839},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 448, col: 11, offset: 14865},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 449, col: 11, offset: 14897},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 450, col: 11, offset: 14929},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 451, col: 11, offset: 14956},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 451, col: 31, offset: 14976},
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 31, offset: 14976},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 451, col: 39, offset: 14984},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 451, col: 39, offset: 14984},
									expr: &litMatcher{
										pos:        position{line: 451, col: 40, offset: 14985},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 451, col: 46, offset: 14991},
									expr: &litMatcher{
										pos:        position{line: 451, col: 47, offset: 14992},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 455, col: 1, offset: 15024},
			expr: &actionExpr{
				pos: position{line: 455, col: 23, offset: 15046},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 455, col: 23, offset: 15046},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 23, offset: 15046},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 455, col: 30, offset: 15053},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 455, col: 30, offset: 15053},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 455, col: 47, offset: 15070},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 15092},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 456, col: 12, offset: 15099},
								expr: &actionExpr{
									pos: position{line: 456, col: 13, offset: 15100},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 456, col: 13, offset: 15100},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 456, col: 13, offset: 15100},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 456, col: 17, offset: 15104},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 456, col: 24, offset: 15111},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 456, col: 24, offset: 15111},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 456, col: 41, offset: 15128},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 462, col: 1, offset: 15266},
			expr: &actionExpr{
				pos: position{line: 462, col: 29, offset: 15294},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 462, col: 29, offset: 15294},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 462, col: 29, offset: 15294},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 34, offset: 15299},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 462, col: 41, offset: 15306},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 462, col: 41, offset: 15306},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 462, col: 58, offset: 15323},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 463, col: 5, offset: 15345},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 463, col: 12, offset: 15352},
								expr: &actionExpr{
									pos: position{line: 463, col: 13, offset: 15353},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 463, col: 13, offset: 15353},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 463, col: 13, offset: 15353},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 463, col: 17, offset: 15357},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 463, col: 24, offset: 15364},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 463, col: 24, offset: 15364},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 463, col: 41, offset: 15381},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 465, col: 9, offset: 15434},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 469, col: 1, offset: 15524},
			expr: &actionExpr{
				pos: position{line: 469, col: 19, offset: 15542},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 469, col: 19, offset: 15542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 469, col: 19, offset: 15542},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 26, offset: 15549},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 469, col: 34, offset: 15557},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 39, offset: 15562},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 44, offset: 15567},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 473, col: 1, offset: 15655},
			expr: &actionExpr{
				pos: position{line: 473, col: 25, offset: 15679},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 473, col: 25, offset: 15679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 25, offset: 15679},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 473, col: 30, offset: 15684},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 37, offset: 15691},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 473, col: 45, offset: 15699},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 473, col: 50, offset: 15704},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 55, offset: 15709},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 473, col: 63, offset: 15717},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 477, col: 1, offset: 15802},
			expr: &actionExpr{
				pos: position{line: 477, col: 20, offset: 15821},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 477, col: 20, offset: 15821},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 477, col: 32, offset: 15833},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 481, col: 1, offset: 15928},
			expr: &actionExpr{
				pos: position{line: 481, col: 26, offset: 15953},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 481, col: 26, offset: 15953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 481, col: 26, offset: 15953},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 481, col: 31, offset: 15958},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 43, offset: 15970},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 481, col: 51, offset: 15978},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 485, col: 1, offset: 16070},
			expr: &actionExpr{
				pos: position{line: 485, col: 23, offset: 16092},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 485, col: 23, offset: 16092},
					expr: &charClassMatcher{
						pos:        position{line: 485, col: 23, offset: 16092},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 489, col: 1, offset: 16137},
			expr: &actionExpr{
				pos: position{line: 489, col: 23, offset: 16159},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 489, col: 23, offset: 16159},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 489, col: 24, offset: 16160},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 489, col: 24, offset: 16160},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 489, col: 34, offset: 16170},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 42, offset: 16178},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 48, offset: 16184},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 489, col: 73, offset: 16209},
							expr: &litMatcher{
								pos:        position{line: 489, col: 73, offset: 16209},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 493, col: 1, offset: 16358},
			expr: &actionExpr{
				pos: position{line: 493, col: 28, offset: 16385},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 493, col: 28, offset: 16385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 493, col: 28, offset: 16385},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 35, offset: 16392},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 493, col: 54, offset: 16411},
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 54, offset: 16411},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 493, col: 62, offset: 16419},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 493, col: 62, offset: 16419},
									expr: &litMatcher{
										pos:        position{line: 493, col: 63, offset: 16420},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 493, col: 69, offset: 16426},
									expr: &litMatcher{
										pos:        position{line: 493, col: 70, offset: 16427},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 497, col: 1, offset: 16459},
			expr: &actionExpr{
				pos: position{line: 497, col: 22, offset: 16480},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 497, col: 22, offset: 16480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 497, col: 22, offset: 16480},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 29, offset: 16487},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 5, offset: 16501},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 12, offset: 16508},
								expr: &actionExpr{
									pos: position{line: 498, col: 13, offset: 16509},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 498, col: 13, offset: 16509},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 498, col: 13, offset: 16509},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 498, col: 17, offset: 16513},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 498, col: 24, offset: 16520},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 504, col: 1, offset: 16651},
			expr: &choiceExpr{
				pos: position{line: 504, col: 13, offset: 16663},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 504, col: 13, offset: 16663},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 504, col: 13, offset: 16663},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 504, col: 18, offset: 16668},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 504, col: 18, offset: 16668},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 504, col: 30, offset: 16680},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 16748},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 16748},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 506, col: 5, offset: 16748},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 9, offset: 16752},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 506, col: 14, offset: 16757},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 506, col: 14, offset: 16757},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 506, col: 26, offset: 16769},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 510, col: 1, offset: 16837},
			expr: &actionExpr{
				pos: position{line: 510, col: 16, offset: 16852},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 510, col: 16, offset: 16852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 16, offset: 16852},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 510, col: 23, offset: 16859},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 510, col: 23, offset: 16859},
									expr: &litMatcher{
										pos:        position{line: 510, col: 24, offset: 16860},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 513, col: 5, offset: 16914},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 521, col: 1, offset: 17156},
			expr: &zeroOrMoreExpr{
				pos: position{line: 521, col: 24, offset: 17179},
				expr: &choiceExpr{
					pos: position{line: 521, col: 25, offset: 17180},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 521, col: 25, offset: 17180},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 41, offset: 17196},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 523, col: 1, offset: 17216},
			expr: &actionExpr{
				pos: position{line: 523, col: 21, offset: 17236},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 523, col: 21, offset: 17236},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 523, col: 21, offset: 17236},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 22, offset: 17237},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 523, col: 26, offset: 17241},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 523, col: 35, offset: 17250},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 523, col: 35, offset: 17250},
									expr: &charClassMatcher{
										pos:        position{line: 523, col: 35, offset: 17250},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 12, offset: 17312},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 532, col: 1, offset: 17511},
			expr: &actionExpr{
				pos: position{line: 532, col: 21, offset: 17531},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 532, col: 21, offset: 17531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 21, offset: 17531},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 29, offset: 17539},
								expr: &choiceExpr{
									pos: position{line: 532, col: 30, offset: 17540},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 532, col: 30, offset: 17540},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 53, offset: 17563},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 532, col: 74, offset: 17584},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 532, col: 74, offset: 17584,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 532, col: 107, offset: 17617},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 536, col: 1, offset: 17688},
			expr: &actionExpr{
				pos: position{line: 536, col: 25, offset: 17712},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 536, col: 25, offset: 17712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 25, offset: 17712},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 33, offset: 17720},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 536, col: 38, offset: 17725},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 536, col: 38, offset: 17725},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 536, col: 78, offset: 17765},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 540, col: 1, offset: 17830},
			expr: &actionExpr{
				pos: position{line: 540, col: 23, offset: 17852},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 540, col: 23, offset: 17852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 23, offset: 17852},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 31, offset: 17860},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 540, col: 36, offset: 17865},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 36, offset: 17865},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 540, col: 76, offset: 17905},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 547, col: 1, offset: 18069},
			expr: &choiceExpr{
				pos: position{line: 547, col: 18, offset: 18086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 18, offset: 18086},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 547, col: 18, offset: 18086},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 27, offset: 18095},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 549, col: 9, offset: 18152},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 549, col: 9, offset: 18152},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 549, col: 15, offset: 18158},
								expr: &ruleRefExpr{
									pos:  position{line: 549, col: 16, offset: 18159},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 553, col: 1, offset: 18251},
			expr: &actionExpr{
				pos: position{line: 553, col: 22, offset: 18272},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 553, col: 22, offset: 18272},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 553, col: 22, offset: 18272},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 23, offset: 18273},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 554, col: 5, offset: 18281},
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 6, offset: 18282},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 555, col: 5, offset: 18297},
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 6, offset: 18298},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 556, col: 5, offset: 18320},
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 6, offset: 18321},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 557, col: 5, offset: 18347},
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 6, offset: 18348},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 558, col: 5, offset: 18376},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 6, offset: 18377},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 559, col: 5, offset: 18403},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 6, offset: 18404},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 560, col: 5, offset: 18429},
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 6, offset: 18430},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 561, col: 5, offset: 18451},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 6, offset: 18452},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 562, col: 5, offset: 18471},
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 6, offset: 18472},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 18499},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 563, col: 11, offset: 18505},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 563, col: 11, offset: 18505},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 563, col: 20, offset: 18514},
										expr: &ruleRefExpr{
											pos:  position{line: 563, col: 21, offset: 18515},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 12, offset: 18614},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 569, col: 1, offset: 18653},
			expr: &seqExpr{
				pos: position{line: 569, col: 25, offset: 18677},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 569, col: 25, offset: 18677},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 569, col: 29, offset: 18681},
						expr: &ruleRefExpr{
							pos:  position{line: 569, col: 29, offset: 18681},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 569, col: 36, offset: 18688},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 571, col: 1, offset: 18760},
			expr: &actionExpr{
				pos: position{line: 571, col: 29, offset: 18788},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 571, col: 29, offset: 18788},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 571, col: 29, offset: 18788},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 50, offset: 18809},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 58, offset: 18817},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 575, col: 1, offset: 18923},
			expr: &actionExpr{
				pos: position{line: 575, col: 29, offset: 18951},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 575, col: 29, offset: 18951},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 575, col: 29, offset: 18951},
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 30, offset: 18952},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 18961},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 576, col: 14, offset: 18970},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 576, col: 14, offset: 18970},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 577, col: 11, offset: 18995},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 578, col: 11, offset: 19019},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 579, col: 11, offset: 19073},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 580, col: 11, offset: 19095},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 11, offset: 19122},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 582, col: 11, offset: 19151},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 584, col: 11, offset: 19216},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 19267},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 11, offset: 19291},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 587, col: 11, offset: 19323},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 588, col: 11, offset: 19349},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 589, col: 11, offset: 19386},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 590, col: 11, offset: 19411},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 597, col: 1, offset: 19574},
			expr: &actionExpr{
				pos: position{line: 597, col: 20, offset: 19593},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 597, col: 20, offset: 19593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 597, col: 20, offset: 19593},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 597, col: 31, offset: 19604},
								expr: &ruleRefExpr{
									pos:  position{line: 597, col: 32, offset: 19605},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 45, offset: 19618},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 53, offset: 19626},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 76, offset: 19649},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 85, offset: 19658},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 601, col: 1, offset: 19798},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 19828},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 19828},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 602, col: 5, offset: 19828},
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 5, offset: 19828},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 12, offset: 19835},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 604, col: 9, offset: 19898},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 604, col: 9, offset: 19898},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 604, col: 9, offset: 19898},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 604, col: 9, offset: 19898},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 604, col: 16, offset: 19905},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 604, col: 16, offset: 19905},
															expr: &litMatcher{
																pos:        position{line: 604, col: 17, offset: 19906},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 608, col: 9, offset: 20006},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 627, col: 11, offset: 20723},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 627, col: 11, offset: 20723},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 627, col: 11, offset: 20723},
													expr: &charClassMatcher{
														pos:        position{line: 627, col: 12, offset: 20724},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 627, col: 20, offset: 20732},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 629, col: 13, offset: 20843},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 629, col: 13, offset: 20843},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 629, col: 14, offset: 20844},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 629, col: 21, offset: 20851},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 631, col: 13, offset: 20965},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 631, col: 13, offset: 20965},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 631, col: 14, offset: 20966},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 631, col: 21, offset: 20973},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 633, col: 13, offset: 21087},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 633, col: 13, offset: 21087},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 633, col: 13, offset: 21087},
													expr: &charClassMatcher{
														pos:        position{line: 633, col: 14, offset: 21088},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 633, col: 22, offset: 21096},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 13, offset: 21210},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 635, col: 13, offset: 21210},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 635, col: 13, offset: 21210},
													expr: &charClassMatcher{
														pos:        position{line: 635, col: 14, offset: 21211},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 635, col: 22, offset: 21219},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 637, col: 12, offset: 21332},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 12, offset: 21332},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 641, col: 1, offset: 21367},
			expr: &actionExpr{
				pos: position{line: 641, col: 27, offset: 21393},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 641, col: 27, offset: 21393},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 641, col: 37, offset: 21403},
						expr: &ruleRefExpr{
							pos:  position{line: 641, col: 37, offset: 21403},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 648, col: 1, offset: 21603},
			expr: &actionExpr{
				pos: position{line: 648, col: 22, offset: 21624},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 648, col: 22, offset: 21624},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 22, offset: 21624},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 648, col: 33, offset: 21635},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 34, offset: 21636},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 47, offset: 21649},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 55, offset: 21657},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 80, offset: 21682},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 648, col: 91, offset: 21693},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 92, offset: 21694},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 122, offset: 21724},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 131, offset: 21733},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 652, col: 1, offset: 21891},
			expr: &actionExpr{
				pos: position{line: 653, col: 5, offset: 21923},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 653, col: 5, offset: 21923},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 653, col: 5, offset: 21923},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 5, offset: 21923},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 12, offset: 21930},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 653, col: 20, offset: 21938},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 655, col: 9, offset: 21995},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 655, col: 9, offset: 21995},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 655, col: 9, offset: 21995},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 655, col: 16, offset: 22002},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 655, col: 16, offset: 22002},
															expr: &litMatcher{
																pos:        position{line: 655, col: 17, offset: 22003},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 659, col: 9, offset: 22103},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 676, col: 14, offset: 22810},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 676, col: 21, offset: 22817},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 676, col: 22, offset: 22818},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 678, col: 13, offset: 22904},
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 13, offset: 22904},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 682, col: 1, offset: 22940},
			expr: &actionExpr{
				pos: position{line: 682, col: 32, offset: 22971},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 682, col: 32, offset: 22971},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 682, col: 32, offset: 22971},
							expr: &litMatcher{
								pos:        position{line: 682, col: 33, offset: 22972},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 37, offset: 22976},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 683, col: 7, offset: 22990},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 683, col: 7, offset: 22990},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 683, col: 7, offset: 22990},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 684, col: 7, offset: 23035},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 684, col: 7, offset: 23035},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 685, col: 7, offset: 23078},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 685, col: 7, offset: 23078},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 686, col: 7, offset: 23120},
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 7, offset: 23120},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 690, col: 1, offset: 23162},
			expr: &actionExpr{
				pos: position{line: 690, col: 29, offset: 23190},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 690, col: 29, offset: 23190},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 690, col: 39, offset: 23200},
						expr: &ruleRefExpr{
							pos:  position{line: 690, col: 39, offset: 23200},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 697, col: 1, offset: 23516},
			expr: &actionExpr{
				pos: position{line: 697, col: 20, offset: 23535},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 697, col: 20, offset: 23535},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 20, offset: 23535},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 697, col: 31, offset: 23546},
								expr: &ruleRefExpr{
									pos:  position{line: 697, col: 32, offset: 23547},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 45, offset: 23560},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 51, offset: 23566},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 80, offset: 23595},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 91, offset: 23606},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 117, offset: 23632},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 697, col: 129, offset: 23644},
								expr: &ruleRefExpr{
									pos:  position{line: 697, col: 130, offset: 23645},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 701, col: 1, offset: 23791},
			expr: &seqExpr{
				pos: position{line: 701, col: 26, offset: 23816},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 701, col: 26, offset: 23816},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 701, col: 54, offset: 23844},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 703, col: 1, offset: 23870},
			expr: &actionExpr{
				pos: position{line: 703, col: 32, offset: 23901},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 703, col: 32, offset: 23901},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 703, col: 41, offset: 23910},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 703, col: 41, offset: 23910},
							expr: &charClassMatcher{
								pos:        position{line: 703, col: 41, offset: 23910},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 709, col: 1, offset: 24044},
			expr: &actionExpr{
				pos: position{line: 709, col: 24, offset: 24067},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 709, col: 24, offset: 24067},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 709, col: 33, offset: 24076},
						expr: &seqExpr{
							pos: position{line: 709, col: 34, offset: 24077},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 709, col: 34, offset: 24077},
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 35, offset: 24078},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 709, col: 43, offset: 24086},
									expr: &litMatcher{
										pos:        position{line: 709, col: 44, offset: 24087},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 49, offset: 24092},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 713, col: 1, offset: 24219},
			expr: &actionExpr{
				pos: position{line: 713, col: 31, offset: 24249},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 713, col: 31, offset: 24249},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 713, col: 40, offset: 24258},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 713, col: 40, offset: 24258},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 11, offset: 24273},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 715, col: 11, offset: 24322},
								expr: &ruleRefExpr{
									pos:  position{line: 715, col: 11, offset: 24322},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 716, col: 11, offset: 24340},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 717, col: 11, offset: 24365},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 718, col: 11, offset: 24394},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 719, col: 11, offset: 24414},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 720, col: 11, offset: 24442},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 721, col: 11, offset: 24465},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 722, col: 11, offset: 24480},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 723, col: 11, offset: 24505},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 11, offset: 24526},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 725, col: 11, offset: 24558},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 729, col: 1, offset: 24597},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 24630},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 24630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 730, col: 5, offset: 24630},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 730, col: 16, offset: 24641},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 730, col: 16, offset: 24641},
									expr: &litMatcher{
										pos:        position{line: 730, col: 17, offset: 24642},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 733, col: 5, offset: 24700},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 737, col: 6, offset: 24876},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 737, col: 6, offset: 24876},
									expr: &choiceExpr{
										pos: position{line: 737, col: 7, offset: 24877},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 737, col: 7, offset: 24877},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 737, col: 15, offset: 24885},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 737, col: 27, offset: 24897},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 741, col: 1, offset: 24937},
			expr: &actionExpr{
				pos: position{line: 741, col: 31, offset: 24967},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 741, col: 31, offset: 24967},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 741, col: 40, offset: 24976},
						expr: &ruleRefExpr{
							pos:  position{line: 741, col: 41, offset: 24977},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 748, col: 1, offset: 25168},
			expr: &choiceExpr{
				pos: position{line: 748, col: 19, offset: 25186},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 748, col: 19, offset: 25186},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 748, col: 19, offset: 25186},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 750, col: 9, offset: 25232},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 750, col: 9, offset: 25232},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 9, offset: 25280},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 752, col: 9, offset: 25280},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 9, offset: 25338},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 754, col: 9, offset: 25338},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 9, offset: 25392},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 756, col: 9, offset: 25392},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 765, col: 1, offset: 25699},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 25746},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 25746},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 25746},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 767, col: 5, offset: 25746},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 767, col: 16, offset: 25757},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 17, offset: 25758},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 767, col: 30, offset: 25771},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 33, offset: 25774},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 767, col: 49, offset: 25790},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 767, col: 54, offset: 25795},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 767, col: 60, offset: 25801},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 61, offset: 25802},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 25983},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 25983},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 771, col: 5, offset: 25983},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 771, col: 16, offset: 25994},
										expr: &ruleRefExpr{
											pos:  position{line: 771, col: 17, offset: 25995},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 771, col: 30, offset: 26008},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 771, col: 35, offset: 26013},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 44, offset: 26022},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 26217},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 775, col: 5, offset: 26217},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 775, col: 5, offset: 26217},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 775, col: 16, offset: 26228},
										expr: &ruleRefExpr{
											pos:  position{line: 775, col: 17, offset: 26229},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 775, col: 30, offset: 26242},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 782, col: 7, offset: 26521},
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 8, offset: 26522},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 782, col: 23, offset: 26537},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 32, offset: 26546},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 26743},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 26743},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 786, col: 5, offset: 26743},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 786, col: 16, offset: 26754},
										expr: &ruleRefExpr{
											pos:  position{line: 786, col: 17, offset: 26755},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 786, col: 30, offset: 26768},
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 31, offset: 26769},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 786, col: 46, offset: 26784},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 786, col: 52, offset: 26790},
										expr: &ruleRefExpr{
											pos:  position{line: 786, col: 53, offset: 26791},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 790, col: 1, offset: 26887},
			expr: &oneOrMoreExpr{
				pos: position{line: 790, col: 38, offset: 26924},
				expr: &actionExpr{
					pos: position{line: 790, col: 39, offset: 26925},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 790, col: 39, offset: 26925},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 790, col: 39, offset: 26925},
								expr: &ruleRefExpr{
									pos:  position{line: 790, col: 40, offset: 26926},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 790, col: 50, offset: 26936},
								expr: &litMatcher{
									pos:        position{line: 790, col: 50, offset: 26936},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 790, col: 56, offset: 26942},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 790, col: 65, offset: 26951},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 794, col: 1, offset: 27092},
			expr: &actionExpr{
				pos: position{line: 794, col: 34, offset: 27125},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 794, col: 34, offset: 27125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 794, col: 34, offset: 27125},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 40, offset: 27131},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 794, col: 48, offset: 27139},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 794, col: 49, offset: 27140},
									expr: &charClassMatcher{
										pos:        position{line: 794, col: 49, offset: 27140},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 796, col: 8, offset: 27190},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 800, col: 1, offset: 27222},
			expr: &oneOrMoreExpr{
				pos: position{line: 800, col: 36, offset: 27257},
				expr: &actionExpr{
					pos: position{line: 800, col: 37, offset: 27258},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 800, col: 37, offset: 27258},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 800, col: 37, offset: 27258},
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 38, offset: 27259},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 800, col: 48, offset: 27269},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 57, offset: 27278},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 805, col: 1, offset: 27491},
			expr: &actionExpr{
				pos: position{line: 805, col: 20, offset: 27510},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 805, col: 20, offset: 27510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 805, col: 20, offset: 27510},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 31, offset: 27521},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 32, offset: 27522},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 806, col: 5, offset: 27540},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 27826},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 16, offset: 27837},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 27860},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 815, col: 16, offset: 27871},
								expr: &ruleRefExpr{
									pos:  position{line: 815, col: 17, offset: 27872},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 819, col: 1, offset: 28006},
			expr: &actionExpr{
				pos: position{line: 820, col: 5, offset: 28033},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 820, col: 5, offset: 28033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 820, col: 5, offset: 28033},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 820, col: 15, offset: 28043},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 820, col: 15, offset: 28043},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 820, col: 20, offset: 28048},
										expr: &ruleRefExpr{
											pos:  position{line: 820, col: 20, offset: 28048},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 820, col: 36, offset: 28064},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 824, col: 1, offset: 28135},
			expr: &actionExpr{
				pos: position{line: 824, col: 23, offset: 28157},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 824, col: 23, offset: 28157},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 824, col: 33, offset: 28167},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 829, col: 1, offset: 28287},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 28343},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 28343},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 28343},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 831, col: 5, offset: 28343},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 831, col: 16, offset: 28354},
										expr: &ruleRefExpr{
											pos:  position{line: 831, col: 17, offset: 28355},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 831, col: 30, offset: 28368},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 33, offset: 28371},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 831, col: 49, offset: 28387},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 54, offset: 28392},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 61, offset: 28399},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 28599},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 835, col: 5, offset: 28599},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 835, col: 5, offset: 28599},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 835, col: 16, offset: 28610},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 17, offset: 28611},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 835, col: 30, offset: 28624},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 835, col: 37, offset: 28631},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 839, col: 1, offset: 28732},
			expr: &actionExpr{
				pos: position{line: 839, col: 28, offset: 28759},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 839, col: 28, offset: 28759},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 839, col: 28, offset: 28759},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 39, offset: 28770},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 839, col: 59, offset: 28790},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 839, col: 70, offset: 28801},
								expr: &seqExpr{
									pos: position{line: 839, col: 71, offset: 28802},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 839, col: 71, offset: 28802},
											expr: &ruleRefExpr{
												pos:  position{line: 839, col: 72, offset: 28803},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 839, col: 93, offset: 28824},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 843, col: 1, offset: 28930},
			expr: &choiceExpr{
				pos: position{line: 845, col: 5, offset: 28982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 28982},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 28982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 845, col: 5, offset: 28982},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 845, col: 16, offset: 28993},
										expr: &ruleRefExpr{
											pos:  position{line: 845, col: 17, offset: 28994},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 846, col: 5, offset: 29011},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 853, col: 5, offset: 29216},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 8, offset: 29219},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 24, offset: 29235},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 853, col: 29, offset: 29240},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 853, col: 35, offset: 29246},
										expr: &ruleRefExpr{
											pos:  position{line: 853, col: 36, offset: 29247},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 29439},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 29439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 857, col: 5, offset: 29439},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 857, col: 16, offset: 29450},
										expr: &ruleRefExpr{
											pos:  position{line: 857, col: 17, offset: 29451},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 858, col: 5, offset: 29468},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 865, col: 5, offset: 29673},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 865, col: 11, offset: 29679},
										expr: &ruleRefExpr{
											pos:  position{line: 865, col: 12, offset: 29680},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 869, col: 1, offset: 29781},
			expr: &actionExpr{
				pos: position{line: 869, col: 19, offset: 29799},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 869, col: 19, offset: 29799},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 869, col: 19, offset: 29799},
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 20, offset: 29800},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 5, offset: 29814},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 870, col: 15, offset: 29824},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 870, col: 15, offset: 29824},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 870, col: 15, offset: 29824},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 870, col: 24, offset: 29833},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 872, col: 9, offset: 29925},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 872, col: 9, offset: 29925},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 872, col: 9, offset: 29925},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 872, col: 18, offset: 29934},
														expr: &ruleRefExpr{
															pos:  position{line: 872, col: 19, offset: 29935},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 872, col: 35, offset: 29951},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 878, col: 1, offset: 30068},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 30091},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 879, col: 5, offset: 30091},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 879, col: 14, offset: 30100},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 879, col: 14, offset: 30100},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 880, col: 11, offset: 30151},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 881, col: 11, offset: 30196},
								expr: &ruleRefExpr{
									pos:  position{line: 881, col: 11, offset: 30196},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 882, col: 11, offset: 30214},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 882, col: 11, offset: 30214},
										expr: &ruleRefExpr{
											pos:  position{line: 882, col: 12, offset: 30215},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 883, col: 13, offset: 30234},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 883, col: 13, offset: 30234},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 884, col: 15, offset: 30260},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 885, col: 15, offset: 30287},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 886, col: 15, offset: 30307},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 15, offset: 30340},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 888, col: 15, offset: 30370},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 889, col: 15, offset: 30400},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 890, col: 15, offset: 30431},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 891, col: 15, offset: 30468},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 892, col: 15, offset: 30498},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 893, col: 15, offset: 30531},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 15, offset: 30555},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 901, col: 1, offset: 30778},
			expr: &actionExpr{
				pos: position{line: 901, col: 14, offset: 30791},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 901, col: 14, offset: 30791},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 901, col: 14, offset: 30791},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 901, col: 20, offset: 30797},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 901, col: 24, offset: 30801},
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 24, offset: 30801},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 901, col: 31, offset: 30808},
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 32, offset: 30809},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 908, col: 1, offset: 31093},
			expr: &choiceExpr{
				pos: position{line: 908, col: 15, offset: 31107},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 908, col: 15, offset: 31107},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 908, col: 41, offset: 31133},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 908, col: 65, offset: 31157},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 910, col: 1, offset: 31176},
			expr: &choiceExpr{
				pos: position{line: 910, col: 32, offset: 31207},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 910, col: 32, offset: 31207},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 910, col: 32, offset: 31207},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 910, col: 36, offset: 31211},
								expr: &litMatcher{
									pos:        position{line: 910, col: 37, offset: 31212},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 910, col: 43, offset: 31218},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 910, col: 43, offset: 31218},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 910, col: 47, offset: 31222},
								expr: &litMatcher{
									pos:        position{line: 910, col: 48, offset: 31223},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 910, col: 54, offset: 31229},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 910, col: 54, offset: 31229},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 910, col: 58, offset: 31233},
								expr: &litMatcher{
									pos:        position{line: 910, col: 59, offset: 31234},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 912, col: 1, offset: 31240},
			expr: &choiceExpr{
				pos: position{line: 912, col: 34, offset: 31273},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 912, col: 34, offset: 31273},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 912, col: 41, offset: 31280},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 912, col: 48, offset: 31287},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 912, col: 55, offset: 31294},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 912, col: 61, offset: 31300},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 914, col: 1, offset: 31305},
			expr: &actionExpr{
				pos: position{line: 914, col: 26, offset: 31330},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 914, col: 26, offset: 31330},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 914, col: 32, offset: 31336},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 914, col: 32, offset: 31336},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 15, offset: 31371},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 15, offset: 31407},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 15, offset: 31443},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 15, offset: 31483},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 15, offset: 31512},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 15, offset: 31543},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 924, col: 1, offset: 31697},
			expr: &choiceExpr{
				pos: position{line: 924, col: 28, offset: 31724},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 924, col: 28, offset: 31724},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 15, offset: 31758},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 15, offset: 31794},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 927, col: 15, offset: 31830},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 929, col: 1, offset: 31856},
			expr: &choiceExpr{
				pos: position{line: 929, col: 22, offset: 31877},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 929, col: 22, offset: 31877},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 15, offset: 31908},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 15, offset: 31940},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 932, col: 15, offset: 31972},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 933, col: 15, offset: 32008},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 15, offset: 32044},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 936, col: 1, offset: 32068},
			expr: &choiceExpr{
				pos: position{line: 936, col: 33, offset: 32100},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 936, col: 33, offset: 32100},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 936, col: 39, offset: 32106},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 936, col: 39, offset: 32106},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 940, col: 1, offset: 32239},
			expr: &actionExpr{
				pos: position{line: 940, col: 25, offset: 32263},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 940, col: 25, offset: 32263},
					expr: &litMatcher{
						pos:        position{line: 940, col: 25, offset: 32263},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 944, col: 1, offset: 32304},
			expr: &actionExpr{
				pos: position{line: 944, col: 25, offset: 32328},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 944, col: 25, offset: 32328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 944, col: 25, offset: 32328},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 944, col: 30, offset: 32333},
							expr: &litMatcher{
								pos:        position{line: 944, col: 30, offset: 32333},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 952, col: 1, offset: 32430},
			expr: &choiceExpr{
				pos: position{line: 952, col: 13, offset: 32442},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 952, col: 13, offset: 32442},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 35, offset: 32464},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 954, col: 1, offset: 32531},
			expr: &actionExpr{
				pos: position{line: 954, col: 24, offset: 32554},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 954, col: 24, offset: 32554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 954, col: 24, offset: 32554},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 954, col: 30, offset: 32560},
								expr: &ruleRefExpr{
									pos:  position{line: 954, col: 31, offset: 32561},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 954, col: 49, offset: 32579},
							expr: &litMatcher{
								pos:        position{line: 954, col: 50, offset: 32580},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 954, col: 55, offset: 32585},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 954, col: 60, offset: 32590},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 70, offset: 32600},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 954, col: 99, offset: 32629},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 958, col: 1, offset: 32716},
			expr: &seqExpr{
				pos: position{line: 958, col: 32, offset: 32747},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 958, col: 32, offset: 32747},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 958, col: 59, offset: 32774},
						expr: &seqExpr{
							pos: position{line: 958, col: 60, offset: 32775},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 958, col: 60, offset: 32775},
									expr: &litMatcher{
										pos:        position{line: 958, col: 62, offset: 32777},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 958, col: 69, offset: 32784},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 958, col: 69, offset: 32784},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 958, col: 77, offset: 32792},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 960, col: 1, offset: 32857},
			expr: &choiceExpr{
				pos: position{line: 960, col: 31, offset: 32887},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 960, col: 31, offset: 32887},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 11, offset: 32903},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 11, offset: 32934},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 11, offset: 32955},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 964, col: 11, offset: 32976},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 965, col: 11, offset: 33000},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 966, col: 11, offset: 33024},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 11, offset: 33050},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 11, offset: 33073},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 11, offset: 33089},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 11, offset: 33118},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 11, offset: 33150},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 11, offset: 33193},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 975, col: 1, offset: 33232},
			expr: &actionExpr{
				pos: position{line: 975, col: 37, offset: 33268},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 975, col: 37, offset: 33268},
					expr: &seqExpr{
						pos: position{line: 975, col: 38, offset: 33269},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 975, col: 38, offset: 33269},
								expr: &litMatcher{
									pos:        position{line: 975, col: 39, offset: 33270},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 975, col: 44, offset: 33275},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 979, col: 1, offset: 33346},
			expr: &choiceExpr{
				pos: position{line: 980, col: 5, offset: 33391},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 980, col: 5, offset: 33391},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 981, col: 7, offset: 33488},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 981, col: 7, offset: 33488},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 981, col: 7, offset: 33488},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 12, offset: 33493},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 985, col: 1, offset: 33656},
			expr: &choiceExpr{
				pos: position{line: 985, col: 24, offset: 33679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 985, col: 24, offset: 33679},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 985, col: 24, offset: 33679},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 985, col: 24, offset: 33679},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 985, col: 30, offset: 33685},
										expr: &ruleRefExpr{
											pos:  position{line: 985, col: 31, offset: 33686},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 985, col: 50, offset: 33705},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 985, col: 50, offset: 33705},
											expr: &litMatcher{
												pos:        position{line: 985, col: 51, offset: 33706},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 985, col: 55, offset: 33710},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 985, col: 59, offset: 33714},
											expr: &litMatcher{
												pos:        position{line: 985, col: 60, offset: 33715},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 985, col: 65, offset: 33720},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 75, offset: 33730},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 985, col: 104, offset: 33759},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 985, col: 108, offset: 33763},
									expr: &notExpr{
										pos: position{line: 985, col: 110, offset: 33765},
										expr: &ruleRefExpr{
											pos:  position{line: 985, col: 111, offset: 33766},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 33960},
						run: (*parser).callonSingleQuoteBoldText19,
						expr: &seqExpr{
							pos: position{line: 987, col: 5, offset: 33960},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 987, col: 5, offset: 33960},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 987, col: 11, offset: 33966},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 12, offset: 33967},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 987, col: 30, offset: 33985},
									expr: &litMatcher{
										pos:        position{line: 987, col: 31, offset: 33986},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 987, col: 36, offset: 33991},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 987, col: 40, offset: 33995},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 987, col: 50, offset: 34005},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 987, col: 50, offset: 34005},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 54, offset: 34009},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 987, col: 83, offset: 34038},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 991, col: 1, offset: 34244},
			expr: &seqExpr{
				pos: position{line: 991, col: 32, offset: 34275},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 991, col: 32, offset: 34275},
						expr: &ruleRefExpr{
							pos:  position{line: 991, col: 33, offset: 34276},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 991, col: 39, offset: 34282},
						expr: &ruleRefExpr{
							pos:  position{line: 991, col: 39, offset: 34282},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 993, col: 1, offset: 34311},
			expr: &choiceExpr{
				pos: position{line: 993, col: 31, offset: 34341},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 993, col: 31, offset: 34341},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 34357},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 995, col: 11, offset: 34387},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 995, col: 11, offset: 34387},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 11, offset: 34387},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 995, col: 18, offset: 34394},
								expr: &seqExpr{
									pos: position{line: 995, col: 19, offset: 34395},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 995, col: 19, offset: 34395},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 995, col: 23, offset: 34399},
											expr: &litMatcher{
												pos:        position{line: 995, col: 24, offset: 34400},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 11, offset: 34416},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 11, offset: 34437},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 11, offset: 34458},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 11, offset: 34482},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 11, offset: 34506},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 11, offset: 34532},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 11, offset: 34555},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 11, offset: 34572},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 11, offset: 34601},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 11, offset: 34633},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 11, offset: 34676},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1008, col: 1, offset: 34714},
			expr: &actionExpr{
				pos: position{line: 1008, col: 37, offset: 34750},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1008, col: 37, offset: 34750},
					expr: &charClassMatcher{
						pos:        position{line: 1008, col: 37, offset: 34750},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1012, col: 1, offset: 34976},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 35021},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1013, col: 5, offset: 35021},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1014, col: 7, offset: 35118},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1014, col: 7, offset: 35118},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1014, col: 7, offset: 35118},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 11, offset: 35122},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1018, col: 1, offset: 35285},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 35309},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 35309},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 35309},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1019, col: 5, offset: 35309},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 18, offset: 35322},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 40, offset: 35344},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 45, offset: 35349},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 55, offset: 35359},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 84, offset: 35388},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 9, offset: 35545},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1021, col: 9, offset: 35545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1021, col: 9, offset: 35545},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 22, offset: 35558},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 44, offset: 35580},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 49, offset: 35585},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 59, offset: 35595},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 88, offset: 35624},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1024, col: 9, offset: 35824},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1024, col: 9, offset: 35824},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1024, col: 9, offset: 35824},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 22, offset: 35837},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 44, offset: 35859},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1024, col: 48, offset: 35863},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 58, offset: 35873},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 87, offset: 35902},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1032, col: 1, offset: 36110},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 15, offset: 36124},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 15, offset: 36124},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 39, offset: 36148},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1034, col: 1, offset: 36171},
			expr: &actionExpr{
				pos: position{line: 1034, col: 26, offset: 36196},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 26, offset: 36196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1034, col: 26, offset: 36196},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1034, col: 32, offset: 36202},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 33, offset: 36203},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1034, col: 51, offset: 36221},
							expr: &litMatcher{
								pos:        position{line: 1034, col: 52, offset: 36222},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 57, offset: 36227},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 62, offset: 36232},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 72, offset: 36242},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 103, offset: 36273},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1038, col: 1, offset: 36407},
			expr: &seqExpr{
				pos: position{line: 1038, col: 34, offset: 36440},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 34, offset: 36440},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1038, col: 63, offset: 36469},
						expr: &seqExpr{
							pos: position{line: 1038, col: 64, offset: 36470},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1038, col: 64, offset: 36470},
									expr: &litMatcher{
										pos:        position{line: 1038, col: 66, offset: 36472},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1038, col: 73, offset: 36479},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1038, col: 73, offset: 36479},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1038, col: 81, offset: 36487},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1040, col: 1, offset: 36554},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 33, offset: 36586},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1040, col: 33, offset: 36586},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 11, offset: 36602},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 11, offset: 36635},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 11, offset: 36654},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 11, offset: 36675},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 11, offset: 36699},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 11, offset: 36723},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 11, offset: 36749},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 11, offset: 36772},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 36788},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 36817},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 36862},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1053, col: 1, offset: 36902},
			expr: &actionExpr{
				pos: position{line: 1053, col: 39, offset: 36940},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1053, col: 39, offset: 36940},
					expr: &seqExpr{
						pos: position{line: 1053, col: 40, offset: 36941},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1053, col: 40, offset: 36941},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 41, offset: 36942},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1053, col: 46, offset: 36947},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1057, col: 1, offset: 37018},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 5, offset: 37065},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1058, col: 5, offset: 37065},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1059, col: 7, offset: 37164},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1059, col: 7, offset: 37164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1059, col: 7, offset: 37164},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1059, col: 12, offset: 37169},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1063, col: 1, offset: 37334},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 26, offset: 37359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1063, col: 26, offset: 37359},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1063, col: 26, offset: 37359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1063, col: 26, offset: 37359},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1063, col: 32, offset: 37365},
										expr: &ruleRefExpr{
											pos:  position{line: 1063, col: 33, offset: 37366},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1063, col: 52, offset: 37385},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1063, col: 52, offset: 37385},
											expr: &litMatcher{
												pos:        position{line: 1063, col: 53, offset: 37386},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1063, col: 57, offset: 37390},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1063, col: 61, offset: 37394},
											expr: &litMatcher{
												pos:        position{line: 1063, col: 62, offset: 37395},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1063, col: 67, offset: 37400},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 77, offset: 37410},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1063, col: 108, offset: 37441},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 37631},
						run: (*parser).callonSingleQuoteItalicText16,
						expr: &seqExpr{
							pos: position{line: 1065, col: 5, offset: 37631},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1065, col: 5, offset: 37631},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1065, col: 11, offset: 37637},
										expr: &ruleRefExpr{
											pos:  position{line: 1065, col: 12, offset: 37638},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1065, col: 30, offset: 37656},
									expr: &litMatcher{
										pos:        position{line: 1065, col: 31, offset: 37657},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1065, col: 36, offset: 37662},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1065, col: 40, offset: 37666},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1065, col: 50, offset: 37676},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1065, col: 50, offset: 37676},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1065, col: 54, offset: 37680},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1065, col: 85, offset: 37711},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1069, col: 1, offset: 37921},
			expr: &seqExpr{
				pos: position{line: 1069, col: 34, offset: 37954},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1069, col: 34, offset: 37954},
						expr: &ruleRefExpr{
							pos:  position{line: 1069, col: 35, offset: 37955},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1069, col: 41, offset: 37961},
						expr: &ruleRefExpr{
							pos:  position{line: 1069, col: 41, offset: 37961},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1071, col: 1, offset: 37992},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 33, offset: 38024},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1071, col: 33, offset: 38024},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 38040},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1073, col: 11, offset: 38072},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1073, col: 11, offset: 38072},
								expr: &ruleRefExpr{
									pos:  position{line: 1073, col: 11, offset: 38072},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1073, col: 18, offset: 38079},
								expr: &seqExpr{
									pos: position{line: 1073, col: 19, offset: 38080},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1073, col: 19, offset: 38080},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1073, col: 23, offset: 38084},
											expr: &litMatcher{
												pos:        position{line: 1073, col: 24, offset: 38085},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 11, offset: 38101},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 11, offset: 38120},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 11, offset: 38141},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 11, offset: 38165},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 11, offset: 38189},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 38215},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 38238},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 38255},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 38284},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 38316},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 38361},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1086, col: 1, offset: 38401},
			expr: &actionExpr{
				pos: position{line: 1086, col: 39, offset: 38439},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1086, col: 39, offset: 38439},
					expr: &charClassMatcher{
						pos:        position{line: 1086, col: 39, offset: 38439},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1090, col: 1, offset: 38665},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 38712},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1091, col: 5, offset: 38712},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1092, col: 7, offset: 38811},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1092, col: 7, offset: 38811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 7, offset: 38811},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 11, offset: 38815},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1096, col: 1, offset: 38981},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 39007},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 39007},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 39007},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1097, col: 5, offset: 39007},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 18, offset: 39020},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1097, col: 40, offset: 39042},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 45, offset: 39047},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 55, offset: 39057},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1097, col: 86, offset: 39088},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1099, col: 9, offset: 39245},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1099, col: 9, offset: 39245},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 9, offset: 39245},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 22, offset: 39258},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 44, offset: 39280},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 49, offset: 39285},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 59, offset: 39295},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 90, offset: 39326},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1102, col: 9, offset: 39526},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1102, col: 9, offset: 39526},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1102, col: 9, offset: 39526},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 22, offset: 39539},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1102, col: 44, offset: 39561},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 48, offset: 39565},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 58, offset: 39575},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1102, col: 89, offset: 39606},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1109, col: 1, offset: 39816},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 18, offset: 39833},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 18, offset: 39833},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 45, offset: 39860},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1111, col: 1, offset: 39886},
			expr: &actionExpr{
				pos: position{line: 1111, col: 29, offset: 39914},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 29, offset: 39914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1111, col: 29, offset: 39914},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1111, col: 35, offset: 39920},
								expr: &ruleRefExpr{
									pos:  position{line: 1111, col: 36, offset: 39921},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1111, col: 54, offset: 39939},
							expr: &litMatcher{
								pos:        position{line: 1111, col: 55, offset: 39940},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1111, col: 60, offset: 39945},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 65, offset: 39950},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 75, offset: 39960},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1111, col: 109, offset: 39994},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1115, col: 1, offset: 40131},
			expr: &seqExpr{
				pos: position{line: 1115, col: 37, offset: 40167},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1115, col: 37, offset: 40167},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1115, col: 69, offset: 40199},
						expr: &seqExpr{
							pos: position{line: 1115, col: 70, offset: 40200},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1115, col: 70, offset: 40200},
									expr: &litMatcher{
										pos:        position{line: 1115, col: 72, offset: 40202},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1115, col: 79, offset: 40209},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1115, col: 79, offset: 40209},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1115, col: 87, offset: 40217},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1117, col: 1, offset: 40286},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 36, offset: 40321},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 36, offset: 40321},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 11, offset: 40337},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 11, offset: 40373},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 40392},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 40413},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 11, offset: 40434},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 40458},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 40484},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 11, offset: 40507},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 40523},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 40552},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 40600},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1130, col: 1, offset: 40643},
			expr: &actionExpr{
				pos: position{line: 1130, col: 42, offset: 40684},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1130, col: 42, offset: 40684},
					expr: &seqExpr{
						pos: position{line: 1130, col: 43, offset: 40685},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1130, col: 43, offset: 40685},
								expr: &litMatcher{
									pos:        position{line: 1130, col: 44, offset: 40686},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1130, col: 49, offset: 40691},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1134, col: 1, offset: 40762},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 40812},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1135, col: 5, offset: 40812},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1136, col: 7, offset: 40914},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1136, col: 7, offset: 40914},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 7, offset: 40914},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 12, offset: 40919},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1140, col: 1, offset: 41087},
			expr: &choiceExpr{
				pos: position{line: 1140, col: 29, offset: 41115},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1140, col: 29, offset: 41115},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1140, col: 29, offset: 41115},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1140, col: 29, offset: 41115},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1140, col: 35, offset: 41121},
										expr: &ruleRefExpr{
											pos:  position{line: 1140, col: 36, offset: 41122},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1140, col: 55, offset: 41141},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1140, col: 55, offset: 41141},
											expr: &litMatcher{
												pos:        position{line: 1140, col: 56, offset: 41142},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1140, col: 60, offset: 41146},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1140, col: 64, offset: 41150},
											expr: &litMatcher{
												pos:        position{line: 1140, col: 65, offset: 41151},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 70, offset: 41156},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 80, offset: 41166},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1140, col: 114, offset: 41200},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 41393},
						run: (*parser).callonSingleQuoteMonospaceText16,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 41393},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1142, col: 5, offset: 41393},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1142, col: 11, offset: 41399},
										expr: &ruleRefExpr{
											pos:  position{line: 1142, col: 12, offset: 41400},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1142, col: 30, offset: 41418},
									expr: &litMatcher{
										pos:        position{line: 1142, col: 31, offset: 41419},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1142, col: 36, offset: 41424},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 40, offset: 41428},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1142, col: 50, offset: 41438},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1142, col: 50, offset: 41438},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1142, col: 54, offset: 41442},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1142, col: 88, offset: 41476},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1146, col: 1, offset: 41692},
			expr: &seqExpr{
				pos: position{line: 1146, col: 37, offset: 41728},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1146, col: 37, offset: 41728},
						expr: &ruleRefExpr{
							pos:  position{line: 1146, col: 38, offset: 41729},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1146, col: 44, offset: 41735},
						expr: &ruleRefExpr{
							pos:  position{line: 1146, col: 44, offset: 41735},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1148, col: 1, offset: 41769},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 37, offset: 41805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 37, offset: 41805},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 41821},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1150, col: 11, offset: 41857},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1150, col: 11, offset: 41857},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 11, offset: 41857},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1150, col: 18, offset: 41864},
								expr: &seqExpr{
									pos: position{line: 1150, col: 19, offset: 41865},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1150, col: 19, offset: 41865},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1150, col: 23, offset: 41869},
											expr: &litMatcher{
												pos:        position{line: 1150, col: 24, offset: 41870},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 41998},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 42036},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 42055},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 42076},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 42097},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 42121},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 42147},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 42170},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 42186},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 42215},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 42247},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 42295},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1164, col: 1, offset: 42338},
			expr: &actionExpr{
				pos: position{line: 1164, col: 42, offset: 42379},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1164, col: 42, offset: 42379},
					expr: &charClassMatcher{
						pos:        position{line: 1164, col: 42, offset: 42379},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1168, col: 1, offset: 42597},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 42647},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1169, col: 5, offset: 42647},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1170, col: 7, offset: 42749},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1170, col: 7, offset: 42749},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1170, col: 7, offset: 42749},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1170, col: 11, offset: 42753},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1174, col: 1, offset: 42922},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 42951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 42951},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 42951},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1175, col: 5, offset: 42951},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 18, offset: 42964},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 40, offset: 42986},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 45, offset: 42991},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 55, offset: 43001},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 89, offset: 43035},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1177, col: 9, offset: 43192},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1177, col: 9, offset: 43192},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 9, offset: 43192},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 22, offset: 43205},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 44, offset: 43227},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 49, offset: 43232},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 59, offset: 43242},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 93, offset: 43276},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 9, offset: 43476},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1180, col: 9, offset: 43476},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 9, offset: 43476},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 22, offset: 43489},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 44, offset: 43511},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 48, offset: 43515},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 58, offset: 43525},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 92, offset: 43559},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1188, col: 1, offset: 43767},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 15, offset: 43781},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 15, offset: 43781},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 39, offset: 43805},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1190, col: 1, offset: 43828},
			expr: &actionExpr{
				pos: position{line: 1190, col: 26, offset: 43853},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 26, offset: 43853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1190, col: 26, offset: 43853},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1190, col: 32, offset: 43859},
								expr: &ruleRefExpr{
									pos:  position{line: 1190, col: 33, offset: 43860},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1190, col: 51, offset: 43878},
							expr: &litMatcher{
								pos:        position{line: 1190, col: 52, offset: 43879},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1190, col: 57, offset: 43884},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 62, offset: 43889},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1190, col: 72, offset: 43899},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1190, col: 103, offset: 43930},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1194, col: 1, offset: 44064},
			expr: &seqExpr{
				pos: position{line: 1194, col: 34, offset: 44097},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 34, offset: 44097},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1194, col: 63, offset: 44126},
						expr: &seqExpr{
							pos: position{line: 1194, col: 64, offset: 44127},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1194, col: 64, offset: 44127},
									expr: &litMatcher{
										pos:        position{line: 1194, col: 66, offset: 44129},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1194, col: 73, offset: 44136},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1194, col: 73, offset: 44136},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1194, col: 81, offset: 44144},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1196, col: 1, offset: 44211},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 33, offset: 44243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 33, offset: 44243},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 44258},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 11, offset: 44290},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 44309},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 44330},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 44354},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 44378},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 44404},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 44426},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 44441},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 44469},
						name: "DoubleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 44514},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextStringElement",
			pos:  position{line: 1209, col: 1, offset: 44554},
			expr: &actionExpr{
				pos: position{line: 1209, col: 39, offset: 44592},
				run: (*parser).callonDoubleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1209, col: 39, offset: 44592},
					expr: &seqExpr{
						pos: position{line: 1209, col: 40, offset: 44593},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1209, col: 40, offset: 44593},
								expr: &litMatcher{
									pos:        position{line: 1209, col: 41, offset: 44594},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1209, col: 46, offset: 44599},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1213, col: 1, offset: 44669},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 44715},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1214, col: 5, offset: 44715},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1215, col: 7, offset: 44814},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1215, col: 7, offset: 44814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 7, offset: 44814},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 12, offset: 44819},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1219, col: 1, offset: 44984},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 26, offset: 45009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1219, col: 26, offset: 45009},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1219, col: 26, offset: 45009},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 26, offset: 45009},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1219, col: 32, offset: 45015},
										expr: &ruleRefExpr{
											pos:  position{line: 1219, col: 33, offset: 45016},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1219, col: 52, offset: 45035},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1219, col: 52, offset: 45035},
											expr: &litMatcher{
												pos:        position{line: 1219, col: 53, offset: 45036},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1219, col: 57, offset: 45040},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1219, col: 61, offset: 45044},
											expr: &litMatcher{
												pos:        position{line: 1219, col: 62, offset: 45045},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 67, offset: 45050},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 77, offset: 45060},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 108, offset: 45091},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 45281},
						run: (*parser).callonSingleQuoteMarkedText16,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 45281},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1221, col: 5, offset: 45281},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1221, col: 11, offset: 45287},
										expr: &ruleRefExpr{
											pos:  position{line: 1221, col: 12, offset: 45288},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1221, col: 30, offset: 45306},
									expr: &litMatcher{
										pos:        position{line: 1221, col: 31, offset: 45307},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 36, offset: 45312},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 40, offset: 45316},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1221, col: 50, offset: 45326},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1221, col: 50, offset: 45326},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1221, col: 54, offset: 45330},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 85, offset: 45361},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1225, col: 1, offset: 45570},
			expr: &seqExpr{
				pos: position{line: 1225, col: 34, offset: 45603},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1225, col: 34, offset: 45603},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 35, offset: 45604},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1225, col: 41, offset: 45610},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 41, offset: 45610},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1227, col: 1, offset: 45641},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 33, offset: 45673},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 33, offset: 45673},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 45688},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1229, col: 11, offset: 45720},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1229, col: 11, offset: 45720},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 11, offset: 45720},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1229, col: 18, offset: 45727},
								expr: &seqExpr{
									pos: position{line: 1229, col: 19, offset: 45728},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1229, col: 19, offset: 45728},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1229, col: 23, offset: 45732},
											expr: &litMatcher{
												pos:        position{line: 1229, col: 24, offset: 45733},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 45749},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 45768},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 45789},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 45813},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 45837},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 45863},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 45885},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 45900},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 45928},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 45960},
						name: "SingleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 46005},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStringElement",
			pos:  position{line: 1242, col: 1, offset: 46045},
			expr: &actionExpr{
				pos: position{line: 1242, col: 39, offset: 46083},
				run: (*parser).callonSingleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1242, col: 39, offset: 46083},
					expr: &charClassMatcher{
						pos:        position{line: 1242, col: 39, offset: 46083},
						val:        "[^\\r\\n{} #^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '#', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1246, col: 1, offset: 46309},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 5, offset: 46355},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1247, col: 5, offset: 46355},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1248, col: 7, offset: 46452},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1248, col: 7, offset: 46452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1248, col: 7, offset: 46452},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1248, col: 11, offset: 46456},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1252, col: 1, offset: 46619},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 46644},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1253, col: 5, offset: 46644},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1253, col: 5, offset: 46644},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1253, col: 5, offset: 46644},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 18, offset: 46657},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 40, offset: 46679},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1253, col: 45, offset: 46684},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 55, offset: 46694},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 86, offset: 46725},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1255, col: 9, offset: 46882},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1255, col: 9, offset: 46882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1255, col: 9, offset: 46882},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1255, col: 22, offset: 46895},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1255, col: 44, offset: 46917},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1255, col: 49, offset: 46922},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1255, col: 59, offset: 46932},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1255, col: 90, offset: 46963},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1258, col: 9, offset: 47163},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1258, col: 9, offset: 47163},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1258, col: 9, offset: 47163},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 22, offset: 47176},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 44, offset: 47198},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 48, offset: 47202},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 58, offset: 47212},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 89, offset: 47243},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1263, col: 1, offset: 47393},
			expr: &actionExpr{
				pos: position{line: 1263, col: 18, offset: 47410},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 18, offset: 47410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1263, col: 18, offset: 47410},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1263, col: 24, offset: 47416},
								expr: &ruleRefExpr{
									pos:  position{line: 1263, col: 25, offset: 47417},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1263, col: 43, offset: 47435},
							expr: &litMatcher{
								pos:        position{line: 1263, col: 44, offset: 47436},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1263, col: 48, offset: 47440},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 52, offset: 47444},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 61, offset: 47453},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1263, col: 83, offset: 47475},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1267, col: 1, offset: 47571},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 25, offset: 47595},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 25, offset: 47595},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 38, offset: 47608},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1269, col: 1, offset: 47627},
			expr: &actionExpr{
				pos: position{line: 1269, col: 21, offset: 47647},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1269, col: 21, offset: 47647},
					expr: &charClassMatcher{
						pos:        position{line: 1269, col: 21, offset: 47647},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1273, col: 1, offset: 47724},
			expr: &actionExpr{
				pos: position{line: 1273, col: 25, offset: 47748},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 25, offset: 47748},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1273, col: 25, offset: 47748},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 38, offset: 47761},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1273, col: 60, offset: 47783},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 64, offset: 47787},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 73, offset: 47796},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1273, col: 95, offset: 47818},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1277, col: 1, offset: 47947},
			expr: &actionExpr{
				pos: position{line: 1277, col: 20, offset: 47966},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 20, offset: 47966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1277, col: 20, offset: 47966},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1277, col: 26, offset: 47972},
								expr: &ruleRefExpr{
									pos:  position{line: 1277, col: 27, offset: 47973},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1277, col: 45, offset: 47991},
							expr: &litMatcher{
								pos:        position{line: 1277, col: 46, offset: 47992},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 50, offset: 47996},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 54, offset: 48000},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 63, offset: 48009},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 87, offset: 48033},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1281, col: 1, offset: 48131},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 27, offset: 48157},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1281, col: 27, offset: 48157},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 40, offset: 48170},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1283, col: 1, offset: 48191},
			expr: &actionExpr{
				pos: position{line: 1283, col: 23, offset: 48213},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1283, col: 23, offset: 48213},
					expr: &charClassMatcher{
						pos:        position{line: 1283, col: 23, offset: 48213},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1287, col: 1, offset: 48290},
			expr: &actionExpr{
				pos: position{line: 1287, col: 27, offset: 48316},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 27, offset: 48316},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1287, col: 27, offset: 48316},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 40, offset: 48329},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1287, col: 62, offset: 48351},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 66, offset: 48355},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 75, offset: 48364},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1287, col: 99, offset: 48388},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1294, col: 1, offset: 48630},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 22, offset: 48651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 22, offset: 48651},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 46, offset: 48675},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 70, offset: 48699},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1296, col: 1, offset: 48717},
			expr: &litMatcher{
				pos:        position{line: 1296, col: 32, offset: 48748},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1298, col: 1, offset: 48753},
			expr: &actionExpr{
				pos: position{line: 1298, col: 26, offset: 48778},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 26, offset: 48778},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1298, col: 26, offset: 48778},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 54, offset: 48806},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 63, offset: 48815},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1298, col: 93, offset: 48845},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1298, col: 121, offset: 48873},
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 122, offset: 48874},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1302, col: 1, offset: 48979},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 33, offset: 49011},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1302, col: 34, offset: 49012},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1302, col: 34, offset: 49012},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1302, col: 35, offset: 49013},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1302, col: 35, offset: 49013},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 36, offset: 49014},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1302, col: 64, offset: 49042},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 65, offset: 49043},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1302, col: 71, offset: 49049},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 72, offset: 49050},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1302, col: 80, offset: 49058,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1302, col: 83, offset: 49061},
									expr: &seqExpr{
										pos: position{line: 1302, col: 84, offset: 49062},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1302, col: 84, offset: 49062},
												expr: &seqExpr{
													pos: position{line: 1302, col: 86, offset: 49064},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1302, col: 86, offset: 49064},
															expr: &ruleRefExpr{
																pos:  position{line: 1302, col: 86, offset: 49064},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1302, col: 93, offset: 49071},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1302, col: 122, offset: 49100},
												expr: &ruleRefExpr{
													pos:  position{line: 1302, col: 123, offset: 49101},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1302, col: 151, offset: 49129},
												expr: &ruleRefExpr{
													pos:  position{line: 1302, col: 152, offset: 49130},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1302, col: 160, offset: 49138,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 7, offset: 49280},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1304, col: 8, offset: 49281},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1304, col: 8, offset: 49281},
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 9, offset: 49282},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1304, col: 15, offset: 49288},
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 16, offset: 49289},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1304, col: 24, offset: 49297},
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 25, offset: 49298},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1304, col: 53, offset: 49326,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1308, col: 1, offset: 49408},
			expr: &litMatcher{
				pos:        position{line: 1308, col: 32, offset: 49439},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1310, col: 1, offset: 49446},
			expr: &actionExpr{
				pos: position{line: 1310, col: 26, offset: 49471},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 26, offset: 49471},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1310, col: 26, offset: 49471},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 54, offset: 49499},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 63, offset: 49508},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1310, col: 93, offset: 49538},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1310, col: 121, offset: 49566},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 122, offset: 49567},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1314, col: 1, offset: 49672},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 33, offset: 49704},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1314, col: 34, offset: 49705},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1314, col: 34, offset: 49705},
							expr: &seqExpr{
								pos: position{line: 1314, col: 35, offset: 49706},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1314, col: 35, offset: 49706},
										expr: &ruleRefExpr{
											pos:  position{line: 1314, col: 36, offset: 49707},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1314, col: 64, offset: 49735,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1316, col: 7, offset: 49900},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1316, col: 7, offset: 49900},
							expr: &seqExpr{
								pos: position{line: 1316, col: 8, offset: 49901},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1316, col: 8, offset: 49901},
										expr: &ruleRefExpr{
											pos:  position{line: 1316, col: 9, offset: 49902},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1316, col: 15, offset: 49908},
										expr: &ruleRefExpr{
											pos:  position{line: 1316, col: 16, offset: 49909},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1316, col: 24, offset: 49917},
										expr: &ruleRefExpr{
											pos:  position{line: 1316, col: 25, offset: 49918},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1316, col: 53, offset: 49946,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1320, col: 1, offset: 50029},
			expr: &choiceExpr{
				pos: position{line: 1320, col: 21, offset: 50049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1320, col: 21, offset: 50049},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1320, col: 21, offset: 50049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1320, col: 21, offset: 50049},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 30, offset: 50058},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1320, col: 38, offset: 50066},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 39, offset: 50067},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 67, offset: 50095},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 50191},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 50191},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 5, offset: 50191},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 15, offset: 50201},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1322, col: 23, offset: 50209},
										expr: &choiceExpr{
											pos: position{line: 1322, col: 24, offset: 50210},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1322, col: 24, offset: 50210},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1322, col: 37, offset: 50223},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 65, offset: 50251},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1326, col: 1, offset: 50347},
			expr: &actionExpr{
				pos: position{line: 1326, col: 30, offset: 50376},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1326, col: 30, offset: 50376},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1333, col: 1, offset: 50549},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 19, offset: 50567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 19, offset: 50567},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 44, offset: 50592},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1335, col: 1, offset: 50617},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 27, offset: 50643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1335, col: 27, offset: 50643},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 27, offset: 50643},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1335, col: 27, offset: 50643},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1335, col: 32, offset: 50648},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 36, offset: 50652},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1335, col: 40, offset: 50656},
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 40, offset: 50656},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 47, offset: 50663},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1335, col: 51, offset: 50667},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 58, offset: 50674},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 79, offset: 50695},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 50778},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1337, col: 5, offset: 50778},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1337, col: 5, offset: 50778},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 10, offset: 50783},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 14, offset: 50787},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 18, offset: 50791},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1341, col: 1, offset: 50863},
			expr: &actionExpr{
				pos: position{line: 1341, col: 27, offset: 50889},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 27, offset: 50889},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1341, col: 27, offset: 50889},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 35, offset: 50897},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 40, offset: 50902},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 54, offset: 50916},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 72, offset: 50934},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1345, col: 1, offset: 51057},
			expr: &ruleRefExpr{
				pos:  position{line: 1345, col: 24, offset: 51080},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1350, col: 1, offset: 51202},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 9, offset: 51210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1350, col: 9, offset: 51210},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 24, offset: 51225},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1353, col: 1, offset: 51306},
			expr: &actionExpr{
				pos: position{line: 1353, col: 17, offset: 51322},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 17, offset: 51322},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1353, col: 17, offset: 51322},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 25, offset: 51330},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 30, offset: 51335},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 40, offset: 51345},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 58, offset: 51363},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1357, col: 1, offset: 51474},
			expr: &actionExpr{
				pos: position{line: 1357, col: 17, offset: 51490},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1357, col: 17, offset: 51490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1357, col: 17, offset: 51490},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 22, offset: 51495},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1357, col: 42, offset: 51515},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1357, col: 59, offset: 51532},
								expr: &ruleRefExpr{
									pos:  position{line: 1357, col: 60, offset: 51533},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1361, col: 1, offset: 51626},
			expr: &actionExpr{
				pos: position{line: 1361, col: 19, offset: 51644},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 19, offset: 51644},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 19, offset: 51644},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 23, offset: 51648},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1361, col: 33, offset: 51658},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 34, offset: 51659},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1362, col: 5, offset: 51691},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 5, offset: 51691},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 12, offset: 51698},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1362, col: 23, offset: 51709},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 24, offset: 51710},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1362, col: 43, offset: 51729},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1366, col: 1, offset: 51846},
			expr: &actionExpr{
				pos: position{line: 1366, col: 30, offset: 51875},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1366, col: 30, offset: 51875},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1368, col: 5, offset: 51926},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1368, col: 6, offset: 51927},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1368, col: 6, offset: 51927},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1368, col: 6, offset: 51927},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1368, col: 11, offset: 51932},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1368, col: 20, offset: 51941},
												expr: &choiceExpr{
													pos: position{line: 1368, col: 21, offset: 51942},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1368, col: 21, offset: 51942},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1368, col: 34, offset: 51955},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1368, col: 56, offset: 51977},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1368, col: 61, offset: 51982},
											expr: &notExpr{
												pos: position{line: 1368, col: 63, offset: 51984},
												expr: &litMatcher{
													pos:        position{line: 1368, col: 64, offset: 51985},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1368, col: 69, offset: 51990},
											expr: &litMatcher{
												pos:        position{line: 1368, col: 69, offset: 51990},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1372, col: 6, offset: 52117},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1372, col: 6, offset: 52117},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1372, col: 6, offset: 52117},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1372, col: 15, offset: 52126},
												expr: &choiceExpr{
													pos: position{line: 1372, col: 16, offset: 52127},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1372, col: 16, offset: 52127},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1372, col: 29, offset: 52140},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1372, col: 53, offset: 52164},
											expr: &notExpr{
												pos: position{line: 1372, col: 55, offset: 52166},
												expr: &litMatcher{
													pos:        position{line: 1372, col: 56, offset: 52167},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1372, col: 61, offset: 52172},
											expr: &litMatcher{
												pos:        position{line: 1372, col: 61, offset: 52172},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1378, col: 1, offset: 52286},
			expr: &actionExpr{
				pos: position{line: 1378, col: 18, offset: 52303},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1378, col: 18, offset: 52303},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1382, col: 1, offset: 52389},
			expr: &actionExpr{
				pos: position{line: 1382, col: 24, offset: 52412},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1382, col: 24, offset: 52412},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1386, col: 1, offset: 52505},
			expr: &actionExpr{
				pos: position{line: 1386, col: 26, offset: 52530},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1386, col: 26, offset: 52530},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1391, col: 1, offset: 52687},
			expr: &actionExpr{
				pos: position{line: 1392, col: 5, offset: 52707},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 5, offset: 52707},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1392, col: 5, offset: 52707},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1392, col: 14, offset: 52716},
								expr: &choiceExpr{
									pos: position{line: 1392, col: 15, offset: 52717},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1392, col: 15, offset: 52717},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1393, col: 11, offset: 52732},
											expr: &ruleRefExpr{
												pos:  position{line: 1393, col: 11, offset: 52732},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1394, col: 11, offset: 52750},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1395, col: 11, offset: 52774},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1396, col: 11, offset: 52796},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1397, col: 11, offset: 52814},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1397, col: 21, offset: 52824},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1401, col: 1, offset: 52894},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 17, offset: 52910},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1401, col: 17, offset: 52910},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 40, offset: 52933},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1404, col: 1, offset: 53061},
			expr: &actionExpr{
				pos: position{line: 1404, col: 25, offset: 53085},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 25, offset: 53085},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1404, col: 25, offset: 53085},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 33, offset: 53093},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1404, col: 38, offset: 53098},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1404, col: 38, offset: 53098},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 57, offset: 53117},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 79, offset: 53139},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 97, offset: 53157},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1408, col: 1, offset: 53268},
			expr: &actionExpr{
				pos: position{line: 1408, col: 25, offset: 53292},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 25, offset: 53292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1408, col: 25, offset: 53292},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 30, offset: 53297},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 48, offset: 53315},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1408, col: 65, offset: 53332},
								expr: &ruleRefExpr{
									pos:  position{line: 1408, col: 66, offset: 53333},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1415, col: 1, offset: 53528},
			expr: &actionExpr{
				pos: position{line: 1415, col: 15, offset: 53542},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1415, col: 15, offset: 53542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1415, col: 15, offset: 53542},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1415, col: 26, offset: 53553},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 27, offset: 53554},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1415, col: 40, offset: 53567},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 50, offset: 53577},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 56, offset: 53583},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 66, offset: 53593},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 84, offset: 53611},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1415, col: 101, offset: 53628},
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 101, offset: 53628},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1415, col: 108, offset: 53635},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1419, col: 1, offset: 53747},
			expr: &actionExpr{
				pos: position{line: 1419, col: 16, offset: 53762},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 16, offset: 53762},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1419, col: 16, offset: 53762},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1419, col: 25, offset: 53771},
							expr: &litMatcher{
								pos:        position{line: 1419, col: 26, offset: 53772},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 30, offset: 53776},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 36, offset: 53782},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 46, offset: 53792},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 64, offset: 53810},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1423, col: 1, offset: 53924},
			expr: &actionExpr{
				pos: position{line: 1423, col: 20, offset: 53943},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 20, offset: 53943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1423, col: 20, offset: 53943},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 24, offset: 53947},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 28, offset: 53951},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 29, offset: 53952},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1423, col: 56, offset: 53979},
							expr: &litMatcher{
								pos:        position{line: 1423, col: 56, offset: 53979},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 61, offset: 53984},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 67, offset: 53990},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 68, offset: 53991},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1423, col: 95, offset: 54018},
							expr: &litMatcher{
								pos:        position{line: 1423, col: 95, offset: 54018},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 100, offset: 54023},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 107, offset: 54030},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 108, offset: 54031},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1423, col: 135, offset: 54058},
							expr: &litMatcher{
								pos:        position{line: 1423, col: 135, offset: 54058},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1423, col: 140, offset: 54063},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 140, offset: 54063},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 147, offset: 54070},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1423, col: 158, offset: 54081},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 159, offset: 54082},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1423, col: 178, offset: 54101},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1430, col: 1, offset: 54391},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 19, offset: 54409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1430, col: 19, offset: 54409},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1430, col: 19, offset: 54409},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1430, col: 19, offset: 54409},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 32, offset: 54422},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1430, col: 41, offset: 54431},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 58, offset: 54448},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 54516},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1432, col: 5, offset: 54516},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1432, col: 5, offset: 54516},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 17, offset: 54528},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1432, col: 22, offset: 54533},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1432, col: 35, offset: 54546},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 39, offset: 54550},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1432, col: 47, offset: 54558},
										expr: &ruleRefExpr{
											pos:  position{line: 1432, col: 48, offset: 54559},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1432, col: 66, offset: 54577},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1436, col: 1, offset: 54638},
			expr: &ruleRefExpr{
				pos:  position{line: 1436, col: 16, offset: 54653},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1438, col: 1, offset: 54664},
			expr: &actionExpr{
				pos: position{line: 1438, col: 20, offset: 54683},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1438, col: 20, offset: 54683},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1438, col: 29, offset: 54692},
						expr: &seqExpr{
							pos: position{line: 1438, col: 30, offset: 54693},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1438, col: 30, offset: 54693},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 31, offset: 54694},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1438, col: 35, offset: 54698},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1445, col: 1, offset: 55022},
			expr: &actionExpr{
				pos: position{line: 1445, col: 19, offset: 55040},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 19, offset: 55040},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1445, col: 19, offset: 55040},
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 20, offset: 55041},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 5, offset: 55129},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1446, col: 12, offset: 55136},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1446, col: 12, offset: 55136},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1447, col: 11, offset: 55159},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1448, col: 11, offset: 55183},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1449, col: 11, offset: 55207},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1450, col: 11, offset: 55229},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1451, col: 11, offset: 55251},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1452, col: 11, offset: 55274},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1453, col: 11, offset: 55302},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 11, offset: 55329},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1455, col: 11, offset: 55345},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1459, col: 1, offset: 55386},
			expr: &choiceExpr{
				pos: position{line: 1459, col: 19, offset: 55404},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1459, col: 19, offset: 55404},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1459, col: 19, offset: 55404},
								expr: &ruleRefExpr{
									pos:  position{line: 1459, col: 21, offset: 55406},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1459, col: 31, offset: 55416},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 19, offset: 55487},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 19, offset: 55527},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 19, offset: 55568},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 19, offset: 55609},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 19, offset: 55650},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 19, offset: 55688},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1466, col: 19, offset: 55728},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1468, col: 1, offset: 55755},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 20, offset: 55774},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 20, offset: 55774},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 36, offset: 55790},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1470, col: 1, offset: 55804},
			expr: &actionExpr{
				pos: position{line: 1470, col: 17, offset: 55820},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 17, offset: 55820},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1470, col: 17, offset: 55820},
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 18, offset: 55821},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 22, offset: 55825},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 31, offset: 55834},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 52, offset: 55855},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1470, col: 61, offset: 55864},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 62, offset: 55865},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1470, col: 73, offset: 55876},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1474, col: 1, offset: 55946},
			expr: &actionExpr{
				pos: position{line: 1474, col: 24, offset: 55969},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1474, col: 24, offset: 55969},
					expr: &seqExpr{
						pos: position{line: 1474, col: 25, offset: 55970},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1474, col: 25, offset: 55970},
								expr: &ruleRefExpr{
									pos:  position{line: 1474, col: 26, offset: 55971},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1474, col: 36, offset: 55981},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1474, col: 36, offset: 55981},
										expr: &ruleRefExpr{
											pos:  position{line: 1474, col: 36, offset: 55981},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1474, col: 45, offset: 55990},
										expr: &charClassMatcher{
											pos:        position{line: 1474, col: 45, offset: 55990},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1478, col: 1, offset: 56040},
			expr: &oneOrMoreExpr{
				pos: position{line: 1478, col: 13, offset: 56052},
				expr: &ruleRefExpr{
					pos:  position{line: 1478, col: 13, offset: 56052},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1480, col: 1, offset: 56062},
			expr: &actionExpr{
				pos: position{line: 1480, col: 12, offset: 56073},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 12, offset: 56073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1480, col: 12, offset: 56073},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 16, offset: 56077},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1480, col: 21, offset: 56082},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1480, col: 21, offset: 56082},
									expr: &charClassMatcher{
										pos:        position{line: 1480, col: 21, offset: 56082},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1480, col: 69, offset: 56130},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1480, col: 73, offset: 56134},
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 73, offset: 56134},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1480, col: 80, offset: 56141},
							expr: &choiceExpr{
								pos: position{line: 1480, col: 82, offset: 56143},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1480, col: 82, offset: 56143},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1480, col: 88, offset: 56149},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1484, col: 1, offset: 56202},
			expr: &actionExpr{
				pos: position{line: 1484, col: 20, offset: 56221},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1484, col: 20, offset: 56221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1484, col: 20, offset: 56221},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 25, offset: 56226},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 48, offset: 56249},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1484, col: 61, offset: 56262},
								expr: &ruleRefExpr{
									pos:  position{line: 1484, col: 61, offset: 56262},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1488, col: 1, offset: 56359},
			expr: &actionExpr{
				pos: position{line: 1488, col: 26, offset: 56384},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 26, offset: 56384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1488, col: 26, offset: 56384},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 30, offset: 56388},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1488, col: 35, offset: 56393},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1488, col: 35, offset: 56393},
									expr: &charClassMatcher{
										pos:        position{line: 1488, col: 35, offset: 56393},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1488, col: 83, offset: 56441},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1488, col: 87, offset: 56445},
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 87, offset: 56445},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1495, col: 1, offset: 56672},
			expr: &seqExpr{
				pos: position{line: 1495, col: 25, offset: 56696},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1495, col: 25, offset: 56696},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1495, col: 31, offset: 56702},
						expr: &ruleRefExpr{
							pos:  position{line: 1495, col: 31, offset: 56702},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1495, col: 38, offset: 56709},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1497, col: 1, offset: 56769},
			expr: &seqExpr{
				pos: position{line: 1497, col: 30, offset: 56798},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1497, col: 30, offset: 56798},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1497, col: 36, offset: 56804},
						expr: &ruleRefExpr{
							pos:  position{line: 1497, col: 36, offset: 56804},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1497, col: 43, offset: 56811},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1499, col: 1, offset: 56816},
			expr: &choiceExpr{
				pos: position{line: 1499, col: 28, offset: 56843},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1499, col: 29, offset: 56844},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1499, col: 29, offset: 56844},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1499, col: 35, offset: 56850},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 35, offset: 56850},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1499, col: 42, offset: 56857},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1499, col: 49, offset: 56864},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1501, col: 1, offset: 56869},
			expr: &actionExpr{
				pos: position{line: 1501, col: 16, offset: 56884},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1501, col: 16, offset: 56884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1501, col: 16, offset: 56884},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1501, col: 27, offset: 56895},
								expr: &ruleRefExpr{
									pos:  position{line: 1501, col: 28, offset: 56896},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1501, col: 41, offset: 56909},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 67, offset: 56935},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 76, offset: 56944},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1501, col: 104, offset: 56972},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1505, col: 1, offset: 57087},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1505, col: 31, offset: 57117},
				expr: &actionExpr{
					pos: position{line: 1505, col: 32, offset: 57118},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1505, col: 32, offset: 57118},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1505, col: 32, offset: 57118},
								expr: &ruleRefExpr{
									pos:  position{line: 1505, col: 33, offset: 57119},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1505, col: 57, offset: 57143},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1505, col: 66, offset: 57152},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1512, col: 1, offset: 57489},
			expr: &seqExpr{
				pos: position{line: 1512, col: 26, offset: 57514},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1512, col: 26, offset: 57514},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1512, col: 33, offset: 57521},
						expr: &ruleRefExpr{
							pos:  position{line: 1512, col: 33, offset: 57521},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1512, col: 40, offset: 57528},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1514, col: 1, offset: 57533},
			expr: &seqExpr{
				pos: position{line: 1514, col: 31, offset: 57563},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1514, col: 31, offset: 57563},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1514, col: 38, offset: 57570},
						expr: &ruleRefExpr{
							pos:  position{line: 1514, col: 38, offset: 57570},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 45, offset: 57577},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1516, col: 1, offset: 57582},
			expr: &choiceExpr{
				pos: position{line: 1516, col: 29, offset: 57610},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1516, col: 30, offset: 57611},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1516, col: 30, offset: 57611},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1516, col: 37, offset: 57618},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 37, offset: 57618},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1516, col: 44, offset: 57625},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1516, col: 51, offset: 57632},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1518, col: 1, offset: 57637},
			expr: &actionExpr{
				pos: position{line: 1518, col: 17, offset: 57653},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 17, offset: 57653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1518, col: 17, offset: 57653},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 28, offset: 57664},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 29, offset: 57665},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 42, offset: 57678},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 69, offset: 57705},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 78, offset: 57714},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 107, offset: 57743},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1522, col: 1, offset: 57860},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1522, col: 32, offset: 57891},
				expr: &actionExpr{
					pos: position{line: 1522, col: 33, offset: 57892},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1522, col: 33, offset: 57892},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1522, col: 33, offset: 57892},
								expr: &ruleRefExpr{
									pos:  position{line: 1522, col: 34, offset: 57893},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1522, col: 59, offset: 57918},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1522, col: 68, offset: 57927},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1529, col: 1, offset: 58264},
			expr: &seqExpr{
				pos: position{line: 1529, col: 26, offset: 58289},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1529, col: 26, offset: 58289},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1529, col: 33, offset: 58296},
						expr: &ruleRefExpr{
							pos:  position{line: 1529, col: 33, offset: 58296},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1529, col: 40, offset: 58303},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1531, col: 1, offset: 58308},
			expr: &seqExpr{
				pos: position{line: 1531, col: 31, offset: 58338},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1531, col: 31, offset: 58338},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1531, col: 38, offset: 58345},
						expr: &ruleRefExpr{
							pos:  position{line: 1531, col: 38, offset: 58345},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 45, offset: 58352},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1533, col: 1, offset: 58357},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 29, offset: 58385},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1533, col: 30, offset: 58386},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1533, col: 30, offset: 58386},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1533, col: 37, offset: 58393},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 37, offset: 58393},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1533, col: 44, offset: 58400},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1533, col: 51, offset: 58407},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1535, col: 1, offset: 58412},
			expr: &actionExpr{
				pos: position{line: 1535, col: 17, offset: 58428},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 17, offset: 58428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1535, col: 17, offset: 58428},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1535, col: 28, offset: 58439},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 29, offset: 58440},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1535, col: 42, offset: 58453},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 69, offset: 58480},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 78, offset: 58489},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1535, col: 107, offset: 58518},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1539, col: 1, offset: 58635},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1539, col: 32, offset: 58666},
				expr: &actionExpr{
					pos: position{line: 1539, col: 33, offset: 58667},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1539, col: 33, offset: 58667},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1539, col: 33, offset: 58667},
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 34, offset: 58668},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1539, col: 59, offset: 58693},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 68, offset: 58702},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1546, col: 1, offset: 59037},
			expr: &seqExpr{
				pos: position{line: 1546, col: 24, offset: 59060},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1546, col: 24, offset: 59060},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1546, col: 31, offset: 59067},
						expr: &ruleRefExpr{
							pos:  position{line: 1546, col: 31, offset: 59067},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1546, col: 38, offset: 59074},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1548, col: 1, offset: 59104},
			expr: &seqExpr{
				pos: position{line: 1548, col: 29, offset: 59132},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1548, col: 29, offset: 59132},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1548, col: 36, offset: 59139},
						expr: &ruleRefExpr{
							pos:  position{line: 1548, col: 36, offset: 59139},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 43, offset: 59146},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1550, col: 1, offset: 59176},
			expr: &choiceExpr{
				pos: position{line: 1550, col: 27, offset: 59202},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1550, col: 28, offset: 59203},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1550, col: 28, offset: 59203},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1550, col: 35, offset: 59210},
								expr: &ruleRefExpr{
									pos:  position{line: 1550, col: 35, offset: 59210},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1550, col: 42, offset: 59217},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1550, col: 49, offset: 59224},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1552, col: 1, offset: 59254},
			expr: &actionExpr{
				pos: position{line: 1552, col: 15, offset: 59268},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 15, offset: 59268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1552, col: 15, offset: 59268},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 26, offset: 59279},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 27, offset: 59280},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 40, offset: 59293},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 65, offset: 59318},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 74, offset: 59327},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 101, offset: 59354},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1556, col: 1, offset: 59467},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1556, col: 30, offset: 59496},
				expr: &actionExpr{
					pos: position{line: 1556, col: 31, offset: 59497},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1556, col: 31, offset: 59497},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1556, col: 31, offset: 59497},
								expr: &ruleRefExpr{
									pos:  position{line: 1556, col: 32, offset: 59498},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1556, col: 55, offset: 59521},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1556, col: 64, offset: 59530},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1565, col: 1, offset: 59914},
			expr: &actionExpr{
				pos: position{line: 1565, col: 15, offset: 59928},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 15, offset: 59928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1565, col: 15, offset: 59928},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 27, offset: 59940},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1566, col: 5, offset: 59957},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1570, col: 5, offset: 60152},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 30, offset: 60177},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 39, offset: 60186},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1570, col: 66, offset: 60213},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1574, col: 1, offset: 60334},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1574, col: 30, offset: 60363},
				expr: &actionExpr{
					pos: position{line: 1574, col: 31, offset: 60364},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1574, col: 31, offset: 60364},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1574, col: 31, offset: 60364},
								expr: &ruleRefExpr{
									pos:  position{line: 1574, col: 32, offset: 60365},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1574, col: 55, offset: 60388},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1574, col: 64, offset: 60397},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1581, col: 1, offset: 60734},
			expr: &seqExpr{
				pos: position{line: 1581, col: 26, offset: 60759},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1581, col: 26, offset: 60759},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1581, col: 33, offset: 60766},
						expr: &ruleRefExpr{
							pos:  position{line: 1581, col: 33, offset: 60766},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 40, offset: 60773},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1583, col: 1, offset: 60778},
			expr: &seqExpr{
				pos: position{line: 1583, col: 31, offset: 60808},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1583, col: 31, offset: 60808},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1583, col: 38, offset: 60815},
						expr: &ruleRefExpr{
							pos:  position{line: 1583, col: 38, offset: 60815},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1583, col: 45, offset: 60822},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1585, col: 1, offset: 60827},
			expr: &choiceExpr{
				pos: position{line: 1585, col: 29, offset: 60855},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1585, col: 30, offset: 60856},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1585, col: 30, offset: 60856},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1585, col: 37, offset: 60863},
								expr: &ruleRefExpr{
									pos:  position{line: 1585, col: 37, offset: 60863},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1585, col: 44, offset: 60870},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 51, offset: 60877},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1587, col: 1, offset: 60882},
			expr: &actionExpr{
				pos: position{line: 1587, col: 17, offset: 60898},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 17, offset: 60898},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1587, col: 17, offset: 60898},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1587, col: 28, offset: 60909},
								expr: &ruleRefExpr{
									pos:  position{line: 1587, col: 29, offset: 60910},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1587, col: 42, offset: 60923},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 69, offset: 60950},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 78, offset: 60959},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1587, col: 107, offset: 60988},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1591, col: 1, offset: 61105},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1591, col: 32, offset: 61136},
				expr: &actionExpr{
					pos: position{line: 1591, col: 33, offset: 61137},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1591, col: 33, offset: 61137},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1591, col: 33, offset: 61137},
								expr: &ruleRefExpr{
									pos:  position{line: 1591, col: 34, offset: 61138},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1591, col: 59, offset: 61163},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1591, col: 68, offset: 61172},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1598, col: 1, offset: 61513},
			expr: &seqExpr{
				pos: position{line: 1598, col: 30, offset: 61542},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1598, col: 30, offset: 61542},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1598, col: 37, offset: 61549},
						expr: &ruleRefExpr{
							pos:  position{line: 1598, col: 37, offset: 61549},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1598, col: 44, offset: 61556},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1600, col: 1, offset: 61561},
			expr: &seqExpr{
				pos: position{line: 1600, col: 35, offset: 61595},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1600, col: 35, offset: 61595},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1600, col: 42, offset: 61602},
						expr: &ruleRefExpr{
							pos:  position{line: 1600, col: 42, offset: 61602},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1600, col: 49, offset: 61609},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1602, col: 1, offset: 61614},
			expr: &choiceExpr{
				pos: position{line: 1602, col: 33, offset: 61646},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1602, col: 34, offset: 61647},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1602, col: 34, offset: 61647},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1602, col: 41, offset: 61654},
								expr: &ruleRefExpr{
									pos:  position{line: 1602, col: 41, offset: 61654},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1602, col: 48, offset: 61661},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 55, offset: 61668},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1604, col: 1, offset: 61673},
			expr: &actionExpr{
				pos: position{line: 1604, col: 21, offset: 61693},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 21, offset: 61693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1604, col: 21, offset: 61693},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1604, col: 32, offset: 61704},
								expr: &ruleRefExpr{
									pos:  position{line: 1604, col: 33, offset: 61705},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1604, col: 46, offset: 61718},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 77, offset: 61749},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1604, col: 86, offset: 61758},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1604, col: 119, offset: 61791},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1608, col: 1, offset: 61916},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1608, col: 36, offset: 61951},
				expr: &actionExpr{
					pos: position{line: 1608, col: 37, offset: 61952},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1608, col: 37, offset: 61952},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1608, col: 37, offset: 61952},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 38, offset: 61953},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1608, col: 67, offset: 61982},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 76, offset: 61991},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1616, col: 1, offset: 62337},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1616, col: 23, offset: 62359},
				expr: &ruleRefExpr{
					pos:  position{line: 1616, col: 23, offset: 62359},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1618, col: 1, offset: 62380},
			expr: &actionExpr{
				pos: position{line: 1619, col: 5, offset: 62407},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 5, offset: 62407},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1619, col: 5, offset: 62407},
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 6, offset: 62408},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 10, offset: 62412},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1619, col: 19, offset: 62421},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1619, col: 19, offset: 62421},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1620, col: 15, offset: 62446},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1621, col: 15, offset: 62474},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1622, col: 15, offset: 62500},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1623, col: 15, offset: 62531},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1624, col: 15, offset: 62564},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1625, col: 15, offset: 62595},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1626, col: 15, offset: 62634},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1627, col: 15, offset: 62663},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1628, col: 15, offset: 62691},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1629, col: 15, offset: 62727},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1630, col: 15, offset: 62757},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1631, col: 15, offset: 62798},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1635, col: 1, offset: 62847},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1635, col: 22, offset: 62868},
				expr: &ruleRefExpr{
					pos:  position{line: 1635, col: 22, offset: 62868},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1637, col: 1, offset: 62888},
			expr: &actionExpr{
				pos: position{line: 1637, col: 22, offset: 62909},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 22, offset: 62909},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1637, col: 22, offset: 62909},
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 23, offset: 62910},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 27, offset: 62914},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1637, col: 36, offset: 62923},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1637, col: 36, offset: 62923},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 48, offset: 62935},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1641, col: 1, offset: 62985},
			expr: &actionExpr{
				pos: position{line: 1641, col: 24, offset: 63008},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1641, col: 24, offset: 63008},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1641, col: 30, offset: 63014},
						expr: &ruleRefExpr{
							pos:  position{line: 1641, col: 31, offset: 63015},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1645, col: 1, offset: 63105},
			expr: &actionExpr{
				pos: position{line: 1645, col: 28, offset: 63132},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1645, col: 28, offset: 63132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1645, col: 28, offset: 63132},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1645, col: 37, offset: 63141},
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 38, offset: 63142},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1645, col: 54, offset: 63158},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1652, col: 1, offset: 63400},
			expr: &actionExpr{
				pos: position{line: 1652, col: 10, offset: 63409},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1652, col: 10, offset: 63409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1652, col: 10, offset: 63409},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1652, col: 21, offset: 63420},
								expr: &ruleRefExpr{
									pos:  position{line: 1652, col: 22, offset: 63421},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1652, col: 35, offset: 63434},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 5, offset: 63453},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1653, col: 12, offset: 63460},
								expr: &ruleRefExpr{
									pos:  position{line: 1653, col: 13, offset: 63461},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 5, offset: 63483},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1654, col: 11, offset: 63489},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 12, offset: 63490},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1655, col: 6, offset: 63507},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1655, col: 6, offset: 63507},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1655, col: 23, offset: 63524},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1659, col: 1, offset: 63639},
			expr: &seqExpr{
				pos: position{line: 1659, col: 23, offset: 63661},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1659, col: 23, offset: 63661},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1659, col: 27, offset: 63665},
						expr: &ruleRefExpr{
							pos:  position{line: 1659, col: 27, offset: 63665},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1661, col: 1, offset: 63673},
			expr: &seqExpr{
				pos: position{line: 1661, col: 19, offset: 63691},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1661, col: 19, offset: 63691},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1661, col: 26, offset: 63698},
						expr: &ruleRefExpr{
							pos:  position{line: 1661, col: 26, offset: 63698},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1661, col: 33, offset: 63705},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1664, col: 1, offset: 63773},
			expr: &actionExpr{
				pos: position{line: 1664, col: 20, offset: 63792},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 20, offset: 63792},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1664, col: 20, offset: 63792},
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 21, offset: 63793},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 36, offset: 63808},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1664, col: 42, offset: 63814},
								expr: &ruleRefExpr{
									pos:  position{line: 1664, col: 43, offset: 63815},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 55, offset: 63827},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 59, offset: 63831},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1668, col: 1, offset: 63899},
			expr: &actionExpr{
				pos: position{line: 1668, col: 14, offset: 63912},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 14, offset: 63912},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1668, col: 14, offset: 63912},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 15, offset: 63913},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 30, offset: 63928},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1668, col: 36, offset: 63934},
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 37, offset: 63935},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 49, offset: 63947},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 53, offset: 63951},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 53, offset: 63951},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1672, col: 1, offset: 64020},
			expr: &actionExpr{
				pos: position{line: 1672, col: 14, offset: 64033},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 14, offset: 64033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1672, col: 14, offset: 64033},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 33, offset: 64052},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1672, col: 42, offset: 64061},
								expr: &seqExpr{
									pos: position{line: 1672, col: 43, offset: 64062},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1672, col: 43, offset: 64062},
											expr: &ruleRefExpr{
												pos:  position{line: 1672, col: 44, offset: 64063},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1672, col: 63, offset: 64082},
											expr: &ruleRefExpr{
												pos:  position{line: 1672, col: 64, offset: 64083},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1672, col: 68, offset: 64087},
											expr: &ruleRefExpr{
												pos:  position{line: 1672, col: 68, offset: 64087},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 75, offset: 64094},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1672, col: 89, offset: 64108},
											expr: &ruleRefExpr{
												pos:  position{line: 1672, col: 89, offset: 64108},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1679, col: 1, offset: 64357},
			expr: &seqExpr{
				pos: position{line: 1679, col: 26, offset: 64382},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1679, col: 26, offset: 64382},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1679, col: 33, offset: 64389},
						expr: &ruleRefExpr{
							pos:  position{line: 1679, col: 33, offset: 64389},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1679, col: 40, offset: 64396},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1681, col: 1, offset: 64401},
			expr: &seqExpr{
				pos: position{line: 1681, col: 31, offset: 64431},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1681, col: 31, offset: 64431},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1681, col: 38, offset: 64438},
						expr: &ruleRefExpr{
							pos:  position{line: 1681, col: 38, offset: 64438},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1681, col: 45, offset: 64445},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1683, col: 1, offset: 64450},
			expr: &choiceExpr{
				pos: position{line: 1683, col: 29, offset: 64478},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1683, col: 30, offset: 64479},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1683, col: 30, offset: 64479},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1683, col: 37, offset: 64486},
								expr: &ruleRefExpr{
									pos:  position{line: 1683, col: 37, offset: 64486},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1683, col: 44, offset: 64493},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 51, offset: 64500},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1685, col: 1, offset: 64505},
			expr: &actionExpr{
				pos: position{line: 1685, col: 17, offset: 64521},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1685, col: 17, offset: 64521},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1685, col: 17, offset: 64521},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1685, col: 44, offset: 64548},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1685, col: 53, offset: 64557},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1685, col: 83, offset: 64587},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1689, col: 1, offset: 64697},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1689, col: 32, offset: 64728},
				expr: &actionExpr{
					pos: position{line: 1689, col: 33, offset: 64729},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1689, col: 33, offset: 64729},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1689, col: 33, offset: 64729},
								expr: &ruleRefExpr{
									pos:  position{line: 1689, col: 34, offset: 64730},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1689, col: 59, offset: 64755},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1689, col: 68, offset: 64764},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1693, col: 1, offset: 64905},
			expr: &actionExpr{
				pos: position{line: 1693, col: 22, offset: 64926},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 22, offset: 64926},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1693, col: 22, offset: 64926},
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 23, offset: 64927},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1693, col: 45, offset: 64949},
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 45, offset: 64949},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1693, col: 52, offset: 64956},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1693, col: 57, offset: 64961},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 66, offset: 64970},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1693, col: 92, offset: 64996},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1697, col: 1, offset: 65061},
			expr: &actionExpr{
				pos: position{line: 1697, col: 29, offset: 65089},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1697, col: 29, offset: 65089},
					expr: &charClassMatcher{
						pos:        position{line: 1697, col: 29, offset: 65089},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1705, col: 1, offset: 65402},
			expr: &choiceExpr{
				pos: position{line: 1705, col: 17, offset: 65418},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1705, col: 17, offset: 65418},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1705, col: 49, offset: 65450},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1705, col: 78, offset: 65479},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1707, col: 1, offset: 65515},
			expr: &litMatcher{
				pos:        position{line: 1707, col: 26, offset: 65540},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1710, col: 1, offset: 65612},
			expr: &actionExpr{
				pos: position{line: 1710, col: 31, offset: 65642},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 31, offset: 65642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1710, col: 31, offset: 65642},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1710, col: 42, offset: 65653},
								expr: &ruleRefExpr{
									pos:  position{line: 1710, col: 43, offset: 65654},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 56, offset: 65667},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 63, offset: 65674},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1715, col: 1, offset: 65904},
			expr: &actionExpr{
				pos: position{line: 1716, col: 5, offset: 65944},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 5, offset: 65944},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1716, col: 5, offset: 65944},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1716, col: 16, offset: 65955},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1716, col: 16, offset: 65955},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1716, col: 16, offset: 65955},
											expr: &ruleRefExpr{
												pos:  position{line: 1716, col: 16, offset: 65955},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1716, col: 23, offset: 65962},
											expr: &charClassMatcher{
												pos:        position{line: 1716, col: 23, offset: 65962},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1718, col: 8, offset: 66015},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1719, col: 5, offset: 66078},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1719, col: 16, offset: 66089},
								expr: &actionExpr{
									pos: position{line: 1720, col: 9, offset: 66099},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1720, col: 9, offset: 66099},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1720, col: 9, offset: 66099},
												expr: &ruleRefExpr{
													pos:  position{line: 1720, col: 10, offset: 66100},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1721, col: 9, offset: 66119},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1721, col: 20, offset: 66130},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1721, col: 20, offset: 66130},
														expr: &charClassMatcher{
															pos:        position{line: 1721, col: 20, offset: 66130},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1723, col: 12, offset: 66191},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1730, col: 1, offset: 66421},
			expr: &actionExpr{
				pos: position{line: 1730, col: 39, offset: 66459},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1730, col: 39, offset: 66459},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1730, col: 39, offset: 66459},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1730, col: 50, offset: 66470},
								expr: &ruleRefExpr{
									pos:  position{line: 1730, col: 51, offset: 66471},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1731, col: 9, offset: 66492},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1731, col: 31, offset: 66514},
							expr: &ruleRefExpr{
								pos:  position{line: 1731, col: 31, offset: 66514},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1731, col: 38, offset: 66521},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1731, col: 46, offset: 66529},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1731, col: 53, offset: 66536},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1731, col: 95, offset: 66578},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1731, col: 96, offset: 66579},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1731, col: 96, offset: 66579},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1731, col: 118, offset: 66601},
											expr: &ruleRefExpr{
												pos:  position{line: 1731, col: 118, offset: 66601},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 125, offset: 66608},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1731, col: 132, offset: 66615},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1736, col: 1, offset: 66774},
			expr: &actionExpr{
				pos: position{line: 1736, col: 44, offset: 66817},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1736, col: 44, offset: 66817},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1736, col: 50, offset: 66823},
						expr: &ruleRefExpr{
							pos:  position{line: 1736, col: 51, offset: 66824},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1740, col: 1, offset: 66908},
			expr: &actionExpr{
				pos: position{line: 1741, col: 5, offset: 66963},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1741, col: 5, offset: 66963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1741, col: 5, offset: 66963},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1741, col: 11, offset: 66969},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1741, col: 11, offset: 66969},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1741, col: 11, offset: 66969},
											expr: &ruleRefExpr{
												pos:  position{line: 1741, col: 12, offset: 66970},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1741, col: 34, offset: 66992},
											expr: &charClassMatcher{
												pos:        position{line: 1741, col: 34, offset: 66992},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1743, col: 8, offset: 67045},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1748, col: 1, offset: 67171},
			expr: &actionExpr{
				pos: position{line: 1749, col: 5, offset: 67209},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1749, col: 5, offset: 67209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1749, col: 5, offset: 67209},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1749, col: 16, offset: 67220},
								expr: &ruleRefExpr{
									pos:  position{line: 1749, col: 17, offset: 67221},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1750, col: 5, offset: 67238},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1757, col: 5, offset: 67445},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1757, col: 12, offset: 67452},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1761, col: 1, offset: 67602},
			expr: &actionExpr{
				pos: position{line: 1761, col: 16, offset: 67617},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1761, col: 16, offset: 67617},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1766, col: 1, offset: 67700},
			expr: &actionExpr{
				pos: position{line: 1766, col: 39, offset: 67738},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1766, col: 39, offset: 67738},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1766, col: 45, offset: 67744},
						expr: &ruleRefExpr{
							pos:  position{line: 1766, col: 46, offset: 67745},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1770, col: 1, offset: 67825},
			expr: &actionExpr{
				pos: position{line: 1770, col: 38, offset: 67862},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1770, col: 38, offset: 67862},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1770, col: 38, offset: 67862},
							expr: &ruleRefExpr{
								pos:  position{line: 1770, col: 39, offset: 67863},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 49, offset: 67873},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1770, col: 58, offset: 67882},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1770, col: 58, offset: 67882},
									expr: &charClassMatcher{
										pos:        position{line: 1770, col: 58, offset: 67882},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1772, col: 4, offset: 67927},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1779, col: 1, offset: 68113},
			expr: &actionExpr{
				pos: position{line: 1779, col: 14, offset: 68126},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1779, col: 14, offset: 68126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1779, col: 14, offset: 68126},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1779, col: 19, offset: 68131},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1779, col: 25, offset: 68137},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1779, col: 43, offset: 68155},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1783, col: 1, offset: 68220},
			expr: &actionExpr{
				pos: position{line: 1783, col: 21, offset: 68240},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1783, col: 21, offset: 68240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1783, col: 30, offset: 68249},
						expr: &choiceExpr{
							pos: position{line: 1783, col: 31, offset: 68250},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1783, col: 31, offset: 68250},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 38, offset: 68257},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 51, offset: 68270},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1783, col: 59, offset: 68278},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1783, col: 60, offset: 68279},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1783, col: 60, offset: 68279},
												expr: &litMatcher{
													pos:        position{line: 1783, col: 61, offset: 68280},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1783, col: 66, offset: 68285,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1789, col: 1, offset: 68391},
			expr: &actionExpr{
				pos: position{line: 1789, col: 23, offset: 68413},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 23, offset: 68413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1789, col: 23, offset: 68413},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 29, offset: 68419},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 36, offset: 68426},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 5, offset: 68458},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1790, col: 11, offset: 68464},
								expr: &actionExpr{
									pos: position{line: 1790, col: 12, offset: 68465},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1790, col: 12, offset: 68465},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1790, col: 12, offset: 68465},
												expr: &ruleRefExpr{
													pos:  position{line: 1790, col: 12, offset: 68465},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1790, col: 19, offset: 68472},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1790, col: 23, offset: 68476},
												expr: &ruleRefExpr{
													pos:  position{line: 1790, col: 23, offset: 68476},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1790, col: 30, offset: 68483},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1790, col: 39, offset: 68492},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1791, col: 5, offset: 68550},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1791, col: 11, offset: 68556},
								expr: &actionExpr{
									pos: position{line: 1791, col: 12, offset: 68557},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1791, col: 12, offset: 68557},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1791, col: 12, offset: 68557},
												expr: &ruleRefExpr{
													pos:  position{line: 1791, col: 12, offset: 68557},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1791, col: 19, offset: 68564},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1791, col: 23, offset: 68568},
												expr: &ruleRefExpr{
													pos:  position{line: 1791, col: 23, offset: 68568},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1791, col: 30, offset: 68575},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1791, col: 39, offset: 68584},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1792, col: 5, offset: 68642},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1796, col: 1, offset: 68721},
			expr: &actionExpr{
				pos: position{line: 1796, col: 30, offset: 68750},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1796, col: 30, offset: 68750},
					expr: &choiceExpr{
						pos: position{line: 1796, col: 31, offset: 68751},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1796, col: 31, offset: 68751},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1796, col: 42, offset: 68762},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1803, col: 1, offset: 68911},
			expr: &actionExpr{
				pos: position{line: 1803, col: 14, offset: 68924},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1803, col: 14, offset: 68924},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1803, col: 14, offset: 68924},
							expr: &ruleRefExpr{
								pos:  position{line: 1803, col: 15, offset: 68925},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1803, col: 19, offset: 68929},
							expr: &ruleRefExpr{
								pos:  position{line: 1803, col: 19, offset: 68929},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1803, col: 26, offset: 68936},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1810, col: 1, offset: 69083},
			expr: &charClassMatcher{
				pos:        position{line: 1810, col: 13, offset: 69095},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1812, col: 1, offset: 69105},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 16, offset: 69120},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 16, offset: 69120},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1812, col: 22, offset: 69126},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1812, col: 28, offset: 69132},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1812, col: 34, offset: 69138},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1812, col: 40, offset: 69144},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1812, col: 46, offset: 69150},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1814, col: 1, offset: 69156},
			expr: &actionExpr{
				pos: position{line: 1814, col: 14, offset: 69169},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1814, col: 14, offset: 69169},
					expr: &charClassMatcher{
						pos:        position{line: 1814, col: 14, offset: 69169},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1818, col: 1, offset: 69215},
			expr: &choiceExpr{
				pos: position{line: 1822, col: 5, offset: 69542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1822, col: 5, offset: 69542},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1822, col: 5, offset: 69542},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1822, col: 5, offset: 69542},
									expr: &charClassMatcher{
										pos:        position{line: 1822, col: 5, offset: 69542},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1822, col: 15, offset: 69552},
									expr: &choiceExpr{
										pos: position{line: 1822, col: 17, offset: 69554},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1822, col: 17, offset: 69554},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1822, col: 30, offset: 69567},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1824, col: 9, offset: 69637},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1824, col: 9, offset: 69637},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1824, col: 9, offset: 69637},
									expr: &charClassMatcher{
										pos:        position{line: 1824, col: 9, offset: 69637},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1824, col: 19, offset: 69647},
									expr: &seqExpr{
										pos: position{line: 1824, col: 20, offset: 69648},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1824, col: 20, offset: 69648},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1824, col: 27, offset: 69655},
												expr: &charClassMatcher{
													pos:        position{line: 1824, col: 27, offset: 69655},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1828, col: 1, offset: 69731},
			expr: &choiceExpr{
				pos: position{line: 1829, col: 5, offset: 69812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1829, col: 5, offset: 69812},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1829, col: 5, offset: 69812},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1829, col: 5, offset: 69812},
									expr: &charClassMatcher{
										pos:        position{line: 1829, col: 5, offset: 69812},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1829, col: 20, offset: 69827},
									expr: &choiceExpr{
										pos: position{line: 1829, col: 22, offset: 69829},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1829, col: 22, offset: 69829},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1829, col: 32, offset: 69839},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 9, offset: 69909},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1834, col: 1, offset: 70009},
			expr: &actionExpr{
				pos: position{line: 1834, col: 12, offset: 70020},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1834, col: 12, offset: 70020},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1838, col: 1, offset: 70085},
			expr: &actionExpr{
				pos: position{line: 1838, col: 17, offset: 70101},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1838, col: 17, offset: 70101},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1838, col: 22, offset: 70106},
						expr: &choiceExpr{
							pos: position{line: 1838, col: 23, offset: 70107},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1838, col: 23, offset: 70107},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1838, col: 34, offset: 70118},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1842, col: 1, offset: 70202},
			expr: &actionExpr{
				pos: position{line: 1842, col: 25, offset: 70226},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1842, col: 25, offset: 70226},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1842, col: 30, offset: 70231},
						expr: &charClassMatcher{
							pos:        position{line: 1842, col: 31, offset: 70232},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1846, col: 1, offset: 70304},
			expr: &actionExpr{
				pos: position{line: 1846, col: 13, offset: 70316},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1846, col: 13, offset: 70316},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1846, col: 13, offset: 70316},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1846, col: 20, offset: 70323},
								expr: &ruleRefExpr{
									pos:  position{line: 1846, col: 21, offset: 70324},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1846, col: 34, offset: 70337},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1846, col: 39, offset: 70342},
								expr: &choiceExpr{
									pos: position{line: 1846, col: 40, offset: 70343},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1846, col: 40, offset: 70343},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1846, col: 51, offset: 70354},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1850, col: 1, offset: 70442},
			expr: &actionExpr{
				pos: position{line: 1850, col: 23, offset: 70464},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1850, col: 23, offset: 70464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1850, col: 23, offset: 70464},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1850, col: 31, offset: 70472},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1850, col: 43, offset: 70484},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1850, col: 48, offset: 70489},
								expr: &choiceExpr{
									pos: position{line: 1850, col: 49, offset: 70490},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1850, col: 49, offset: 70490},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1850, col: 60, offset: 70501},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1854, col: 1, offset: 70589},
			expr: &oneOrMoreExpr{
				pos: position{line: 1854, col: 13, offset: 70601},
				expr: &charClassMatcher{
					pos:        position{line: 1854, col: 14, offset: 70602},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1856, col: 1, offset: 70736},
			expr: &actionExpr{
				pos: position{line: 1856, col: 21, offset: 70756},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1856, col: 21, offset: 70756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1856, col: 21, offset: 70756},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1856, col: 29, offset: 70764},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1856, col: 41, offset: 70776},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1856, col: 47, offset: 70782},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1861, col: 1, offset: 71030},
			expr: &oneOrMoreExpr{
				pos: position{line: 1861, col: 22, offset: 71051},
				expr: &charClassMatcher{
					pos:        position{line: 1861, col: 23, offset: 71052},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1863, col: 1, offset: 71184},
			expr: &actionExpr{
				pos: position{line: 1863, col: 9, offset: 71192},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1863, col: 9, offset: 71192},
					expr: &charClassMatcher{
						pos:        position{line: 1863, col: 9, offset: 71192},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1867, col: 1, offset: 71240},
			expr: &choiceExpr{
				pos: position{line: 1867, col: 15, offset: 71254},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1867, col: 15, offset: 71254},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1867, col: 27, offset: 71266},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1867, col: 40, offset: 71279},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1867, col: 51, offset: 71290},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1867, col: 62, offset: 71301},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1869, col: 1, offset: 71312},
			expr: &actionExpr{
				pos: position{line: 1869, col: 7, offset: 71318},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1869, col: 7, offset: 71318},
					expr: &charClassMatcher{
						pos:        position{line: 1869, col: 7, offset: 71318},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1873, col: 1, offset: 71443},
			expr: &actionExpr{
				pos: position{line: 1873, col: 10, offset: 71452},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1873, col: 10, offset: 71452},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1877, col: 1, offset: 71494},
			expr: &actionExpr{
				pos: position{line: 1877, col: 11, offset: 71504},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1877, col: 11, offset: 71504},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1877, col: 11, offset: 71504},
							expr: &litMatcher{
								pos:        position{line: 1877, col: 11, offset: 71504},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1877, col: 16, offset: 71509},
							expr: &ruleRefExpr{
								pos:  position{line: 1877, col: 16, offset: 71509},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1881, col: 1, offset: 71561},
			expr: &choiceExpr{
				pos: position{line: 1881, col: 10, offset: 71570},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1881, col: 10, offset: 71570},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1881, col: 16, offset: 71576},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1881, col: 16, offset: 71576},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1885, col: 1, offset: 71617},
			expr: &choiceExpr{
				pos: position{line: 1885, col: 12, offset: 71628},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1885, col: 12, offset: 71628},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1885, col: 21, offset: 71637},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1885, col: 28, offset: 71644},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1887, col: 1, offset: 71650},
			expr: &notExpr{
				pos: position{line: 1887, col: 8, offset: 71657},
				expr: &anyMatcher{
					line: 1887, col: 9, offset: 71658,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1889, col: 1, offset: 71661},
			expr: &choiceExpr{
				pos: position{line: 1889, col: 8, offset: 71668},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1889, col: 8, offset: 71668},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 18, offset: 71678},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {
	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {
	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {
	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText19(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText19(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextStringElement1()
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextStringElement1()
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
