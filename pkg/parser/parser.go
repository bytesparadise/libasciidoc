// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1331},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1358},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1411},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1430},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1456},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1481},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1507},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1532},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1559},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1589},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1616},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1652},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1677},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1710},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1737},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1775},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1801},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1833},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1846},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1892},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1899},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1900},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1939},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 1976},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 1976},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 1976},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 1977},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 1987},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 68, col: 9, offset: 2004},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 68, col: 9, offset: 2004},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2026},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2052},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2104},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2129},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2180},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2207},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2264},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2300},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2325},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2358},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2385},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2423},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2449},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 87, col: 1, offset: 2491},
			expr: &labeledExpr{
				pos:   position{line: 87, col: 23, offset: 2513},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 87, col: 30, offset: 2520},
					expr: &ruleRefExpr{
						pos:  position{line: 87, col: 31, offset: 2521},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 89, col: 1, offset: 2544},
			expr: &actionExpr{
				pos: position{line: 89, col: 22, offset: 2565},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 89, col: 22, offset: 2565},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 89, col: 22, offset: 2565},
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 23, offset: 2566},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 5, offset: 2576},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 90, col: 12, offset: 2583},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 90, col: 12, offset: 2583},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2595},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 97, col: 1, offset: 2748},
			expr: &ruleRefExpr{
				pos:  position{line: 97, col: 16, offset: 2763},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 99, col: 1, offset: 2783},
			expr: &actionExpr{
				pos: position{line: 99, col: 20, offset: 2802},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 99, col: 20, offset: 2802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 20, offset: 2802},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 41, offset: 2823},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 99, col: 49, offset: 2831},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 50, offset: 2832},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 75, offset: 2857},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 103, col: 1, offset: 2941},
			expr: &seqExpr{
				pos: position{line: 103, col: 26, offset: 2966},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 103, col: 26, offset: 2966},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 103, col: 32, offset: 2972},
						expr: &ruleRefExpr{
							pos:  position{line: 103, col: 32, offset: 2972},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 39, offset: 2979},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 105, col: 1, offset: 2986},
			expr: &actionExpr{
				pos: position{line: 105, col: 27, offset: 3012},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 105, col: 27, offset: 3012},
					expr: &oneOrMoreExpr{
						pos: position{line: 105, col: 28, offset: 3013},
						expr: &seqExpr{
							pos: position{line: 105, col: 29, offset: 3014},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 105, col: 29, offset: 3014},
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3015},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 105, col: 51, offset: 3036,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 112, col: 1, offset: 3209},
			expr: &actionExpr{
				pos: position{line: 112, col: 19, offset: 3227},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 112, col: 19, offset: 3227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 19, offset: 3227},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 112, col: 23, offset: 3231},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 23, offset: 3231},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 30, offset: 3238},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 37, offset: 3245},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 52, offset: 3260},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 56, offset: 3264},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 56, offset: 3264},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 74, offset: 3282},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 113, col: 9, offset: 3295},
							expr: &choiceExpr{
								pos: position{line: 113, col: 10, offset: 3296},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3296},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 113, col: 30, offset: 3316},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 9, offset: 3340},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 18, offset: 3349},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 18, offset: 3349},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 9, offset: 3377},
							expr: &choiceExpr{
								pos: position{line: 115, col: 10, offset: 3378},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 115, col: 10, offset: 3378},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 115, col: 30, offset: 3398},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 9, offset: 3422},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 116, col: 19, offset: 3432},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 19, offset: 3432},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 120, col: 1, offset: 3537},
			expr: &choiceExpr{
				pos: position{line: 120, col: 20, offset: 3556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 20, offset: 3556},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 48, offset: 3584},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 122, col: 1, offset: 3616},
			expr: &actionExpr{
				pos: position{line: 122, col: 30, offset: 3645},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 30, offset: 3645},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 30, offset: 3645},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 30, offset: 3645},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 122, col: 37, offset: 3652},
							expr: &litMatcher{
								pos:        position{line: 122, col: 38, offset: 3653},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 42, offset: 3657},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 122, col: 51, offset: 3666},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 51, offset: 3666},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 68, offset: 3683},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 126, col: 1, offset: 3757},
			expr: &actionExpr{
				pos: position{line: 126, col: 33, offset: 3789},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 126, col: 33, offset: 3789},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 33, offset: 3789},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 33, offset: 3789},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 40, offset: 3796},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 51, offset: 3807},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 59, offset: 3815},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 75, offset: 3831},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 130, col: 1, offset: 3914},
			expr: &actionExpr{
				pos: position{line: 130, col: 19, offset: 3932},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 130, col: 19, offset: 3932},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 19, offset: 3932},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 19, offset: 3932},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 26, offset: 3939},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 36, offset: 3949},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 56, offset: 3969},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 130, col: 62, offset: 3975},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 63, offset: 3976},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 85, offset: 3998},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 85, offset: 3998},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 130, col: 92, offset: 4005},
							expr: &litMatcher{
								pos:        position{line: 130, col: 92, offset: 4005},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 97, offset: 4010},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 97, offset: 4010},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 135, col: 1, offset: 4160},
			expr: &actionExpr{
				pos: position{line: 135, col: 23, offset: 4182},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 135, col: 23, offset: 4182},
					expr: &charClassMatcher{
						pos:        position{line: 135, col: 23, offset: 4182},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 139, col: 1, offset: 4233},
			expr: &actionExpr{
				pos: position{line: 139, col: 24, offset: 4256},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 139, col: 24, offset: 4256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 139, col: 24, offset: 4256},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 28, offset: 4260},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 139, col: 35, offset: 4267},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 139, col: 36, offset: 4268},
									expr: &charClassMatcher{
										pos:        position{line: 139, col: 36, offset: 4268},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 4, offset: 4317},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 147, col: 1, offset: 4484},
			expr: &actionExpr{
				pos: position{line: 147, col: 21, offset: 4504},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 147, col: 21, offset: 4504},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 147, col: 21, offset: 4504},
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 21, offset: 4504},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 147, col: 28, offset: 4511},
							expr: &litMatcher{
								pos:        position{line: 147, col: 29, offset: 4512},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 33, offset: 4516},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 148, col: 9, offset: 4536},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 148, col: 10, offset: 4537},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 148, col: 10, offset: 4537},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 148, col: 10, offset: 4537},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 148, col: 21, offset: 4548},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 45, offset: 4572},
													expr: &litMatcher{
														pos:        position{line: 148, col: 45, offset: 4572},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 50, offset: 4577},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 58, offset: 4585},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 59, offset: 4586},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 82, offset: 4609},
													expr: &litMatcher{
														pos:        position{line: 148, col: 82, offset: 4609},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 87, offset: 4614},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 97, offset: 4624},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 98, offset: 4625},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 150, col: 15, offset: 4744},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 150, col: 15, offset: 4744},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 150, col: 15, offset: 4744},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 150, col: 24, offset: 4753},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 150, col: 46, offset: 4775},
													expr: &litMatcher{
														pos:        position{line: 150, col: 46, offset: 4775},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 150, col: 51, offset: 4780},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 150, col: 61, offset: 4790},
														expr: &ruleRefExpr{
															pos:  position{line: 150, col: 62, offset: 4791},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 13, offset: 4902},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 157, col: 1, offset: 5037},
			expr: &choiceExpr{
				pos: position{line: 157, col: 27, offset: 5063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 27, offset: 5063},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 157, col: 27, offset: 5063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 157, col: 27, offset: 5063},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 32, offset: 5068},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 157, col: 39, offset: 5075},
									expr: &charClassMatcher{
										pos:        position{line: 157, col: 39, offset: 5075},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5125},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 5125},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 159, col: 5, offset: 5125},
									expr: &litMatcher{
										pos:        position{line: 159, col: 5, offset: 5125},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 11, offset: 5131},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 159, col: 18, offset: 5138},
									expr: &charClassMatcher{
										pos:        position{line: 159, col: 18, offset: 5138},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 159, col: 29, offset: 5149},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 29, offset: 5149},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 159, col: 36, offset: 5156},
									expr: &litMatcher{
										pos:        position{line: 159, col: 37, offset: 5157},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 163, col: 1, offset: 5201},
			expr: &actionExpr{
				pos: position{line: 163, col: 25, offset: 5225},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 25, offset: 5225},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 25, offset: 5225},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 167, col: 1, offset: 5275},
			expr: &actionExpr{
				pos: position{line: 167, col: 27, offset: 5301},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 167, col: 27, offset: 5301},
					expr: &charClassMatcher{
						pos:        position{line: 167, col: 27, offset: 5301},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 174, col: 1, offset: 5461},
			expr: &actionExpr{
				pos: position{line: 174, col: 25, offset: 5485},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 174, col: 25, offset: 5485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 174, col: 25, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 29, offset: 5489},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 35, offset: 5495},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 174, col: 50, offset: 5510},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 9, offset: 5524},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 175, col: 15, offset: 5530},
								expr: &actionExpr{
									pos: position{line: 175, col: 16, offset: 5531},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 175, col: 17, offset: 5532},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 175, col: 17, offset: 5532},
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 17, offset: 5532},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 175, col: 24, offset: 5539},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 31, offset: 5546},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 13, offset: 5622},
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 13, offset: 5622},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 20, offset: 5629},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 184, col: 1, offset: 5876},
			expr: &actionExpr{
				pos: position{line: 184, col: 18, offset: 5893},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 184, col: 18, offset: 5893},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 184, col: 18, offset: 5893},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 28, offset: 5903},
							expr: &charClassMatcher{
								pos:        position{line: 184, col: 29, offset: 5904},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 188, col: 1, offset: 5956},
			expr: &actionExpr{
				pos: position{line: 188, col: 30, offset: 5985},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 188, col: 30, offset: 5985},
					expr: &charClassMatcher{
						pos:        position{line: 188, col: 30, offset: 5985},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 192, col: 1, offset: 6034},
			expr: &choiceExpr{
				pos: position{line: 192, col: 19, offset: 6052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 192, col: 19, offset: 6052},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 192, col: 19, offset: 6052},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 192, col: 19, offset: 6052},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 192, col: 24, offset: 6057},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 30, offset: 6063},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 192, col: 45, offset: 6078},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 192, col: 49, offset: 6082},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 49, offset: 6082},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 192, col: 56, offset: 6089},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 6151},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 6151},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 194, col: 5, offset: 6151},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 9, offset: 6155},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 15, offset: 6161},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 194, col: 30, offset: 6176},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 194, col: 35, offset: 6181},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 35, offset: 6181},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 6188},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 198, col: 1, offset: 6251},
			expr: &actionExpr{
				pos: position{line: 198, col: 26, offset: 6276},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 198, col: 26, offset: 6276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 26, offset: 6276},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 30, offset: 6280},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 36, offset: 6286},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 51, offset: 6301},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 202, col: 1, offset: 6371},
			expr: &actionExpr{
				pos: position{line: 202, col: 15, offset: 6385},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 202, col: 15, offset: 6385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 15, offset: 6385},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 202, col: 21, offset: 6391},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 22, offset: 6392},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 202, col: 41, offset: 6411},
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 41, offset: 6411},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 206, col: 1, offset: 6485},
			expr: &actionExpr{
				pos: position{line: 206, col: 21, offset: 6505},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 206, col: 21, offset: 6505},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 206, col: 21, offset: 6505},
							expr: &choiceExpr{
								pos: position{line: 206, col: 23, offset: 6507},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 206, col: 23, offset: 6507},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 29, offset: 6513},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 35, offset: 6519},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 5, offset: 6596},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 207, col: 11, offset: 6602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 207, col: 11, offset: 6602},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6624},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6649},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6687},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6716},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6745},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6773},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6801},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6839},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6876},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 220, col: 1, offset: 6983},
			expr: &actionExpr{
				pos: position{line: 220, col: 14, offset: 6996},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 220, col: 14, offset: 6996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 14, offset: 6996},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 19, offset: 7001},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 23, offset: 7005},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 27, offset: 7009},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 220, col: 32, offset: 7014},
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 32, offset: 7014},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 39, offset: 7021},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 224, col: 1, offset: 7077},
			expr: &actionExpr{
				pos: position{line: 224, col: 20, offset: 7096},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 224, col: 20, offset: 7096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 20, offset: 7096},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 25, offset: 7101},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 29, offset: 7105},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 33, offset: 7109},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 224, col: 38, offset: 7114},
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 38, offset: 7114},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 230, col: 1, offset: 7397},
			expr: &actionExpr{
				pos: position{line: 230, col: 17, offset: 7413},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 230, col: 17, offset: 7413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 230, col: 17, offset: 7413},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 21, offset: 7417},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 28, offset: 7424},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 230, col: 49, offset: 7445},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 49, offset: 7445},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 56, offset: 7452},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 234, col: 1, offset: 7514},
			expr: &actionExpr{
				pos: position{line: 234, col: 24, offset: 7537},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 234, col: 24, offset: 7537},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 234, col: 24, offset: 7537},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 234, col: 32, offset: 7545},
							expr: &charClassMatcher{
								pos:        position{line: 234, col: 32, offset: 7545},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 240, col: 1, offset: 7804},
			expr: &actionExpr{
				pos: position{line: 240, col: 31, offset: 7834},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 240, col: 31, offset: 7834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 240, col: 31, offset: 7834},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 35, offset: 7838},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 240, col: 42, offset: 7845},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 240, col: 42, offset: 7845},
										expr: &ruleRefExpr{
											pos:  position{line: 240, col: 42, offset: 7845},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 240, col: 57, offset: 7860},
										expr: &ruleRefExpr{
											pos:  position{line: 240, col: 57, offset: 7860},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 240, col: 69, offset: 7872},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 240, col: 73, offset: 7876},
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 73, offset: 7876},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 80, offset: 7883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 244, col: 1, offset: 7941},
			expr: &choiceExpr{
				pos: position{line: 244, col: 15, offset: 7955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 15, offset: 7955},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 31, offset: 7971},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 46, offset: 7986},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 248, col: 1, offset: 8218},
			expr: &actionExpr{
				pos: position{line: 248, col: 18, offset: 8235},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 248, col: 18, offset: 8235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 18, offset: 8235},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 22, offset: 8239},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 248, col: 29, offset: 8246},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 248, col: 29, offset: 8246},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 29, offset: 8246},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 248, col: 45, offset: 8262},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 45, offset: 8262},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 248, col: 60, offset: 8277},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 60, offset: 8277},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 248, col: 82, offset: 8299},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 82, offset: 8299},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 248, col: 104, offset: 8321},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 104, offset: 8321},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 116, offset: 8333},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 120, offset: 8337},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 252, col: 1, offset: 8395},
			expr: &actionExpr{
				pos: position{line: 252, col: 19, offset: 8413},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 252, col: 19, offset: 8413},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 252, col: 25, offset: 8419},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 256, col: 1, offset: 8493},
			expr: &actionExpr{
				pos: position{line: 256, col: 25, offset: 8517},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 256, col: 25, offset: 8517},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 25, offset: 8517},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 25, offset: 8517},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 32, offset: 8524},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 36, offset: 8528},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 36, offset: 8528},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 43, offset: 8535},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 256, col: 49, offset: 8541},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 49, offset: 8541},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 263, col: 1, offset: 8698},
			expr: &actionExpr{
				pos: position{line: 263, col: 25, offset: 8722},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 263, col: 25, offset: 8722},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 25, offset: 8722},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 25, offset: 8722},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 32, offset: 8729},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 36, offset: 8733},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 36, offset: 8733},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 263, col: 43, offset: 8740},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 49, offset: 8746},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 49, offset: 8746},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 270, col: 1, offset: 8903},
			expr: &actionExpr{
				pos: position{line: 270, col: 21, offset: 8923},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 270, col: 21, offset: 8923},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 21, offset: 8923},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 33, offset: 8935},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 33, offset: 8935},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 40, offset: 8942},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 274, col: 1, offset: 8998},
			expr: &actionExpr{
				pos: position{line: 274, col: 30, offset: 9027},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 274, col: 30, offset: 9027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 30, offset: 9027},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 274, col: 39, offset: 9036},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 39, offset: 9036},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 274, col: 46, offset: 9043},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 279, col: 1, offset: 9189},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9218},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9218},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 30, offset: 9218},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 34, offset: 9222},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 37, offset: 9225},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 53, offset: 9241},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 57, offset: 9245},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 57, offset: 9245},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 64, offset: 9252},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 284, col: 1, offset: 9412},
			expr: &actionExpr{
				pos: position{line: 284, col: 21, offset: 9432},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 284, col: 21, offset: 9432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 21, offset: 9432},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 5, offset: 9448},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 14, offset: 9457},
								expr: &actionExpr{
									pos: position{line: 285, col: 15, offset: 9458},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 285, col: 15, offset: 9458},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 285, col: 15, offset: 9458},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 285, col: 19, offset: 9462},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 285, col: 24, offset: 9467},
													expr: &ruleRefExpr{
														pos:  position{line: 285, col: 25, offset: 9468},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 9524},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 12, offset: 9531},
								expr: &actionExpr{
									pos: position{line: 286, col: 13, offset: 9532},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 286, col: 13, offset: 9532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 286, col: 13, offset: 9532},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 286, col: 17, offset: 9536},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 286, col: 22, offset: 9541},
													expr: &ruleRefExpr{
														pos:  position{line: 286, col: 23, offset: 9542},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 9590},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 9, offset: 9594},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 9, offset: 9594},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 287, col: 16, offset: 9601},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 292, col: 1, offset: 9757},
			expr: &actionExpr{
				pos: position{line: 292, col: 19, offset: 9775},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 292, col: 19, offset: 9775},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 19, offset: 9775},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 23, offset: 9779},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 34, offset: 9790},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 35, offset: 9791},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 54, offset: 9810},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 58, offset: 9814},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 58, offset: 9814},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 65, offset: 9821},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 296, col: 1, offset: 9897},
			expr: &choiceExpr{
				pos: position{line: 296, col: 21, offset: 9917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 296, col: 21, offset: 9917},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 49, offset: 9945},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 298, col: 1, offset: 9977},
			expr: &actionExpr{
				pos: position{line: 298, col: 30, offset: 10006},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 30, offset: 10006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 30, offset: 10006},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 35, offset: 10011},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 49, offset: 10025},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 53, offset: 10029},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 59, offset: 10035},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 60, offset: 10036},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 77, offset: 10053},
							expr: &litMatcher{
								pos:        position{line: 298, col: 77, offset: 10053},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 82, offset: 10058},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 82, offset: 10058},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 302, col: 1, offset: 10161},
			expr: &actionExpr{
				pos: position{line: 302, col: 33, offset: 10193},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 302, col: 33, offset: 10193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 302, col: 33, offset: 10193},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 38, offset: 10198},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 52, offset: 10212},
							expr: &litMatcher{
								pos:        position{line: 302, col: 52, offset: 10212},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 57, offset: 10217},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 57, offset: 10217},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 306, col: 1, offset: 10309},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10325},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 306, col: 17, offset: 10325},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 306, col: 17, offset: 10325},
							expr: &litMatcher{
								pos:        position{line: 306, col: 18, offset: 10326},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 26, offset: 10334},
							expr: &litMatcher{
								pos:        position{line: 306, col: 27, offset: 10335},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 35, offset: 10343},
							expr: &litMatcher{
								pos:        position{line: 306, col: 36, offset: 10344},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 46, offset: 10354},
							expr: &oneOrMoreExpr{
								pos: position{line: 306, col: 48, offset: 10356},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 48, offset: 10356},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 56, offset: 10364},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 306, col: 61, offset: 10369},
								expr: &charClassMatcher{
									pos:        position{line: 306, col: 61, offset: 10369},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 75, offset: 10383},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 75, offset: 10383},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 310, col: 1, offset: 10430},
			expr: &actionExpr{
				pos: position{line: 310, col: 19, offset: 10448},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 310, col: 19, offset: 10448},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 310, col: 26, offset: 10455},
						expr: &charClassMatcher{
							pos:        position{line: 310, col: 26, offset: 10455},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 314, col: 1, offset: 10510},
			expr: &actionExpr{
				pos: position{line: 314, col: 29, offset: 10538},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 314, col: 29, offset: 10538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 314, col: 29, offset: 10538},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 314, col: 36, offset: 10545},
								expr: &charClassMatcher{
									pos:        position{line: 314, col: 36, offset: 10545},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 314, col: 50, offset: 10559},
							expr: &litMatcher{
								pos:        position{line: 314, col: 51, offset: 10560},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 318, col: 1, offset: 10730},
			expr: &actionExpr{
				pos: position{line: 318, col: 20, offset: 10749},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 318, col: 20, offset: 10749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 20, offset: 10749},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 29, offset: 10758},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 29, offset: 10758},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 36, offset: 10765},
							expr: &litMatcher{
								pos:        position{line: 318, col: 36, offset: 10765},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 41, offset: 10770},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 48, offset: 10777},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 49, offset: 10778},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 66, offset: 10795},
							expr: &litMatcher{
								pos:        position{line: 318, col: 66, offset: 10795},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 10800},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 77, offset: 10806},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 78, offset: 10807},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 95, offset: 10824},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 99, offset: 10828},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 99, offset: 10828},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 106, offset: 10835},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 322, col: 1, offset: 10908},
			expr: &actionExpr{
				pos: position{line: 322, col: 20, offset: 10927},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 322, col: 20, offset: 10927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 20, offset: 10927},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 29, offset: 10936},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 29, offset: 10936},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 36, offset: 10943},
							expr: &litMatcher{
								pos:        position{line: 322, col: 36, offset: 10943},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 41, offset: 10948},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 48, offset: 10955},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 49, offset: 10956},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 66, offset: 10973},
							expr: &litMatcher{
								pos:        position{line: 322, col: 66, offset: 10973},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 71, offset: 10978},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 77, offset: 10984},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 78, offset: 10985},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 95, offset: 11002},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 99, offset: 11006},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 99, offset: 11006},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 106, offset: 11013},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 326, col: 1, offset: 11104},
			expr: &actionExpr{
				pos: position{line: 326, col: 19, offset: 11122},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 326, col: 20, offset: 11123},
					expr: &charClassMatcher{
						pos:        position{line: 326, col: 20, offset: 11123},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 330, col: 1, offset: 11176},
			expr: &actionExpr{
				pos: position{line: 330, col: 20, offset: 11195},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 330, col: 20, offset: 11195},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 20, offset: 11195},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 24, offset: 11199},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 330, col: 31, offset: 11206},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 330, col: 31, offset: 11206},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 31, offset: 11206},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 51, offset: 11226},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 51, offset: 11226},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 66, offset: 11241},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 66, offset: 11241},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 78, offset: 11253},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 334, col: 1, offset: 11311},
			expr: &actionExpr{
				pos: position{line: 334, col: 23, offset: 11333},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 23, offset: 11333},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 334, col: 28, offset: 11338},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 338, col: 1, offset: 11410},
			expr: &actionExpr{
				pos: position{line: 338, col: 25, offset: 11434},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 338, col: 25, offset: 11434},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 25, offset: 11434},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 338, col: 36, offset: 11445},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 37, offset: 11446},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 56, offset: 11465},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 56, offset: 11465},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 67, offset: 11476},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 342, col: 1, offset: 11588},
			expr: &choiceExpr{
				pos: position{line: 342, col: 18, offset: 11605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 342, col: 18, offset: 11605},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 36, offset: 11623},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 58, offset: 11645},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 344, col: 1, offset: 11666},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11689},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11689},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11689},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11693},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 35, offset: 11700},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 344, col: 50, offset: 11715},
							expr: &charClassMatcher{
								pos:        position{line: 344, col: 51, offset: 11716},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 348, col: 1, offset: 11789},
			expr: &actionExpr{
				pos: position{line: 348, col: 20, offset: 11808},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 348, col: 20, offset: 11808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 20, offset: 11808},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 24, offset: 11812},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 27, offset: 11815},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 348, col: 42, offset: 11830},
							expr: &charClassMatcher{
								pos:        position{line: 348, col: 43, offset: 11831},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 352, col: 1, offset: 11896},
			expr: &actionExpr{
				pos: position{line: 352, col: 22, offset: 11917},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 352, col: 22, offset: 11917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 22, offset: 11917},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 26, offset: 11921},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 31, offset: 11926},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 352, col: 46, offset: 11941},
							expr: &charClassMatcher{
								pos:        position{line: 352, col: 47, offset: 11942},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 357, col: 1, offset: 12056},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 12075},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 12075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 357, col: 20, offset: 12075},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 26, offset: 12081},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 357, col: 41, offset: 12096},
							expr: &charClassMatcher{
								pos:        position{line: 357, col: 42, offset: 12097},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 361, col: 1, offset: 12146},
			expr: &choiceExpr{
				pos: position{line: 361, col: 14, offset: 12159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 361, col: 14, offset: 12159},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 26, offset: 12171},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 38, offset: 12183},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 50, offset: 12195},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 363, col: 1, offset: 12211},
			expr: &actionExpr{
				pos: position{line: 363, col: 15, offset: 12225},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 363, col: 15, offset: 12225},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 363, col: 21, offset: 12231},
						expr: &ruleRefExpr{
							pos:  position{line: 363, col: 21, offset: 12231},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 367, col: 1, offset: 12300},
			expr: &actionExpr{
				pos: position{line: 367, col: 18, offset: 12317},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 367, col: 18, offset: 12317},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 367, col: 18, offset: 12317},
							expr: &litMatcher{
								pos:        position{line: 367, col: 18, offset: 12317},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 23, offset: 12322},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 23, offset: 12322},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12329},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 32, offset: 12331},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 45, offset: 12344},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 45, offset: 12344},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 52, offset: 12351},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 367, col: 56, offset: 12355},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 367, col: 59, offset: 12358},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 367, col: 59, offset: 12358},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 71, offset: 12370},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 83, offset: 12382},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 372, col: 1, offset: 12576},
			expr: &actionExpr{
				pos: position{line: 372, col: 14, offset: 12589},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 372, col: 14, offset: 12589},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 14, offset: 12589},
							expr: &charClassMatcher{
								pos:        position{line: 372, col: 14, offset: 12589},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 372, col: 21, offset: 12596},
							expr: &charClassMatcher{
								pos:        position{line: 372, col: 22, offset: 12597},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 378, col: 1, offset: 12739},
			expr: &actionExpr{
				pos: position{line: 378, col: 14, offset: 12752},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 378, col: 14, offset: 12752},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 378, col: 14, offset: 12752},
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 14, offset: 12752},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 21, offset: 12759},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 25, offset: 12763},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 29, offset: 12767},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 41, offset: 12779},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 378, col: 45, offset: 12783},
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 45, offset: 12783},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 378, col: 52, offset: 12790},
							expr: &charClassMatcher{
								pos:        position{line: 378, col: 53, offset: 12791},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 380, col: 1, offset: 12820},
			expr: &actionExpr{
				pos: position{line: 380, col: 16, offset: 12835},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 380, col: 16, offset: 12835},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 380, col: 20, offset: 12839},
						expr: &choiceExpr{
							pos: position{line: 380, col: 22, offset: 12841},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 380, col: 22, offset: 12841},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 380, col: 37, offset: 12856},
									expr: &charClassMatcher{
										pos:        position{line: 380, col: 37, offset: 12856},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 380, col: 51, offset: 12870},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 382, col: 1, offset: 12912},
			expr: &actionExpr{
				pos: position{line: 382, col: 17, offset: 12928},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 382, col: 17, offset: 12928},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 385, col: 1, offset: 12991},
			expr: &actionExpr{
				pos: position{line: 385, col: 14, offset: 13004},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 385, col: 14, offset: 13004},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 14, offset: 13004},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 14, offset: 13004},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 21, offset: 13011},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 25, offset: 13015},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 29, offset: 13019},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 41, offset: 13031},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 45, offset: 13035},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 45, offset: 13035},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 387, col: 1, offset: 13065},
			expr: &actionExpr{
				pos: position{line: 387, col: 16, offset: 13080},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 387, col: 16, offset: 13080},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 387, col: 20, offset: 13084},
						expr: &choiceExpr{
							pos: position{line: 387, col: 22, offset: 13086},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 22, offset: 13086},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 387, col: 37, offset: 13101},
									expr: &charClassMatcher{
										pos:        position{line: 387, col: 37, offset: 13101},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 387, col: 51, offset: 13115},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 389, col: 1, offset: 13157},
			expr: &actionExpr{
				pos: position{line: 389, col: 17, offset: 13173},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 389, col: 17, offset: 13173},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 392, col: 1, offset: 13267},
			expr: &actionExpr{
				pos: position{line: 392, col: 17, offset: 13283},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 392, col: 17, offset: 13283},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 17, offset: 13283},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 17, offset: 13283},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 392, col: 30, offset: 13296},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 31, offset: 13297},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 395, col: 1, offset: 13411},
			expr: &actionExpr{
				pos: position{line: 395, col: 19, offset: 13429},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 395, col: 19, offset: 13429},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 19, offset: 13429},
							expr: &charClassMatcher{
								pos:        position{line: 395, col: 19, offset: 13429},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 395, col: 31, offset: 13441},
							expr: &charClassMatcher{
								pos:        position{line: 395, col: 32, offset: 13442},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePositionalValue",
			pos:  position{line: 398, col: 1, offset: 13552},
			expr: &actionExpr{
				pos: position{line: 398, col: 26, offset: 13577},
				run: (*parser).callonInlinePositionalValue1,
				expr: &seqExpr{
					pos: position{line: 398, col: 26, offset: 13577},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 26, offset: 13577},
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 26, offset: 13577},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 33, offset: 13584},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 398, col: 40, offset: 13591},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 398, col: 40, offset: 13591},
										name: "InlineValuePlain",
									},
									&ruleRefExpr{
										pos:  position{line: 398, col: 59, offset: 13610},
										name: "AttrValueSingleQuoted",
									},
									&ruleRefExpr{
										pos:  position{line: 398, col: 83, offset: 13634},
										name: "AttrValueDoubleQuoted",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 106, offset: 13657},
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 106, offset: 13657},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 398, col: 113, offset: 13664},
							expr: &charClassMatcher{
								pos:        position{line: 398, col: 114, offset: 13665},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineValuePlain",
			pos:  position{line: 404, col: 1, offset: 13859},
			expr: &actionExpr{
				pos: position{line: 404, col: 21, offset: 13879},
				run: (*parser).callonInlineValuePlain1,
				expr: &seqExpr{
					pos: position{line: 404, col: 21, offset: 13879},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 404, col: 21, offset: 13879},
							val:        "[^,\\r\\n\"' \\t=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 404, col: 39, offset: 13897},
							expr: &choiceExpr{
								pos: position{line: 404, col: 40, offset: 13898},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 404, col: 40, offset: 13898},
										val:        "[^, \\t\\r\\n\"'=\\]]",
										chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 404, col: 59, offset: 13917},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 404, col: 59, offset: 13917},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 404, col: 64, offset: 13922},
												val:        "[^, \\t\\r\\n\"'=\\]]",
												chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 408, col: 1, offset: 13981},
			expr: &choiceExpr{
				pos: position{line: 408, col: 19, offset: 13999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 408, col: 19, offset: 13999},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 41, offset: 14021},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 65, offset: 14045},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 412, col: 1, offset: 14247},
			expr: &actionExpr{
				pos: position{line: 412, col: 24, offset: 14270},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 412, col: 24, offset: 14270},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 412, col: 24, offset: 14270},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 45, offset: 14291},
							expr: &choiceExpr{
								pos: position{line: 412, col: 46, offset: 14292},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 412, col: 46, offset: 14292},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 412, col: 68, offset: 14314},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 412, col: 68, offset: 14314},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 412, col: 73, offset: 14319},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 416, col: 1, offset: 14381},
			expr: &actionExpr{
				pos: position{line: 416, col: 13, offset: 14393},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 416, col: 13, offset: 14393},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 416, col: 13, offset: 14393},
							expr: &seqExpr{
								pos: position{line: 416, col: 15, offset: 14395},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 416, col: 15, offset: 14395},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 416, col: 19, offset: 14399},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 19, offset: 14399},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 29, offset: 14409},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 33, offset: 14413},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 416, col: 46, offset: 14426},
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 46, offset: 14426},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 416, col: 53, offset: 14433},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 416, col: 57, offset: 14437},
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 57, offset: 14437},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 64, offset: 14444},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 70, offset: 14450},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 416, col: 85, offset: 14465},
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 85, offset: 14465},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 421, col: 1, offset: 14660},
			expr: &actionExpr{
				pos: position{line: 421, col: 17, offset: 14676},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 421, col: 17, offset: 14676},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 421, col: 17, offset: 14676},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 421, col: 26, offset: 14685},
							expr: &charClassMatcher{
								pos:        position{line: 421, col: 26, offset: 14685},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 425, col: 1, offset: 14737},
			expr: &choiceExpr{
				pos: position{line: 425, col: 19, offset: 14755},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 425, col: 19, offset: 14755},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 425, col: 35, offset: 14771},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 425, col: 59, offset: 14795},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 425, col: 83, offset: 14819},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 427, col: 1, offset: 14837},
			expr: &actionExpr{
				pos: position{line: 427, col: 19, offset: 14855},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 427, col: 19, offset: 14855},
					expr: &charClassMatcher{
						pos:        position{line: 427, col: 19, offset: 14855},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 431, col: 1, offset: 14912},
			expr: &actionExpr{
				pos: position{line: 431, col: 26, offset: 14937},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 431, col: 26, offset: 14937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 26, offset: 14937},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 431, col: 30, offset: 14941},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 30, offset: 14941},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 431, col: 40, offset: 14951},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 435, col: 1, offset: 15012},
			expr: &actionExpr{
				pos: position{line: 435, col: 26, offset: 15037},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 435, col: 26, offset: 15037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 26, offset: 15037},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 435, col: 31, offset: 15042},
							expr: &charClassMatcher{
								pos:        position{line: 435, col: 31, offset: 15042},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 435, col: 41, offset: 15052},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 441, col: 1, offset: 15312},
			expr: &actionExpr{
				pos: position{line: 441, col: 18, offset: 15329},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 441, col: 18, offset: 15329},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 449, col: 1, offset: 15519},
			expr: &choiceExpr{
				pos: position{line: 449, col: 17, offset: 15535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 17, offset: 15535},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 38, offset: 15556},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 451, col: 1, offset: 15578},
			expr: &actionExpr{
				pos: position{line: 451, col: 23, offset: 15600},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 451, col: 23, offset: 15600},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 451, col: 23, offset: 15600},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 46, offset: 15623},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 55, offset: 15632},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 82, offset: 15659},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 455, col: 1, offset: 15767},
			expr: &actionExpr{
				pos: position{line: 455, col: 31, offset: 15797},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 455, col: 31, offset: 15797},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 455, col: 41, offset: 15807},
						expr: &ruleRefExpr{
							pos:  position{line: 455, col: 41, offset: 15807},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 459, col: 1, offset: 15889},
			expr: &seqExpr{
				pos: position{line: 459, col: 27, offset: 15915},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 459, col: 27, offset: 15915},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 459, col: 32, offset: 15920},
						expr: &charClassMatcher{
							pos:        position{line: 459, col: 33, offset: 15921},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 461, col: 1, offset: 15934},
			expr: &litMatcher{
				pos:        position{line: 461, col: 25, offset: 15958},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 464, col: 1, offset: 16049},
			expr: &actionExpr{
				pos: position{line: 464, col: 30, offset: 16078},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 464, col: 30, offset: 16078},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 465, col: 9, offset: 16097},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 465, col: 9, offset: 16097},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 465, col: 9, offset: 16097},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 465, col: 19, offset: 16107},
										expr: &ruleRefExpr{
											pos:  position{line: 465, col: 20, offset: 16108},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 466, col: 11, offset: 16165},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 466, col: 11, offset: 16165},
										expr: &ruleRefExpr{
											pos:  position{line: 466, col: 11, offset: 16165},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 466, col: 18, offset: 16172},
										expr: &ruleRefExpr{
											pos:  position{line: 466, col: 19, offset: 16173},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 467, col: 11, offset: 16205},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 467, col: 11, offset: 16205},
										expr: &litMatcher{
											pos:        position{line: 467, col: 12, offset: 16206},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 467, col: 16, offset: 16210},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 16259},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 16281},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 16304},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 16330},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 16359},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 16375},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 16408},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 16428},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16450},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16472},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16497},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 479, col: 11, offset: 16524},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 479, col: 11, offset: 16524},
										expr: &litMatcher{
											pos:        position{line: 479, col: 12, offset: 16525},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 479, col: 17, offset: 16530},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16555},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16585},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 16614},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 486, col: 1, offset: 16684},
			expr: &choiceExpr{
				pos: position{line: 486, col: 41, offset: 16724},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 486, col: 41, offset: 16724},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 486, col: 55, offset: 16738},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 486, col: 55, offset: 16738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 486, col: 55, offset: 16738},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 486, col: 59, offset: 16742},
									expr: &litMatcher{
										pos:        position{line: 486, col: 60, offset: 16743},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 490, col: 1, offset: 16806},
			expr: &actionExpr{
				pos: position{line: 490, col: 23, offset: 16828},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 490, col: 23, offset: 16828},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 490, col: 23, offset: 16828},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 46, offset: 16851},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 55, offset: 16860},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 82, offset: 16887},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 494, col: 1, offset: 16995},
			expr: &actionExpr{
				pos: position{line: 494, col: 31, offset: 17025},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 494, col: 31, offset: 17025},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 494, col: 41, offset: 17035},
						expr: &ruleRefExpr{
							pos:  position{line: 494, col: 41, offset: 17035},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 499, col: 1, offset: 17200},
			expr: &actionExpr{
				pos: position{line: 499, col: 30, offset: 17229},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 499, col: 30, offset: 17229},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 500, col: 9, offset: 17248},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 500, col: 9, offset: 17248},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 500, col: 9, offset: 17248},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 500, col: 19, offset: 17258},
										expr: &ruleRefExpr{
											pos:  position{line: 500, col: 20, offset: 17259},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 501, col: 11, offset: 17316},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 501, col: 11, offset: 17316},
										expr: &ruleRefExpr{
											pos:  position{line: 501, col: 11, offset: 17316},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 501, col: 18, offset: 17323},
										expr: &ruleRefExpr{
											pos:  position{line: 501, col: 19, offset: 17324},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 17356},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17374},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17396},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17419},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17445},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17474},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17490},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17523},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 510, col: 11, offset: 17543},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 511, col: 11, offset: 17565},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 512, col: 11, offset: 17587},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 513, col: 11, offset: 17612},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 514, col: 11, offset: 17639},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 514, col: 11, offset: 17639},
										expr: &litMatcher{
											pos:        position{line: 514, col: 12, offset: 17640},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 18, offset: 17646},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 515, col: 11, offset: 17671},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 17701},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 517, col: 11, offset: 17730},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 521, col: 1, offset: 17808},
			expr: &seqExpr{
				pos: position{line: 521, col: 27, offset: 17834},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 521, col: 27, offset: 17834},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 521, col: 33, offset: 17840},
						expr: &charClassMatcher{
							pos:        position{line: 521, col: 34, offset: 17841},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 523, col: 1, offset: 17854},
			expr: &litMatcher{
				pos:        position{line: 523, col: 25, offset: 17878},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 525, col: 1, offset: 17887},
			expr: &actionExpr{
				pos: position{line: 525, col: 41, offset: 17927},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 525, col: 42, offset: 17928},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 525, col: 42, offset: 17928},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 525, col: 56, offset: 17942},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 525, col: 56, offset: 17942},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 525, col: 60, offset: 17946},
									expr: &litMatcher{
										pos:        position{line: 525, col: 61, offset: 17947},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 532, col: 1, offset: 18119},
			expr: &actionExpr{
				pos: position{line: 532, col: 12, offset: 18130},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 532, col: 12, offset: 18130},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 12, offset: 18130},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 23, offset: 18141},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 24, offset: 18142},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 533, col: 5, offset: 18160},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 533, col: 12, offset: 18167},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 533, col: 12, offset: 18167},
									expr: &litMatcher{
										pos:        position{line: 533, col: 13, offset: 18168},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 537, col: 5, offset: 18263},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 541, col: 5, offset: 18419},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 5, offset: 18419},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 12, offset: 18426},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 19, offset: 18433},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 34, offset: 18448},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 541, col: 38, offset: 18452},
								expr: &ruleRefExpr{
									pos:  position{line: 541, col: 38, offset: 18452},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 56, offset: 18470},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 545, col: 1, offset: 18580},
			expr: &actionExpr{
				pos: position{line: 545, col: 18, offset: 18597},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 545, col: 18, offset: 18597},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 545, col: 27, offset: 18606},
						expr: &seqExpr{
							pos: position{line: 545, col: 28, offset: 18607},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 545, col: 28, offset: 18607},
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 29, offset: 18608},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 545, col: 37, offset: 18616},
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 38, offset: 18617},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 54, offset: 18633},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 549, col: 1, offset: 18758},
			expr: &actionExpr{
				pos: position{line: 549, col: 17, offset: 18774},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 549, col: 17, offset: 18774},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 549, col: 26, offset: 18783},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 549, col: 26, offset: 18783},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 550, col: 11, offset: 18799},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 551, col: 11, offset: 18845},
								expr: &ruleRefExpr{
									pos:  position{line: 551, col: 11, offset: 18845},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 11, offset: 18864},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 553, col: 11, offset: 18890},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 18919},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 18941},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 556, col: 11, offset: 18964},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 18980},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 558, col: 11, offset: 19006},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 559, col: 11, offset: 19030},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 19052},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 561, col: 11, offset: 19070},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 562, col: 11, offset: 19103},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 19132},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 570, col: 1, offset: 19290},
			expr: &seqExpr{
				pos: position{line: 570, col: 31, offset: 19320},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 570, col: 31, offset: 19320},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 570, col: 41, offset: 19330},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 575, col: 1, offset: 19446},
			expr: &actionExpr{
				pos: position{line: 575, col: 19, offset: 19464},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 575, col: 19, offset: 19464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 575, col: 19, offset: 19464},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 25, offset: 19470},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 40, offset: 19485},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 45, offset: 19490},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 52, offset: 19497},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 68, offset: 19513},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 75, offset: 19520},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 579, col: 1, offset: 19639},
			expr: &actionExpr{
				pos: position{line: 579, col: 20, offset: 19658},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 579, col: 20, offset: 19658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 20, offset: 19658},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 26, offset: 19664},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 579, col: 41, offset: 19679},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 45, offset: 19683},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 52, offset: 19690},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 68, offset: 19706},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 75, offset: 19713},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 583, col: 1, offset: 19833},
			expr: &actionExpr{
				pos: position{line: 583, col: 18, offset: 19850},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 583, col: 19, offset: 19851},
					expr: &charClassMatcher{
						pos:        position{line: 583, col: 19, offset: 19851},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 587, col: 1, offset: 19904},
			expr: &actionExpr{
				pos: position{line: 587, col: 19, offset: 19922},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 587, col: 19, offset: 19922},
					expr: &charClassMatcher{
						pos:        position{line: 587, col: 19, offset: 19922},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 591, col: 1, offset: 19974},
			expr: &actionExpr{
				pos: position{line: 591, col: 24, offset: 19997},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 591, col: 24, offset: 19997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 24, offset: 19997},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 28, offset: 20001},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 591, col: 34, offset: 20007},
								expr: &ruleRefExpr{
									pos:  position{line: 591, col: 35, offset: 20008},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 591, col: 54, offset: 20027},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 598, col: 1, offset: 20216},
			expr: &actionExpr{
				pos: position{line: 598, col: 18, offset: 20233},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 598, col: 18, offset: 20233},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 18, offset: 20233},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 598, col: 24, offset: 20239},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 598, col: 24, offset: 20239},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 598, col: 24, offset: 20239},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 598, col: 36, offset: 20251},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 598, col: 42, offset: 20257},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 598, col: 56, offset: 20271},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 598, col: 74, offset: 20289},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 600, col: 8, offset: 20438},
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 8, offset: 20438},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 15, offset: 20445},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 604, col: 1, offset: 20501},
			expr: &actionExpr{
				pos: position{line: 604, col: 26, offset: 20526},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 604, col: 26, offset: 20526},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 604, col: 26, offset: 20526},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 30, offset: 20530},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 604, col: 36, offset: 20536},
								expr: &choiceExpr{
									pos: position{line: 604, col: 37, offset: 20537},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 604, col: 37, offset: 20537},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 604, col: 59, offset: 20559},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 604, col: 80, offset: 20580},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 604, col: 99, offset: 20599},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 608, col: 1, offset: 20675},
			expr: &actionExpr{
				pos: position{line: 608, col: 24, offset: 20698},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 608, col: 24, offset: 20698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 24, offset: 20698},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 33, offset: 20707},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 40, offset: 20714},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 608, col: 66, offset: 20740},
							expr: &litMatcher{
								pos:        position{line: 608, col: 66, offset: 20740},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 612, col: 1, offset: 20803},
			expr: &actionExpr{
				pos: position{line: 612, col: 29, offset: 20831},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 612, col: 29, offset: 20831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 29, offset: 20831},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 612, col: 36, offset: 20838},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 612, col: 36, offset: 20838},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 613, col: 11, offset: 20956},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 614, col: 11, offset: 20993},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 615, col: 11, offset: 21020},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 616, col: 11, offset: 21053},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 617, col: 11, offset: 21086},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 618, col: 11, offset: 21114},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 618, col: 31, offset: 21134},
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 31, offset: 21134},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 618, col: 39, offset: 21142},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 618, col: 39, offset: 21142},
									expr: &litMatcher{
										pos:        position{line: 618, col: 40, offset: 21143},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 618, col: 46, offset: 21149},
									expr: &litMatcher{
										pos:        position{line: 618, col: 47, offset: 21150},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 622, col: 1, offset: 21186},
			expr: &actionExpr{
				pos: position{line: 622, col: 23, offset: 21208},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 622, col: 23, offset: 21208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 622, col: 23, offset: 21208},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 622, col: 30, offset: 21215},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 622, col: 30, offset: 21215},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 622, col: 47, offset: 21232},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 21255},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 623, col: 12, offset: 21262},
								expr: &actionExpr{
									pos: position{line: 623, col: 13, offset: 21263},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 623, col: 13, offset: 21263},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 623, col: 13, offset: 21263},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 623, col: 17, offset: 21267},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 623, col: 24, offset: 21274},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 623, col: 24, offset: 21274},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 623, col: 41, offset: 21291},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 629, col: 1, offset: 21435},
			expr: &actionExpr{
				pos: position{line: 629, col: 29, offset: 21463},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 629, col: 29, offset: 21463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 629, col: 29, offset: 21463},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 34, offset: 21468},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 629, col: 41, offset: 21475},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 629, col: 41, offset: 21475},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 629, col: 58, offset: 21492},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 21515},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 630, col: 12, offset: 21522},
								expr: &actionExpr{
									pos: position{line: 630, col: 13, offset: 21523},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 630, col: 13, offset: 21523},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 630, col: 13, offset: 21523},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 630, col: 17, offset: 21527},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 630, col: 24, offset: 21534},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 630, col: 24, offset: 21534},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 630, col: 41, offset: 21551},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 9, offset: 21606},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 636, col: 1, offset: 21700},
			expr: &actionExpr{
				pos: position{line: 636, col: 19, offset: 21718},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 636, col: 19, offset: 21718},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 19, offset: 21718},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 26, offset: 21725},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 636, col: 34, offset: 21733},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 39, offset: 21738},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 44, offset: 21743},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 640, col: 1, offset: 21835},
			expr: &actionExpr{
				pos: position{line: 640, col: 25, offset: 21859},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 640, col: 25, offset: 21859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 640, col: 25, offset: 21859},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 30, offset: 21864},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 37, offset: 21871},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 640, col: 45, offset: 21879},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 50, offset: 21884},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 55, offset: 21889},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 640, col: 63, offset: 21897},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 644, col: 1, offset: 21986},
			expr: &actionExpr{
				pos: position{line: 644, col: 20, offset: 22005},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 20, offset: 22005},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 644, col: 32, offset: 22017},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 648, col: 1, offset: 22116},
			expr: &actionExpr{
				pos: position{line: 648, col: 26, offset: 22141},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 648, col: 26, offset: 22141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 648, col: 26, offset: 22141},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 31, offset: 22146},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 43, offset: 22158},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 648, col: 51, offset: 22166},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 652, col: 1, offset: 22262},
			expr: &actionExpr{
				pos: position{line: 652, col: 23, offset: 22284},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 652, col: 23, offset: 22284},
					expr: &charClassMatcher{
						pos:        position{line: 652, col: 23, offset: 22284},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 656, col: 1, offset: 22333},
			expr: &actionExpr{
				pos: position{line: 656, col: 23, offset: 22355},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 656, col: 23, offset: 22355},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 656, col: 24, offset: 22356},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 656, col: 24, offset: 22356},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 656, col: 34, offset: 22366},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 42, offset: 22374},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 48, offset: 22380},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 656, col: 73, offset: 22405},
							expr: &litMatcher{
								pos:        position{line: 656, col: 73, offset: 22405},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 660, col: 1, offset: 22558},
			expr: &actionExpr{
				pos: position{line: 660, col: 28, offset: 22585},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 660, col: 28, offset: 22585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 28, offset: 22585},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 35, offset: 22592},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 660, col: 54, offset: 22611},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 54, offset: 22611},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 660, col: 62, offset: 22619},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 660, col: 62, offset: 22619},
									expr: &litMatcher{
										pos:        position{line: 660, col: 63, offset: 22620},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 660, col: 69, offset: 22626},
									expr: &litMatcher{
										pos:        position{line: 660, col: 70, offset: 22627},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 664, col: 1, offset: 22663},
			expr: &actionExpr{
				pos: position{line: 664, col: 22, offset: 22684},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 664, col: 22, offset: 22684},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 22, offset: 22684},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 29, offset: 22691},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 22706},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 665, col: 12, offset: 22713},
								expr: &actionExpr{
									pos: position{line: 665, col: 13, offset: 22714},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 665, col: 13, offset: 22714},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 665, col: 13, offset: 22714},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 17, offset: 22718},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 24, offset: 22725},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 671, col: 1, offset: 22862},
			expr: &choiceExpr{
				pos: position{line: 671, col: 13, offset: 22874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 13, offset: 22874},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 671, col: 13, offset: 22874},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 671, col: 18, offset: 22879},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 671, col: 18, offset: 22879},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 30, offset: 22891},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 22961},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 22961},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 22961},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 673, col: 9, offset: 22965},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 673, col: 14, offset: 22970},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 673, col: 14, offset: 22970},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 673, col: 26, offset: 22982},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 677, col: 1, offset: 23054},
			expr: &actionExpr{
				pos: position{line: 677, col: 16, offset: 23069},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 677, col: 16, offset: 23069},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 677, col: 16, offset: 23069},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 677, col: 23, offset: 23076},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 677, col: 23, offset: 23076},
									expr: &litMatcher{
										pos:        position{line: 677, col: 24, offset: 23077},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 680, col: 5, offset: 23134},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 688, col: 1, offset: 23384},
			expr: &zeroOrMoreExpr{
				pos: position{line: 688, col: 24, offset: 23407},
				expr: &choiceExpr{
					pos: position{line: 688, col: 25, offset: 23408},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 688, col: 25, offset: 23408},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 688, col: 41, offset: 23424},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 690, col: 1, offset: 23446},
			expr: &actionExpr{
				pos: position{line: 690, col: 21, offset: 23466},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 690, col: 21, offset: 23466},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 690, col: 21, offset: 23466},
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 22, offset: 23467},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 26, offset: 23471},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 690, col: 35, offset: 23480},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 690, col: 35, offset: 23480},
									expr: &charClassMatcher{
										pos:        position{line: 690, col: 35, offset: 23480},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 12, offset: 23544},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 699, col: 1, offset: 23750},
			expr: &actionExpr{
				pos: position{line: 699, col: 21, offset: 23770},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 699, col: 21, offset: 23770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 699, col: 21, offset: 23770},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 699, col: 29, offset: 23778},
								expr: &choiceExpr{
									pos: position{line: 699, col: 30, offset: 23779},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 699, col: 30, offset: 23779},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 699, col: 53, offset: 23802},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 699, col: 74, offset: 23823},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 699, col: 74, offset: 23823,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 107, offset: 23856},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 703, col: 1, offset: 23931},
			expr: &actionExpr{
				pos: position{line: 703, col: 25, offset: 23955},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 703, col: 25, offset: 23955},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 703, col: 25, offset: 23955},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 703, col: 33, offset: 23963},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 703, col: 38, offset: 23968},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 38, offset: 23968},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 703, col: 78, offset: 24008},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 707, col: 1, offset: 24077},
			expr: &actionExpr{
				pos: position{line: 707, col: 23, offset: 24099},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 707, col: 23, offset: 24099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 707, col: 23, offset: 24099},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 31, offset: 24107},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 707, col: 36, offset: 24112},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 707, col: 36, offset: 24112},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 707, col: 76, offset: 24152},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 714, col: 1, offset: 24323},
			expr: &choiceExpr{
				pos: position{line: 714, col: 18, offset: 24340},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 714, col: 18, offset: 24340},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 714, col: 18, offset: 24340},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 27, offset: 24349},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 9, offset: 24408},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 716, col: 9, offset: 24408},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 716, col: 15, offset: 24414},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 16, offset: 24415},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 720, col: 1, offset: 24511},
			expr: &actionExpr{
				pos: position{line: 720, col: 22, offset: 24532},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 720, col: 22, offset: 24532},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 22, offset: 24532},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 23, offset: 24533},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 721, col: 5, offset: 24542},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 6, offset: 24543},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 722, col: 5, offset: 24559},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 6, offset: 24560},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 723, col: 5, offset: 24583},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 6, offset: 24584},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 724, col: 5, offset: 24611},
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 6, offset: 24612},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 725, col: 5, offset: 24641},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 6, offset: 24642},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 726, col: 5, offset: 24669},
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 6, offset: 24670},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 727, col: 5, offset: 24696},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 6, offset: 24697},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 728, col: 5, offset: 24719},
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 6, offset: 24720},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 729, col: 5, offset: 24740},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 6, offset: 24741},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 5, offset: 24769},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 730, col: 11, offset: 24775},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 730, col: 11, offset: 24775},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 730, col: 20, offset: 24784},
										expr: &ruleRefExpr{
											pos:  position{line: 730, col: 21, offset: 24785},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 12, offset: 24886},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 736, col: 1, offset: 24929},
			expr: &seqExpr{
				pos: position{line: 736, col: 25, offset: 24953},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 736, col: 25, offset: 24953},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 736, col: 29, offset: 24957},
						expr: &ruleRefExpr{
							pos:  position{line: 736, col: 29, offset: 24957},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 736, col: 36, offset: 24964},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 738, col: 1, offset: 25038},
			expr: &actionExpr{
				pos: position{line: 738, col: 29, offset: 25066},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 738, col: 29, offset: 25066},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 738, col: 29, offset: 25066},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 738, col: 50, offset: 25087},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 58, offset: 25095},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 742, col: 1, offset: 25205},
			expr: &actionExpr{
				pos: position{line: 742, col: 29, offset: 25233},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 742, col: 29, offset: 25233},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 742, col: 29, offset: 25233},
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 30, offset: 25234},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 743, col: 5, offset: 25244},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 743, col: 14, offset: 25253},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 743, col: 14, offset: 25253},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 11, offset: 25279},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25304},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25326},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25352},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25377},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 25405},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 25435},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 25502},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 25554},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 25579},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 25612},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 25639},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 25677},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 758, col: 11, offset: 25703},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 765, col: 1, offset: 25873},
			expr: &actionExpr{
				pos: position{line: 765, col: 20, offset: 25892},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 765, col: 20, offset: 25892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 765, col: 20, offset: 25892},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 26, offset: 25898},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 27, offset: 25899},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 40, offset: 25912},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 48, offset: 25920},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 71, offset: 25943},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 80, offset: 25952},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 769, col: 1, offset: 26091},
			expr: &actionExpr{
				pos: position{line: 770, col: 5, offset: 26122},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 770, col: 5, offset: 26122},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 770, col: 5, offset: 26122},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 5, offset: 26122},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 12, offset: 26129},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 772, col: 9, offset: 26194},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 772, col: 9, offset: 26194},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 772, col: 9, offset: 26194},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 772, col: 9, offset: 26194},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 772, col: 16, offset: 26201},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 772, col: 16, offset: 26201},
															expr: &litMatcher{
																pos:        position{line: 772, col: 17, offset: 26202},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 776, col: 9, offset: 26306},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 795, col: 11, offset: 27042},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 795, col: 11, offset: 27042},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 795, col: 11, offset: 27042},
													expr: &charClassMatcher{
														pos:        position{line: 795, col: 12, offset: 27043},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 795, col: 20, offset: 27051},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 797, col: 13, offset: 27164},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 797, col: 13, offset: 27164},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 797, col: 14, offset: 27165},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 797, col: 21, offset: 27172},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 799, col: 13, offset: 27288},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 799, col: 13, offset: 27288},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 799, col: 14, offset: 27289},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 799, col: 21, offset: 27296},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 801, col: 13, offset: 27412},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 801, col: 13, offset: 27412},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 801, col: 13, offset: 27412},
													expr: &charClassMatcher{
														pos:        position{line: 801, col: 14, offset: 27413},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 801, col: 22, offset: 27421},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 803, col: 13, offset: 27537},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 803, col: 13, offset: 27537},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 803, col: 13, offset: 27537},
													expr: &charClassMatcher{
														pos:        position{line: 803, col: 14, offset: 27538},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 803, col: 22, offset: 27546},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 805, col: 12, offset: 27661},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 12, offset: 27661},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 809, col: 1, offset: 27700},
			expr: &actionExpr{
				pos: position{line: 809, col: 27, offset: 27726},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 809, col: 27, offset: 27726},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 809, col: 37, offset: 27736},
						expr: &ruleRefExpr{
							pos:  position{line: 809, col: 37, offset: 27736},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 816, col: 1, offset: 27943},
			expr: &actionExpr{
				pos: position{line: 816, col: 22, offset: 27964},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 816, col: 22, offset: 27964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 816, col: 22, offset: 27964},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 816, col: 28, offset: 27970},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 29, offset: 27971},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 42, offset: 27984},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 50, offset: 27992},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 75, offset: 28017},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 86, offset: 28028},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 87, offset: 28029},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 117, offset: 28059},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 126, offset: 28068},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 820, col: 1, offset: 28225},
			expr: &actionExpr{
				pos: position{line: 821, col: 5, offset: 28258},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 821, col: 5, offset: 28258},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 821, col: 5, offset: 28258},
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 5, offset: 28258},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 28265},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 821, col: 20, offset: 28273},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 823, col: 9, offset: 28332},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 823, col: 9, offset: 28332},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 823, col: 9, offset: 28332},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 823, col: 16, offset: 28339},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 823, col: 16, offset: 28339},
															expr: &litMatcher{
																pos:        position{line: 823, col: 17, offset: 28340},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 827, col: 9, offset: 28444},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 844, col: 14, offset: 29168},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 844, col: 21, offset: 29175},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 844, col: 22, offset: 29176},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 846, col: 13, offset: 29264},
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 13, offset: 29264},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 850, col: 1, offset: 29304},
			expr: &actionExpr{
				pos: position{line: 850, col: 32, offset: 29335},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 850, col: 32, offset: 29335},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 850, col: 32, offset: 29335},
							expr: &litMatcher{
								pos:        position{line: 850, col: 33, offset: 29336},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 37, offset: 29340},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 851, col: 7, offset: 29355},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 851, col: 7, offset: 29355},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 851, col: 7, offset: 29355},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 852, col: 7, offset: 29401},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 852, col: 7, offset: 29401},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 853, col: 7, offset: 29445},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 853, col: 7, offset: 29445},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 854, col: 7, offset: 29488},
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 7, offset: 29488},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 858, col: 1, offset: 29534},
			expr: &actionExpr{
				pos: position{line: 858, col: 29, offset: 29562},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 858, col: 29, offset: 29562},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 858, col: 39, offset: 29572},
						expr: &ruleRefExpr{
							pos:  position{line: 858, col: 39, offset: 29572},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 865, col: 1, offset: 29895},
			expr: &actionExpr{
				pos: position{line: 865, col: 20, offset: 29914},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 865, col: 20, offset: 29914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 865, col: 20, offset: 29914},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 865, col: 26, offset: 29920},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 27, offset: 29921},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 40, offset: 29934},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 46, offset: 29940},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 75, offset: 29969},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 86, offset: 29980},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 112, offset: 30006},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 865, col: 124, offset: 30018},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 125, offset: 30019},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 869, col: 1, offset: 30164},
			expr: &seqExpr{
				pos: position{line: 869, col: 26, offset: 30189},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 869, col: 26, offset: 30189},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 54, offset: 30217},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 871, col: 1, offset: 30245},
			expr: &choiceExpr{
				pos: position{line: 871, col: 33, offset: 30277},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 871, col: 33, offset: 30277},
						expr: &charClassMatcher{
							pos:        position{line: 871, col: 33, offset: 30277},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 871, col: 45, offset: 30289},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 871, col: 45, offset: 30289},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 871, col: 49, offset: 30293},
								expr: &litMatcher{
									pos:        position{line: 871, col: 50, offset: 30294},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 872, col: 1, offset: 30299},
			expr: &actionExpr{
				pos: position{line: 872, col: 32, offset: 30330},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 872, col: 32, offset: 30330},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 872, col: 42, offset: 30340},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 872, col: 42, offset: 30340},
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 42, offset: 30340},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 878, col: 1, offset: 30501},
			expr: &actionExpr{
				pos: position{line: 878, col: 24, offset: 30524},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 878, col: 24, offset: 30524},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 878, col: 33, offset: 30533},
						expr: &seqExpr{
							pos: position{line: 878, col: 34, offset: 30534},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 878, col: 34, offset: 30534},
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 35, offset: 30535},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 878, col: 43, offset: 30543},
									expr: &litMatcher{
										pos:        position{line: 878, col: 44, offset: 30544},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 49, offset: 30549},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 882, col: 1, offset: 30680},
			expr: &actionExpr{
				pos: position{line: 882, col: 31, offset: 30710},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 882, col: 31, offset: 30710},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 882, col: 40, offset: 30719},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 882, col: 40, offset: 30719},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 883, col: 11, offset: 30735},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 884, col: 11, offset: 30785},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 11, offset: 30785},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 885, col: 11, offset: 30804},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 886, col: 11, offset: 30830},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 887, col: 11, offset: 30860},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 888, col: 11, offset: 30881},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 889, col: 11, offset: 30910},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 890, col: 11, offset: 30932},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 891, col: 11, offset: 30956},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 892, col: 11, offset: 30972},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 893, col: 11, offset: 30998},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 894, col: 11, offset: 31022},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 895, col: 11, offset: 31044},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 896, col: 11, offset: 31062},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 897, col: 11, offset: 31095},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 11, offset: 31124},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 902, col: 1, offset: 31167},
			expr: &actionExpr{
				pos: position{line: 903, col: 5, offset: 31201},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 903, col: 5, offset: 31201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 31201},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 903, col: 16, offset: 31212},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 903, col: 16, offset: 31212},
									expr: &litMatcher{
										pos:        position{line: 903, col: 17, offset: 31213},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 906, col: 5, offset: 31274},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 910, col: 6, offset: 31454},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 910, col: 6, offset: 31454},
									expr: &choiceExpr{
										pos: position{line: 910, col: 7, offset: 31455},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 910, col: 7, offset: 31455},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 910, col: 15, offset: 31463},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 910, col: 27, offset: 31475},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 914, col: 1, offset: 31519},
			expr: &actionExpr{
				pos: position{line: 914, col: 31, offset: 31549},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 914, col: 31, offset: 31549},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 914, col: 40, offset: 31558},
						expr: &ruleRefExpr{
							pos:  position{line: 914, col: 41, offset: 31559},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 921, col: 1, offset: 31757},
			expr: &choiceExpr{
				pos: position{line: 921, col: 19, offset: 31775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 921, col: 19, offset: 31775},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 921, col: 19, offset: 31775},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 9, offset: 31823},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 923, col: 9, offset: 31823},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 9, offset: 31873},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 925, col: 9, offset: 31873},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 927, col: 9, offset: 31933},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 927, col: 9, offset: 31933},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 929, col: 9, offset: 31989},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 929, col: 9, offset: 31989},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 938, col: 1, offset: 32305},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 32354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 32354},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 32354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 940, col: 5, offset: 32354},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 940, col: 16, offset: 32365},
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 17, offset: 32366},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 940, col: 30, offset: 32379},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 33, offset: 32382},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 940, col: 49, offset: 32398},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 54, offset: 32403},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 940, col: 60, offset: 32409},
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 61, offset: 32410},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 32595},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 32595},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 32595},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 16, offset: 32606},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 17, offset: 32607},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 30, offset: 32620},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 944, col: 35, offset: 32625},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 44, offset: 32634},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 32833},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 948, col: 5, offset: 32833},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 948, col: 5, offset: 32833},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 948, col: 16, offset: 32844},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 17, offset: 32845},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 948, col: 30, offset: 32858},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 955, col: 7, offset: 33144},
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 8, offset: 33145},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 23, offset: 33160},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 32, offset: 33169},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 33370},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 33370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 33370},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 959, col: 16, offset: 33381},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 17, offset: 33382},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 959, col: 30, offset: 33395},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 31, offset: 33396},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 959, col: 46, offset: 33411},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 959, col: 52, offset: 33417},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 53, offset: 33418},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 963, col: 1, offset: 33518},
			expr: &oneOrMoreExpr{
				pos: position{line: 963, col: 38, offset: 33555},
				expr: &actionExpr{
					pos: position{line: 963, col: 39, offset: 33556},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 963, col: 39, offset: 33556},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 963, col: 39, offset: 33556},
								expr: &ruleRefExpr{
									pos:  position{line: 963, col: 40, offset: 33557},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 963, col: 50, offset: 33567},
								expr: &litMatcher{
									pos:        position{line: 963, col: 50, offset: 33567},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 963, col: 56, offset: 33573},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 963, col: 65, offset: 33582},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 967, col: 1, offset: 33727},
			expr: &actionExpr{
				pos: position{line: 967, col: 34, offset: 33760},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 967, col: 34, offset: 33760},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 967, col: 34, offset: 33760},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 967, col: 40, offset: 33766},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 967, col: 48, offset: 33774},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 967, col: 49, offset: 33775},
									expr: &charClassMatcher{
										pos:        position{line: 967, col: 49, offset: 33775},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 969, col: 8, offset: 33827},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 973, col: 1, offset: 33863},
			expr: &oneOrMoreExpr{
				pos: position{line: 973, col: 36, offset: 33898},
				expr: &actionExpr{
					pos: position{line: 973, col: 37, offset: 33899},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 973, col: 37, offset: 33899},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 973, col: 37, offset: 33899},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 38, offset: 33900},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 973, col: 48, offset: 33910},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 57, offset: 33919},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 978, col: 1, offset: 34137},
			expr: &actionExpr{
				pos: position{line: 978, col: 20, offset: 34156},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 978, col: 20, offset: 34156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 978, col: 20, offset: 34156},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 978, col: 31, offset: 34167},
								expr: &ruleRefExpr{
									pos:  position{line: 978, col: 32, offset: 34168},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 979, col: 5, offset: 34187},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 987, col: 5, offset: 34481},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 16, offset: 34492},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 988, col: 5, offset: 34516},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 988, col: 16, offset: 34527},
								expr: &ruleRefExpr{
									pos:  position{line: 988, col: 17, offset: 34528},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 992, col: 1, offset: 34666},
			expr: &actionExpr{
				pos: position{line: 993, col: 5, offset: 34694},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 993, col: 5, offset: 34694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 993, col: 5, offset: 34694},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 993, col: 15, offset: 34704},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 993, col: 15, offset: 34704},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 993, col: 20, offset: 34709},
										expr: &ruleRefExpr{
											pos:  position{line: 993, col: 20, offset: 34709},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 993, col: 36, offset: 34725},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 997, col: 1, offset: 34800},
			expr: &actionExpr{
				pos: position{line: 997, col: 23, offset: 34822},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 997, col: 23, offset: 34822},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 997, col: 33, offset: 34832},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 1002, col: 1, offset: 34957},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 35015},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 35015},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 35015},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 5, offset: 35015},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1004, col: 16, offset: 35026},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 17, offset: 35027},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 30, offset: 35040},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 33, offset: 35043},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 49, offset: 35059},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 54, offset: 35064},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 61, offset: 35071},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 35275},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 35275},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1008, col: 5, offset: 35275},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1008, col: 16, offset: 35286},
										expr: &ruleRefExpr{
											pos:  position{line: 1008, col: 17, offset: 35287},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 30, offset: 35300},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 37, offset: 35307},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 1012, col: 1, offset: 35412},
			expr: &actionExpr{
				pos: position{line: 1012, col: 28, offset: 35439},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1012, col: 28, offset: 35439},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1012, col: 28, offset: 35439},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 39, offset: 35450},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 59, offset: 35470},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1012, col: 70, offset: 35481},
								expr: &seqExpr{
									pos: position{line: 1012, col: 71, offset: 35482},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1012, col: 71, offset: 35482},
											expr: &ruleRefExpr{
												pos:  position{line: 1012, col: 72, offset: 35483},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1012, col: 93, offset: 35504},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 1016, col: 1, offset: 35614},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 5, offset: 35668},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 35668},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 35668},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1018, col: 5, offset: 35668},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1018, col: 16, offset: 35679},
										expr: &ruleRefExpr{
											pos:  position{line: 1018, col: 17, offset: 35680},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1019, col: 5, offset: 35698},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 5, offset: 35910},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 8, offset: 35913},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1026, col: 24, offset: 35929},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 29, offset: 35934},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1026, col: 35, offset: 35940},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 36, offset: 35941},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 36137},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 36137},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 36137},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1030, col: 16, offset: 36148},
										expr: &ruleRefExpr{
											pos:  position{line: 1030, col: 17, offset: 36149},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1031, col: 5, offset: 36167},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 1038, col: 5, offset: 36379},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1038, col: 11, offset: 36385},
										expr: &ruleRefExpr{
											pos:  position{line: 1038, col: 12, offset: 36386},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1042, col: 1, offset: 36491},
			expr: &actionExpr{
				pos: position{line: 1042, col: 19, offset: 36509},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 19, offset: 36509},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1042, col: 19, offset: 36509},
							expr: &ruleRefExpr{
								pos:  position{line: 1042, col: 20, offset: 36510},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1043, col: 5, offset: 36525},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1043, col: 15, offset: 36535},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1043, col: 15, offset: 36535},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1043, col: 15, offset: 36535},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1043, col: 24, offset: 36544},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1045, col: 9, offset: 36638},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1045, col: 9, offset: 36638},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1045, col: 9, offset: 36638},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1045, col: 18, offset: 36647},
														expr: &ruleRefExpr{
															pos:  position{line: 1045, col: 19, offset: 36648},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1045, col: 35, offset: 36664},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1051, col: 1, offset: 36787},
			expr: &actionExpr{
				pos: position{line: 1052, col: 5, offset: 36811},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1052, col: 5, offset: 36811},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1052, col: 14, offset: 36820},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1052, col: 14, offset: 36820},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1053, col: 11, offset: 36872},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1054, col: 11, offset: 36918},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 11, offset: 36918},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1055, col: 11, offset: 36937},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1055, col: 11, offset: 36937},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 12, offset: 36938},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1056, col: 13, offset: 36957},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1056, col: 13, offset: 36957},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1057, col: 15, offset: 36985},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1058, col: 15, offset: 37011},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1059, col: 15, offset: 37033},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1060, col: 15, offset: 37059},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1061, col: 15, offset: 37087},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1062, col: 15, offset: 37108},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1063, col: 15, offset: 37142},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1064, col: 15, offset: 37173},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1065, col: 15, offset: 37204},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1066, col: 15, offset: 37236},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1067, col: 15, offset: 37274},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1068, col: 15, offset: 37305},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1069, col: 15, offset: 37339},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1070, col: 15, offset: 37364},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1071, col: 15, offset: 37397},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1078, col: 1, offset: 37627},
			expr: &actionExpr{
				pos: position{line: 1078, col: 14, offset: 37640},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 14, offset: 37640},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1078, col: 14, offset: 37640},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1078, col: 20, offset: 37646},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1078, col: 24, offset: 37650},
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 24, offset: 37650},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1078, col: 31, offset: 37657},
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 32, offset: 37658},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1085, col: 1, offset: 37949},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 15, offset: 37963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 15, offset: 37963},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 41, offset: 37989},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 65, offset: 38013},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1087, col: 1, offset: 38034},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 32, offset: 38065},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1087, col: 32, offset: 38065},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1087, col: 32, offset: 38065},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1087, col: 36, offset: 38069},
								expr: &litMatcher{
									pos:        position{line: 1087, col: 37, offset: 38070},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1087, col: 43, offset: 38076},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1087, col: 43, offset: 38076},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1087, col: 47, offset: 38080},
								expr: &litMatcher{
									pos:        position{line: 1087, col: 48, offset: 38081},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1087, col: 54, offset: 38087},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1087, col: 54, offset: 38087},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1087, col: 58, offset: 38091},
								expr: &litMatcher{
									pos:        position{line: 1087, col: 59, offset: 38092},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1087, col: 65, offset: 38098},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1087, col: 65, offset: 38098},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1087, col: 69, offset: 38102},
								expr: &litMatcher{
									pos:        position{line: 1087, col: 70, offset: 38103},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1089, col: 1, offset: 38110},
			expr: &choiceExpr{
				pos: position{line: 1089, col: 34, offset: 38143},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1089, col: 34, offset: 38143},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1089, col: 41, offset: 38150},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1089, col: 48, offset: 38157},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1089, col: 55, offset: 38164},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1089, col: 62, offset: 38171},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1089, col: 68, offset: 38177},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1091, col: 1, offset: 38184},
			expr: &actionExpr{
				pos: position{line: 1091, col: 26, offset: 38209},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1091, col: 26, offset: 38209},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1091, col: 32, offset: 38215},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1091, col: 32, offset: 38215},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1092, col: 15, offset: 38251},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1093, col: 15, offset: 38288},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 15, offset: 38325},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1095, col: 15, offset: 38366},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1096, col: 15, offset: 38396},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 15, offset: 38428},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1101, col: 1, offset: 38586},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 28, offset: 38613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1101, col: 28, offset: 38613},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 15, offset: 38648},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 15, offset: 38685},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 15, offset: 38722},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1106, col: 1, offset: 38750},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 22, offset: 38771},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1106, col: 22, offset: 38771},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 15, offset: 38803},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 15, offset: 38836},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 15, offset: 38869},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 15, offset: 38906},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 15, offset: 38943},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1113, col: 1, offset: 38969},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 33, offset: 39001},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1113, col: 33, offset: 39001},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1113, col: 39, offset: 39007},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1113, col: 39, offset: 39007},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1117, col: 1, offset: 39144},
			expr: &actionExpr{
				pos: position{line: 1117, col: 25, offset: 39168},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1117, col: 25, offset: 39168},
					expr: &litMatcher{
						pos:        position{line: 1117, col: 25, offset: 39168},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1121, col: 1, offset: 39213},
			expr: &actionExpr{
				pos: position{line: 1121, col: 25, offset: 39237},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 25, offset: 39237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 25, offset: 39237},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1121, col: 30, offset: 39242},
							expr: &litMatcher{
								pos:        position{line: 1121, col: 30, offset: 39242},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1129, col: 1, offset: 39347},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 13, offset: 39359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 13, offset: 39359},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 35, offset: 39381},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1131, col: 1, offset: 39450},
			expr: &actionExpr{
				pos: position{line: 1131, col: 24, offset: 39473},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 24, offset: 39473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1131, col: 24, offset: 39473},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1131, col: 30, offset: 39479},
								expr: &ruleRefExpr{
									pos:  position{line: 1131, col: 31, offset: 39480},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 49, offset: 39498},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 54, offset: 39503},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 64, offset: 39513},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 93, offset: 39542},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1135, col: 1, offset: 39633},
			expr: &seqExpr{
				pos: position{line: 1135, col: 32, offset: 39664},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1135, col: 32, offset: 39664},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1135, col: 59, offset: 39691},
						expr: &seqExpr{
							pos: position{line: 1135, col: 60, offset: 39692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1135, col: 60, offset: 39692},
									expr: &litMatcher{
										pos:        position{line: 1135, col: 62, offset: 39694},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1135, col: 69, offset: 39701},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1135, col: 69, offset: 39701},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1135, col: 77, offset: 39709},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1137, col: 1, offset: 39776},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 31, offset: 39806},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1137, col: 31, offset: 39806},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1138, col: 11, offset: 39822},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1138, col: 11, offset: 39822},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1138, col: 19, offset: 39830},
								expr: &ruleRefExpr{
									pos:  position{line: 1138, col: 20, offset: 39831},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 39850},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 39881},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 39905},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 39927},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 39949},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 39974},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 39999},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40026},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40044},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 40066},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40089},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40105},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40134},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40167},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 40196},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1156, col: 1, offset: 40238},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 5, offset: 40283},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1157, col: 5, offset: 40283},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1158, col: 7, offset: 40381},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1158, col: 7, offset: 40381},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 7, offset: 40381},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1158, col: 12, offset: 40386},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1162, col: 1, offset: 40553},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 24, offset: 40576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1162, col: 24, offset: 40576},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1162, col: 24, offset: 40576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 24, offset: 40576},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1162, col: 30, offset: 40582},
										expr: &ruleRefExpr{
											pos:  position{line: 1162, col: 31, offset: 40583},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1162, col: 51, offset: 40603},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1162, col: 51, offset: 40603},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1162, col: 55, offset: 40607},
											expr: &litMatcher{
												pos:        position{line: 1162, col: 56, offset: 40608},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 61, offset: 40613},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 71, offset: 40623},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 100, offset: 40652},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1162, col: 104, offset: 40656},
									expr: &notExpr{
										pos: position{line: 1162, col: 106, offset: 40658},
										expr: &ruleRefExpr{
											pos:  position{line: 1162, col: 107, offset: 40659},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 40855},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 40855},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1164, col: 5, offset: 40855},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1164, col: 11, offset: 40861},
										expr: &ruleRefExpr{
											pos:  position{line: 1164, col: 12, offset: 40862},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 30, offset: 40880},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 34, offset: 40884},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1164, col: 44, offset: 40894},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1164, col: 44, offset: 40894},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1164, col: 48, offset: 40898},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 77, offset: 40927},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1168, col: 1, offset: 41137},
			expr: &seqExpr{
				pos: position{line: 1168, col: 32, offset: 41168},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1168, col: 32, offset: 41168},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 33, offset: 41169},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1168, col: 39, offset: 41175},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 39, offset: 41175},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1170, col: 1, offset: 41206},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 31, offset: 41236},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 31, offset: 41236},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1171, col: 11, offset: 41252},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1171, col: 11, offset: 41252},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1171, col: 19, offset: 41260},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 20, offset: 41261},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 41280},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 41311},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1174, col: 11, offset: 41335},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1174, col: 11, offset: 41335},
								expr: &ruleRefExpr{
									pos:  position{line: 1174, col: 11, offset: 41335},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1174, col: 18, offset: 41342},
								expr: &seqExpr{
									pos: position{line: 1174, col: 19, offset: 41343},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1174, col: 19, offset: 41343},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1174, col: 23, offset: 41347},
											expr: &litMatcher{
												pos:        position{line: 1174, col: 24, offset: 41348},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 41365},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 41387},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 41409},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 41434},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 41459},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 41486},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 41504},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 41526},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 41550},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 41568},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 41597},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 41630},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 11, offset: 41659},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1189, col: 1, offset: 41699},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 41744},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1190, col: 5, offset: 41744},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1191, col: 7, offset: 41842},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1191, col: 7, offset: 41842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 7, offset: 41842},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1191, col: 11, offset: 41846},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1195, col: 1, offset: 42013},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 42038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 42038},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 42038},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 5, offset: 42038},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 18, offset: 42051},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 40, offset: 42073},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 45, offset: 42078},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 55, offset: 42088},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 84, offset: 42117},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 9, offset: 42276},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1198, col: 9, offset: 42276},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1198, col: 9, offset: 42276},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 22, offset: 42289},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 44, offset: 42311},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 49, offset: 42316},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 59, offset: 42326},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 88, offset: 42355},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 9, offset: 42558},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1201, col: 9, offset: 42558},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1201, col: 9, offset: 42558},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 22, offset: 42571},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 44, offset: 42593},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 48, offset: 42597},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 58, offset: 42607},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 87, offset: 42636},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1209, col: 1, offset: 42852},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 15, offset: 42866},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 15, offset: 42866},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 39, offset: 42890},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1211, col: 1, offset: 42915},
			expr: &actionExpr{
				pos: position{line: 1211, col: 26, offset: 42940},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 26, offset: 42940},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1211, col: 26, offset: 42940},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1211, col: 32, offset: 42946},
								expr: &ruleRefExpr{
									pos:  position{line: 1211, col: 33, offset: 42947},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1211, col: 51, offset: 42965},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 56, offset: 42970},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 66, offset: 42980},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1211, col: 97, offset: 43011},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1215, col: 1, offset: 43149},
			expr: &seqExpr{
				pos: position{line: 1215, col: 34, offset: 43182},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 34, offset: 43182},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1215, col: 63, offset: 43211},
						expr: &seqExpr{
							pos: position{line: 1215, col: 64, offset: 43212},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1215, col: 64, offset: 43212},
									expr: &litMatcher{
										pos:        position{line: 1215, col: 66, offset: 43214},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1215, col: 73, offset: 43221},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1215, col: 73, offset: 43221},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1215, col: 81, offset: 43229},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1217, col: 1, offset: 43298},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 33, offset: 43330},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 33, offset: 43330},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1218, col: 11, offset: 43346},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1218, col: 11, offset: 43346},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1218, col: 19, offset: 43354},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 20, offset: 43355},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 43374},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 43407},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 43431},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 43451},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 43473},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 43498},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 43523},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 43550},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 43568},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 43590},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 43614},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43631},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 43660},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 43689},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1234, col: 1, offset: 43731},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 5, offset: 43778},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1235, col: 5, offset: 43778},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1236, col: 7, offset: 43878},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1236, col: 7, offset: 43878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 7, offset: 43878},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 12, offset: 43883},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1240, col: 1, offset: 44052},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 26, offset: 44077},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 26, offset: 44077},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 26, offset: 44077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1240, col: 26, offset: 44077},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1240, col: 32, offset: 44083},
										expr: &ruleRefExpr{
											pos:  position{line: 1240, col: 33, offset: 44084},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1240, col: 52, offset: 44103},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1240, col: 52, offset: 44103},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1240, col: 56, offset: 44107},
											expr: &litMatcher{
												pos:        position{line: 1240, col: 57, offset: 44108},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 62, offset: 44113},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 72, offset: 44123},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 103, offset: 44154},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 44346},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 44346},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 44346},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1242, col: 11, offset: 44352},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 12, offset: 44353},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 30, offset: 44371},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 34, offset: 44375},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1242, col: 44, offset: 44385},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1242, col: 44, offset: 44385},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1242, col: 48, offset: 44389},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 79, offset: 44420},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1246, col: 1, offset: 44634},
			expr: &seqExpr{
				pos: position{line: 1246, col: 34, offset: 44667},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1246, col: 34, offset: 44667},
						expr: &ruleRefExpr{
							pos:  position{line: 1246, col: 35, offset: 44668},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1246, col: 41, offset: 44674},
						expr: &ruleRefExpr{
							pos:  position{line: 1246, col: 41, offset: 44674},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1248, col: 1, offset: 44707},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 33, offset: 44739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 33, offset: 44739},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1249, col: 11, offset: 44755},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1249, col: 11, offset: 44755},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1249, col: 19, offset: 44763},
								expr: &ruleRefExpr{
									pos:  position{line: 1249, col: 20, offset: 44764},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 44783},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 44816},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1252, col: 11, offset: 44840},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1252, col: 11, offset: 44840},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 11, offset: 44840},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1252, col: 18, offset: 44847},
								expr: &seqExpr{
									pos: position{line: 1252, col: 19, offset: 44848},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1252, col: 19, offset: 44848},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1252, col: 23, offset: 44852},
											expr: &litMatcher{
												pos:        position{line: 1252, col: 24, offset: 44853},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 44870},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 44890},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 44912},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 44937},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 44962},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 44989},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 45007},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 45029},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 45053},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 45071},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 45101},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 45134},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 45163},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1267, col: 1, offset: 45205},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 45252},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1268, col: 5, offset: 45252},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1269, col: 7, offset: 45352},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1269, col: 7, offset: 45352},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 7, offset: 45352},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1269, col: 11, offset: 45356},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1273, col: 1, offset: 45526},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 45553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 5, offset: 45553},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 5, offset: 45553},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 5, offset: 45553},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 18, offset: 45566},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 40, offset: 45588},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 45, offset: 45593},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 55, offset: 45603},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 86, offset: 45634},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 9, offset: 45793},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1276, col: 9, offset: 45793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 9, offset: 45793},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 45806},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 44, offset: 45828},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 49, offset: 45833},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 59, offset: 45843},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 90, offset: 45874},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1279, col: 9, offset: 46077},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1279, col: 9, offset: 46077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 9, offset: 46077},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 22, offset: 46090},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 44, offset: 46112},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 48, offset: 46116},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 58, offset: 46126},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 89, offset: 46157},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1286, col: 1, offset: 46374},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 18, offset: 46391},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1286, col: 18, offset: 46391},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 45, offset: 46418},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1288, col: 1, offset: 46446},
			expr: &actionExpr{
				pos: position{line: 1288, col: 29, offset: 46474},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 29, offset: 46474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1288, col: 29, offset: 46474},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 35, offset: 46480},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 36, offset: 46481},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1288, col: 54, offset: 46499},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 59, offset: 46504},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 69, offset: 46514},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1288, col: 103, offset: 46548},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1292, col: 1, offset: 46689},
			expr: &seqExpr{
				pos: position{line: 1292, col: 37, offset: 46725},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 37, offset: 46725},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1292, col: 69, offset: 46757},
						expr: &seqExpr{
							pos: position{line: 1292, col: 70, offset: 46758},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1292, col: 70, offset: 46758},
									expr: &litMatcher{
										pos:        position{line: 1292, col: 72, offset: 46760},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1292, col: 79, offset: 46767},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1292, col: 79, offset: 46767},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1292, col: 87, offset: 46775},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1294, col: 1, offset: 46846},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 36, offset: 46881},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 36, offset: 46881},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1295, col: 11, offset: 46897},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1295, col: 11, offset: 46897},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1295, col: 19, offset: 46905},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 20, offset: 46906},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 46925},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 46943},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 46979},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 47003},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 47023},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 47045},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 47067},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 47092},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 47119},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 47141},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 47164},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 47180},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 47210},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 47239},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1311, col: 1, offset: 47284},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 47334},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1312, col: 5, offset: 47334},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1313, col: 7, offset: 47437},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1313, col: 7, offset: 47437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1313, col: 7, offset: 47437},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 12, offset: 47442},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1317, col: 1, offset: 47614},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 29, offset: 47642},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1317, col: 29, offset: 47642},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1317, col: 29, offset: 47642},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1317, col: 29, offset: 47642},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1317, col: 35, offset: 47648},
										expr: &ruleRefExpr{
											pos:  position{line: 1317, col: 36, offset: 47649},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1317, col: 55, offset: 47668},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1317, col: 55, offset: 47668},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1317, col: 59, offset: 47672},
											expr: &litMatcher{
												pos:        position{line: 1317, col: 60, offset: 47673},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 65, offset: 47678},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1317, col: 75, offset: 47688},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1317, col: 109, offset: 47722},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 47917},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1319, col: 5, offset: 47917},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1319, col: 5, offset: 47917},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1319, col: 11, offset: 47923},
										expr: &ruleRefExpr{
											pos:  position{line: 1319, col: 12, offset: 47924},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 30, offset: 47942},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1319, col: 34, offset: 47946},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1319, col: 44, offset: 47956},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1319, col: 44, offset: 47956},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1319, col: 48, offset: 47960},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 82, offset: 47994},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1323, col: 1, offset: 48212},
			expr: &seqExpr{
				pos: position{line: 1323, col: 37, offset: 48248},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1323, col: 37, offset: 48248},
						expr: &ruleRefExpr{
							pos:  position{line: 1323, col: 38, offset: 48249},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1323, col: 44, offset: 48255},
						expr: &ruleRefExpr{
							pos:  position{line: 1323, col: 44, offset: 48255},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1325, col: 1, offset: 48291},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 37, offset: 48327},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 37, offset: 48327},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1326, col: 11, offset: 48343},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1326, col: 11, offset: 48343},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1326, col: 19, offset: 48351},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 20, offset: 48352},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 48371},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 48407},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1329, col: 11, offset: 48431},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1329, col: 11, offset: 48431},
								expr: &ruleRefExpr{
									pos:  position{line: 1329, col: 11, offset: 48431},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1329, col: 18, offset: 48438},
								expr: &seqExpr{
									pos: position{line: 1329, col: 19, offset: 48439},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1329, col: 19, offset: 48439},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1329, col: 23, offset: 48443},
											expr: &litMatcher{
												pos:        position{line: 1329, col: 24, offset: 48444},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 48573},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 48593},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 48615},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 48637},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 48662},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1335, col: 11, offset: 48689},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1335, col: 11, offset: 48689},
								expr: &litMatcher{
									pos:        position{line: 1335, col: 12, offset: 48690},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1335, col: 16, offset: 48694},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 48712},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 48734},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 48758},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 48775},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 48805},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 48838},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 48867},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1344, col: 1, offset: 48912},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 48962},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1345, col: 5, offset: 48962},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1346, col: 7, offset: 49065},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1346, col: 7, offset: 49065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 7, offset: 49065},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1346, col: 11, offset: 49069},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1350, col: 1, offset: 49242},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 49272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1351, col: 5, offset: 49272},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1351, col: 5, offset: 49272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1351, col: 5, offset: 49272},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 18, offset: 49285},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1351, col: 40, offset: 49307},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1351, col: 45, offset: 49312},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 55, offset: 49322},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1351, col: 89, offset: 49356},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 9, offset: 49515},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1353, col: 9, offset: 49515},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1353, col: 9, offset: 49515},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 22, offset: 49528},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 44, offset: 49550},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 49, offset: 49555},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 59, offset: 49565},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 93, offset: 49599},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1356, col: 9, offset: 49802},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1356, col: 9, offset: 49802},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1356, col: 9, offset: 49802},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 22, offset: 49815},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 44, offset: 49837},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 48, offset: 49841},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 58, offset: 49851},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 92, offset: 49885},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1364, col: 1, offset: 50101},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 15, offset: 50115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1364, col: 15, offset: 50115},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 39, offset: 50139},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1366, col: 1, offset: 50164},
			expr: &actionExpr{
				pos: position{line: 1366, col: 26, offset: 50189},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 26, offset: 50189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1366, col: 26, offset: 50189},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1366, col: 32, offset: 50195},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 33, offset: 50196},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1366, col: 51, offset: 50214},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 56, offset: 50219},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 66, offset: 50229},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1366, col: 97, offset: 50260},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1370, col: 1, offset: 50398},
			expr: &seqExpr{
				pos: position{line: 1370, col: 34, offset: 50431},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 34, offset: 50431},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1370, col: 63, offset: 50460},
						expr: &seqExpr{
							pos: position{line: 1370, col: 64, offset: 50461},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1370, col: 64, offset: 50461},
									expr: &litMatcher{
										pos:        position{line: 1370, col: 66, offset: 50463},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1370, col: 73, offset: 50470},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1370, col: 73, offset: 50470},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1370, col: 81, offset: 50478},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1372, col: 1, offset: 50547},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 33, offset: 50579},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1372, col: 33, offset: 50579},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 50595},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1374, col: 11, offset: 50628},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1374, col: 11, offset: 50628},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1374, col: 19, offset: 50636},
								expr: &ruleRefExpr{
									pos:  position{line: 1374, col: 20, offset: 50637},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 50656},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 50680},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50700},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 50722},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 50747},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 50772},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 50799},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 50817},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 50839},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 11, offset: 50862},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 50878},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 50907},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 11, offset: 50936},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1389, col: 1, offset: 50978},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 5, offset: 51025},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1390, col: 5, offset: 51025},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1391, col: 7, offset: 51125},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1391, col: 7, offset: 51125},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1391, col: 7, offset: 51125},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 12, offset: 51130},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1395, col: 1, offset: 51299},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 26, offset: 51324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1395, col: 26, offset: 51324},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1395, col: 26, offset: 51324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1395, col: 26, offset: 51324},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1395, col: 32, offset: 51330},
										expr: &ruleRefExpr{
											pos:  position{line: 1395, col: 33, offset: 51331},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1395, col: 52, offset: 51350},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1395, col: 52, offset: 51350},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1395, col: 56, offset: 51354},
											expr: &litMatcher{
												pos:        position{line: 1395, col: 57, offset: 51355},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1395, col: 62, offset: 51360},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1395, col: 72, offset: 51370},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1395, col: 103, offset: 51401},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1397, col: 5, offset: 51593},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1397, col: 5, offset: 51593},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1397, col: 5, offset: 51593},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1397, col: 11, offset: 51599},
										expr: &ruleRefExpr{
											pos:  position{line: 1397, col: 12, offset: 51600},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 30, offset: 51618},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1397, col: 34, offset: 51622},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1397, col: 44, offset: 51632},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1397, col: 44, offset: 51632},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1397, col: 48, offset: 51636},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 79, offset: 51667},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1401, col: 1, offset: 51880},
			expr: &seqExpr{
				pos: position{line: 1401, col: 34, offset: 51913},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1401, col: 34, offset: 51913},
						expr: &ruleRefExpr{
							pos:  position{line: 1401, col: 35, offset: 51914},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1401, col: 41, offset: 51920},
						expr: &ruleRefExpr{
							pos:  position{line: 1401, col: 41, offset: 51920},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1403, col: 1, offset: 51953},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 33, offset: 51985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 33, offset: 51985},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 11, offset: 52001},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1405, col: 11, offset: 52034},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1405, col: 11, offset: 52034},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1405, col: 19, offset: 52042},
								expr: &ruleRefExpr{
									pos:  position{line: 1405, col: 20, offset: 52043},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 52062},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1407, col: 11, offset: 52086},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1407, col: 11, offset: 52086},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 11, offset: 52086},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1407, col: 18, offset: 52093},
								expr: &seqExpr{
									pos: position{line: 1407, col: 19, offset: 52094},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1407, col: 19, offset: 52094},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1407, col: 23, offset: 52098},
											expr: &litMatcher{
												pos:        position{line: 1407, col: 24, offset: 52099},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 52116},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 52136},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 11, offset: 52158},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 11, offset: 52183},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 11, offset: 52208},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 52235},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 52253},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 11, offset: 52275},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 11, offset: 52298},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 52314},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 11, offset: 52343},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 52376},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 11, offset: 52405},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1422, col: 1, offset: 52447},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 5, offset: 52494},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1423, col: 5, offset: 52494},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1424, col: 7, offset: 52592},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1424, col: 7, offset: 52592},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1424, col: 7, offset: 52592},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 11, offset: 52596},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1428, col: 1, offset: 52763},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 5, offset: 52789},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 52789},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1429, col: 5, offset: 52789},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1429, col: 5, offset: 52789},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 18, offset: 52802},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 40, offset: 52824},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 45, offset: 52829},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 55, offset: 52839},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 86, offset: 52870},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1431, col: 9, offset: 53029},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1431, col: 9, offset: 53029},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1431, col: 9, offset: 53029},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 22, offset: 53042},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1431, col: 44, offset: 53064},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1431, col: 49, offset: 53069},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 59, offset: 53079},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1431, col: 90, offset: 53110},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1434, col: 9, offset: 53313},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1434, col: 9, offset: 53313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1434, col: 9, offset: 53313},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 22, offset: 53326},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 44, offset: 53348},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 48, offset: 53352},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 58, offset: 53362},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 89, offset: 53393},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1439, col: 1, offset: 53548},
			expr: &actionExpr{
				pos: position{line: 1439, col: 18, offset: 53565},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 18, offset: 53565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1439, col: 18, offset: 53565},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1439, col: 24, offset: 53571},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 25, offset: 53572},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1439, col: 43, offset: 53590},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 47, offset: 53594},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 56, offset: 53603},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1439, col: 78, offset: 53625},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1443, col: 1, offset: 53725},
			expr: &choiceExpr{
				pos: position{line: 1443, col: 25, offset: 53749},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1443, col: 25, offset: 53749},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 38, offset: 53762},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1445, col: 1, offset: 53783},
			expr: &actionExpr{
				pos: position{line: 1445, col: 21, offset: 53803},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1445, col: 21, offset: 53803},
					expr: &charClassMatcher{
						pos:        position{line: 1445, col: 21, offset: 53803},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1449, col: 1, offset: 53884},
			expr: &actionExpr{
				pos: position{line: 1449, col: 25, offset: 53908},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 25, offset: 53908},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1449, col: 25, offset: 53908},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 38, offset: 53921},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1449, col: 60, offset: 53943},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 64, offset: 53947},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 73, offset: 53956},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1449, col: 95, offset: 53978},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1453, col: 1, offset: 54111},
			expr: &actionExpr{
				pos: position{line: 1453, col: 20, offset: 54130},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1453, col: 20, offset: 54130},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1453, col: 20, offset: 54130},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1453, col: 26, offset: 54136},
								expr: &ruleRefExpr{
									pos:  position{line: 1453, col: 27, offset: 54137},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1453, col: 45, offset: 54155},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 49, offset: 54159},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1453, col: 58, offset: 54168},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1453, col: 82, offset: 54192},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1457, col: 1, offset: 54294},
			expr: &choiceExpr{
				pos: position{line: 1457, col: 27, offset: 54320},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1457, col: 27, offset: 54320},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 40, offset: 54333},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1459, col: 1, offset: 54356},
			expr: &actionExpr{
				pos: position{line: 1459, col: 23, offset: 54378},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1459, col: 23, offset: 54378},
					expr: &charClassMatcher{
						pos:        position{line: 1459, col: 23, offset: 54378},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1463, col: 1, offset: 54459},
			expr: &actionExpr{
				pos: position{line: 1463, col: 27, offset: 54485},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 27, offset: 54485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1463, col: 27, offset: 54485},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 40, offset: 54498},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1463, col: 62, offset: 54520},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 66, offset: 54524},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 75, offset: 54533},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1463, col: 99, offset: 54557},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1470, col: 1, offset: 54806},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 22, offset: 54827},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 22, offset: 54827},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 46, offset: 54851},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 70, offset: 54875},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1472, col: 1, offset: 54895},
			expr: &litMatcher{
				pos:        position{line: 1472, col: 32, offset: 54926},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1474, col: 1, offset: 54933},
			expr: &actionExpr{
				pos: position{line: 1474, col: 26, offset: 54958},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 26, offset: 54958},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1474, col: 26, offset: 54958},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 54, offset: 54986},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 63, offset: 54995},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1474, col: 93, offset: 55025},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1474, col: 121, offset: 55053},
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 122, offset: 55054},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1478, col: 1, offset: 55163},
			expr: &choiceExpr{
				pos: position{line: 1478, col: 33, offset: 55195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1478, col: 34, offset: 55196},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1478, col: 34, offset: 55196},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1478, col: 35, offset: 55197},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1478, col: 35, offset: 55197},
											expr: &ruleRefExpr{
												pos:  position{line: 1478, col: 36, offset: 55198},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1478, col: 64, offset: 55226},
											expr: &ruleRefExpr{
												pos:  position{line: 1478, col: 65, offset: 55227},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1478, col: 71, offset: 55233},
											expr: &ruleRefExpr{
												pos:  position{line: 1478, col: 72, offset: 55234},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1478, col: 80, offset: 55242,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1478, col: 83, offset: 55245},
									expr: &seqExpr{
										pos: position{line: 1478, col: 84, offset: 55246},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1478, col: 84, offset: 55246},
												expr: &seqExpr{
													pos: position{line: 1478, col: 86, offset: 55248},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1478, col: 86, offset: 55248},
															expr: &ruleRefExpr{
																pos:  position{line: 1478, col: 86, offset: 55248},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1478, col: 93, offset: 55255},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1478, col: 122, offset: 55284},
												expr: &ruleRefExpr{
													pos:  position{line: 1478, col: 123, offset: 55285},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1478, col: 151, offset: 55313},
												expr: &ruleRefExpr{
													pos:  position{line: 1478, col: 152, offset: 55314},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1478, col: 160, offset: 55322,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1480, col: 7, offset: 55466},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1480, col: 8, offset: 55467},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1480, col: 8, offset: 55467},
									expr: &ruleRefExpr{
										pos:  position{line: 1480, col: 9, offset: 55468},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1480, col: 15, offset: 55474},
									expr: &ruleRefExpr{
										pos:  position{line: 1480, col: 16, offset: 55475},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1480, col: 24, offset: 55483},
									expr: &ruleRefExpr{
										pos:  position{line: 1480, col: 25, offset: 55484},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1480, col: 53, offset: 55512,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1484, col: 1, offset: 55598},
			expr: &litMatcher{
				pos:        position{line: 1484, col: 32, offset: 55629},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1486, col: 1, offset: 55638},
			expr: &actionExpr{
				pos: position{line: 1486, col: 26, offset: 55663},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 26, offset: 55663},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1486, col: 26, offset: 55663},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 54, offset: 55691},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 63, offset: 55700},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1486, col: 93, offset: 55730},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1486, col: 121, offset: 55758},
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 122, offset: 55759},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1490, col: 1, offset: 55868},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 33, offset: 55900},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1490, col: 34, offset: 55901},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1490, col: 34, offset: 55901},
							expr: &seqExpr{
								pos: position{line: 1490, col: 35, offset: 55902},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1490, col: 35, offset: 55902},
										expr: &ruleRefExpr{
											pos:  position{line: 1490, col: 36, offset: 55903},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1490, col: 64, offset: 55931,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1492, col: 7, offset: 56098},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1492, col: 7, offset: 56098},
							expr: &seqExpr{
								pos: position{line: 1492, col: 8, offset: 56099},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1492, col: 8, offset: 56099},
										expr: &ruleRefExpr{
											pos:  position{line: 1492, col: 9, offset: 56100},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1492, col: 15, offset: 56106},
										expr: &ruleRefExpr{
											pos:  position{line: 1492, col: 16, offset: 56107},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1492, col: 24, offset: 56115},
										expr: &ruleRefExpr{
											pos:  position{line: 1492, col: 25, offset: 56116},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1492, col: 53, offset: 56144,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1496, col: 1, offset: 56231},
			expr: &choiceExpr{
				pos: position{line: 1496, col: 21, offset: 56251},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1496, col: 21, offset: 56251},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1496, col: 21, offset: 56251},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1496, col: 21, offset: 56251},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1496, col: 30, offset: 56260},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1496, col: 38, offset: 56268},
										expr: &ruleRefExpr{
											pos:  position{line: 1496, col: 39, offset: 56269},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1496, col: 67, offset: 56297},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1498, col: 5, offset: 56395},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1498, col: 5, offset: 56395},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1498, col: 5, offset: 56395},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1498, col: 15, offset: 56405},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1498, col: 23, offset: 56413},
										expr: &choiceExpr{
											pos: position{line: 1498, col: 24, offset: 56414},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1498, col: 24, offset: 56414},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1498, col: 37, offset: 56427},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1498, col: 65, offset: 56455},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1502, col: 1, offset: 56555},
			expr: &actionExpr{
				pos: position{line: 1502, col: 30, offset: 56584},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1502, col: 30, offset: 56584},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1509, col: 1, offset: 56764},
			expr: &choiceExpr{
				pos: position{line: 1509, col: 19, offset: 56782},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1509, col: 19, offset: 56782},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1509, col: 44, offset: 56807},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1511, col: 1, offset: 56834},
			expr: &choiceExpr{
				pos: position{line: 1511, col: 27, offset: 56860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1511, col: 27, offset: 56860},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1511, col: 27, offset: 56860},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1511, col: 27, offset: 56860},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1511, col: 32, offset: 56865},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1511, col: 36, offset: 56869},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1511, col: 40, offset: 56873},
									expr: &ruleRefExpr{
										pos:  position{line: 1511, col: 40, offset: 56873},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1511, col: 47, offset: 56880},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1511, col: 51, offset: 56884},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1511, col: 58, offset: 56891},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1511, col: 79, offset: 56912},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1513, col: 5, offset: 56997},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1513, col: 5, offset: 56997},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1513, col: 5, offset: 56997},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 10, offset: 57002},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 14, offset: 57006},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1513, col: 18, offset: 57010},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1517, col: 1, offset: 57086},
			expr: &actionExpr{
				pos: position{line: 1517, col: 27, offset: 57112},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 27, offset: 57112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1517, col: 27, offset: 57112},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 35, offset: 57120},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 40, offset: 57125},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 54, offset: 57139},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 72, offset: 57157},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1521, col: 1, offset: 57284},
			expr: &ruleRefExpr{
				pos:  position{line: 1521, col: 24, offset: 57307},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1526, col: 1, offset: 57434},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 9, offset: 57442},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1526, col: 9, offset: 57442},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 24, offset: 57457},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1529, col: 1, offset: 57541},
			expr: &actionExpr{
				pos: position{line: 1529, col: 17, offset: 57557},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 17, offset: 57557},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1529, col: 17, offset: 57557},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 25, offset: 57565},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 30, offset: 57570},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 40, offset: 57580},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 58, offset: 57598},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1533, col: 1, offset: 57713},
			expr: &actionExpr{
				pos: position{line: 1533, col: 17, offset: 57729},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 17, offset: 57729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1533, col: 17, offset: 57729},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 22, offset: 57734},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 42, offset: 57754},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 59, offset: 57771},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 60, offset: 57772},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1537, col: 1, offset: 57869},
			expr: &actionExpr{
				pos: position{line: 1537, col: 19, offset: 57887},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 19, offset: 57887},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1537, col: 19, offset: 57887},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 23, offset: 57891},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1537, col: 33, offset: 57901},
								expr: &ruleRefExpr{
									pos:  position{line: 1537, col: 34, offset: 57902},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1538, col: 5, offset: 57935},
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 5, offset: 57935},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 12, offset: 57942},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1538, col: 23, offset: 57953},
								expr: &ruleRefExpr{
									pos:  position{line: 1538, col: 24, offset: 57954},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1538, col: 43, offset: 57973},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1542, col: 1, offset: 58094},
			expr: &actionExpr{
				pos: position{line: 1542, col: 30, offset: 58123},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1542, col: 30, offset: 58123},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1544, col: 5, offset: 58176},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1544, col: 6, offset: 58177},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1544, col: 6, offset: 58177},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1544, col: 6, offset: 58177},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1544, col: 11, offset: 58182},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1544, col: 20, offset: 58191},
												expr: &choiceExpr{
													pos: position{line: 1544, col: 21, offset: 58192},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1544, col: 21, offset: 58192},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1544, col: 36, offset: 58207},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1544, col: 49, offset: 58220},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1544, col: 71, offset: 58242},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1544, col: 76, offset: 58247},
											expr: &notExpr{
												pos: position{line: 1544, col: 78, offset: 58249},
												expr: &litMatcher{
													pos:        position{line: 1544, col: 79, offset: 58250},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1544, col: 84, offset: 58255},
											expr: &litMatcher{
												pos:        position{line: 1544, col: 84, offset: 58255},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1548, col: 6, offset: 58386},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1548, col: 6, offset: 58386},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1548, col: 6, offset: 58386},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1548, col: 15, offset: 58395},
												expr: &choiceExpr{
													pos: position{line: 1548, col: 16, offset: 58396},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1548, col: 16, offset: 58396},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1548, col: 31, offset: 58411},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1548, col: 44, offset: 58424},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1548, col: 68, offset: 58448},
											expr: &notExpr{
												pos: position{line: 1548, col: 70, offset: 58450},
												expr: &litMatcher{
													pos:        position{line: 1548, col: 71, offset: 58451},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1548, col: 76, offset: 58456},
											expr: &litMatcher{
												pos:        position{line: 1548, col: 76, offset: 58456},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1554, col: 1, offset: 58576},
			expr: &actionExpr{
				pos: position{line: 1554, col: 18, offset: 58593},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1554, col: 18, offset: 58593},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1558, col: 1, offset: 58683},
			expr: &actionExpr{
				pos: position{line: 1558, col: 24, offset: 58706},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1558, col: 24, offset: 58706},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1562, col: 1, offset: 58803},
			expr: &actionExpr{
				pos: position{line: 1562, col: 26, offset: 58828},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1562, col: 26, offset: 58828},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1567, col: 1, offset: 58989},
			expr: &actionExpr{
				pos: position{line: 1568, col: 5, offset: 59009},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 5, offset: 59009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1568, col: 5, offset: 59009},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1568, col: 14, offset: 59018},
								expr: &choiceExpr{
									pos: position{line: 1568, col: 15, offset: 59019},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1568, col: 15, offset: 59019},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1569, col: 11, offset: 59035},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1570, col: 11, offset: 59053},
											expr: &ruleRefExpr{
												pos:  position{line: 1570, col: 11, offset: 59053},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1571, col: 11, offset: 59072},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1572, col: 11, offset: 59097},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1573, col: 11, offset: 59120},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1574, col: 11, offset: 59149},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1575, col: 11, offset: 59168},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1575, col: 21, offset: 59178},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1579, col: 1, offset: 59252},
			expr: &choiceExpr{
				pos: position{line: 1579, col: 17, offset: 59268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1579, col: 17, offset: 59268},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1579, col: 40, offset: 59291},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1582, col: 1, offset: 59422},
			expr: &actionExpr{
				pos: position{line: 1582, col: 25, offset: 59446},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 25, offset: 59446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1582, col: 25, offset: 59446},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 33, offset: 59454},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1582, col: 38, offset: 59459},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1582, col: 38, offset: 59459},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1582, col: 57, offset: 59478},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 79, offset: 59500},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 97, offset: 59518},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1586, col: 1, offset: 59633},
			expr: &actionExpr{
				pos: position{line: 1586, col: 25, offset: 59657},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 25, offset: 59657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1586, col: 25, offset: 59657},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 30, offset: 59662},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 48, offset: 59680},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1586, col: 65, offset: 59697},
								expr: &ruleRefExpr{
									pos:  position{line: 1586, col: 66, offset: 59698},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1593, col: 1, offset: 59900},
			expr: &actionExpr{
				pos: position{line: 1593, col: 15, offset: 59914},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 15, offset: 59914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1593, col: 15, offset: 59914},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1593, col: 26, offset: 59925},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 27, offset: 59926},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 45, offset: 59944},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 55, offset: 59954},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 61, offset: 59960},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 71, offset: 59970},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 84, offset: 59983},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1593, col: 102, offset: 60001},
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 102, offset: 60001},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1593, col: 109, offset: 60008},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1597, col: 1, offset: 60119},
			expr: &actionExpr{
				pos: position{line: 1597, col: 16, offset: 60134},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 16, offset: 60134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1597, col: 16, offset: 60134},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1597, col: 25, offset: 60143},
							expr: &litMatcher{
								pos:        position{line: 1597, col: 26, offset: 60144},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 30, offset: 60148},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 36, offset: 60154},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 46, offset: 60164},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 59, offset: 60177},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1601, col: 1, offset: 60291},
			expr: &actionExpr{
				pos: position{line: 1601, col: 21, offset: 60311},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 21, offset: 60311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1601, col: 21, offset: 60311},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 25, offset: 60315},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 29, offset: 60319},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 44, offset: 60334},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 46, offset: 60336},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 57, offset: 60347},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 59, offset: 60349},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 71, offset: 60361},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 74, offset: 60364},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1601, col: 85, offset: 60375},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1605, col: 1, offset: 60441},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 20, offset: 60460},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1605, col: 20, offset: 60460},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 36, offset: 60476},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 51, offset: 60491},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1607, col: 1, offset: 60504},
			expr: &actionExpr{
				pos: position{line: 1607, col: 18, offset: 60521},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 18, offset: 60521},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1607, col: 18, offset: 60521},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 22, offset: 60525},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1607, col: 29, offset: 60532},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1607, col: 29, offset: 60532},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 29, offset: 60532},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1607, col: 43, offset: 60546},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 43, offset: 60546},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1607, col: 58, offset: 60561},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 58, offset: 60561},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1607, col: 74, offset: 60577},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 74, offset: 60577},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1607, col: 91, offset: 60594},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 91, offset: 60594},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1607, col: 103, offset: 60606},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1607, col: 107, offset: 60610},
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 107, offset: 60610},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1607, col: 114, offset: 60617},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1611, col: 1, offset: 60675},
			expr: &actionExpr{
				pos: position{line: 1611, col: 19, offset: 60693},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1611, col: 19, offset: 60693},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1611, col: 25, offset: 60699},
						expr: &ruleRefExpr{
							pos:  position{line: 1611, col: 25, offset: 60699},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1615, col: 1, offset: 60782},
			expr: &actionExpr{
				pos: position{line: 1615, col: 15, offset: 60796},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 15, offset: 60796},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1615, col: 15, offset: 60796},
							expr: &litMatcher{
								pos:        position{line: 1615, col: 15, offset: 60796},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 20, offset: 60801},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 26, offset: 60807},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 26, offset: 60807},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1619, col: 1, offset: 60892},
			expr: &actionExpr{
				pos: position{line: 1619, col: 16, offset: 60907},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 16, offset: 60907},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1619, col: 16, offset: 60907},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 16, offset: 60907},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 21, offset: 60912},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1619, col: 27, offset: 60918},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 27, offset: 60918},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1623, col: 1, offset: 61004},
			expr: &actionExpr{
				pos: position{line: 1623, col: 17, offset: 61020},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 17, offset: 61020},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1623, col: 17, offset: 61020},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 17, offset: 61020},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 24, offset: 61027},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 30, offset: 61033},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1623, col: 46, offset: 61049},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 46, offset: 61049},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1627, col: 1, offset: 61138},
			expr: &actionExpr{
				pos: position{line: 1627, col: 19, offset: 61156},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 19, offset: 61156},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1627, col: 19, offset: 61156},
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 19, offset: 61156},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1627, col: 26, offset: 61163},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1627, col: 30, offset: 61167},
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 30, offset: 61167},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 37, offset: 61174},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1627, col: 43, offset: 61180},
								expr: &ruleRefExpr{
									pos:  position{line: 1627, col: 43, offset: 61180},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1634, col: 1, offset: 61336},
			expr: &actionExpr{
				pos: position{line: 1634, col: 20, offset: 61355},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 20, offset: 61355},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1634, col: 20, offset: 61355},
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 20, offset: 61355},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1634, col: 27, offset: 61362},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1634, col: 31, offset: 61366},
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 31, offset: 61366},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 38, offset: 61373},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1634, col: 44, offset: 61379},
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 44, offset: 61379},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1645, col: 1, offset: 61733},
			expr: &actionExpr{
				pos: position{line: 1645, col: 15, offset: 61747},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1645, col: 15, offset: 61747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1645, col: 15, offset: 61747},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 23, offset: 61755},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1645, col: 29, offset: 61761},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1645, col: 29, offset: 61761},
									expr: &charClassMatcher{
										pos:        position{line: 1645, col: 29, offset: 61761},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 73, offset: 61805},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 80, offset: 61812},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1649, col: 1, offset: 61898},
			expr: &actionExpr{
				pos: position{line: 1649, col: 14, offset: 61911},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1649, col: 14, offset: 61911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1649, col: 14, offset: 61911},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1649, col: 18, offset: 61915},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1649, col: 23, offset: 61920},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1649, col: 32, offset: 61929},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1649, col: 35, offset: 61932},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1649, col: 46, offset: 61943},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1653, col: 1, offset: 62004},
			expr: &actionExpr{
				pos: position{line: 1653, col: 13, offset: 62016},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1653, col: 13, offset: 62016},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1653, col: 19, offset: 62022},
						expr: &ruleRefExpr{
							pos:  position{line: 1653, col: 19, offset: 62022},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1660, col: 1, offset: 62305},
			expr: &choiceExpr{
				pos: position{line: 1660, col: 19, offset: 62323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1660, col: 19, offset: 62323},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1660, col: 19, offset: 62323},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1660, col: 19, offset: 62323},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 32, offset: 62336},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1660, col: 41, offset: 62345},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 58, offset: 62362},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1662, col: 5, offset: 62432},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1662, col: 5, offset: 62432},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1662, col: 5, offset: 62432},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1662, col: 17, offset: 62444},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1662, col: 22, offset: 62449},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1662, col: 35, offset: 62462},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1662, col: 39, offset: 62466},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1662, col: 47, offset: 62474},
										expr: &ruleRefExpr{
											pos:  position{line: 1662, col: 48, offset: 62475},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1662, col: 66, offset: 62493},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1666, col: 1, offset: 62558},
			expr: &ruleRefExpr{
				pos:  position{line: 1666, col: 16, offset: 62573},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1668, col: 1, offset: 62586},
			expr: &actionExpr{
				pos: position{line: 1668, col: 20, offset: 62605},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1668, col: 20, offset: 62605},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1668, col: 29, offset: 62614},
						expr: &seqExpr{
							pos: position{line: 1668, col: 30, offset: 62615},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1668, col: 30, offset: 62615},
									expr: &litMatcher{
										pos:        position{line: 1668, col: 31, offset: 62616},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1668, col: 35, offset: 62620},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1675, col: 1, offset: 62951},
			expr: &actionExpr{
				pos: position{line: 1675, col: 19, offset: 62969},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 19, offset: 62969},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1675, col: 19, offset: 62969},
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 20, offset: 62970},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 5, offset: 63059},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1676, col: 12, offset: 63066},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1676, col: 12, offset: 63066},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1677, col: 11, offset: 63090},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1678, col: 11, offset: 63115},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1679, col: 11, offset: 63140},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1680, col: 11, offset: 63162},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1681, col: 11, offset: 63186},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1682, col: 11, offset: 63215},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1683, col: 11, offset: 63243},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1684, col: 11, offset: 63260},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1688, col: 1, offset: 63305},
			expr: &choiceExpr{
				pos: position{line: 1688, col: 19, offset: 63323},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1688, col: 19, offset: 63323},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1688, col: 19, offset: 63323},
								expr: &ruleRefExpr{
									pos:  position{line: 1688, col: 21, offset: 63325},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1688, col: 31, offset: 63335},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 19, offset: 63407},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 19, offset: 63448},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 19, offset: 63490},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1692, col: 19, offset: 63532},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1693, col: 19, offset: 63574},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1694, col: 19, offset: 63613},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1695, col: 19, offset: 63654},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1697, col: 1, offset: 63683},
			expr: &choiceExpr{
				pos: position{line: 1697, col: 20, offset: 63702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1697, col: 20, offset: 63702},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1697, col: 36, offset: 63718},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1699, col: 1, offset: 63734},
			expr: &actionExpr{
				pos: position{line: 1699, col: 17, offset: 63750},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1699, col: 17, offset: 63750},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1699, col: 17, offset: 63750},
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 18, offset: 63751},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 22, offset: 63755},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 31, offset: 63764},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 52, offset: 63785},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 61, offset: 63794},
								expr: &ruleRefExpr{
									pos:  position{line: 1699, col: 62, offset: 63795},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 73, offset: 63806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1703, col: 1, offset: 63880},
			expr: &actionExpr{
				pos: position{line: 1703, col: 24, offset: 63903},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1703, col: 24, offset: 63903},
					expr: &seqExpr{
						pos: position{line: 1703, col: 25, offset: 63904},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1703, col: 25, offset: 63904},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 26, offset: 63905},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1703, col: 36, offset: 63915},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1703, col: 36, offset: 63915},
										expr: &ruleRefExpr{
											pos:  position{line: 1703, col: 36, offset: 63915},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1703, col: 45, offset: 63924},
										expr: &charClassMatcher{
											pos:        position{line: 1703, col: 45, offset: 63924},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1707, col: 1, offset: 63978},
			expr: &oneOrMoreExpr{
				pos: position{line: 1707, col: 13, offset: 63990},
				expr: &ruleRefExpr{
					pos:  position{line: 1707, col: 13, offset: 63990},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1709, col: 1, offset: 64002},
			expr: &actionExpr{
				pos: position{line: 1709, col: 12, offset: 64013},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1709, col: 12, offset: 64013},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1709, col: 12, offset: 64013},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 16, offset: 64017},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1709, col: 21, offset: 64022},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1709, col: 21, offset: 64022},
									expr: &charClassMatcher{
										pos:        position{line: 1709, col: 21, offset: 64022},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1709, col: 69, offset: 64070},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1709, col: 73, offset: 64074},
							expr: &ruleRefExpr{
								pos:  position{line: 1709, col: 73, offset: 64074},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1709, col: 80, offset: 64081},
							expr: &choiceExpr{
								pos: position{line: 1709, col: 82, offset: 64083},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1709, col: 82, offset: 64083},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1709, col: 88, offset: 64089},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1713, col: 1, offset: 64146},
			expr: &actionExpr{
				pos: position{line: 1713, col: 20, offset: 64165},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1713, col: 20, offset: 64165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1713, col: 20, offset: 64165},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1713, col: 25, offset: 64170},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 48, offset: 64193},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1713, col: 61, offset: 64206},
								expr: &ruleRefExpr{
									pos:  position{line: 1713, col: 61, offset: 64206},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1717, col: 1, offset: 64307},
			expr: &actionExpr{
				pos: position{line: 1717, col: 26, offset: 64332},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1717, col: 26, offset: 64332},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1717, col: 26, offset: 64332},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1717, col: 30, offset: 64336},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1717, col: 35, offset: 64341},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1717, col: 35, offset: 64341},
									expr: &charClassMatcher{
										pos:        position{line: 1717, col: 35, offset: 64341},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1717, col: 83, offset: 64389},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1717, col: 87, offset: 64393},
							expr: &ruleRefExpr{
								pos:  position{line: 1717, col: 87, offset: 64393},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1724, col: 1, offset: 64627},
			expr: &seqExpr{
				pos: position{line: 1724, col: 25, offset: 64651},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1724, col: 25, offset: 64651},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1724, col: 31, offset: 64657},
						expr: &ruleRefExpr{
							pos:  position{line: 1724, col: 31, offset: 64657},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 38, offset: 64664},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1726, col: 1, offset: 64726},
			expr: &seqExpr{
				pos: position{line: 1726, col: 30, offset: 64755},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1726, col: 30, offset: 64755},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1726, col: 36, offset: 64761},
						expr: &ruleRefExpr{
							pos:  position{line: 1726, col: 36, offset: 64761},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 43, offset: 64768},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1728, col: 1, offset: 64775},
			expr: &choiceExpr{
				pos: position{line: 1728, col: 28, offset: 64802},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1728, col: 29, offset: 64803},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1728, col: 29, offset: 64803},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1728, col: 35, offset: 64809},
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 35, offset: 64809},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1728, col: 42, offset: 64816},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1728, col: 49, offset: 64823},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1730, col: 1, offset: 64830},
			expr: &actionExpr{
				pos: position{line: 1730, col: 16, offset: 64845},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1730, col: 16, offset: 64845},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1730, col: 16, offset: 64845},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1730, col: 27, offset: 64856},
								expr: &ruleRefExpr{
									pos:  position{line: 1730, col: 28, offset: 64857},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1730, col: 41, offset: 64870},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1730, col: 67, offset: 64896},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1730, col: 76, offset: 64905},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1730, col: 104, offset: 64933},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1734, col: 1, offset: 65052},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1734, col: 31, offset: 65082},
				expr: &actionExpr{
					pos: position{line: 1734, col: 32, offset: 65083},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1734, col: 32, offset: 65083},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1734, col: 32, offset: 65083},
								expr: &ruleRefExpr{
									pos:  position{line: 1734, col: 33, offset: 65084},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1734, col: 57, offset: 65108},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1734, col: 66, offset: 65117},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1741, col: 1, offset: 65461},
			expr: &seqExpr{
				pos: position{line: 1741, col: 26, offset: 65486},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1741, col: 26, offset: 65486},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1741, col: 33, offset: 65493},
						expr: &ruleRefExpr{
							pos:  position{line: 1741, col: 33, offset: 65493},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 40, offset: 65500},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1743, col: 1, offset: 65507},
			expr: &seqExpr{
				pos: position{line: 1743, col: 31, offset: 65537},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1743, col: 31, offset: 65537},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1743, col: 38, offset: 65544},
						expr: &ruleRefExpr{
							pos:  position{line: 1743, col: 38, offset: 65544},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 45, offset: 65551},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1745, col: 1, offset: 65558},
			expr: &choiceExpr{
				pos: position{line: 1745, col: 29, offset: 65586},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1745, col: 30, offset: 65587},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1745, col: 30, offset: 65587},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1745, col: 37, offset: 65594},
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 37, offset: 65594},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1745, col: 44, offset: 65601},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1745, col: 51, offset: 65608},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1747, col: 1, offset: 65615},
			expr: &actionExpr{
				pos: position{line: 1747, col: 17, offset: 65631},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1747, col: 17, offset: 65631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1747, col: 17, offset: 65631},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1747, col: 28, offset: 65642},
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 29, offset: 65643},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1747, col: 42, offset: 65656},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1747, col: 69, offset: 65683},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1747, col: 78, offset: 65692},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1747, col: 107, offset: 65721},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1751, col: 1, offset: 65842},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1751, col: 32, offset: 65873},
				expr: &actionExpr{
					pos: position{line: 1751, col: 33, offset: 65874},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1751, col: 33, offset: 65874},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1751, col: 33, offset: 65874},
								expr: &ruleRefExpr{
									pos:  position{line: 1751, col: 34, offset: 65875},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1751, col: 59, offset: 65900},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1751, col: 68, offset: 65909},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1758, col: 1, offset: 66253},
			expr: &seqExpr{
				pos: position{line: 1758, col: 26, offset: 66278},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1758, col: 26, offset: 66278},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1758, col: 33, offset: 66285},
						expr: &ruleRefExpr{
							pos:  position{line: 1758, col: 33, offset: 66285},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 40, offset: 66292},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1760, col: 1, offset: 66299},
			expr: &seqExpr{
				pos: position{line: 1760, col: 31, offset: 66329},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1760, col: 31, offset: 66329},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1760, col: 38, offset: 66336},
						expr: &ruleRefExpr{
							pos:  position{line: 1760, col: 38, offset: 66336},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 45, offset: 66343},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1762, col: 1, offset: 66350},
			expr: &choiceExpr{
				pos: position{line: 1762, col: 29, offset: 66378},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1762, col: 30, offset: 66379},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1762, col: 30, offset: 66379},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1762, col: 37, offset: 66386},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 37, offset: 66386},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1762, col: 44, offset: 66393},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 51, offset: 66400},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1764, col: 1, offset: 66407},
			expr: &actionExpr{
				pos: position{line: 1764, col: 17, offset: 66423},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 17, offset: 66423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1764, col: 17, offset: 66423},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1764, col: 28, offset: 66434},
								expr: &ruleRefExpr{
									pos:  position{line: 1764, col: 29, offset: 66435},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1764, col: 42, offset: 66448},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 69, offset: 66475},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 78, offset: 66484},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1764, col: 107, offset: 66513},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1768, col: 1, offset: 66634},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1768, col: 32, offset: 66665},
				expr: &actionExpr{
					pos: position{line: 1768, col: 33, offset: 66666},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1768, col: 33, offset: 66666},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1768, col: 33, offset: 66666},
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 34, offset: 66667},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1768, col: 59, offset: 66692},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 68, offset: 66701},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1775, col: 1, offset: 67043},
			expr: &seqExpr{
				pos: position{line: 1775, col: 24, offset: 67066},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1775, col: 24, offset: 67066},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1775, col: 31, offset: 67073},
						expr: &ruleRefExpr{
							pos:  position{line: 1775, col: 31, offset: 67073},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 38, offset: 67080},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1777, col: 1, offset: 67112},
			expr: &seqExpr{
				pos: position{line: 1777, col: 29, offset: 67140},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1777, col: 29, offset: 67140},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1777, col: 36, offset: 67147},
						expr: &ruleRefExpr{
							pos:  position{line: 1777, col: 36, offset: 67147},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1777, col: 43, offset: 67154},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1779, col: 1, offset: 67186},
			expr: &choiceExpr{
				pos: position{line: 1779, col: 27, offset: 67212},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1779, col: 28, offset: 67213},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1779, col: 28, offset: 67213},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1779, col: 35, offset: 67220},
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 35, offset: 67220},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1779, col: 42, offset: 67227},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1779, col: 49, offset: 67234},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1781, col: 1, offset: 67266},
			expr: &actionExpr{
				pos: position{line: 1781, col: 15, offset: 67280},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 15, offset: 67280},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1781, col: 15, offset: 67280},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1781, col: 26, offset: 67291},
								expr: &ruleRefExpr{
									pos:  position{line: 1781, col: 27, offset: 67292},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 40, offset: 67305},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1781, col: 65, offset: 67330},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 74, offset: 67339},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 101, offset: 67366},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1785, col: 1, offset: 67483},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1785, col: 30, offset: 67512},
				expr: &actionExpr{
					pos: position{line: 1785, col: 31, offset: 67513},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1785, col: 31, offset: 67513},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1785, col: 31, offset: 67513},
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 32, offset: 67514},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1785, col: 55, offset: 67537},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 64, offset: 67546},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1792, col: 1, offset: 67890},
			expr: &seqExpr{
				pos: position{line: 1792, col: 26, offset: 67915},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1792, col: 26, offset: 67915},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1792, col: 33, offset: 67922},
						expr: &ruleRefExpr{
							pos:  position{line: 1792, col: 33, offset: 67922},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1792, col: 40, offset: 67929},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1794, col: 1, offset: 67936},
			expr: &seqExpr{
				pos: position{line: 1794, col: 31, offset: 67966},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1794, col: 31, offset: 67966},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1794, col: 38, offset: 67973},
						expr: &ruleRefExpr{
							pos:  position{line: 1794, col: 38, offset: 67973},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1794, col: 45, offset: 67980},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1796, col: 1, offset: 67987},
			expr: &choiceExpr{
				pos: position{line: 1796, col: 29, offset: 68015},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1796, col: 30, offset: 68016},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1796, col: 30, offset: 68016},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1796, col: 37, offset: 68023},
								expr: &ruleRefExpr{
									pos:  position{line: 1796, col: 37, offset: 68023},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1796, col: 44, offset: 68030},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 51, offset: 68037},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1798, col: 1, offset: 68044},
			expr: &actionExpr{
				pos: position{line: 1798, col: 17, offset: 68060},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 17, offset: 68060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1798, col: 17, offset: 68060},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1798, col: 28, offset: 68071},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 29, offset: 68072},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 42, offset: 68085},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 69, offset: 68112},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 78, offset: 68121},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 107, offset: 68150},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1802, col: 1, offset: 68271},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1802, col: 32, offset: 68302},
				expr: &actionExpr{
					pos: position{line: 1802, col: 33, offset: 68303},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1802, col: 33, offset: 68303},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1802, col: 33, offset: 68303},
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 34, offset: 68304},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1802, col: 59, offset: 68329},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 68, offset: 68338},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1809, col: 1, offset: 68686},
			expr: &seqExpr{
				pos: position{line: 1809, col: 30, offset: 68715},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1809, col: 30, offset: 68715},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 37, offset: 68722},
						expr: &ruleRefExpr{
							pos:  position{line: 1809, col: 37, offset: 68722},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 44, offset: 68729},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1811, col: 1, offset: 68736},
			expr: &seqExpr{
				pos: position{line: 1811, col: 35, offset: 68770},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1811, col: 35, offset: 68770},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1811, col: 42, offset: 68777},
						expr: &ruleRefExpr{
							pos:  position{line: 1811, col: 42, offset: 68777},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 49, offset: 68784},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1813, col: 1, offset: 68791},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 33, offset: 68823},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1813, col: 34, offset: 68824},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1813, col: 34, offset: 68824},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1813, col: 41, offset: 68831},
								expr: &ruleRefExpr{
									pos:  position{line: 1813, col: 41, offset: 68831},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1813, col: 48, offset: 68838},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 55, offset: 68845},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1815, col: 1, offset: 68852},
			expr: &actionExpr{
				pos: position{line: 1815, col: 21, offset: 68872},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 21, offset: 68872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1815, col: 21, offset: 68872},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1815, col: 32, offset: 68883},
								expr: &ruleRefExpr{
									pos:  position{line: 1815, col: 33, offset: 68884},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 46, offset: 68897},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 77, offset: 68928},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 86, offset: 68937},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 119, offset: 68970},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1819, col: 1, offset: 69099},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1819, col: 36, offset: 69134},
				expr: &actionExpr{
					pos: position{line: 1819, col: 37, offset: 69135},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1819, col: 37, offset: 69135},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1819, col: 37, offset: 69135},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 38, offset: 69136},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1819, col: 67, offset: 69165},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 76, offset: 69174},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1824, col: 1, offset: 69338},
			expr: &actionExpr{
				pos: position{line: 1824, col: 18, offset: 69355},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 18, offset: 69355},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1824, col: 19, offset: 69356},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1824, col: 19, offset: 69356},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 27, offset: 69364},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 37, offset: 69374},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 45, offset: 69382},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 55, offset: 69392},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 63, offset: 69400},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1824, col: 72, offset: 69409},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1832, col: 1, offset: 69667},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1832, col: 23, offset: 69689},
				expr: &ruleRefExpr{
					pos:  position{line: 1832, col: 23, offset: 69689},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1834, col: 1, offset: 69712},
			expr: &actionExpr{
				pos: position{line: 1835, col: 5, offset: 69740},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 5, offset: 69740},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1835, col: 5, offset: 69740},
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 6, offset: 69741},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 10, offset: 69745},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1835, col: 19, offset: 69754},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1835, col: 19, offset: 69754},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1836, col: 15, offset: 69780},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1837, col: 15, offset: 69809},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1838, col: 15, offset: 69835},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1839, col: 15, offset: 69864},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1840, col: 15, offset: 69896},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 15, offset: 69930},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 15, offset: 69962},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 15, offset: 70002},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1844, col: 15, offset: 70032},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1845, col: 15, offset: 70061},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 15, offset: 70098},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1847, col: 15, offset: 70129},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 15, offset: 70171},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1852, col: 1, offset: 70224},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1852, col: 22, offset: 70245},
				expr: &ruleRefExpr{
					pos:  position{line: 1852, col: 22, offset: 70245},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1854, col: 1, offset: 70267},
			expr: &actionExpr{
				pos: position{line: 1854, col: 22, offset: 70288},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1854, col: 22, offset: 70288},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1854, col: 22, offset: 70288},
							expr: &ruleRefExpr{
								pos:  position{line: 1854, col: 23, offset: 70289},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1854, col: 27, offset: 70293},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1854, col: 36, offset: 70302},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1854, col: 36, offset: 70302},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1854, col: 48, offset: 70314},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1858, col: 1, offset: 70368},
			expr: &actionExpr{
				pos: position{line: 1858, col: 24, offset: 70391},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1858, col: 24, offset: 70391},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1858, col: 30, offset: 70397},
						expr: &ruleRefExpr{
							pos:  position{line: 1858, col: 31, offset: 70398},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1862, col: 1, offset: 70492},
			expr: &actionExpr{
				pos: position{line: 1862, col: 28, offset: 70519},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1862, col: 28, offset: 70519},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1862, col: 28, offset: 70519},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1862, col: 37, offset: 70528},
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 38, offset: 70529},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1862, col: 54, offset: 70545},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1869, col: 1, offset: 70794},
			expr: &actionExpr{
				pos: position{line: 1869, col: 10, offset: 70803},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 10, offset: 70803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1869, col: 10, offset: 70803},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1869, col: 16, offset: 70809},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1869, col: 17, offset: 70810},
									expr: &ruleRefExpr{
										pos:  position{line: 1869, col: 17, offset: 70810},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 31, offset: 70824},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1870, col: 5, offset: 70844},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1870, col: 12, offset: 70851},
								expr: &ruleRefExpr{
									pos:  position{line: 1870, col: 13, offset: 70852},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1871, col: 5, offset: 70875},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1871, col: 11, offset: 70881},
								expr: &ruleRefExpr{
									pos:  position{line: 1871, col: 12, offset: 70882},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1872, col: 6, offset: 70900},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1872, col: 6, offset: 70900},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 23, offset: 70917},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1876, col: 1, offset: 71031},
			expr: &seqExpr{
				pos: position{line: 1876, col: 23, offset: 71053},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1876, col: 23, offset: 71053},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1876, col: 27, offset: 71057},
						expr: &ruleRefExpr{
							pos:  position{line: 1876, col: 27, offset: 71057},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1878, col: 1, offset: 71067},
			expr: &seqExpr{
				pos: position{line: 1878, col: 19, offset: 71085},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1878, col: 19, offset: 71085},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1878, col: 26, offset: 71092},
						expr: &ruleRefExpr{
							pos:  position{line: 1878, col: 26, offset: 71092},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1878, col: 33, offset: 71099},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1881, col: 1, offset: 71170},
			expr: &actionExpr{
				pos: position{line: 1881, col: 20, offset: 71189},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1881, col: 20, offset: 71189},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1881, col: 20, offset: 71189},
							expr: &ruleRefExpr{
								pos:  position{line: 1881, col: 21, offset: 71190},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1881, col: 36, offset: 71205},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1881, col: 42, offset: 71211},
								expr: &ruleRefExpr{
									pos:  position{line: 1881, col: 43, offset: 71212},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1881, col: 55, offset: 71224},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1881, col: 59, offset: 71228},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1885, col: 1, offset: 71300},
			expr: &actionExpr{
				pos: position{line: 1885, col: 14, offset: 71313},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1885, col: 14, offset: 71313},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1885, col: 14, offset: 71313},
							expr: &ruleRefExpr{
								pos:  position{line: 1885, col: 15, offset: 71314},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1885, col: 30, offset: 71329},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1885, col: 36, offset: 71335},
								expr: &ruleRefExpr{
									pos:  position{line: 1885, col: 37, offset: 71336},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1885, col: 49, offset: 71348},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1885, col: 53, offset: 71352},
							expr: &ruleRefExpr{
								pos:  position{line: 1885, col: 53, offset: 71352},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1889, col: 1, offset: 71425},
			expr: &actionExpr{
				pos: position{line: 1889, col: 14, offset: 71438},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1889, col: 14, offset: 71438},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1889, col: 14, offset: 71438},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1889, col: 33, offset: 71457},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1889, col: 42, offset: 71466},
								expr: &seqExpr{
									pos: position{line: 1889, col: 43, offset: 71467},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1889, col: 43, offset: 71467},
											expr: &ruleRefExpr{
												pos:  position{line: 1889, col: 44, offset: 71468},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1889, col: 63, offset: 71487},
											expr: &ruleRefExpr{
												pos:  position{line: 1889, col: 64, offset: 71488},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1889, col: 68, offset: 71492},
											expr: &ruleRefExpr{
												pos:  position{line: 1889, col: 68, offset: 71492},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1889, col: 75, offset: 71499},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1889, col: 89, offset: 71513},
											expr: &ruleRefExpr{
												pos:  position{line: 1889, col: 89, offset: 71513},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1896, col: 1, offset: 71769},
			expr: &seqExpr{
				pos: position{line: 1896, col: 26, offset: 71794},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1896, col: 26, offset: 71794},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1896, col: 33, offset: 71801},
						expr: &ruleRefExpr{
							pos:  position{line: 1896, col: 33, offset: 71801},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1896, col: 40, offset: 71808},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1898, col: 1, offset: 71815},
			expr: &seqExpr{
				pos: position{line: 1898, col: 31, offset: 71845},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1898, col: 31, offset: 71845},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1898, col: 38, offset: 71852},
						expr: &ruleRefExpr{
							pos:  position{line: 1898, col: 38, offset: 71852},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1898, col: 45, offset: 71859},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1900, col: 1, offset: 71866},
			expr: &choiceExpr{
				pos: position{line: 1900, col: 29, offset: 71894},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1900, col: 30, offset: 71895},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1900, col: 30, offset: 71895},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1900, col: 37, offset: 71902},
								expr: &ruleRefExpr{
									pos:  position{line: 1900, col: 37, offset: 71902},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1900, col: 44, offset: 71909},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1900, col: 51, offset: 71916},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1902, col: 1, offset: 71923},
			expr: &actionExpr{
				pos: position{line: 1902, col: 17, offset: 71939},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1902, col: 17, offset: 71939},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1902, col: 17, offset: 71939},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1902, col: 44, offset: 71966},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1902, col: 53, offset: 71975},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1902, col: 83, offset: 72005},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1906, col: 1, offset: 72119},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1906, col: 32, offset: 72150},
				expr: &actionExpr{
					pos: position{line: 1906, col: 33, offset: 72151},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1906, col: 33, offset: 72151},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1906, col: 33, offset: 72151},
								expr: &ruleRefExpr{
									pos:  position{line: 1906, col: 34, offset: 72152},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1906, col: 59, offset: 72177},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1906, col: 68, offset: 72186},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1910, col: 1, offset: 72331},
			expr: &actionExpr{
				pos: position{line: 1910, col: 22, offset: 72352},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1910, col: 22, offset: 72352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1910, col: 22, offset: 72352},
							expr: &ruleRefExpr{
								pos:  position{line: 1910, col: 23, offset: 72353},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1910, col: 45, offset: 72375},
							expr: &ruleRefExpr{
								pos:  position{line: 1910, col: 45, offset: 72375},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1910, col: 52, offset: 72382},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1910, col: 57, offset: 72387},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1910, col: 66, offset: 72396},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1910, col: 92, offset: 72422},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1914, col: 1, offset: 72491},
			expr: &actionExpr{
				pos: position{line: 1914, col: 29, offset: 72519},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1914, col: 29, offset: 72519},
					expr: &charClassMatcher{
						pos:        position{line: 1914, col: 29, offset: 72519},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1922, col: 1, offset: 72840},
			expr: &choiceExpr{
				pos: position{line: 1922, col: 17, offset: 72856},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1922, col: 17, offset: 72856},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1922, col: 49, offset: 72888},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1922, col: 78, offset: 72917},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1924, col: 1, offset: 72955},
			expr: &litMatcher{
				pos:        position{line: 1924, col: 26, offset: 72980},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1927, col: 1, offset: 73055},
			expr: &actionExpr{
				pos: position{line: 1927, col: 31, offset: 73085},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1927, col: 31, offset: 73085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1927, col: 31, offset: 73085},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1927, col: 42, offset: 73096},
								expr: &ruleRefExpr{
									pos:  position{line: 1927, col: 43, offset: 73097},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1927, col: 56, offset: 73110},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1927, col: 63, offset: 73117},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1932, col: 1, offset: 73352},
			expr: &actionExpr{
				pos: position{line: 1933, col: 5, offset: 73393},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1933, col: 5, offset: 73393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1933, col: 5, offset: 73393},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1933, col: 16, offset: 73404},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1933, col: 16, offset: 73404},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1933, col: 16, offset: 73404},
											expr: &ruleRefExpr{
												pos:  position{line: 1933, col: 16, offset: 73404},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1933, col: 23, offset: 73411},
											expr: &charClassMatcher{
												pos:        position{line: 1933, col: 23, offset: 73411},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1935, col: 8, offset: 73466},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1936, col: 5, offset: 73530},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1936, col: 16, offset: 73541},
								expr: &actionExpr{
									pos: position{line: 1937, col: 9, offset: 73552},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1937, col: 9, offset: 73552},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1937, col: 9, offset: 73552},
												expr: &ruleRefExpr{
													pos:  position{line: 1937, col: 10, offset: 73553},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1938, col: 9, offset: 73573},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1938, col: 20, offset: 73584},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1938, col: 20, offset: 73584},
														expr: &charClassMatcher{
															pos:        position{line: 1938, col: 20, offset: 73584},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1940, col: 12, offset: 73647},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1947, col: 1, offset: 73884},
			expr: &actionExpr{
				pos: position{line: 1947, col: 39, offset: 73922},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 39, offset: 73922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1947, col: 39, offset: 73922},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1947, col: 50, offset: 73933},
								expr: &ruleRefExpr{
									pos:  position{line: 1947, col: 51, offset: 73934},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1948, col: 9, offset: 73956},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1948, col: 31, offset: 73978},
							expr: &ruleRefExpr{
								pos:  position{line: 1948, col: 31, offset: 73978},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1948, col: 38, offset: 73985},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1948, col: 46, offset: 73993},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1948, col: 53, offset: 74000},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1948, col: 95, offset: 74042},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1948, col: 96, offset: 74043},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1948, col: 96, offset: 74043},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1948, col: 118, offset: 74065},
											expr: &ruleRefExpr{
												pos:  position{line: 1948, col: 118, offset: 74065},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1948, col: 125, offset: 74072},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1948, col: 132, offset: 74079},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1953, col: 1, offset: 74243},
			expr: &actionExpr{
				pos: position{line: 1953, col: 44, offset: 74286},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1953, col: 44, offset: 74286},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1953, col: 50, offset: 74292},
						expr: &ruleRefExpr{
							pos:  position{line: 1953, col: 51, offset: 74293},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1957, col: 1, offset: 74381},
			expr: &actionExpr{
				pos: position{line: 1958, col: 5, offset: 74437},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1958, col: 5, offset: 74437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1958, col: 5, offset: 74437},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1958, col: 11, offset: 74443},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1958, col: 11, offset: 74443},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1958, col: 11, offset: 74443},
											expr: &ruleRefExpr{
												pos:  position{line: 1958, col: 12, offset: 74444},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1958, col: 34, offset: 74466},
											expr: &charClassMatcher{
												pos:        position{line: 1958, col: 34, offset: 74466},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1960, col: 8, offset: 74521},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1965, col: 1, offset: 74652},
			expr: &actionExpr{
				pos: position{line: 1966, col: 5, offset: 74691},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1966, col: 5, offset: 74691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1966, col: 5, offset: 74691},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1966, col: 16, offset: 74702},
								expr: &ruleRefExpr{
									pos:  position{line: 1966, col: 17, offset: 74703},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1967, col: 5, offset: 74721},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 5, offset: 74935},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 12, offset: 74942},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1978, col: 1, offset: 75096},
			expr: &actionExpr{
				pos: position{line: 1978, col: 16, offset: 75111},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1978, col: 16, offset: 75111},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1983, col: 1, offset: 75199},
			expr: &actionExpr{
				pos: position{line: 1983, col: 39, offset: 75237},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1983, col: 39, offset: 75237},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1983, col: 45, offset: 75243},
						expr: &ruleRefExpr{
							pos:  position{line: 1983, col: 46, offset: 75244},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1987, col: 1, offset: 75328},
			expr: &actionExpr{
				pos: position{line: 1987, col: 38, offset: 75365},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 38, offset: 75365},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1987, col: 38, offset: 75365},
							expr: &ruleRefExpr{
								pos:  position{line: 1987, col: 39, offset: 75366},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1987, col: 49, offset: 75376},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1987, col: 58, offset: 75385},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1987, col: 58, offset: 75385},
									expr: &charClassMatcher{
										pos:        position{line: 1987, col: 58, offset: 75385},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1989, col: 4, offset: 75432},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1996, col: 1, offset: 75625},
			expr: &actionExpr{
				pos: position{line: 1996, col: 14, offset: 75638},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1996, col: 14, offset: 75638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1996, col: 14, offset: 75638},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1996, col: 19, offset: 75643},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1996, col: 25, offset: 75649},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1996, col: 43, offset: 75667},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2000, col: 1, offset: 75736},
			expr: &actionExpr{
				pos: position{line: 2000, col: 21, offset: 75756},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2000, col: 21, offset: 75756},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2000, col: 30, offset: 75765},
						expr: &choiceExpr{
							pos: position{line: 2000, col: 31, offset: 75766},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2000, col: 31, offset: 75766},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 38, offset: 75773},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 53, offset: 75788},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 66, offset: 75801},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2000, col: 74, offset: 75809},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2000, col: 75, offset: 75810},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2000, col: 75, offset: 75810},
												expr: &litMatcher{
													pos:        position{line: 2000, col: 76, offset: 75811},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2000, col: 81, offset: 75816,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2006, col: 1, offset: 75928},
			expr: &actionExpr{
				pos: position{line: 2006, col: 23, offset: 75950},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2006, col: 23, offset: 75950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2006, col: 23, offset: 75950},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 29, offset: 75956},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 36, offset: 75963},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2007, col: 5, offset: 75996},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2007, col: 11, offset: 76002},
								expr: &actionExpr{
									pos: position{line: 2007, col: 12, offset: 76003},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2007, col: 12, offset: 76003},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2007, col: 12, offset: 76003},
												expr: &ruleRefExpr{
													pos:  position{line: 2007, col: 12, offset: 76003},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2007, col: 19, offset: 76010},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2007, col: 23, offset: 76014},
												expr: &ruleRefExpr{
													pos:  position{line: 2007, col: 23, offset: 76014},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2007, col: 30, offset: 76021},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2007, col: 39, offset: 76030},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2008, col: 5, offset: 76089},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2008, col: 11, offset: 76095},
								expr: &actionExpr{
									pos: position{line: 2008, col: 12, offset: 76096},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2008, col: 12, offset: 76096},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2008, col: 12, offset: 76096},
												expr: &ruleRefExpr{
													pos:  position{line: 2008, col: 12, offset: 76096},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2008, col: 19, offset: 76103},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2008, col: 23, offset: 76107},
												expr: &ruleRefExpr{
													pos:  position{line: 2008, col: 23, offset: 76107},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2008, col: 30, offset: 76114},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2008, col: 39, offset: 76123},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2009, col: 5, offset: 76182},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2013, col: 1, offset: 76265},
			expr: &actionExpr{
				pos: position{line: 2013, col: 30, offset: 76294},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2013, col: 30, offset: 76294},
					expr: &choiceExpr{
						pos: position{line: 2013, col: 31, offset: 76295},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2013, col: 31, offset: 76295},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2013, col: 42, offset: 76306},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2020, col: 1, offset: 76462},
			expr: &actionExpr{
				pos: position{line: 2020, col: 14, offset: 76475},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2020, col: 14, offset: 76475},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2020, col: 14, offset: 76475},
							expr: &ruleRefExpr{
								pos:  position{line: 2020, col: 15, offset: 76476},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2020, col: 19, offset: 76480},
							expr: &ruleRefExpr{
								pos:  position{line: 2020, col: 19, offset: 76480},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2020, col: 26, offset: 76487},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2028, col: 1, offset: 76640},
			expr: &choiceExpr{
				pos: position{line: 2028, col: 11, offset: 76650},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2028, col: 11, offset: 76650},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2028, col: 24, offset: 76663},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2028, col: 36, offset: 76675},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2028, col: 48, offset: 76687},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2028, col: 61, offset: 76700},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2030, col: 1, offset: 76712},
			expr: &actionExpr{
				pos: position{line: 2030, col: 15, offset: 76726},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2030, col: 15, offset: 76726},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2033, col: 1, offset: 76782},
			expr: &actionExpr{
				pos: position{line: 2033, col: 14, offset: 76795},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2033, col: 14, offset: 76795},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2036, col: 1, offset: 76852},
			expr: &actionExpr{
				pos: position{line: 2036, col: 14, offset: 76865},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2036, col: 14, offset: 76865},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2039, col: 1, offset: 76923},
			expr: &actionExpr{
				pos: position{line: 2039, col: 15, offset: 76937},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2039, col: 15, offset: 76937},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2042, col: 1, offset: 76994},
			expr: &actionExpr{
				pos: position{line: 2042, col: 13, offset: 77006},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2042, col: 13, offset: 77006},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2050, col: 1, offset: 77289},
			expr: &actionExpr{
				pos: position{line: 2050, col: 22, offset: 77310},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 22, offset: 77310},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2050, col: 22, offset: 77310},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2050, col: 31, offset: 77319},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2050, col: 35, offset: 77323},
							expr: &charClassMatcher{
								pos:        position{line: 2050, col: 36, offset: 77324},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2057, col: 1, offset: 77511},
			expr: &charClassMatcher{
				pos:        position{line: 2057, col: 13, offset: 77523},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2059, col: 1, offset: 77535},
			expr: &choiceExpr{
				pos: position{line: 2059, col: 16, offset: 77550},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2059, col: 16, offset: 77550},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2059, col: 22, offset: 77556},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2059, col: 28, offset: 77562},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2059, col: 34, offset: 77568},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2059, col: 40, offset: 77574},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2059, col: 46, offset: 77580},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2061, col: 1, offset: 77588},
			expr: &actionExpr{
				pos: position{line: 2061, col: 14, offset: 77601},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2061, col: 14, offset: 77601},
					expr: &charClassMatcher{
						pos:        position{line: 2061, col: 14, offset: 77601},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2065, col: 1, offset: 77651},
			expr: &choiceExpr{
				pos: position{line: 2069, col: 5, offset: 77982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2069, col: 5, offset: 77982},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2069, col: 5, offset: 77982},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2069, col: 5, offset: 77982},
									expr: &charClassMatcher{
										pos:        position{line: 2069, col: 5, offset: 77982},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2069, col: 15, offset: 77992},
									expr: &choiceExpr{
										pos: position{line: 2069, col: 17, offset: 77994},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2069, col: 17, offset: 77994},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2069, col: 30, offset: 78007},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2071, col: 9, offset: 78079},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2071, col: 9, offset: 78079},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2071, col: 9, offset: 78079},
									expr: &charClassMatcher{
										pos:        position{line: 2071, col: 9, offset: 78079},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2071, col: 19, offset: 78089},
									expr: &seqExpr{
										pos: position{line: 2071, col: 20, offset: 78090},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2071, col: 20, offset: 78090},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2071, col: 27, offset: 78097},
												expr: &charClassMatcher{
													pos:        position{line: 2071, col: 27, offset: 78097},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2075, col: 1, offset: 78177},
			expr: &choiceExpr{
				pos: position{line: 2076, col: 5, offset: 78259},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2076, col: 5, offset: 78259},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2076, col: 5, offset: 78259},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2076, col: 5, offset: 78259},
									expr: &charClassMatcher{
										pos:        position{line: 2076, col: 5, offset: 78259},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2076, col: 19, offset: 78273},
									expr: &choiceExpr{
										pos: position{line: 2076, col: 21, offset: 78275},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2076, col: 21, offset: 78275},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2076, col: 31, offset: 78285},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2078, col: 9, offset: 78356},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2081, col: 1, offset: 78459},
			expr: &actionExpr{
				pos: position{line: 2081, col: 12, offset: 78470},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2081, col: 12, offset: 78470},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2085, col: 1, offset: 78539},
			expr: &actionExpr{
				pos: position{line: 2085, col: 17, offset: 78555},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2085, col: 17, offset: 78555},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2085, col: 22, offset: 78560},
						expr: &choiceExpr{
							pos: position{line: 2085, col: 23, offset: 78561},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2085, col: 23, offset: 78561},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2085, col: 34, offset: 78572},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2089, col: 1, offset: 78660},
			expr: &actionExpr{
				pos: position{line: 2089, col: 25, offset: 78684},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2089, col: 25, offset: 78684},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2089, col: 30, offset: 78689},
						expr: &charClassMatcher{
							pos:        position{line: 2089, col: 31, offset: 78690},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2093, col: 1, offset: 78766},
			expr: &actionExpr{
				pos: position{line: 2093, col: 13, offset: 78778},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2093, col: 13, offset: 78778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2093, col: 13, offset: 78778},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2093, col: 20, offset: 78785},
								expr: &ruleRefExpr{
									pos:  position{line: 2093, col: 21, offset: 78786},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2093, col: 34, offset: 78799},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2093, col: 39, offset: 78804},
								expr: &choiceExpr{
									pos: position{line: 2093, col: 40, offset: 78805},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2093, col: 40, offset: 78805},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2093, col: 51, offset: 78816},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2097, col: 1, offset: 78908},
			expr: &actionExpr{
				pos: position{line: 2097, col: 23, offset: 78930},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2097, col: 23, offset: 78930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2097, col: 23, offset: 78930},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2097, col: 31, offset: 78938},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2097, col: 43, offset: 78950},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2097, col: 48, offset: 78955},
								expr: &choiceExpr{
									pos: position{line: 2097, col: 49, offset: 78956},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2097, col: 49, offset: 78956},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2097, col: 60, offset: 78967},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2101, col: 1, offset: 79059},
			expr: &oneOrMoreExpr{
				pos: position{line: 2101, col: 13, offset: 79071},
				expr: &charClassMatcher{
					pos:        position{line: 2101, col: 14, offset: 79072},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2103, col: 1, offset: 79208},
			expr: &actionExpr{
				pos: position{line: 2103, col: 21, offset: 79228},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2103, col: 21, offset: 79228},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2103, col: 21, offset: 79228},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2103, col: 29, offset: 79236},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2103, col: 41, offset: 79248},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2103, col: 47, offset: 79254},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2108, col: 1, offset: 79507},
			expr: &oneOrMoreExpr{
				pos: position{line: 2108, col: 22, offset: 79528},
				expr: &charClassMatcher{
					pos:        position{line: 2108, col: 23, offset: 79529},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2110, col: 1, offset: 79663},
			expr: &actionExpr{
				pos: position{line: 2110, col: 9, offset: 79671},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2110, col: 9, offset: 79671},
					expr: &charClassMatcher{
						pos:        position{line: 2110, col: 9, offset: 79671},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2114, col: 1, offset: 79723},
			expr: &choiceExpr{
				pos: position{line: 2114, col: 15, offset: 79737},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2114, col: 15, offset: 79737},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 27, offset: 79749},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 40, offset: 79762},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 51, offset: 79773},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 62, offset: 79784},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2116, col: 1, offset: 79797},
			expr: &actionExpr{
				pos: position{line: 2116, col: 7, offset: 79803},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2116, col: 7, offset: 79803},
					expr: &charClassMatcher{
						pos:        position{line: 2116, col: 7, offset: 79803},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2120, col: 1, offset: 79932},
			expr: &actionExpr{
				pos: position{line: 2120, col: 10, offset: 79941},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2120, col: 10, offset: 79941},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2124, col: 1, offset: 79987},
			expr: &actionExpr{
				pos: position{line: 2124, col: 11, offset: 79997},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2124, col: 11, offset: 79997},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2124, col: 11, offset: 79997},
							expr: &litMatcher{
								pos:        position{line: 2124, col: 11, offset: 79997},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2124, col: 16, offset: 80002},
							expr: &ruleRefExpr{
								pos:  position{line: 2124, col: 16, offset: 80002},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2128, col: 1, offset: 80058},
			expr: &choiceExpr{
				pos: position{line: 2128, col: 10, offset: 80067},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2128, col: 10, offset: 80067},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2128, col: 16, offset: 80073},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2128, col: 16, offset: 80073},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2132, col: 1, offset: 80118},
			expr: &choiceExpr{
				pos: position{line: 2132, col: 12, offset: 80129},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2132, col: 12, offset: 80129},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2132, col: 21, offset: 80138},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2132, col: 28, offset: 80145},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2134, col: 1, offset: 80153},
			expr: &notExpr{
				pos: position{line: 2134, col: 8, offset: 80160},
				expr: &anyMatcher{
					line: 2134, col: 9, offset: 80161,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2136, col: 1, offset: 80166},
			expr: &choiceExpr{
				pos: position{line: 2136, col: 8, offset: 80173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2136, col: 8, offset: 80173},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2136, col: 18, offset: 80183},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {

	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onInlinePositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonInlinePositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePositionalValue1(stack["value"])
}

func (c *current) onInlineValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonInlineValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineValuePlain1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {

	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
