// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1537},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1565},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1595},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1622},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1658},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1683},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1716},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1743},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1781},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1807},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1839},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 63, col: 1, offset: 1852},
			expr: &labeledExpr{
				pos:   position{line: 63, col: 47, offset: 1898},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 63, col: 54, offset: 1905},
					expr: &ruleRefExpr{
						pos:  position{line: 63, col: 55, offset: 1906},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1945},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1982},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1982},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1982},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1983},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1993},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 66, col: 12, offset: 2000},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 66, col: 12, offset: 2000},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 2026},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2079},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2104},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2130},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2181},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2211},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2239},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2275},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2300},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2333},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2360},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2398},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2424},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 84, col: 1, offset: 2466},
			expr: &labeledExpr{
				pos:   position{line: 84, col: 23, offset: 2488},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 30, offset: 2495},
					expr: &ruleRefExpr{
						pos:  position{line: 84, col: 31, offset: 2496},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 86, col: 1, offset: 2519},
			expr: &actionExpr{
				pos: position{line: 86, col: 22, offset: 2540},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 86, col: 22, offset: 2540},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 86, col: 22, offset: 2540},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 23, offset: 2541},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2551},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 87, col: 12, offset: 2558},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 12, offset: 2558},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 24, offset: 2570},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 94, col: 1, offset: 2723},
			expr: &ruleRefExpr{
				pos:  position{line: 94, col: 16, offset: 2738},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 96, col: 1, offset: 2758},
			expr: &actionExpr{
				pos: position{line: 96, col: 20, offset: 2777},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 96, col: 20, offset: 2777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 96, col: 20, offset: 2777},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 41, offset: 2798},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 96, col: 49, offset: 2806},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 50, offset: 2807},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 75, offset: 2832},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 100, col: 1, offset: 2916},
			expr: &seqExpr{
				pos: position{line: 100, col: 26, offset: 2941},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 26, offset: 2941},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 100, col: 32, offset: 2947},
						expr: &ruleRefExpr{
							pos:  position{line: 100, col: 32, offset: 2947},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 39, offset: 2954},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 102, col: 1, offset: 2961},
			expr: &actionExpr{
				pos: position{line: 102, col: 27, offset: 2987},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 102, col: 27, offset: 2987},
					expr: &oneOrMoreExpr{
						pos: position{line: 102, col: 28, offset: 2988},
						expr: &seqExpr{
							pos: position{line: 102, col: 29, offset: 2989},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 29, offset: 2989},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 30, offset: 2990},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 102, col: 51, offset: 3011,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 109, col: 1, offset: 3184},
			expr: &actionExpr{
				pos: position{line: 109, col: 19, offset: 3202},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 109, col: 19, offset: 3202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 109, col: 19, offset: 3202},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 109, col: 23, offset: 3206},
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 23, offset: 3206},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 30, offset: 3213},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 37, offset: 3220},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 52, offset: 3235},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 56, offset: 3239},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 56, offset: 3239},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 74, offset: 3257},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3270},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 3271},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 30, offset: 3291},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3315},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 18, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 18, offset: 3324},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3352},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3353},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3353},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3373},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3397},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 19, offset: 3407},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 19, offset: 3407},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 117, col: 1, offset: 3512},
			expr: &choiceExpr{
				pos: position{line: 117, col: 20, offset: 3531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 20, offset: 3531},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 117, col: 48, offset: 3559},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 119, col: 1, offset: 3591},
			expr: &actionExpr{
				pos: position{line: 119, col: 30, offset: 3620},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 119, col: 30, offset: 3620},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 30, offset: 3620},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 30, offset: 3620},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 119, col: 37, offset: 3627},
							expr: &litMatcher{
								pos:        position{line: 119, col: 38, offset: 3628},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 42, offset: 3632},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 119, col: 51, offset: 3641},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 51, offset: 3641},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 68, offset: 3658},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 123, col: 1, offset: 3732},
			expr: &actionExpr{
				pos: position{line: 123, col: 33, offset: 3764},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 33, offset: 3764},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 33, offset: 3764},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 33, offset: 3764},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 40, offset: 3771},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 51, offset: 3782},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 59, offset: 3790},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 75, offset: 3806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 127, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 127, col: 19, offset: 3907},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 127, col: 19, offset: 3907},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 19, offset: 3907},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 19, offset: 3907},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 26, offset: 3914},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 3924},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 56, offset: 3944},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 62, offset: 3950},
								expr: &ruleRefExpr{
									pos:  position{line: 127, col: 63, offset: 3951},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 85, offset: 3973},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 85, offset: 3973},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 92, offset: 3980},
							expr: &litMatcher{
								pos:        position{line: 127, col: 92, offset: 3980},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 97, offset: 3985},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 97, offset: 3985},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 132, col: 1, offset: 4135},
			expr: &actionExpr{
				pos: position{line: 132, col: 23, offset: 4157},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 132, col: 23, offset: 4157},
					expr: &charClassMatcher{
						pos:        position{line: 132, col: 23, offset: 4157},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 136, col: 1, offset: 4208},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 4231},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 4231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 24, offset: 4231},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 28, offset: 4235},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 136, col: 35, offset: 4242},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 136, col: 36, offset: 4243},
									expr: &charClassMatcher{
										pos:        position{line: 136, col: 36, offset: 4243},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 4, offset: 4292},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 144, col: 1, offset: 4459},
			expr: &actionExpr{
				pos: position{line: 144, col: 21, offset: 4479},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 144, col: 21, offset: 4479},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 144, col: 21, offset: 4479},
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 21, offset: 4479},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 144, col: 28, offset: 4486},
							expr: &litMatcher{
								pos:        position{line: 144, col: 29, offset: 4487},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 33, offset: 4491},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 145, col: 9, offset: 4511},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 145, col: 10, offset: 4512},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 145, col: 10, offset: 4512},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 10, offset: 4512},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 21, offset: 4523},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 45, offset: 4547},
													expr: &litMatcher{
														pos:        position{line: 145, col: 45, offset: 4547},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 50, offset: 4552},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 58, offset: 4560},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 59, offset: 4561},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 82, offset: 4584},
													expr: &litMatcher{
														pos:        position{line: 145, col: 82, offset: 4584},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 87, offset: 4589},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 97, offset: 4599},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 98, offset: 4600},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 147, col: 15, offset: 4719},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 147, col: 15, offset: 4719},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 15, offset: 4719},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 24, offset: 4728},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 46, offset: 4750},
													expr: &litMatcher{
														pos:        position{line: 147, col: 46, offset: 4750},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 51, offset: 4755},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 61, offset: 4765},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 62, offset: 4766},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 13, offset: 4877},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 154, col: 1, offset: 5012},
			expr: &choiceExpr{
				pos: position{line: 154, col: 27, offset: 5038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 27, offset: 5038},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 154, col: 27, offset: 5038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 154, col: 27, offset: 5038},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 32, offset: 5043},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 39, offset: 5050},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 39, offset: 5050},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 5100},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 5100},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 5100},
									expr: &litMatcher{
										pos:        position{line: 156, col: 5, offset: 5100},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 11, offset: 5106},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 5113},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 5113},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 156, col: 29, offset: 5124},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 29, offset: 5124},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 156, col: 36, offset: 5131},
									expr: &litMatcher{
										pos:        position{line: 156, col: 37, offset: 5132},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 160, col: 1, offset: 5176},
			expr: &actionExpr{
				pos: position{line: 160, col: 25, offset: 5200},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 160, col: 25, offset: 5200},
					expr: &charClassMatcher{
						pos:        position{line: 160, col: 25, offset: 5200},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 164, col: 1, offset: 5250},
			expr: &actionExpr{
				pos: position{line: 164, col: 27, offset: 5276},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 164, col: 27, offset: 5276},
					expr: &charClassMatcher{
						pos:        position{line: 164, col: 27, offset: 5276},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 171, col: 1, offset: 5436},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5460},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 171, col: 25, offset: 5460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 171, col: 25, offset: 5460},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 29, offset: 5464},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 35, offset: 5470},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 171, col: 50, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 9, offset: 5499},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 15, offset: 5505},
								expr: &actionExpr{
									pos: position{line: 172, col: 16, offset: 5506},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 172, col: 17, offset: 5507},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 172, col: 17, offset: 5507},
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 17, offset: 5507},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 172, col: 24, offset: 5514},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 31, offset: 5521},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 174, col: 13, offset: 5597},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 13, offset: 5597},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 20, offset: 5604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 181, col: 1, offset: 5851},
			expr: &actionExpr{
				pos: position{line: 181, col: 18, offset: 5868},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 181, col: 18, offset: 5868},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 181, col: 18, offset: 5868},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 28, offset: 5878},
							expr: &charClassMatcher{
								pos:        position{line: 181, col: 29, offset: 5879},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 185, col: 1, offset: 5931},
			expr: &actionExpr{
				pos: position{line: 185, col: 30, offset: 5960},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 185, col: 30, offset: 5960},
					expr: &charClassMatcher{
						pos:        position{line: 185, col: 30, offset: 5960},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 189, col: 1, offset: 6009},
			expr: &choiceExpr{
				pos: position{line: 189, col: 19, offset: 6027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 19, offset: 6027},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 189, col: 19, offset: 6027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 19, offset: 6027},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 24, offset: 6032},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 6038},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 45, offset: 6053},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 49, offset: 6057},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 49, offset: 6057},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 56, offset: 6064},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 6126},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 6126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 5, offset: 6126},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 9, offset: 6130},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 15, offset: 6136},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 30, offset: 6151},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 35, offset: 6156},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 35, offset: 6156},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 42, offset: 6163},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 195, col: 1, offset: 6226},
			expr: &actionExpr{
				pos: position{line: 195, col: 26, offset: 6251},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 195, col: 26, offset: 6251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 26, offset: 6251},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 30, offset: 6255},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 36, offset: 6261},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 51, offset: 6276},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &actionExpr{
				pos: position{line: 199, col: 15, offset: 6360},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 199, col: 15, offset: 6360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 15, offset: 6360},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 21, offset: 6366},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 22, offset: 6367},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 199, col: 41, offset: 6386},
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 41, offset: 6386},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 203, col: 1, offset: 6460},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 6480},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 6480},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 203, col: 21, offset: 6480},
							expr: &choiceExpr{
								pos: position{line: 203, col: 23, offset: 6482},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 203, col: 23, offset: 6482},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 29, offset: 6488},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 35, offset: 6494},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6571},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 204, col: 11, offset: 6577},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 204, col: 11, offset: 6577},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6599},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6624},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6648},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6677},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6706},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6734},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6762},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6800},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6829},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6867},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 219, col: 1, offset: 7055},
			expr: &choiceExpr{
				pos: position{line: 219, col: 24, offset: 7078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 24, offset: 7078},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 42, offset: 7096},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 221, col: 1, offset: 7115},
			expr: &choiceExpr{
				pos: position{line: 221, col: 14, offset: 7128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 14, offset: 7128},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 221, col: 14, offset: 7128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 221, col: 14, offset: 7128},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 19, offset: 7133},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 23, offset: 7137},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 221, col: 27, offset: 7141},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 221, col: 32, offset: 7146},
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 32, offset: 7146},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 39, offset: 7153},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7208},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 7208},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 5, offset: 7208},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 10, offset: 7213},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 14, offset: 7217},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 7221},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 23, offset: 7226},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7226},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 30, offset: 7233},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7289},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7308},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7308},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7313},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7317},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7321},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7326},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7326},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7609},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7625},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7625},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7629},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7636},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 49, offset: 7657},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7719},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7742},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7742},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7742},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7750},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7750},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 243, col: 1, offset: 7983},
			expr: &actionExpr{
				pos: position{line: 243, col: 16, offset: 7998},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 243, col: 16, offset: 7998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 16, offset: 7998},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 21, offset: 8003},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 243, col: 27, offset: 8009},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 243, col: 27, offset: 8009},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 243, col: 27, offset: 8009},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 243, col: 36, offset: 8018},
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 36, offset: 8018},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 4, offset: 8067},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 8, offset: 8071},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 8, offset: 8071},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 8078},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 249, col: 1, offset: 8138},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8158},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8158},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 249, col: 33, offset: 8170},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 33, offset: 8170},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 40, offset: 8177},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 253, col: 1, offset: 8233},
			expr: &actionExpr{
				pos: position{line: 253, col: 30, offset: 8262},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 253, col: 30, offset: 8262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 253, col: 30, offset: 8262},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 39, offset: 8271},
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 39, offset: 8271},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 46, offset: 8278},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 258, col: 1, offset: 8424},
			expr: &actionExpr{
				pos: position{line: 258, col: 30, offset: 8453},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 258, col: 30, offset: 8453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 30, offset: 8453},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 34, offset: 8457},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 37, offset: 8460},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 53, offset: 8476},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 57, offset: 8480},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 57, offset: 8480},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 64, offset: 8487},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 263, col: 1, offset: 8647},
			expr: &actionExpr{
				pos: position{line: 263, col: 21, offset: 8667},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 263, col: 21, offset: 8667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 21, offset: 8667},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8683},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 14, offset: 8692},
								expr: &actionExpr{
									pos: position{line: 264, col: 15, offset: 8693},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 264, col: 15, offset: 8693},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 15, offset: 8693},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 19, offset: 8697},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 24, offset: 8702},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 25, offset: 8703},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 8759},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 12, offset: 8766},
								expr: &actionExpr{
									pos: position{line: 265, col: 13, offset: 8767},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 265, col: 13, offset: 8767},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 265, col: 13, offset: 8767},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 17, offset: 8771},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 265, col: 22, offset: 8776},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 23, offset: 8777},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8825},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 9, offset: 8829},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 9, offset: 8829},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 16, offset: 8836},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 271, col: 1, offset: 8992},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 9010},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 9010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 19, offset: 9010},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 23, offset: 9014},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 34, offset: 9025},
								expr: &ruleRefExpr{
									pos:  position{line: 271, col: 35, offset: 9026},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 54, offset: 9045},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 58, offset: 9049},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 58, offset: 9049},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 271, col: 65, offset: 9056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 275, col: 1, offset: 9132},
			expr: &choiceExpr{
				pos: position{line: 275, col: 21, offset: 9152},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 21, offset: 9152},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 49, offset: 9180},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 277, col: 1, offset: 9212},
			expr: &actionExpr{
				pos: position{line: 277, col: 30, offset: 9241},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 277, col: 30, offset: 9241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 30, offset: 9241},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 35, offset: 9246},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 49, offset: 9260},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 53, offset: 9264},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 59, offset: 9270},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 60, offset: 9271},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 277, col: 77, offset: 9288},
							expr: &litMatcher{
								pos:        position{line: 277, col: 77, offset: 9288},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 82, offset: 9293},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 82, offset: 9293},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 281, col: 1, offset: 9396},
			expr: &actionExpr{
				pos: position{line: 281, col: 33, offset: 9428},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 33, offset: 9428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 281, col: 33, offset: 9428},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 38, offset: 9433},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 52, offset: 9447},
							expr: &litMatcher{
								pos:        position{line: 281, col: 52, offset: 9447},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 57, offset: 9452},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 57, offset: 9452},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 285, col: 1, offset: 9544},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 9560},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 9560},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 285, col: 17, offset: 9560},
							expr: &litMatcher{
								pos:        position{line: 285, col: 18, offset: 9561},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 26, offset: 9569},
							expr: &litMatcher{
								pos:        position{line: 285, col: 27, offset: 9570},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 35, offset: 9578},
							expr: &litMatcher{
								pos:        position{line: 285, col: 36, offset: 9579},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 46, offset: 9589},
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 48, offset: 9591},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 48, offset: 9591},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 56, offset: 9599},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 61, offset: 9604},
								expr: &charClassMatcher{
									pos:        position{line: 285, col: 61, offset: 9604},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 75, offset: 9618},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 75, offset: 9618},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 289, col: 1, offset: 9665},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9683},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 289, col: 19, offset: 9683},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 289, col: 26, offset: 9690},
						expr: &charClassMatcher{
							pos:        position{line: 289, col: 26, offset: 9690},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 293, col: 1, offset: 9745},
			expr: &actionExpr{
				pos: position{line: 293, col: 29, offset: 9773},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 293, col: 29, offset: 9773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 29, offset: 9773},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 293, col: 36, offset: 9780},
								expr: &charClassMatcher{
									pos:        position{line: 293, col: 36, offset: 9780},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 293, col: 50, offset: 9794},
							expr: &litMatcher{
								pos:        position{line: 293, col: 51, offset: 9795},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 297, col: 1, offset: 9965},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9985},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9985},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 36, offset: 10000},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 36, offset: 10000},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 43, offset: 10007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 301, col: 1, offset: 10077},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 10096},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 10096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 10096},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 29, offset: 10105},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 29, offset: 10105},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 36, offset: 10112},
							expr: &litMatcher{
								pos:        position{line: 301, col: 36, offset: 10112},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 41, offset: 10117},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 48, offset: 10124},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 49, offset: 10125},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 66, offset: 10142},
							expr: &litMatcher{
								pos:        position{line: 301, col: 66, offset: 10142},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 71, offset: 10147},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 77, offset: 10153},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 78, offset: 10154},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 95, offset: 10171},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 99, offset: 10175},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 99, offset: 10175},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 106, offset: 10182},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 305, col: 1, offset: 10255},
			expr: &actionExpr{
				pos: position{line: 305, col: 20, offset: 10274},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 305, col: 20, offset: 10274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 20, offset: 10274},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 29, offset: 10283},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 29, offset: 10283},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 36, offset: 10290},
							expr: &litMatcher{
								pos:        position{line: 305, col: 36, offset: 10290},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 10295},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 48, offset: 10302},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 49, offset: 10303},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 66, offset: 10320},
							expr: &litMatcher{
								pos:        position{line: 305, col: 66, offset: 10320},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 71, offset: 10325},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 77, offset: 10331},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 78, offset: 10332},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 95, offset: 10349},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 99, offset: 10353},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 99, offset: 10353},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 106, offset: 10360},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 309, col: 1, offset: 10451},
			expr: &actionExpr{
				pos: position{line: 309, col: 19, offset: 10469},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 309, col: 20, offset: 10470},
					expr: &charClassMatcher{
						pos:        position{line: 309, col: 20, offset: 10470},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 313, col: 1, offset: 10523},
			expr: &actionExpr{
				pos: position{line: 313, col: 21, offset: 10543},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 313, col: 21, offset: 10543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 21, offset: 10543},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 25, offset: 10547},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 31, offset: 10553},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 32, offset: 10554},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 51, offset: 10573},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 326, col: 1, offset: 11054},
			expr: &actionExpr{
				pos: position{line: 326, col: 20, offset: 11073},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 20, offset: 11073},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 326, col: 27, offset: 11080},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 27, offset: 11080},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 44, offset: 11097},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 333, col: 1, offset: 11366},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11384},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 333, col: 19, offset: 11384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 19, offset: 11384},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 23, offset: 11388},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 28, offset: 11393},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 28, offset: 11393},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 48, offset: 11413},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 337, col: 1, offset: 11473},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 11495},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 11495},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 11495},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 11496},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 11501},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 337, col: 35, offset: 11507},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 337, col: 35, offset: 11507},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 35, offset: 11507},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 346, col: 1, offset: 11823},
			expr: &actionExpr{
				pos: position{line: 346, col: 24, offset: 11846},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 346, col: 24, offset: 11846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 24, offset: 11846},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 28, offset: 11850},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 346, col: 34, offset: 11856},
								expr: &choiceExpr{
									pos: position{line: 346, col: 36, offset: 11858},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 36, offset: 11858},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 346, col: 58, offset: 11880},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 79, offset: 11901},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 350, col: 1, offset: 11936},
			expr: &actionExpr{
				pos: position{line: 350, col: 24, offset: 11959},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 350, col: 24, offset: 11959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 24, offset: 11959},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 28, offset: 11963},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 350, col: 34, offset: 11969},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 34, offset: 11969},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 34, offset: 11969},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 356, col: 1, offset: 12082},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 12103},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 12103},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 12103},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 12107},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 356, col: 30, offset: 12111},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 356, col: 30, offset: 12111},
									expr: &charClassMatcher{
										pos:        position{line: 356, col: 30, offset: 12111},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 362, col: 1, offset: 12218},
			expr: &actionExpr{
				pos: position{line: 362, col: 25, offset: 12242},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 362, col: 25, offset: 12242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 362, col: 25, offset: 12242},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 362, col: 36, offset: 12253},
								expr: &ruleRefExpr{
									pos:  position{line: 362, col: 37, offset: 12254},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 362, col: 56, offset: 12273},
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 56, offset: 12273},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 67, offset: 12284},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 370, col: 1, offset: 12551},
			expr: &choiceExpr{
				pos: position{line: 370, col: 17, offset: 12567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 370, col: 17, offset: 12567},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 370, col: 38, offset: 12588},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 372, col: 1, offset: 12610},
			expr: &actionExpr{
				pos: position{line: 372, col: 23, offset: 12632},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 372, col: 23, offset: 12632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 23, offset: 12632},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 28, offset: 12637},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 37, offset: 12646},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 372, col: 64, offset: 12673},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 376, col: 1, offset: 12765},
			expr: &actionExpr{
				pos: position{line: 376, col: 31, offset: 12795},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 376, col: 31, offset: 12795},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 376, col: 41, offset: 12805},
						expr: &ruleRefExpr{
							pos:  position{line: 376, col: 41, offset: 12805},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 381, col: 1, offset: 12970},
			expr: &actionExpr{
				pos: position{line: 381, col: 30, offset: 12999},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 381, col: 30, offset: 12999},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 382, col: 9, offset: 13018},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 382, col: 9, offset: 13018},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 383, col: 11, offset: 13064},
								expr: &ruleRefExpr{
									pos:  position{line: 383, col: 11, offset: 13064},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 384, col: 11, offset: 13082},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 385, col: 11, offset: 13104},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 386, col: 11, offset: 13127},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 387, col: 11, offset: 13153},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 388, col: 11, offset: 13182},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 389, col: 11, offset: 13198},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 13231},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 13251},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 13273},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 13295},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 13320},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 395, col: 11, offset: 13347},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 395, col: 11, offset: 13347},
										expr: &litMatcher{
											pos:        position{line: 395, col: 12, offset: 13348},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 395, col: 17, offset: 13353},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13378},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 397, col: 11, offset: 13408},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 401, col: 1, offset: 13478},
			expr: &choiceExpr{
				pos: position{line: 401, col: 41, offset: 13518},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 401, col: 41, offset: 13518},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 401, col: 52, offset: 13529},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 401, col: 52, offset: 13529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 52, offset: 13529},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 401, col: 56, offset: 13533},
									expr: &litMatcher{
										pos:        position{line: 401, col: 57, offset: 13534},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 405, col: 1, offset: 13597},
			expr: &actionExpr{
				pos: position{line: 405, col: 23, offset: 13619},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 405, col: 23, offset: 13619},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 23, offset: 13619},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 29, offset: 13625},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 38, offset: 13634},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 65, offset: 13661},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 409, col: 1, offset: 13754},
			expr: &actionExpr{
				pos: position{line: 409, col: 31, offset: 13784},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 409, col: 31, offset: 13784},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 409, col: 41, offset: 13794},
						expr: &ruleRefExpr{
							pos:  position{line: 409, col: 41, offset: 13794},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 414, col: 1, offset: 13959},
			expr: &actionExpr{
				pos: position{line: 414, col: 30, offset: 13988},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 30, offset: 13988},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 415, col: 9, offset: 14007},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 415, col: 9, offset: 14007},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 417, col: 11, offset: 14072},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 418, col: 11, offset: 14094},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 419, col: 11, offset: 14117},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 420, col: 11, offset: 14143},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 14172},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 14188},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14221},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14241},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14263},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14285},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14310},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 428, col: 11, offset: 14337},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 428, col: 11, offset: 14337},
										expr: &litMatcher{
											pos:        position{line: 428, col: 12, offset: 14338},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 428, col: 18, offset: 14344},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14369},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14399},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 434, col: 1, offset: 14477},
			expr: &actionExpr{
				pos: position{line: 434, col: 41, offset: 14517},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 434, col: 42, offset: 14518},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 434, col: 42, offset: 14518},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 434, col: 53, offset: 14529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 434, col: 53, offset: 14529},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 434, col: 57, offset: 14533},
									expr: &litMatcher{
										pos:        position{line: 434, col: 58, offset: 14534},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 441, col: 1, offset: 14706},
			expr: &actionExpr{
				pos: position{line: 441, col: 12, offset: 14717},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 441, col: 12, offset: 14717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 12, offset: 14717},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 23, offset: 14728},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 24, offset: 14729},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 5, offset: 14747},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 442, col: 12, offset: 14754},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 442, col: 12, offset: 14754},
									expr: &litMatcher{
										pos:        position{line: 442, col: 13, offset: 14755},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 446, col: 5, offset: 14850},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 450, col: 5, offset: 15006},
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 5, offset: 15006},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 12, offset: 15013},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 19, offset: 15020},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 34, offset: 15035},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 450, col: 38, offset: 15039},
								expr: &ruleRefExpr{
									pos:  position{line: 450, col: 38, offset: 15039},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 56, offset: 15057},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 454, col: 1, offset: 15167},
			expr: &actionExpr{
				pos: position{line: 454, col: 18, offset: 15184},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 454, col: 18, offset: 15184},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 454, col: 27, offset: 15193},
						expr: &seqExpr{
							pos: position{line: 454, col: 28, offset: 15194},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 454, col: 28, offset: 15194},
									expr: &ruleRefExpr{
										pos:  position{line: 454, col: 29, offset: 15195},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 454, col: 37, offset: 15203},
									expr: &ruleRefExpr{
										pos:  position{line: 454, col: 38, offset: 15204},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 54, offset: 15220},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 458, col: 1, offset: 15345},
			expr: &actionExpr{
				pos: position{line: 458, col: 17, offset: 15361},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 458, col: 17, offset: 15361},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 458, col: 26, offset: 15370},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 458, col: 26, offset: 15370},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 459, col: 11, offset: 15386},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 460, col: 11, offset: 15432},
								expr: &ruleRefExpr{
									pos:  position{line: 460, col: 11, offset: 15432},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 461, col: 11, offset: 15451},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 462, col: 11, offset: 15477},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 463, col: 11, offset: 15506},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 15528},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 15551},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 466, col: 11, offset: 15567},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 467, col: 11, offset: 15593},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 15617},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 15639},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 15672},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 477, col: 1, offset: 15830},
			expr: &seqExpr{
				pos: position{line: 477, col: 31, offset: 15860},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 477, col: 31, offset: 15860},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 41, offset: 15870},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 482, col: 1, offset: 15986},
			expr: &actionExpr{
				pos: position{line: 482, col: 19, offset: 16004},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 482, col: 19, offset: 16004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 482, col: 19, offset: 16004},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 25, offset: 16010},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 40, offset: 16025},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 45, offset: 16030},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 52, offset: 16037},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 68, offset: 16053},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 75, offset: 16060},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 486, col: 1, offset: 16179},
			expr: &actionExpr{
				pos: position{line: 486, col: 20, offset: 16198},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 486, col: 20, offset: 16198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 486, col: 20, offset: 16198},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 26, offset: 16204},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 486, col: 41, offset: 16219},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 45, offset: 16223},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 52, offset: 16230},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 68, offset: 16246},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 75, offset: 16253},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 490, col: 1, offset: 16373},
			expr: &actionExpr{
				pos: position{line: 490, col: 18, offset: 16390},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 490, col: 19, offset: 16391},
					expr: &charClassMatcher{
						pos:        position{line: 490, col: 19, offset: 16391},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 494, col: 1, offset: 16444},
			expr: &actionExpr{
				pos: position{line: 494, col: 19, offset: 16462},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 494, col: 19, offset: 16462},
					expr: &charClassMatcher{
						pos:        position{line: 494, col: 19, offset: 16462},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 498, col: 1, offset: 16514},
			expr: &actionExpr{
				pos: position{line: 498, col: 24, offset: 16537},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 498, col: 24, offset: 16537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 498, col: 24, offset: 16537},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 28, offset: 16541},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 34, offset: 16547},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 35, offset: 16548},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 498, col: 54, offset: 16567},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 505, col: 1, offset: 16756},
			expr: &actionExpr{
				pos: position{line: 505, col: 18, offset: 16773},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 505, col: 18, offset: 16773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 18, offset: 16773},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 505, col: 24, offset: 16779},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 505, col: 24, offset: 16779},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 505, col: 24, offset: 16779},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 505, col: 36, offset: 16791},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 505, col: 42, offset: 16797},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 505, col: 56, offset: 16811},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 505, col: 74, offset: 16829},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 507, col: 8, offset: 16978},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 8, offset: 16978},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 507, col: 15, offset: 16985},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 511, col: 1, offset: 17041},
			expr: &actionExpr{
				pos: position{line: 511, col: 26, offset: 17066},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 511, col: 26, offset: 17066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 511, col: 26, offset: 17066},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 30, offset: 17070},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 511, col: 36, offset: 17076},
								expr: &choiceExpr{
									pos: position{line: 511, col: 37, offset: 17077},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 511, col: 37, offset: 17077},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 511, col: 59, offset: 17099},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 511, col: 80, offset: 17120},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 511, col: 99, offset: 17139},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 515, col: 1, offset: 17215},
			expr: &actionExpr{
				pos: position{line: 515, col: 24, offset: 17238},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 515, col: 24, offset: 17238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 515, col: 24, offset: 17238},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 33, offset: 17247},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 40, offset: 17254},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 515, col: 66, offset: 17280},
							expr: &litMatcher{
								pos:        position{line: 515, col: 66, offset: 17280},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 519, col: 1, offset: 17343},
			expr: &actionExpr{
				pos: position{line: 519, col: 29, offset: 17371},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 519, col: 29, offset: 17371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 29, offset: 17371},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 519, col: 36, offset: 17378},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 519, col: 36, offset: 17378},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 11, offset: 17496},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 521, col: 11, offset: 17533},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 522, col: 11, offset: 17560},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 11, offset: 17593},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 524, col: 11, offset: 17626},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 11, offset: 17654},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 525, col: 31, offset: 17674},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 31, offset: 17674},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 525, col: 39, offset: 17682},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 525, col: 39, offset: 17682},
									expr: &litMatcher{
										pos:        position{line: 525, col: 40, offset: 17683},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 525, col: 46, offset: 17689},
									expr: &litMatcher{
										pos:        position{line: 525, col: 47, offset: 17690},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 529, col: 1, offset: 17726},
			expr: &actionExpr{
				pos: position{line: 529, col: 23, offset: 17748},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 529, col: 23, offset: 17748},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 529, col: 23, offset: 17748},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 529, col: 30, offset: 17755},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 529, col: 30, offset: 17755},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 47, offset: 17772},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 5, offset: 17795},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 530, col: 12, offset: 17802},
								expr: &actionExpr{
									pos: position{line: 530, col: 13, offset: 17803},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 530, col: 13, offset: 17803},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 530, col: 13, offset: 17803},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 530, col: 17, offset: 17807},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 530, col: 24, offset: 17814},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 530, col: 24, offset: 17814},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 530, col: 41, offset: 17831},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 536, col: 1, offset: 17975},
			expr: &actionExpr{
				pos: position{line: 536, col: 29, offset: 18003},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 536, col: 29, offset: 18003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 29, offset: 18003},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 34, offset: 18008},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 536, col: 41, offset: 18015},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 536, col: 41, offset: 18015},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 58, offset: 18032},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 5, offset: 18055},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 537, col: 12, offset: 18062},
								expr: &actionExpr{
									pos: position{line: 537, col: 13, offset: 18063},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 537, col: 13, offset: 18063},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 537, col: 13, offset: 18063},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 537, col: 17, offset: 18067},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 537, col: 24, offset: 18074},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 537, col: 24, offset: 18074},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 537, col: 41, offset: 18091},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 9, offset: 18146},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 543, col: 1, offset: 18240},
			expr: &actionExpr{
				pos: position{line: 543, col: 19, offset: 18258},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 543, col: 19, offset: 18258},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 19, offset: 18258},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 26, offset: 18265},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 543, col: 34, offset: 18273},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 39, offset: 18278},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 44, offset: 18283},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 547, col: 1, offset: 18375},
			expr: &actionExpr{
				pos: position{line: 547, col: 25, offset: 18399},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 547, col: 25, offset: 18399},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 547, col: 25, offset: 18399},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 547, col: 30, offset: 18404},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 37, offset: 18411},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 547, col: 45, offset: 18419},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 547, col: 50, offset: 18424},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 55, offset: 18429},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 547, col: 63, offset: 18437},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 551, col: 1, offset: 18526},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 18545},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 551, col: 20, offset: 18545},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 551, col: 32, offset: 18557},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 555, col: 1, offset: 18656},
			expr: &actionExpr{
				pos: position{line: 555, col: 26, offset: 18681},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 555, col: 26, offset: 18681},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 26, offset: 18681},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 31, offset: 18686},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 43, offset: 18698},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 51, offset: 18706},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 559, col: 1, offset: 18802},
			expr: &actionExpr{
				pos: position{line: 559, col: 23, offset: 18824},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 559, col: 23, offset: 18824},
					expr: &charClassMatcher{
						pos:        position{line: 559, col: 23, offset: 18824},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 563, col: 1, offset: 18873},
			expr: &actionExpr{
				pos: position{line: 563, col: 23, offset: 18895},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 563, col: 23, offset: 18895},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 563, col: 24, offset: 18896},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 563, col: 24, offset: 18896},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 563, col: 34, offset: 18906},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 42, offset: 18914},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 48, offset: 18920},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 563, col: 73, offset: 18945},
							expr: &litMatcher{
								pos:        position{line: 563, col: 73, offset: 18945},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 567, col: 1, offset: 19098},
			expr: &actionExpr{
				pos: position{line: 567, col: 28, offset: 19125},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 567, col: 28, offset: 19125},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 567, col: 28, offset: 19125},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 35, offset: 19132},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 567, col: 54, offset: 19151},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 54, offset: 19151},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 567, col: 62, offset: 19159},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 567, col: 62, offset: 19159},
									expr: &litMatcher{
										pos:        position{line: 567, col: 63, offset: 19160},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 567, col: 69, offset: 19166},
									expr: &litMatcher{
										pos:        position{line: 567, col: 70, offset: 19167},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 571, col: 1, offset: 19203},
			expr: &actionExpr{
				pos: position{line: 571, col: 22, offset: 19224},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 571, col: 22, offset: 19224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 22, offset: 19224},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 29, offset: 19231},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 19246},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 12, offset: 19253},
								expr: &actionExpr{
									pos: position{line: 572, col: 13, offset: 19254},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 572, col: 13, offset: 19254},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 572, col: 13, offset: 19254},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 572, col: 17, offset: 19258},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 572, col: 24, offset: 19265},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 578, col: 1, offset: 19402},
			expr: &choiceExpr{
				pos: position{line: 578, col: 13, offset: 19414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 578, col: 13, offset: 19414},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 578, col: 13, offset: 19414},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 578, col: 18, offset: 19419},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 578, col: 18, offset: 19419},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 578, col: 30, offset: 19431},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 5, offset: 19501},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 580, col: 5, offset: 19501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 580, col: 5, offset: 19501},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 580, col: 9, offset: 19505},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 580, col: 14, offset: 19510},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 580, col: 14, offset: 19510},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 580, col: 26, offset: 19522},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 584, col: 1, offset: 19594},
			expr: &actionExpr{
				pos: position{line: 584, col: 16, offset: 19609},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 584, col: 16, offset: 19609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 584, col: 16, offset: 19609},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 584, col: 23, offset: 19616},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 584, col: 23, offset: 19616},
									expr: &litMatcher{
										pos:        position{line: 584, col: 24, offset: 19617},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 587, col: 5, offset: 19674},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 595, col: 1, offset: 19924},
			expr: &zeroOrMoreExpr{
				pos: position{line: 595, col: 24, offset: 19947},
				expr: &choiceExpr{
					pos: position{line: 595, col: 25, offset: 19948},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 595, col: 25, offset: 19948},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 41, offset: 19964},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 597, col: 1, offset: 19986},
			expr: &actionExpr{
				pos: position{line: 597, col: 21, offset: 20006},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 597, col: 21, offset: 20006},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 597, col: 21, offset: 20006},
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 22, offset: 20007},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 26, offset: 20011},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 597, col: 35, offset: 20020},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 597, col: 35, offset: 20020},
									expr: &charClassMatcher{
										pos:        position{line: 597, col: 35, offset: 20020},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 12, offset: 20084},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 606, col: 1, offset: 20290},
			expr: &actionExpr{
				pos: position{line: 606, col: 21, offset: 20310},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 606, col: 21, offset: 20310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 21, offset: 20310},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 29, offset: 20318},
								expr: &choiceExpr{
									pos: position{line: 606, col: 30, offset: 20319},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 606, col: 30, offset: 20319},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 606, col: 53, offset: 20342},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 606, col: 74, offset: 20363},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 606, col: 74, offset: 20363,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 107, offset: 20396},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 610, col: 1, offset: 20471},
			expr: &actionExpr{
				pos: position{line: 610, col: 25, offset: 20495},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 610, col: 25, offset: 20495},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 610, col: 25, offset: 20495},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 33, offset: 20503},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 610, col: 38, offset: 20508},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 38, offset: 20508},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 610, col: 78, offset: 20548},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 614, col: 1, offset: 20617},
			expr: &actionExpr{
				pos: position{line: 614, col: 23, offset: 20639},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 614, col: 23, offset: 20639},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 614, col: 23, offset: 20639},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 31, offset: 20647},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 614, col: 36, offset: 20652},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 614, col: 36, offset: 20652},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 614, col: 76, offset: 20692},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 621, col: 1, offset: 20863},
			expr: &choiceExpr{
				pos: position{line: 621, col: 18, offset: 20880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 621, col: 18, offset: 20880},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 621, col: 18, offset: 20880},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 27, offset: 20889},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 623, col: 9, offset: 20948},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 623, col: 9, offset: 20948},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 623, col: 15, offset: 20954},
								expr: &ruleRefExpr{
									pos:  position{line: 623, col: 16, offset: 20955},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 627, col: 1, offset: 21051},
			expr: &actionExpr{
				pos: position{line: 627, col: 22, offset: 21072},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 627, col: 22, offset: 21072},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 627, col: 22, offset: 21072},
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 23, offset: 21073},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 628, col: 5, offset: 21082},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 6, offset: 21083},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 629, col: 5, offset: 21099},
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 6, offset: 21100},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 630, col: 5, offset: 21123},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 6, offset: 21124},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 631, col: 5, offset: 21151},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 6, offset: 21152},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 632, col: 5, offset: 21181},
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 6, offset: 21182},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 633, col: 5, offset: 21209},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 6, offset: 21210},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 634, col: 5, offset: 21236},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 6, offset: 21237},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 635, col: 5, offset: 21259},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 6, offset: 21260},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 5, offset: 21280},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 6, offset: 21281},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 21309},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 637, col: 11, offset: 21315},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 637, col: 11, offset: 21315},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 637, col: 20, offset: 21324},
										expr: &ruleRefExpr{
											pos:  position{line: 637, col: 21, offset: 21325},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 12, offset: 21426},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 643, col: 1, offset: 21469},
			expr: &seqExpr{
				pos: position{line: 643, col: 25, offset: 21493},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 643, col: 25, offset: 21493},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 643, col: 29, offset: 21497},
						expr: &ruleRefExpr{
							pos:  position{line: 643, col: 29, offset: 21497},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 643, col: 36, offset: 21504},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 645, col: 1, offset: 21578},
			expr: &actionExpr{
				pos: position{line: 645, col: 29, offset: 21606},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 645, col: 29, offset: 21606},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 645, col: 29, offset: 21606},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 645, col: 50, offset: 21627},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 58, offset: 21635},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 649, col: 1, offset: 21745},
			expr: &actionExpr{
				pos: position{line: 649, col: 29, offset: 21773},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 649, col: 29, offset: 21773},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 649, col: 29, offset: 21773},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 30, offset: 21774},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 21784},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 650, col: 14, offset: 21793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 650, col: 14, offset: 21793},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 651, col: 11, offset: 21819},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 652, col: 11, offset: 21844},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 653, col: 11, offset: 21899},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 11, offset: 21922},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 655, col: 11, offset: 21950},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 21980},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 658, col: 11, offset: 22047},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 22099},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 22124},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22157},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22184},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22222},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22248},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 671, col: 1, offset: 22418},
			expr: &actionExpr{
				pos: position{line: 671, col: 20, offset: 22437},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 671, col: 20, offset: 22437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 20, offset: 22437},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 671, col: 31, offset: 22448},
								expr: &ruleRefExpr{
									pos:  position{line: 671, col: 32, offset: 22449},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 671, col: 45, offset: 22462},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 53, offset: 22470},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 671, col: 76, offset: 22493},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 85, offset: 22502},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 675, col: 1, offset: 22646},
			expr: &actionExpr{
				pos: position{line: 676, col: 5, offset: 22677},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 676, col: 5, offset: 22677},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 676, col: 5, offset: 22677},
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 5, offset: 22677},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 12, offset: 22684},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 678, col: 9, offset: 22749},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 678, col: 9, offset: 22749},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 678, col: 9, offset: 22749},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 678, col: 9, offset: 22749},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 678, col: 16, offset: 22756},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 678, col: 16, offset: 22756},
															expr: &litMatcher{
																pos:        position{line: 678, col: 17, offset: 22757},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 682, col: 9, offset: 22861},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 701, col: 11, offset: 23597},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 701, col: 11, offset: 23597},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 701, col: 11, offset: 23597},
													expr: &charClassMatcher{
														pos:        position{line: 701, col: 12, offset: 23598},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 701, col: 20, offset: 23606},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 703, col: 13, offset: 23719},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 703, col: 13, offset: 23719},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 703, col: 14, offset: 23720},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 703, col: 21, offset: 23727},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 705, col: 13, offset: 23843},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 705, col: 13, offset: 23843},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 705, col: 14, offset: 23844},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 705, col: 21, offset: 23851},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 707, col: 13, offset: 23967},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 707, col: 13, offset: 23967},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 707, col: 13, offset: 23967},
													expr: &charClassMatcher{
														pos:        position{line: 707, col: 14, offset: 23968},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 707, col: 22, offset: 23976},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 709, col: 13, offset: 24092},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 709, col: 13, offset: 24092},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 709, col: 13, offset: 24092},
													expr: &charClassMatcher{
														pos:        position{line: 709, col: 14, offset: 24093},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 709, col: 22, offset: 24101},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 711, col: 12, offset: 24216},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 12, offset: 24216},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 715, col: 1, offset: 24255},
			expr: &actionExpr{
				pos: position{line: 715, col: 27, offset: 24281},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 715, col: 27, offset: 24281},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 715, col: 37, offset: 24291},
						expr: &ruleRefExpr{
							pos:  position{line: 715, col: 37, offset: 24291},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 722, col: 1, offset: 24498},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 24519},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 722, col: 22, offset: 24519},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 24519},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 722, col: 33, offset: 24530},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 34, offset: 24531},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 47, offset: 24544},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 55, offset: 24552},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 80, offset: 24577},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 722, col: 91, offset: 24588},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 92, offset: 24589},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 122, offset: 24619},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 131, offset: 24628},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 726, col: 1, offset: 24790},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 24823},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 727, col: 5, offset: 24823},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 727, col: 5, offset: 24823},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 5, offset: 24823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 12, offset: 24830},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 727, col: 20, offset: 24838},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 729, col: 9, offset: 24897},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 729, col: 9, offset: 24897},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 729, col: 9, offset: 24897},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 729, col: 16, offset: 24904},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 729, col: 16, offset: 24904},
															expr: &litMatcher{
																pos:        position{line: 729, col: 17, offset: 24905},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 733, col: 9, offset: 25009},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 750, col: 14, offset: 25733},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 750, col: 21, offset: 25740},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 750, col: 22, offset: 25741},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 752, col: 13, offset: 25829},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 13, offset: 25829},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 756, col: 1, offset: 25869},
			expr: &actionExpr{
				pos: position{line: 756, col: 32, offset: 25900},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 756, col: 32, offset: 25900},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 756, col: 32, offset: 25900},
							expr: &litMatcher{
								pos:        position{line: 756, col: 33, offset: 25901},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 37, offset: 25905},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 757, col: 7, offset: 25920},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 757, col: 7, offset: 25920},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 757, col: 7, offset: 25920},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 758, col: 7, offset: 25966},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 758, col: 7, offset: 25966},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 759, col: 7, offset: 26010},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 759, col: 7, offset: 26010},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 760, col: 7, offset: 26053},
							expr: &ruleRefExpr{
								pos:  position{line: 760, col: 7, offset: 26053},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 764, col: 1, offset: 26099},
			expr: &actionExpr{
				pos: position{line: 764, col: 29, offset: 26127},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 764, col: 29, offset: 26127},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 764, col: 39, offset: 26137},
						expr: &ruleRefExpr{
							pos:  position{line: 764, col: 39, offset: 26137},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 771, col: 1, offset: 26460},
			expr: &actionExpr{
				pos: position{line: 771, col: 20, offset: 26479},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 771, col: 20, offset: 26479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 771, col: 20, offset: 26479},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 771, col: 31, offset: 26490},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 32, offset: 26491},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 45, offset: 26504},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 51, offset: 26510},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 80, offset: 26539},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 91, offset: 26550},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 117, offset: 26576},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 771, col: 129, offset: 26588},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 130, offset: 26589},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 775, col: 1, offset: 26739},
			expr: &seqExpr{
				pos: position{line: 775, col: 26, offset: 26764},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 775, col: 26, offset: 26764},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 775, col: 54, offset: 26792},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 777, col: 1, offset: 26820},
			expr: &choiceExpr{
				pos: position{line: 777, col: 33, offset: 26852},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 777, col: 33, offset: 26852},
						expr: &charClassMatcher{
							pos:        position{line: 777, col: 33, offset: 26852},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 777, col: 45, offset: 26864},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 777, col: 45, offset: 26864},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 777, col: 49, offset: 26868},
								expr: &litMatcher{
									pos:        position{line: 777, col: 50, offset: 26869},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 778, col: 1, offset: 26874},
			expr: &actionExpr{
				pos: position{line: 778, col: 32, offset: 26905},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 778, col: 32, offset: 26905},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 778, col: 42, offset: 26915},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 778, col: 42, offset: 26915},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 42, offset: 26915},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 784, col: 1, offset: 27076},
			expr: &actionExpr{
				pos: position{line: 784, col: 24, offset: 27099},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 784, col: 24, offset: 27099},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 784, col: 33, offset: 27108},
						expr: &seqExpr{
							pos: position{line: 784, col: 34, offset: 27109},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 784, col: 34, offset: 27109},
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 35, offset: 27110},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 784, col: 43, offset: 27118},
									expr: &litMatcher{
										pos:        position{line: 784, col: 44, offset: 27119},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 49, offset: 27124},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 788, col: 1, offset: 27255},
			expr: &actionExpr{
				pos: position{line: 788, col: 31, offset: 27285},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 31, offset: 27285},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 788, col: 40, offset: 27294},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 788, col: 40, offset: 27294},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 789, col: 11, offset: 27310},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 790, col: 11, offset: 27360},
								expr: &ruleRefExpr{
									pos:  position{line: 790, col: 11, offset: 27360},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 791, col: 11, offset: 27379},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 27405},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 793, col: 11, offset: 27435},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 794, col: 11, offset: 27456},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 795, col: 11, offset: 27485},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 27507},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27531},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 27547},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 27573},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27597},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27619},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27652},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 806, col: 1, offset: 27695},
			expr: &actionExpr{
				pos: position{line: 807, col: 5, offset: 27729},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 807, col: 5, offset: 27729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 27729},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 807, col: 16, offset: 27740},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 807, col: 16, offset: 27740},
									expr: &litMatcher{
										pos:        position{line: 807, col: 17, offset: 27741},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 810, col: 5, offset: 27802},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 814, col: 6, offset: 27982},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 814, col: 6, offset: 27982},
									expr: &choiceExpr{
										pos: position{line: 814, col: 7, offset: 27983},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 814, col: 7, offset: 27983},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 814, col: 15, offset: 27991},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 814, col: 27, offset: 28003},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 818, col: 1, offset: 28047},
			expr: &actionExpr{
				pos: position{line: 818, col: 31, offset: 28077},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 818, col: 31, offset: 28077},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 818, col: 40, offset: 28086},
						expr: &ruleRefExpr{
							pos:  position{line: 818, col: 41, offset: 28087},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 825, col: 1, offset: 28285},
			expr: &choiceExpr{
				pos: position{line: 825, col: 19, offset: 28303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 825, col: 19, offset: 28303},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 825, col: 19, offset: 28303},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 9, offset: 28351},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 827, col: 9, offset: 28351},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 9, offset: 28401},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 829, col: 9, offset: 28401},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 9, offset: 28461},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 831, col: 9, offset: 28461},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 833, col: 9, offset: 28517},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 833, col: 9, offset: 28517},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 842, col: 1, offset: 28833},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 28882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 28882},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 28882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 28882},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 844, col: 16, offset: 28893},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 17, offset: 28894},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 30, offset: 28907},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 33, offset: 28910},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 844, col: 49, offset: 28926},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 844, col: 54, offset: 28931},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 844, col: 60, offset: 28937},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 61, offset: 28938},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 29123},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 29123},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 848, col: 5, offset: 29123},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 848, col: 16, offset: 29134},
										expr: &ruleRefExpr{
											pos:  position{line: 848, col: 17, offset: 29135},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 30, offset: 29148},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 848, col: 35, offset: 29153},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 44, offset: 29162},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 29361},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 29361},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 852, col: 5, offset: 29361},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 852, col: 16, offset: 29372},
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 17, offset: 29373},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 852, col: 30, offset: 29386},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 859, col: 7, offset: 29672},
									expr: &ruleRefExpr{
										pos:  position{line: 859, col: 8, offset: 29673},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 859, col: 23, offset: 29688},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 859, col: 32, offset: 29697},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 29898},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 29898},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 863, col: 5, offset: 29898},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 863, col: 16, offset: 29909},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 17, offset: 29910},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 863, col: 30, offset: 29923},
									expr: &ruleRefExpr{
										pos:  position{line: 863, col: 31, offset: 29924},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 863, col: 46, offset: 29939},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 863, col: 52, offset: 29945},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 53, offset: 29946},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 867, col: 1, offset: 30046},
			expr: &oneOrMoreExpr{
				pos: position{line: 867, col: 38, offset: 30083},
				expr: &actionExpr{
					pos: position{line: 867, col: 39, offset: 30084},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 867, col: 39, offset: 30084},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 867, col: 39, offset: 30084},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 40, offset: 30085},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 867, col: 50, offset: 30095},
								expr: &litMatcher{
									pos:        position{line: 867, col: 50, offset: 30095},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 867, col: 56, offset: 30101},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 65, offset: 30110},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 871, col: 1, offset: 30255},
			expr: &actionExpr{
				pos: position{line: 871, col: 34, offset: 30288},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 871, col: 34, offset: 30288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 871, col: 34, offset: 30288},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 871, col: 40, offset: 30294},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 871, col: 48, offset: 30302},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 871, col: 49, offset: 30303},
									expr: &charClassMatcher{
										pos:        position{line: 871, col: 49, offset: 30303},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 873, col: 8, offset: 30355},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 877, col: 1, offset: 30391},
			expr: &oneOrMoreExpr{
				pos: position{line: 877, col: 36, offset: 30426},
				expr: &actionExpr{
					pos: position{line: 877, col: 37, offset: 30427},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 877, col: 37, offset: 30427},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 877, col: 37, offset: 30427},
								expr: &ruleRefExpr{
									pos:  position{line: 877, col: 38, offset: 30428},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 877, col: 48, offset: 30438},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 877, col: 57, offset: 30447},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 882, col: 1, offset: 30665},
			expr: &actionExpr{
				pos: position{line: 882, col: 20, offset: 30684},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 882, col: 20, offset: 30684},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 882, col: 20, offset: 30684},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 882, col: 31, offset: 30695},
								expr: &ruleRefExpr{
									pos:  position{line: 882, col: 32, offset: 30696},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 883, col: 5, offset: 30715},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 31009},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 16, offset: 31020},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 5, offset: 31044},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 892, col: 16, offset: 31055},
								expr: &ruleRefExpr{
									pos:  position{line: 892, col: 17, offset: 31056},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 896, col: 1, offset: 31194},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 31222},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 31222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 31222},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 897, col: 15, offset: 31232},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 897, col: 15, offset: 31232},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 897, col: 20, offset: 31237},
										expr: &ruleRefExpr{
											pos:  position{line: 897, col: 20, offset: 31237},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 36, offset: 31253},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 901, col: 1, offset: 31328},
			expr: &actionExpr{
				pos: position{line: 901, col: 23, offset: 31350},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 901, col: 23, offset: 31350},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 901, col: 33, offset: 31360},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 906, col: 1, offset: 31485},
			expr: &choiceExpr{
				pos: position{line: 908, col: 5, offset: 31543},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 31543},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 31543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 908, col: 5, offset: 31543},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 908, col: 16, offset: 31554},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 17, offset: 31555},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 908, col: 30, offset: 31568},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 33, offset: 31571},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 908, col: 49, offset: 31587},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 908, col: 54, offset: 31592},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 61, offset: 31599},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 31803},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 31803},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 912, col: 5, offset: 31803},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 912, col: 16, offset: 31814},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 17, offset: 31815},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 912, col: 30, offset: 31828},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 37, offset: 31835},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 916, col: 1, offset: 31940},
			expr: &actionExpr{
				pos: position{line: 916, col: 28, offset: 31967},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 916, col: 28, offset: 31967},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 916, col: 28, offset: 31967},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 39, offset: 31978},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 59, offset: 31998},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 916, col: 70, offset: 32009},
								expr: &seqExpr{
									pos: position{line: 916, col: 71, offset: 32010},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 916, col: 71, offset: 32010},
											expr: &ruleRefExpr{
												pos:  position{line: 916, col: 72, offset: 32011},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 93, offset: 32032},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 920, col: 1, offset: 32142},
			expr: &choiceExpr{
				pos: position{line: 922, col: 5, offset: 32196},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 32196},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 922, col: 5, offset: 32196},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 922, col: 5, offset: 32196},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 922, col: 16, offset: 32207},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 17, offset: 32208},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 923, col: 5, offset: 32226},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 930, col: 5, offset: 32438},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 8, offset: 32441},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 24, offset: 32457},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 930, col: 29, offset: 32462},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 930, col: 35, offset: 32468},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 36, offset: 32469},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 32665},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 32665},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 934, col: 5, offset: 32665},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 934, col: 16, offset: 32676},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 17, offset: 32677},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 935, col: 5, offset: 32695},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 32907},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 942, col: 11, offset: 32913},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 12, offset: 32914},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 946, col: 1, offset: 33019},
			expr: &actionExpr{
				pos: position{line: 946, col: 19, offset: 33037},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 946, col: 19, offset: 33037},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 946, col: 19, offset: 33037},
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 20, offset: 33038},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 947, col: 5, offset: 33053},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 947, col: 15, offset: 33063},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 947, col: 15, offset: 33063},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 947, col: 15, offset: 33063},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 947, col: 24, offset: 33072},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 949, col: 9, offset: 33166},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 949, col: 9, offset: 33166},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 949, col: 9, offset: 33166},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 949, col: 18, offset: 33175},
														expr: &ruleRefExpr{
															pos:  position{line: 949, col: 19, offset: 33176},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 949, col: 35, offset: 33192},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 955, col: 1, offset: 33315},
			expr: &actionExpr{
				pos: position{line: 956, col: 5, offset: 33339},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 956, col: 5, offset: 33339},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 956, col: 14, offset: 33348},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 956, col: 14, offset: 33348},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 957, col: 11, offset: 33400},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 958, col: 11, offset: 33446},
								expr: &ruleRefExpr{
									pos:  position{line: 958, col: 11, offset: 33446},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 959, col: 11, offset: 33465},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 959, col: 11, offset: 33465},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 12, offset: 33466},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 960, col: 13, offset: 33485},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 960, col: 13, offset: 33485},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 961, col: 15, offset: 33513},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 962, col: 15, offset: 33539},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 963, col: 15, offset: 33565},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 15, offset: 33593},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 15, offset: 33614},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 15, offset: 33648},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 967, col: 15, offset: 33679},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 15, offset: 33710},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 15, offset: 33742},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 970, col: 15, offset: 33780},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 33811},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33845},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33870},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 980, col: 1, offset: 34100},
			expr: &actionExpr{
				pos: position{line: 980, col: 14, offset: 34113},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 980, col: 14, offset: 34113},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 980, col: 14, offset: 34113},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 980, col: 20, offset: 34119},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 980, col: 24, offset: 34123},
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 24, offset: 34123},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 980, col: 31, offset: 34130},
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 32, offset: 34131},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 987, col: 1, offset: 34422},
			expr: &choiceExpr{
				pos: position{line: 987, col: 15, offset: 34436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 987, col: 15, offset: 34436},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 41, offset: 34462},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 65, offset: 34486},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 989, col: 1, offset: 34507},
			expr: &choiceExpr{
				pos: position{line: 989, col: 32, offset: 34538},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 989, col: 32, offset: 34538},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 989, col: 32, offset: 34538},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 989, col: 36, offset: 34542},
								expr: &litMatcher{
									pos:        position{line: 989, col: 37, offset: 34543},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 989, col: 43, offset: 34549},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 989, col: 43, offset: 34549},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 989, col: 47, offset: 34553},
								expr: &litMatcher{
									pos:        position{line: 989, col: 48, offset: 34554},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 989, col: 54, offset: 34560},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 989, col: 54, offset: 34560},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 989, col: 58, offset: 34564},
								expr: &litMatcher{
									pos:        position{line: 989, col: 59, offset: 34565},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 989, col: 65, offset: 34571},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 989, col: 65, offset: 34571},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 989, col: 69, offset: 34575},
								expr: &litMatcher{
									pos:        position{line: 989, col: 70, offset: 34576},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 991, col: 1, offset: 34583},
			expr: &choiceExpr{
				pos: position{line: 991, col: 34, offset: 34616},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 991, col: 34, offset: 34616},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 991, col: 41, offset: 34623},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 991, col: 48, offset: 34630},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 991, col: 55, offset: 34637},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 991, col: 62, offset: 34644},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 991, col: 68, offset: 34650},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 993, col: 1, offset: 34657},
			expr: &actionExpr{
				pos: position{line: 993, col: 26, offset: 34682},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 26, offset: 34682},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 993, col: 32, offset: 34688},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 993, col: 32, offset: 34688},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 994, col: 15, offset: 34724},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 995, col: 15, offset: 34761},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 996, col: 15, offset: 34798},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 997, col: 15, offset: 34839},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 998, col: 15, offset: 34869},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 999, col: 15, offset: 34901},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1003, col: 1, offset: 35059},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 28, offset: 35086},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1003, col: 28, offset: 35086},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 15, offset: 35121},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 15, offset: 35158},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 15, offset: 35195},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1008, col: 1, offset: 35223},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 22, offset: 35244},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 22, offset: 35244},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 15, offset: 35276},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 15, offset: 35309},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 15, offset: 35342},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 15, offset: 35379},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1013, col: 15, offset: 35416},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1015, col: 1, offset: 35442},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 33, offset: 35474},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1015, col: 33, offset: 35474},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1015, col: 39, offset: 35480},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 39, offset: 35480},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1019, col: 1, offset: 35617},
			expr: &actionExpr{
				pos: position{line: 1019, col: 25, offset: 35641},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1019, col: 25, offset: 35641},
					expr: &litMatcher{
						pos:        position{line: 1019, col: 25, offset: 35641},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1023, col: 1, offset: 35686},
			expr: &actionExpr{
				pos: position{line: 1023, col: 25, offset: 35710},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 25, offset: 35710},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1023, col: 25, offset: 35710},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1023, col: 30, offset: 35715},
							expr: &litMatcher{
								pos:        position{line: 1023, col: 30, offset: 35715},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1031, col: 1, offset: 35820},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 13, offset: 35832},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1031, col: 13, offset: 35832},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 35, offset: 35854},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1033, col: 1, offset: 35923},
			expr: &actionExpr{
				pos: position{line: 1033, col: 24, offset: 35946},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 24, offset: 35946},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1033, col: 24, offset: 35946},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1033, col: 30, offset: 35952},
								expr: &ruleRefExpr{
									pos:  position{line: 1033, col: 31, offset: 35953},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1033, col: 49, offset: 35971},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 54, offset: 35976},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 64, offset: 35986},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1033, col: 93, offset: 36015},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1037, col: 1, offset: 36106},
			expr: &seqExpr{
				pos: position{line: 1037, col: 32, offset: 36137},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 32, offset: 36137},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1037, col: 59, offset: 36164},
						expr: &seqExpr{
							pos: position{line: 1037, col: 60, offset: 36165},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1037, col: 60, offset: 36165},
									expr: &litMatcher{
										pos:        position{line: 1037, col: 62, offset: 36167},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1037, col: 69, offset: 36174},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1037, col: 69, offset: 36174},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1037, col: 77, offset: 36182},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1039, col: 1, offset: 36249},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 31, offset: 36279},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1039, col: 31, offset: 36279},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1040, col: 11, offset: 36295},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1040, col: 11, offset: 36295},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1040, col: 19, offset: 36303},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 20, offset: 36304},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 11, offset: 36323},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 11, offset: 36355},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 11, offset: 36377},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 11, offset: 36399},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 11, offset: 36424},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 11, offset: 36449},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 11, offset: 36476},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 11, offset: 36498},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 36521},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 36537},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 36566},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 36590},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 36623},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 36667},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 1057, col: 1, offset: 36709},
			expr: &actionExpr{
				pos: position{line: 1057, col: 37, offset: 36745},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1057, col: 37, offset: 36745},
					expr: &seqExpr{
						pos: position{line: 1057, col: 38, offset: 36746},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1057, col: 38, offset: 36746},
								expr: &litMatcher{
									pos:        position{line: 1057, col: 39, offset: 36747},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1057, col: 44, offset: 36752},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1061, col: 1, offset: 36827},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 36873},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1062, col: 5, offset: 36873},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1063, col: 7, offset: 36971},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1063, col: 7, offset: 36971},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1063, col: 7, offset: 36971},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1063, col: 12, offset: 36976},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1067, col: 1, offset: 37143},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 24, offset: 37166},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 24, offset: 37166},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1067, col: 24, offset: 37166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1067, col: 24, offset: 37166},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1067, col: 30, offset: 37172},
										expr: &ruleRefExpr{
											pos:  position{line: 1067, col: 31, offset: 37173},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1067, col: 51, offset: 37193},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1067, col: 51, offset: 37193},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1067, col: 55, offset: 37197},
											expr: &litMatcher{
												pos:        position{line: 1067, col: 56, offset: 37198},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 61, offset: 37203},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 71, offset: 37213},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1067, col: 100, offset: 37242},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1067, col: 104, offset: 37246},
									expr: &notExpr{
										pos: position{line: 1067, col: 106, offset: 37248},
										expr: &ruleRefExpr{
											pos:  position{line: 1067, col: 107, offset: 37249},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 37445},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1069, col: 5, offset: 37445},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1069, col: 5, offset: 37445},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1069, col: 11, offset: 37451},
										expr: &ruleRefExpr{
											pos:  position{line: 1069, col: 12, offset: 37452},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 30, offset: 37470},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 34, offset: 37474},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1069, col: 44, offset: 37484},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1069, col: 44, offset: 37484},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1069, col: 48, offset: 37488},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 77, offset: 37517},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1073, col: 1, offset: 37727},
			expr: &seqExpr{
				pos: position{line: 1073, col: 32, offset: 37758},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1073, col: 32, offset: 37758},
						expr: &ruleRefExpr{
							pos:  position{line: 1073, col: 33, offset: 37759},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1073, col: 39, offset: 37765},
						expr: &ruleRefExpr{
							pos:  position{line: 1073, col: 39, offset: 37765},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1075, col: 1, offset: 37796},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 31, offset: 37826},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1075, col: 31, offset: 37826},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1076, col: 11, offset: 37842},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1076, col: 11, offset: 37842},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1076, col: 19, offset: 37850},
								expr: &ruleRefExpr{
									pos:  position{line: 1076, col: 20, offset: 37851},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 11, offset: 37870},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 1078, col: 11, offset: 37901},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1078, col: 11, offset: 37901},
								expr: &ruleRefExpr{
									pos:  position{line: 1078, col: 11, offset: 37901},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1078, col: 18, offset: 37908},
								expr: &seqExpr{
									pos: position{line: 1078, col: 19, offset: 37909},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1078, col: 19, offset: 37909},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1078, col: 23, offset: 37913},
											expr: &litMatcher{
												pos:        position{line: 1078, col: 24, offset: 37914},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 37931},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 37953},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 37975},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 38000},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 38025},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 38052},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 38074},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 38098},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 38116},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 38145},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 38169},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 38202},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 38246},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1093, col: 1, offset: 38286},
			expr: &actionExpr{
				pos: position{line: 1093, col: 37, offset: 38322},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1093, col: 37, offset: 38322},
					expr: &charClassMatcher{
						pos:        position{line: 1093, col: 37, offset: 38322},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1097, col: 1, offset: 38552},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 38598},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1098, col: 5, offset: 38598},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1099, col: 7, offset: 38696},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1099, col: 7, offset: 38696},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1099, col: 7, offset: 38696},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 11, offset: 38700},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1103, col: 1, offset: 38867},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 5, offset: 38892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 38892},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 38892},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 5, offset: 38892},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 18, offset: 38905},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 40, offset: 38927},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 45, offset: 38932},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 55, offset: 38942},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 84, offset: 38971},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 9, offset: 39130},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1106, col: 9, offset: 39130},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 9, offset: 39130},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 22, offset: 39143},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 39165},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 49, offset: 39170},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 59, offset: 39180},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 88, offset: 39209},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 9, offset: 39412},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1109, col: 9, offset: 39412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 9, offset: 39412},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 22, offset: 39425},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 44, offset: 39447},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 48, offset: 39451},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 58, offset: 39461},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 87, offset: 39490},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1117, col: 1, offset: 39706},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 15, offset: 39720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 15, offset: 39720},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 39, offset: 39744},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1119, col: 1, offset: 39769},
			expr: &actionExpr{
				pos: position{line: 1119, col: 26, offset: 39794},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 26, offset: 39794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1119, col: 26, offset: 39794},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1119, col: 32, offset: 39800},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 33, offset: 39801},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 51, offset: 39819},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 56, offset: 39824},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 66, offset: 39834},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 97, offset: 39865},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1123, col: 1, offset: 40003},
			expr: &seqExpr{
				pos: position{line: 1123, col: 34, offset: 40036},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1123, col: 34, offset: 40036},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1123, col: 63, offset: 40065},
						expr: &seqExpr{
							pos: position{line: 1123, col: 64, offset: 40066},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1123, col: 64, offset: 40066},
									expr: &litMatcher{
										pos:        position{line: 1123, col: 66, offset: 40068},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1123, col: 73, offset: 40075},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1123, col: 73, offset: 40075},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1123, col: 81, offset: 40083},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1125, col: 1, offset: 40152},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 33, offset: 40184},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 33, offset: 40184},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1126, col: 11, offset: 40200},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1126, col: 11, offset: 40200},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1126, col: 19, offset: 40208},
								expr: &ruleRefExpr{
									pos:  position{line: 1126, col: 20, offset: 40209},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 40228},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 40262},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 40282},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 40304},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 40329},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 40354},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 40381},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 40403},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 40427},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 40444},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 40473},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 40497},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 40543},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1141, col: 1, offset: 40585},
			expr: &actionExpr{
				pos: position{line: 1141, col: 39, offset: 40623},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1141, col: 39, offset: 40623},
					expr: &seqExpr{
						pos: position{line: 1141, col: 40, offset: 40624},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1141, col: 40, offset: 40624},
								expr: &litMatcher{
									pos:        position{line: 1141, col: 41, offset: 40625},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1141, col: 46, offset: 40630},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1145, col: 1, offset: 40705},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 40753},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1146, col: 5, offset: 40753},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1147, col: 7, offset: 40853},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1147, col: 7, offset: 40853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 7, offset: 40853},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 12, offset: 40858},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1151, col: 1, offset: 41027},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 26, offset: 41052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1151, col: 26, offset: 41052},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1151, col: 26, offset: 41052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 26, offset: 41052},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1151, col: 32, offset: 41058},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 33, offset: 41059},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1151, col: 52, offset: 41078},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1151, col: 52, offset: 41078},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1151, col: 56, offset: 41082},
											expr: &litMatcher{
												pos:        position{line: 1151, col: 57, offset: 41083},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 62, offset: 41088},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 72, offset: 41098},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 103, offset: 41129},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1153, col: 5, offset: 41321},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1153, col: 5, offset: 41321},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1153, col: 5, offset: 41321},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1153, col: 11, offset: 41327},
										expr: &ruleRefExpr{
											pos:  position{line: 1153, col: 12, offset: 41328},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 30, offset: 41346},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 34, offset: 41350},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1153, col: 44, offset: 41360},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1153, col: 44, offset: 41360},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1153, col: 48, offset: 41364},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 79, offset: 41395},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1157, col: 1, offset: 41609},
			expr: &seqExpr{
				pos: position{line: 1157, col: 34, offset: 41642},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1157, col: 34, offset: 41642},
						expr: &ruleRefExpr{
							pos:  position{line: 1157, col: 35, offset: 41643},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1157, col: 41, offset: 41649},
						expr: &ruleRefExpr{
							pos:  position{line: 1157, col: 41, offset: 41649},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1159, col: 1, offset: 41682},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 33, offset: 41714},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 33, offset: 41714},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1160, col: 11, offset: 41730},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1160, col: 11, offset: 41730},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1160, col: 19, offset: 41738},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 20, offset: 41739},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 41758},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1162, col: 11, offset: 41791},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1162, col: 11, offset: 41791},
								expr: &ruleRefExpr{
									pos:  position{line: 1162, col: 11, offset: 41791},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1162, col: 18, offset: 41798},
								expr: &seqExpr{
									pos: position{line: 1162, col: 19, offset: 41799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1162, col: 19, offset: 41799},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1162, col: 23, offset: 41803},
											expr: &litMatcher{
												pos:        position{line: 1162, col: 24, offset: 41804},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 41821},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 41841},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 41863},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 11, offset: 41888},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 11, offset: 41913},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 11, offset: 41940},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 41962},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 11, offset: 41986},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 11, offset: 42004},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 42034},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 42058},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 42091},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 42137},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1177, col: 1, offset: 42179},
			expr: &actionExpr{
				pos: position{line: 1177, col: 39, offset: 42217},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1177, col: 39, offset: 42217},
					expr: &charClassMatcher{
						pos:        position{line: 1177, col: 39, offset: 42217},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1181, col: 1, offset: 42447},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 5, offset: 42495},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1182, col: 5, offset: 42495},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1183, col: 7, offset: 42595},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1183, col: 7, offset: 42595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1183, col: 7, offset: 42595},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1183, col: 11, offset: 42599},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1187, col: 1, offset: 42769},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 42796},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 42796},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 42796},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1188, col: 5, offset: 42796},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1188, col: 18, offset: 42809},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 40, offset: 42831},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 45, offset: 42836},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1188, col: 55, offset: 42846},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 86, offset: 42877},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1190, col: 9, offset: 43036},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1190, col: 9, offset: 43036},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1190, col: 9, offset: 43036},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 22, offset: 43049},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1190, col: 44, offset: 43071},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 49, offset: 43076},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 59, offset: 43086},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1190, col: 90, offset: 43117},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 9, offset: 43320},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1193, col: 9, offset: 43320},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 9, offset: 43320},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 22, offset: 43333},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 44, offset: 43355},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 48, offset: 43359},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 58, offset: 43369},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 89, offset: 43400},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1200, col: 1, offset: 43617},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 18, offset: 43634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 18, offset: 43634},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 45, offset: 43661},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1202, col: 1, offset: 43689},
			expr: &actionExpr{
				pos: position{line: 1202, col: 29, offset: 43717},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 29, offset: 43717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1202, col: 29, offset: 43717},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1202, col: 35, offset: 43723},
								expr: &ruleRefExpr{
									pos:  position{line: 1202, col: 36, offset: 43724},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1202, col: 54, offset: 43742},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 59, offset: 43747},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 69, offset: 43757},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1202, col: 103, offset: 43791},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1206, col: 1, offset: 43932},
			expr: &seqExpr{
				pos: position{line: 1206, col: 37, offset: 43968},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1206, col: 37, offset: 43968},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1206, col: 69, offset: 44000},
						expr: &seqExpr{
							pos: position{line: 1206, col: 70, offset: 44001},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1206, col: 70, offset: 44001},
									expr: &litMatcher{
										pos:        position{line: 1206, col: 72, offset: 44003},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1206, col: 79, offset: 44010},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1206, col: 79, offset: 44010},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1206, col: 87, offset: 44018},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1208, col: 1, offset: 44089},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 36, offset: 44124},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 36, offset: 44124},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1209, col: 11, offset: 44140},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1209, col: 11, offset: 44140},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1209, col: 19, offset: 44148},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 20, offset: 44149},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 44168},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 44205},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 44225},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 44247},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 44269},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 44294},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 44321},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 44343},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 44366},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44382},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44412},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 44436},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 44485},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1224, col: 1, offset: 44530},
			expr: &actionExpr{
				pos: position{line: 1224, col: 42, offset: 44571},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1224, col: 42, offset: 44571},
					expr: &seqExpr{
						pos: position{line: 1224, col: 43, offset: 44572},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1224, col: 43, offset: 44572},
								expr: &litMatcher{
									pos:        position{line: 1224, col: 44, offset: 44573},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1224, col: 49, offset: 44578},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1228, col: 1, offset: 44653},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 44704},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1229, col: 5, offset: 44704},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1230, col: 7, offset: 44807},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1230, col: 7, offset: 44807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 7, offset: 44807},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1230, col: 12, offset: 44812},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1234, col: 1, offset: 44984},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 29, offset: 45012},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1234, col: 29, offset: 45012},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1234, col: 29, offset: 45012},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 29, offset: 45012},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1234, col: 35, offset: 45018},
										expr: &ruleRefExpr{
											pos:  position{line: 1234, col: 36, offset: 45019},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1234, col: 55, offset: 45038},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1234, col: 55, offset: 45038},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1234, col: 59, offset: 45042},
											expr: &litMatcher{
												pos:        position{line: 1234, col: 60, offset: 45043},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 65, offset: 45048},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 75, offset: 45058},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 109, offset: 45092},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 45287},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1236, col: 5, offset: 45287},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1236, col: 5, offset: 45287},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1236, col: 11, offset: 45293},
										expr: &ruleRefExpr{
											pos:  position{line: 1236, col: 12, offset: 45294},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1236, col: 30, offset: 45312},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 34, offset: 45316},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1236, col: 44, offset: 45326},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1236, col: 44, offset: 45326},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 48, offset: 45330},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1236, col: 82, offset: 45364},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1240, col: 1, offset: 45584},
			expr: &seqExpr{
				pos: position{line: 1240, col: 37, offset: 45620},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1240, col: 37, offset: 45620},
						expr: &ruleRefExpr{
							pos:  position{line: 1240, col: 38, offset: 45621},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1240, col: 44, offset: 45627},
						expr: &ruleRefExpr{
							pos:  position{line: 1240, col: 44, offset: 45627},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1242, col: 1, offset: 45663},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 37, offset: 45699},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1242, col: 37, offset: 45699},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1243, col: 11, offset: 45715},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1243, col: 11, offset: 45715},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1243, col: 19, offset: 45723},
								expr: &ruleRefExpr{
									pos:  position{line: 1243, col: 20, offset: 45724},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 45743},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1245, col: 11, offset: 45780},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1245, col: 11, offset: 45780},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 11, offset: 45780},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1245, col: 18, offset: 45787},
								expr: &seqExpr{
									pos: position{line: 1245, col: 19, offset: 45788},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1245, col: 19, offset: 45788},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1245, col: 23, offset: 45792},
											expr: &litMatcher{
												pos:        position{line: 1245, col: 24, offset: 45793},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 45922},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 45942},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 45964},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 45986},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 46011},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 46038},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 46060},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 46084},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 46101},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 46131},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 46155},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 46188},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 46237},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1260, col: 1, offset: 46282},
			expr: &actionExpr{
				pos: position{line: 1260, col: 42, offset: 46323},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1260, col: 42, offset: 46323},
					expr: &charClassMatcher{
						pos:        position{line: 1260, col: 42, offset: 46323},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1264, col: 1, offset: 46545},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 46596},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1265, col: 5, offset: 46596},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1266, col: 7, offset: 46699},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1266, col: 7, offset: 46699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 7, offset: 46699},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1266, col: 11, offset: 46703},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1270, col: 1, offset: 46876},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 46906},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1271, col: 5, offset: 46906},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1271, col: 5, offset: 46906},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1271, col: 5, offset: 46906},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 18, offset: 46919},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 40, offset: 46941},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 45, offset: 46946},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 55, offset: 46956},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 89, offset: 46990},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 9, offset: 47149},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1273, col: 9, offset: 47149},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1273, col: 9, offset: 47149},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 22, offset: 47162},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 44, offset: 47184},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 49, offset: 47189},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 59, offset: 47199},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 93, offset: 47233},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 9, offset: 47436},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1276, col: 9, offset: 47436},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 9, offset: 47436},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 47449},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 44, offset: 47471},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 48, offset: 47475},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 58, offset: 47485},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 92, offset: 47519},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1284, col: 1, offset: 47735},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 15, offset: 47749},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 15, offset: 47749},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 39, offset: 47773},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1286, col: 1, offset: 47798},
			expr: &actionExpr{
				pos: position{line: 1286, col: 26, offset: 47823},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 26, offset: 47823},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1286, col: 26, offset: 47823},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1286, col: 32, offset: 47829},
								expr: &ruleRefExpr{
									pos:  position{line: 1286, col: 33, offset: 47830},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1286, col: 51, offset: 47848},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 56, offset: 47853},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1286, col: 66, offset: 47863},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1286, col: 97, offset: 47894},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1290, col: 1, offset: 48032},
			expr: &seqExpr{
				pos: position{line: 1290, col: 34, offset: 48065},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1290, col: 34, offset: 48065},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1290, col: 63, offset: 48094},
						expr: &seqExpr{
							pos: position{line: 1290, col: 64, offset: 48095},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1290, col: 64, offset: 48095},
									expr: &litMatcher{
										pos:        position{line: 1290, col: 66, offset: 48097},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1290, col: 73, offset: 48104},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1290, col: 73, offset: 48104},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1290, col: 81, offset: 48112},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1292, col: 1, offset: 48181},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 33, offset: 48213},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 33, offset: 48213},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 48229},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1294, col: 11, offset: 48262},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1294, col: 11, offset: 48262},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1294, col: 19, offset: 48270},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 20, offset: 48271},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 48290},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 48310},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 48332},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 48357},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 48382},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 48409},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 48431},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 48454},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 48470},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 48499},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 48523},
						name: "DoubleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 48569},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextStringElement",
			pos:  position{line: 1308, col: 1, offset: 48611},
			expr: &actionExpr{
				pos: position{line: 1308, col: 39, offset: 48649},
				run: (*parser).callonDoubleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1308, col: 39, offset: 48649},
					expr: &seqExpr{
						pos: position{line: 1308, col: 40, offset: 48650},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1308, col: 40, offset: 48650},
								expr: &litMatcher{
									pos:        position{line: 1308, col: 41, offset: 48651},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1308, col: 46, offset: 48656},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1312, col: 1, offset: 48730},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 5, offset: 48777},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1313, col: 5, offset: 48777},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 7, offset: 48877},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1314, col: 7, offset: 48877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 7, offset: 48877},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1314, col: 12, offset: 48882},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1318, col: 1, offset: 49051},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 26, offset: 49076},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1318, col: 26, offset: 49076},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1318, col: 26, offset: 49076},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1318, col: 26, offset: 49076},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1318, col: 32, offset: 49082},
										expr: &ruleRefExpr{
											pos:  position{line: 1318, col: 33, offset: 49083},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1318, col: 52, offset: 49102},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1318, col: 52, offset: 49102},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1318, col: 56, offset: 49106},
											expr: &litMatcher{
												pos:        position{line: 1318, col: 57, offset: 49107},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 62, offset: 49112},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 72, offset: 49122},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 103, offset: 49153},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 49345},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 49345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1320, col: 5, offset: 49345},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1320, col: 11, offset: 49351},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 12, offset: 49352},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 30, offset: 49370},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 34, offset: 49374},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1320, col: 44, offset: 49384},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1320, col: 44, offset: 49384},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1320, col: 48, offset: 49388},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 79, offset: 49419},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1324, col: 1, offset: 49632},
			expr: &seqExpr{
				pos: position{line: 1324, col: 34, offset: 49665},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1324, col: 34, offset: 49665},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 35, offset: 49666},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1324, col: 41, offset: 49672},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 41, offset: 49672},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1326, col: 1, offset: 49705},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 33, offset: 49737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1326, col: 33, offset: 49737},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 49753},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1328, col: 11, offset: 49786},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1328, col: 11, offset: 49786},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1328, col: 19, offset: 49794},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 20, offset: 49795},
									name: "Newline",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1329, col: 11, offset: 49814},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1329, col: 11, offset: 49814},
								expr: &ruleRefExpr{
									pos:  position{line: 1329, col: 11, offset: 49814},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1329, col: 18, offset: 49821},
								expr: &seqExpr{
									pos: position{line: 1329, col: 19, offset: 49822},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1329, col: 19, offset: 49822},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1329, col: 23, offset: 49826},
											expr: &litMatcher{
												pos:        position{line: 1329, col: 24, offset: 49827},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 49844},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 49864},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 49886},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 49911},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 49936},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 49963},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 49985},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 50008},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 50024},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 50053},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 50077},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 50110},
						name: "SingleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 50156},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStringElement",
			pos:  position{line: 1344, col: 1, offset: 50198},
			expr: &actionExpr{
				pos: position{line: 1344, col: 39, offset: 50236},
				run: (*parser).callonSingleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1344, col: 39, offset: 50236},
					expr: &charClassMatcher{
						pos:        position{line: 1344, col: 39, offset: 50236},
						val:        "[^\\r\\n{} #^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '#', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1348, col: 1, offset: 50466},
			expr: &choiceExpr{
				pos: position{line: 1349, col: 5, offset: 50513},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1349, col: 5, offset: 50513},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1350, col: 7, offset: 50611},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1350, col: 7, offset: 50611},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1350, col: 7, offset: 50611},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1350, col: 11, offset: 50615},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1354, col: 1, offset: 50782},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 50808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1355, col: 5, offset: 50808},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1355, col: 5, offset: 50808},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1355, col: 5, offset: 50808},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 18, offset: 50821},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 40, offset: 50843},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1355, col: 45, offset: 50848},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 55, offset: 50858},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 86, offset: 50889},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 9, offset: 51048},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1357, col: 9, offset: 51048},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 9, offset: 51048},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 22, offset: 51061},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 44, offset: 51083},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 49, offset: 51088},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 59, offset: 51098},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 90, offset: 51129},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 9, offset: 51332},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1360, col: 9, offset: 51332},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 9, offset: 51332},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 22, offset: 51345},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 44, offset: 51367},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 48, offset: 51371},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 58, offset: 51381},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 89, offset: 51412},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1365, col: 1, offset: 51567},
			expr: &actionExpr{
				pos: position{line: 1365, col: 18, offset: 51584},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 18, offset: 51584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1365, col: 18, offset: 51584},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1365, col: 24, offset: 51590},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 25, offset: 51591},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1365, col: 43, offset: 51609},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 47, offset: 51613},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 56, offset: 51622},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1365, col: 78, offset: 51644},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1369, col: 1, offset: 51744},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 25, offset: 51768},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1369, col: 25, offset: 51768},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 38, offset: 51781},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1371, col: 1, offset: 51802},
			expr: &actionExpr{
				pos: position{line: 1371, col: 21, offset: 51822},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1371, col: 21, offset: 51822},
					expr: &charClassMatcher{
						pos:        position{line: 1371, col: 21, offset: 51822},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1375, col: 1, offset: 51903},
			expr: &actionExpr{
				pos: position{line: 1375, col: 25, offset: 51927},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 25, offset: 51927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 25, offset: 51927},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 38, offset: 51940},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 60, offset: 51962},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 64, offset: 51966},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 73, offset: 51975},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 95, offset: 51997},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1379, col: 1, offset: 52130},
			expr: &actionExpr{
				pos: position{line: 1379, col: 20, offset: 52149},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 20, offset: 52149},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 20, offset: 52149},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1379, col: 26, offset: 52155},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 27, offset: 52156},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 45, offset: 52174},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 49, offset: 52178},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 58, offset: 52187},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1379, col: 82, offset: 52211},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1383, col: 1, offset: 52313},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 27, offset: 52339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1383, col: 27, offset: 52339},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 40, offset: 52352},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1385, col: 1, offset: 52375},
			expr: &actionExpr{
				pos: position{line: 1385, col: 23, offset: 52397},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1385, col: 23, offset: 52397},
					expr: &charClassMatcher{
						pos:        position{line: 1385, col: 23, offset: 52397},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1389, col: 1, offset: 52478},
			expr: &actionExpr{
				pos: position{line: 1389, col: 27, offset: 52504},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 27, offset: 52504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1389, col: 27, offset: 52504},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 40, offset: 52517},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 62, offset: 52539},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1389, col: 66, offset: 52543},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 75, offset: 52552},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1389, col: 99, offset: 52576},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1396, col: 1, offset: 52825},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 22, offset: 52846},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 22, offset: 52846},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 46, offset: 52870},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 70, offset: 52894},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1398, col: 1, offset: 52914},
			expr: &litMatcher{
				pos:        position{line: 1398, col: 32, offset: 52945},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1400, col: 1, offset: 52952},
			expr: &actionExpr{
				pos: position{line: 1400, col: 26, offset: 52977},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 26, offset: 52977},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1400, col: 26, offset: 52977},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 54, offset: 53005},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 63, offset: 53014},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 93, offset: 53044},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1400, col: 121, offset: 53072},
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 122, offset: 53073},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1404, col: 1, offset: 53182},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 33, offset: 53214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1404, col: 34, offset: 53215},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1404, col: 34, offset: 53215},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1404, col: 35, offset: 53216},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1404, col: 35, offset: 53216},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 36, offset: 53217},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1404, col: 64, offset: 53245},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 65, offset: 53246},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1404, col: 71, offset: 53252},
											expr: &ruleRefExpr{
												pos:  position{line: 1404, col: 72, offset: 53253},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1404, col: 80, offset: 53261,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1404, col: 83, offset: 53264},
									expr: &seqExpr{
										pos: position{line: 1404, col: 84, offset: 53265},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1404, col: 84, offset: 53265},
												expr: &seqExpr{
													pos: position{line: 1404, col: 86, offset: 53267},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1404, col: 86, offset: 53267},
															expr: &ruleRefExpr{
																pos:  position{line: 1404, col: 86, offset: 53267},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1404, col: 93, offset: 53274},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 122, offset: 53303},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 123, offset: 53304},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 151, offset: 53332},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 152, offset: 53333},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1404, col: 160, offset: 53341,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1406, col: 7, offset: 53485},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1406, col: 8, offset: 53486},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1406, col: 8, offset: 53486},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 9, offset: 53487},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1406, col: 15, offset: 53493},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 16, offset: 53494},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1406, col: 24, offset: 53502},
									expr: &ruleRefExpr{
										pos:  position{line: 1406, col: 25, offset: 53503},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1406, col: 53, offset: 53531,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1410, col: 1, offset: 53617},
			expr: &litMatcher{
				pos:        position{line: 1410, col: 32, offset: 53648},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1412, col: 1, offset: 53657},
			expr: &actionExpr{
				pos: position{line: 1412, col: 26, offset: 53682},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 26, offset: 53682},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1412, col: 26, offset: 53682},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 54, offset: 53710},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 63, offset: 53719},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1412, col: 93, offset: 53749},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1412, col: 121, offset: 53777},
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 122, offset: 53778},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1416, col: 1, offset: 53887},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 33, offset: 53919},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 34, offset: 53920},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1416, col: 34, offset: 53920},
							expr: &seqExpr{
								pos: position{line: 1416, col: 35, offset: 53921},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1416, col: 35, offset: 53921},
										expr: &ruleRefExpr{
											pos:  position{line: 1416, col: 36, offset: 53922},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1416, col: 64, offset: 53950,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 7, offset: 54117},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1418, col: 7, offset: 54117},
							expr: &seqExpr{
								pos: position{line: 1418, col: 8, offset: 54118},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1418, col: 8, offset: 54118},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 9, offset: 54119},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1418, col: 15, offset: 54125},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 16, offset: 54126},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1418, col: 24, offset: 54134},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 25, offset: 54135},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1418, col: 53, offset: 54163,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1422, col: 1, offset: 54250},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 21, offset: 54270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1422, col: 21, offset: 54270},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1422, col: 21, offset: 54270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1422, col: 21, offset: 54270},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 30, offset: 54279},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1422, col: 38, offset: 54287},
										expr: &ruleRefExpr{
											pos:  position{line: 1422, col: 39, offset: 54288},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1422, col: 67, offset: 54316},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1424, col: 5, offset: 54414},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1424, col: 5, offset: 54414},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1424, col: 5, offset: 54414},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1424, col: 15, offset: 54424},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1424, col: 23, offset: 54432},
										expr: &choiceExpr{
											pos: position{line: 1424, col: 24, offset: 54433},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1424, col: 24, offset: 54433},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1424, col: 37, offset: 54446},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1424, col: 65, offset: 54474},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1428, col: 1, offset: 54574},
			expr: &actionExpr{
				pos: position{line: 1428, col: 30, offset: 54603},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1428, col: 30, offset: 54603},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1435, col: 1, offset: 54783},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 19, offset: 54801},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1435, col: 19, offset: 54801},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 44, offset: 54826},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1437, col: 1, offset: 54853},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 27, offset: 54879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1437, col: 27, offset: 54879},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 27, offset: 54879},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1437, col: 27, offset: 54879},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 32, offset: 54884},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 36, offset: 54888},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1437, col: 40, offset: 54892},
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 40, offset: 54892},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1437, col: 47, offset: 54899},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 51, offset: 54903},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1437, col: 58, offset: 54910},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1437, col: 79, offset: 54931},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 5, offset: 55016},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1439, col: 5, offset: 55016},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1439, col: 5, offset: 55016},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 10, offset: 55021},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 14, offset: 55025},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 18, offset: 55029},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1443, col: 1, offset: 55105},
			expr: &actionExpr{
				pos: position{line: 1443, col: 27, offset: 55131},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 27, offset: 55131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1443, col: 27, offset: 55131},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 35, offset: 55139},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 40, offset: 55144},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 54, offset: 55158},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 72, offset: 55176},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1447, col: 1, offset: 55303},
			expr: &ruleRefExpr{
				pos:  position{line: 1447, col: 24, offset: 55326},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1452, col: 1, offset: 55453},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 9, offset: 55461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1452, col: 9, offset: 55461},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 24, offset: 55476},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1455, col: 1, offset: 55560},
			expr: &actionExpr{
				pos: position{line: 1455, col: 17, offset: 55576},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 17, offset: 55576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1455, col: 17, offset: 55576},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 25, offset: 55584},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 30, offset: 55589},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 40, offset: 55599},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 58, offset: 55617},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1459, col: 1, offset: 55732},
			expr: &actionExpr{
				pos: position{line: 1459, col: 17, offset: 55748},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 17, offset: 55748},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1459, col: 17, offset: 55748},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1459, col: 22, offset: 55753},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1459, col: 42, offset: 55773},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1459, col: 59, offset: 55790},
								expr: &ruleRefExpr{
									pos:  position{line: 1459, col: 60, offset: 55791},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1463, col: 1, offset: 55888},
			expr: &actionExpr{
				pos: position{line: 1463, col: 19, offset: 55906},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 19, offset: 55906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1463, col: 19, offset: 55906},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 23, offset: 55910},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1463, col: 33, offset: 55920},
								expr: &ruleRefExpr{
									pos:  position{line: 1463, col: 34, offset: 55921},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1464, col: 5, offset: 55954},
							expr: &ruleRefExpr{
								pos:  position{line: 1464, col: 5, offset: 55954},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1464, col: 12, offset: 55961},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1464, col: 23, offset: 55972},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 24, offset: 55973},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1464, col: 43, offset: 55992},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1468, col: 1, offset: 56113},
			expr: &actionExpr{
				pos: position{line: 1468, col: 30, offset: 56142},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1468, col: 30, offset: 56142},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1470, col: 5, offset: 56195},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1470, col: 6, offset: 56196},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1470, col: 6, offset: 56196},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1470, col: 6, offset: 56196},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1470, col: 11, offset: 56201},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1470, col: 20, offset: 56210},
												expr: &choiceExpr{
													pos: position{line: 1470, col: 21, offset: 56211},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1470, col: 21, offset: 56211},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 36, offset: 56226},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 49, offset: 56239},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1470, col: 71, offset: 56261},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1470, col: 76, offset: 56266},
											expr: &notExpr{
												pos: position{line: 1470, col: 78, offset: 56268},
												expr: &litMatcher{
													pos:        position{line: 1470, col: 79, offset: 56269},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1470, col: 84, offset: 56274},
											expr: &litMatcher{
												pos:        position{line: 1470, col: 84, offset: 56274},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1474, col: 6, offset: 56405},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1474, col: 6, offset: 56405},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1474, col: 6, offset: 56405},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1474, col: 15, offset: 56414},
												expr: &choiceExpr{
													pos: position{line: 1474, col: 16, offset: 56415},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1474, col: 16, offset: 56415},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1474, col: 31, offset: 56430},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1474, col: 44, offset: 56443},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1474, col: 68, offset: 56467},
											expr: &notExpr{
												pos: position{line: 1474, col: 70, offset: 56469},
												expr: &litMatcher{
													pos:        position{line: 1474, col: 71, offset: 56470},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1474, col: 76, offset: 56475},
											expr: &litMatcher{
												pos:        position{line: 1474, col: 76, offset: 56475},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1480, col: 1, offset: 56595},
			expr: &actionExpr{
				pos: position{line: 1480, col: 18, offset: 56612},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1480, col: 18, offset: 56612},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1484, col: 1, offset: 56702},
			expr: &actionExpr{
				pos: position{line: 1484, col: 24, offset: 56725},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1484, col: 24, offset: 56725},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1488, col: 1, offset: 56822},
			expr: &actionExpr{
				pos: position{line: 1488, col: 26, offset: 56847},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1488, col: 26, offset: 56847},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1493, col: 1, offset: 57009},
			expr: &actionExpr{
				pos: position{line: 1494, col: 5, offset: 57030},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1494, col: 5, offset: 57030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1494, col: 5, offset: 57030},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1494, col: 14, offset: 57039},
								expr: &choiceExpr{
									pos: position{line: 1494, col: 15, offset: 57040},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1494, col: 15, offset: 57040},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1495, col: 11, offset: 57056},
											expr: &ruleRefExpr{
												pos:  position{line: 1495, col: 11, offset: 57056},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1496, col: 11, offset: 57075},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1497, col: 11, offset: 57100},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1498, col: 11, offset: 57123},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 11, offset: 57142},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1499, col: 21, offset: 57152},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1503, col: 1, offset: 57226},
			expr: &choiceExpr{
				pos: position{line: 1503, col: 17, offset: 57242},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1503, col: 17, offset: 57242},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1503, col: 40, offset: 57265},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1506, col: 1, offset: 57396},
			expr: &actionExpr{
				pos: position{line: 1506, col: 25, offset: 57420},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 25, offset: 57420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1506, col: 25, offset: 57420},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 33, offset: 57428},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1506, col: 38, offset: 57433},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1506, col: 38, offset: 57433},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1506, col: 57, offset: 57452},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 79, offset: 57474},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 97, offset: 57492},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1510, col: 1, offset: 57607},
			expr: &actionExpr{
				pos: position{line: 1510, col: 25, offset: 57631},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 25, offset: 57631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 25, offset: 57631},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 30, offset: 57636},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 48, offset: 57654},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1510, col: 65, offset: 57671},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 66, offset: 57672},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1517, col: 1, offset: 57874},
			expr: &actionExpr{
				pos: position{line: 1517, col: 15, offset: 57888},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 15, offset: 57888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1517, col: 15, offset: 57888},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 26, offset: 57899},
								expr: &ruleRefExpr{
									pos:  position{line: 1517, col: 27, offset: 57900},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1517, col: 40, offset: 57913},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 50, offset: 57923},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 56, offset: 57929},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 66, offset: 57939},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 84, offset: 57957},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1517, col: 101, offset: 57974},
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 101, offset: 57974},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1517, col: 108, offset: 57981},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1521, col: 1, offset: 58097},
			expr: &actionExpr{
				pos: position{line: 1521, col: 16, offset: 58112},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 16, offset: 58112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1521, col: 16, offset: 58112},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1521, col: 25, offset: 58121},
							expr: &litMatcher{
								pos:        position{line: 1521, col: 26, offset: 58122},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 30, offset: 58126},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 36, offset: 58132},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 46, offset: 58142},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 64, offset: 58160},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1525, col: 1, offset: 58278},
			expr: &actionExpr{
				pos: position{line: 1525, col: 20, offset: 58297},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1525, col: 20, offset: 58297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1525, col: 20, offset: 58297},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 24, offset: 58301},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1525, col: 28, offset: 58305},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 29, offset: 58306},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1525, col: 56, offset: 58333},
							expr: &litMatcher{
								pos:        position{line: 1525, col: 56, offset: 58333},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 61, offset: 58338},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1525, col: 67, offset: 58344},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 68, offset: 58345},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1525, col: 95, offset: 58372},
							expr: &litMatcher{
								pos:        position{line: 1525, col: 95, offset: 58372},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 100, offset: 58377},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1525, col: 107, offset: 58384},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 108, offset: 58385},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1525, col: 135, offset: 58412},
							expr: &litMatcher{
								pos:        position{line: 1525, col: 135, offset: 58412},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1525, col: 140, offset: 58417},
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 140, offset: 58417},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 147, offset: 58424},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1525, col: 158, offset: 58435},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 159, offset: 58436},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1525, col: 178, offset: 58455},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1532, col: 1, offset: 58747},
			expr: &actionExpr{
				pos: position{line: 1532, col: 15, offset: 58761},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 15, offset: 58761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1532, col: 15, offset: 58761},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 23, offset: 58769},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1532, col: 34, offset: 58780},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1532, col: 34, offset: 58780},
									expr: &charClassMatcher{
										pos:        position{line: 1532, col: 34, offset: 58780},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 78, offset: 58824},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 96, offset: 58842},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1536, col: 1, offset: 58949},
			expr: &actionExpr{
				pos: position{line: 1536, col: 19, offset: 58967},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 19, offset: 58967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 19, offset: 58967},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 23, offset: 58971},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1536, col: 28, offset: 58976},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 29, offset: 58977},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1536, col: 56, offset: 59004},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 56, offset: 59004},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1536, col: 61, offset: 59009},
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 61, offset: 59009},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 68, offset: 59016},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1536, col: 75, offset: 59023},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 76, offset: 59024},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1536, col: 95, offset: 59043},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1543, col: 1, offset: 59321},
			expr: &choiceExpr{
				pos: position{line: 1543, col: 19, offset: 59339},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1543, col: 19, offset: 59339},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1543, col: 19, offset: 59339},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1543, col: 19, offset: 59339},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1543, col: 32, offset: 59352},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1543, col: 41, offset: 59361},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1543, col: 58, offset: 59378},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1545, col: 5, offset: 59448},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1545, col: 5, offset: 59448},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1545, col: 5, offset: 59448},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1545, col: 17, offset: 59460},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 22, offset: 59465},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1545, col: 35, offset: 59478},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1545, col: 39, offset: 59482},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1545, col: 47, offset: 59490},
										expr: &ruleRefExpr{
											pos:  position{line: 1545, col: 48, offset: 59491},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1545, col: 66, offset: 59509},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1549, col: 1, offset: 59574},
			expr: &ruleRefExpr{
				pos:  position{line: 1549, col: 16, offset: 59589},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1551, col: 1, offset: 59602},
			expr: &actionExpr{
				pos: position{line: 1551, col: 20, offset: 59621},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1551, col: 20, offset: 59621},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1551, col: 29, offset: 59630},
						expr: &seqExpr{
							pos: position{line: 1551, col: 30, offset: 59631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1551, col: 30, offset: 59631},
									expr: &litMatcher{
										pos:        position{line: 1551, col: 31, offset: 59632},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1551, col: 35, offset: 59636},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1558, col: 1, offset: 59967},
			expr: &actionExpr{
				pos: position{line: 1558, col: 19, offset: 59985},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 19, offset: 59985},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1558, col: 19, offset: 59985},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 20, offset: 59986},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1559, col: 5, offset: 60075},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1559, col: 12, offset: 60082},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1559, col: 12, offset: 60082},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1560, col: 11, offset: 60106},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1561, col: 11, offset: 60131},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1562, col: 11, offset: 60156},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1563, col: 11, offset: 60179},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1564, col: 11, offset: 60202},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1565, col: 11, offset: 60226},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1566, col: 11, offset: 60255},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1567, col: 11, offset: 60283},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1568, col: 11, offset: 60300},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1572, col: 1, offset: 60345},
			expr: &choiceExpr{
				pos: position{line: 1572, col: 19, offset: 60363},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1572, col: 19, offset: 60363},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1572, col: 19, offset: 60363},
								expr: &ruleRefExpr{
									pos:  position{line: 1572, col: 21, offset: 60365},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1572, col: 31, offset: 60375},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1573, col: 19, offset: 60447},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1574, col: 19, offset: 60488},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1575, col: 19, offset: 60530},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 19, offset: 60572},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1577, col: 19, offset: 60614},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1578, col: 19, offset: 60653},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1579, col: 19, offset: 60694},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1581, col: 1, offset: 60723},
			expr: &choiceExpr{
				pos: position{line: 1581, col: 20, offset: 60742},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1581, col: 20, offset: 60742},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 36, offset: 60758},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1583, col: 1, offset: 60774},
			expr: &actionExpr{
				pos: position{line: 1583, col: 17, offset: 60790},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 17, offset: 60790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1583, col: 17, offset: 60790},
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 18, offset: 60791},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1583, col: 22, offset: 60795},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 31, offset: 60804},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1583, col: 52, offset: 60825},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1583, col: 61, offset: 60834},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 62, offset: 60835},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1583, col: 73, offset: 60846},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1587, col: 1, offset: 60920},
			expr: &actionExpr{
				pos: position{line: 1587, col: 24, offset: 60943},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1587, col: 24, offset: 60943},
					expr: &seqExpr{
						pos: position{line: 1587, col: 25, offset: 60944},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1587, col: 25, offset: 60944},
								expr: &ruleRefExpr{
									pos:  position{line: 1587, col: 26, offset: 60945},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1587, col: 36, offset: 60955},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1587, col: 36, offset: 60955},
										expr: &ruleRefExpr{
											pos:  position{line: 1587, col: 36, offset: 60955},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1587, col: 45, offset: 60964},
										expr: &charClassMatcher{
											pos:        position{line: 1587, col: 45, offset: 60964},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1591, col: 1, offset: 61018},
			expr: &oneOrMoreExpr{
				pos: position{line: 1591, col: 13, offset: 61030},
				expr: &ruleRefExpr{
					pos:  position{line: 1591, col: 13, offset: 61030},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1593, col: 1, offset: 61042},
			expr: &actionExpr{
				pos: position{line: 1593, col: 12, offset: 61053},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 12, offset: 61053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1593, col: 12, offset: 61053},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 16, offset: 61057},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1593, col: 21, offset: 61062},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1593, col: 21, offset: 61062},
									expr: &charClassMatcher{
										pos:        position{line: 1593, col: 21, offset: 61062},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 69, offset: 61110},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1593, col: 73, offset: 61114},
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 73, offset: 61114},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1593, col: 80, offset: 61121},
							expr: &choiceExpr{
								pos: position{line: 1593, col: 82, offset: 61123},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1593, col: 82, offset: 61123},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1593, col: 88, offset: 61129},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1597, col: 1, offset: 61186},
			expr: &actionExpr{
				pos: position{line: 1597, col: 20, offset: 61205},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 20, offset: 61205},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1597, col: 20, offset: 61205},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 25, offset: 61210},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 48, offset: 61233},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1597, col: 61, offset: 61246},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 61, offset: 61246},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1601, col: 1, offset: 61347},
			expr: &actionExpr{
				pos: position{line: 1601, col: 26, offset: 61372},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 26, offset: 61372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1601, col: 26, offset: 61372},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 30, offset: 61376},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1601, col: 35, offset: 61381},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1601, col: 35, offset: 61381},
									expr: &charClassMatcher{
										pos:        position{line: 1601, col: 35, offset: 61381},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1601, col: 83, offset: 61429},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1601, col: 87, offset: 61433},
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 87, offset: 61433},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1608, col: 1, offset: 61667},
			expr: &seqExpr{
				pos: position{line: 1608, col: 25, offset: 61691},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1608, col: 25, offset: 61691},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1608, col: 31, offset: 61697},
						expr: &ruleRefExpr{
							pos:  position{line: 1608, col: 31, offset: 61697},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 38, offset: 61704},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1610, col: 1, offset: 61766},
			expr: &seqExpr{
				pos: position{line: 1610, col: 30, offset: 61795},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1610, col: 30, offset: 61795},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1610, col: 36, offset: 61801},
						expr: &ruleRefExpr{
							pos:  position{line: 1610, col: 36, offset: 61801},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1610, col: 43, offset: 61808},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1612, col: 1, offset: 61815},
			expr: &choiceExpr{
				pos: position{line: 1612, col: 28, offset: 61842},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1612, col: 29, offset: 61843},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1612, col: 29, offset: 61843},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1612, col: 35, offset: 61849},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 35, offset: 61849},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1612, col: 42, offset: 61856},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 49, offset: 61863},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1614, col: 1, offset: 61870},
			expr: &actionExpr{
				pos: position{line: 1614, col: 16, offset: 61885},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1614, col: 16, offset: 61885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1614, col: 16, offset: 61885},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1614, col: 27, offset: 61896},
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 28, offset: 61897},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1614, col: 41, offset: 61910},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1614, col: 67, offset: 61936},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 76, offset: 61945},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1614, col: 104, offset: 61973},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1618, col: 1, offset: 62092},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1618, col: 31, offset: 62122},
				expr: &actionExpr{
					pos: position{line: 1618, col: 32, offset: 62123},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1618, col: 32, offset: 62123},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1618, col: 32, offset: 62123},
								expr: &ruleRefExpr{
									pos:  position{line: 1618, col: 33, offset: 62124},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1618, col: 57, offset: 62148},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1618, col: 66, offset: 62157},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1625, col: 1, offset: 62501},
			expr: &seqExpr{
				pos: position{line: 1625, col: 26, offset: 62526},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1625, col: 26, offset: 62526},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1625, col: 33, offset: 62533},
						expr: &ruleRefExpr{
							pos:  position{line: 1625, col: 33, offset: 62533},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1625, col: 40, offset: 62540},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1627, col: 1, offset: 62547},
			expr: &seqExpr{
				pos: position{line: 1627, col: 31, offset: 62577},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1627, col: 31, offset: 62577},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1627, col: 38, offset: 62584},
						expr: &ruleRefExpr{
							pos:  position{line: 1627, col: 38, offset: 62584},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1627, col: 45, offset: 62591},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1629, col: 1, offset: 62598},
			expr: &choiceExpr{
				pos: position{line: 1629, col: 29, offset: 62626},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1629, col: 30, offset: 62627},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1629, col: 30, offset: 62627},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1629, col: 37, offset: 62634},
								expr: &ruleRefExpr{
									pos:  position{line: 1629, col: 37, offset: 62634},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1629, col: 44, offset: 62641},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1629, col: 51, offset: 62648},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1631, col: 1, offset: 62655},
			expr: &actionExpr{
				pos: position{line: 1631, col: 17, offset: 62671},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 17, offset: 62671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1631, col: 17, offset: 62671},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1631, col: 28, offset: 62682},
								expr: &ruleRefExpr{
									pos:  position{line: 1631, col: 29, offset: 62683},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1631, col: 42, offset: 62696},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 69, offset: 62723},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 78, offset: 62732},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1631, col: 107, offset: 62761},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1635, col: 1, offset: 62882},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1635, col: 32, offset: 62913},
				expr: &actionExpr{
					pos: position{line: 1635, col: 33, offset: 62914},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1635, col: 33, offset: 62914},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1635, col: 33, offset: 62914},
								expr: &ruleRefExpr{
									pos:  position{line: 1635, col: 34, offset: 62915},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1635, col: 59, offset: 62940},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1635, col: 68, offset: 62949},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1642, col: 1, offset: 63293},
			expr: &seqExpr{
				pos: position{line: 1642, col: 26, offset: 63318},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1642, col: 26, offset: 63318},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1642, col: 33, offset: 63325},
						expr: &ruleRefExpr{
							pos:  position{line: 1642, col: 33, offset: 63325},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1642, col: 40, offset: 63332},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1644, col: 1, offset: 63339},
			expr: &seqExpr{
				pos: position{line: 1644, col: 31, offset: 63369},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1644, col: 31, offset: 63369},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1644, col: 38, offset: 63376},
						expr: &ruleRefExpr{
							pos:  position{line: 1644, col: 38, offset: 63376},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1644, col: 45, offset: 63383},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1646, col: 1, offset: 63390},
			expr: &choiceExpr{
				pos: position{line: 1646, col: 29, offset: 63418},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1646, col: 30, offset: 63419},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1646, col: 30, offset: 63419},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1646, col: 37, offset: 63426},
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 37, offset: 63426},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1646, col: 44, offset: 63433},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1646, col: 51, offset: 63440},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1648, col: 1, offset: 63447},
			expr: &actionExpr{
				pos: position{line: 1648, col: 17, offset: 63463},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1648, col: 17, offset: 63463},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1648, col: 17, offset: 63463},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1648, col: 28, offset: 63474},
								expr: &ruleRefExpr{
									pos:  position{line: 1648, col: 29, offset: 63475},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1648, col: 42, offset: 63488},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1648, col: 69, offset: 63515},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1648, col: 78, offset: 63524},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1648, col: 107, offset: 63553},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1652, col: 1, offset: 63674},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1652, col: 32, offset: 63705},
				expr: &actionExpr{
					pos: position{line: 1652, col: 33, offset: 63706},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1652, col: 33, offset: 63706},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1652, col: 33, offset: 63706},
								expr: &ruleRefExpr{
									pos:  position{line: 1652, col: 34, offset: 63707},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1652, col: 59, offset: 63732},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1652, col: 68, offset: 63741},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1659, col: 1, offset: 64083},
			expr: &seqExpr{
				pos: position{line: 1659, col: 24, offset: 64106},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1659, col: 24, offset: 64106},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1659, col: 31, offset: 64113},
						expr: &ruleRefExpr{
							pos:  position{line: 1659, col: 31, offset: 64113},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 38, offset: 64120},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1661, col: 1, offset: 64152},
			expr: &seqExpr{
				pos: position{line: 1661, col: 29, offset: 64180},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1661, col: 29, offset: 64180},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1661, col: 36, offset: 64187},
						expr: &ruleRefExpr{
							pos:  position{line: 1661, col: 36, offset: 64187},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1661, col: 43, offset: 64194},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1663, col: 1, offset: 64226},
			expr: &choiceExpr{
				pos: position{line: 1663, col: 27, offset: 64252},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1663, col: 28, offset: 64253},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1663, col: 28, offset: 64253},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1663, col: 35, offset: 64260},
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 35, offset: 64260},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1663, col: 42, offset: 64267},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1663, col: 49, offset: 64274},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1665, col: 1, offset: 64306},
			expr: &actionExpr{
				pos: position{line: 1665, col: 15, offset: 64320},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 15, offset: 64320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1665, col: 15, offset: 64320},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1665, col: 26, offset: 64331},
								expr: &ruleRefExpr{
									pos:  position{line: 1665, col: 27, offset: 64332},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1665, col: 40, offset: 64345},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1665, col: 65, offset: 64370},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 74, offset: 64379},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1665, col: 101, offset: 64406},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1669, col: 1, offset: 64523},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1669, col: 30, offset: 64552},
				expr: &actionExpr{
					pos: position{line: 1669, col: 31, offset: 64553},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1669, col: 31, offset: 64553},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1669, col: 31, offset: 64553},
								expr: &ruleRefExpr{
									pos:  position{line: 1669, col: 32, offset: 64554},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1669, col: 55, offset: 64577},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1669, col: 64, offset: 64586},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1678, col: 1, offset: 64979},
			expr: &actionExpr{
				pos: position{line: 1678, col: 15, offset: 64993},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1678, col: 15, offset: 64993},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1678, col: 15, offset: 64993},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 27, offset: 65005},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1679, col: 5, offset: 65023},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1683, col: 5, offset: 65222},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1683, col: 30, offset: 65247},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1683, col: 39, offset: 65256},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1683, col: 66, offset: 65283},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1687, col: 1, offset: 65408},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1687, col: 30, offset: 65437},
				expr: &actionExpr{
					pos: position{line: 1687, col: 31, offset: 65438},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1687, col: 31, offset: 65438},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1687, col: 31, offset: 65438},
								expr: &ruleRefExpr{
									pos:  position{line: 1687, col: 32, offset: 65439},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1687, col: 55, offset: 65462},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1687, col: 64, offset: 65471},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1694, col: 1, offset: 65815},
			expr: &seqExpr{
				pos: position{line: 1694, col: 26, offset: 65840},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1694, col: 26, offset: 65840},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1694, col: 33, offset: 65847},
						expr: &ruleRefExpr{
							pos:  position{line: 1694, col: 33, offset: 65847},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1694, col: 40, offset: 65854},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1696, col: 1, offset: 65861},
			expr: &seqExpr{
				pos: position{line: 1696, col: 31, offset: 65891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1696, col: 31, offset: 65891},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1696, col: 38, offset: 65898},
						expr: &ruleRefExpr{
							pos:  position{line: 1696, col: 38, offset: 65898},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 45, offset: 65905},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1698, col: 1, offset: 65912},
			expr: &choiceExpr{
				pos: position{line: 1698, col: 29, offset: 65940},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1698, col: 30, offset: 65941},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1698, col: 30, offset: 65941},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1698, col: 37, offset: 65948},
								expr: &ruleRefExpr{
									pos:  position{line: 1698, col: 37, offset: 65948},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1698, col: 44, offset: 65955},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1698, col: 51, offset: 65962},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1700, col: 1, offset: 65969},
			expr: &actionExpr{
				pos: position{line: 1700, col: 17, offset: 65985},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1700, col: 17, offset: 65985},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1700, col: 17, offset: 65985},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1700, col: 28, offset: 65996},
								expr: &ruleRefExpr{
									pos:  position{line: 1700, col: 29, offset: 65997},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1700, col: 42, offset: 66010},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 69, offset: 66037},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 78, offset: 66046},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1700, col: 107, offset: 66075},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1704, col: 1, offset: 66196},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1704, col: 32, offset: 66227},
				expr: &actionExpr{
					pos: position{line: 1704, col: 33, offset: 66228},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1704, col: 33, offset: 66228},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1704, col: 33, offset: 66228},
								expr: &ruleRefExpr{
									pos:  position{line: 1704, col: 34, offset: 66229},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1704, col: 59, offset: 66254},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1704, col: 68, offset: 66263},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1711, col: 1, offset: 66611},
			expr: &seqExpr{
				pos: position{line: 1711, col: 30, offset: 66640},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1711, col: 30, offset: 66640},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1711, col: 37, offset: 66647},
						expr: &ruleRefExpr{
							pos:  position{line: 1711, col: 37, offset: 66647},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1711, col: 44, offset: 66654},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1713, col: 1, offset: 66661},
			expr: &seqExpr{
				pos: position{line: 1713, col: 35, offset: 66695},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1713, col: 35, offset: 66695},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1713, col: 42, offset: 66702},
						expr: &ruleRefExpr{
							pos:  position{line: 1713, col: 42, offset: 66702},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1713, col: 49, offset: 66709},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1715, col: 1, offset: 66716},
			expr: &choiceExpr{
				pos: position{line: 1715, col: 33, offset: 66748},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1715, col: 34, offset: 66749},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1715, col: 34, offset: 66749},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1715, col: 41, offset: 66756},
								expr: &ruleRefExpr{
									pos:  position{line: 1715, col: 41, offset: 66756},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1715, col: 48, offset: 66763},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1715, col: 55, offset: 66770},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1717, col: 1, offset: 66777},
			expr: &actionExpr{
				pos: position{line: 1717, col: 21, offset: 66797},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1717, col: 21, offset: 66797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1717, col: 21, offset: 66797},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1717, col: 32, offset: 66808},
								expr: &ruleRefExpr{
									pos:  position{line: 1717, col: 33, offset: 66809},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1717, col: 46, offset: 66822},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1717, col: 77, offset: 66853},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1717, col: 86, offset: 66862},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1717, col: 119, offset: 66895},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1721, col: 1, offset: 67024},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1721, col: 36, offset: 67059},
				expr: &actionExpr{
					pos: position{line: 1721, col: 37, offset: 67060},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1721, col: 37, offset: 67060},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1721, col: 37, offset: 67060},
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 38, offset: 67061},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1721, col: 67, offset: 67090},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 76, offset: 67099},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1729, col: 1, offset: 67453},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1729, col: 23, offset: 67475},
				expr: &ruleRefExpr{
					pos:  position{line: 1729, col: 23, offset: 67475},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1731, col: 1, offset: 67498},
			expr: &actionExpr{
				pos: position{line: 1732, col: 5, offset: 67526},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 5, offset: 67526},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1732, col: 5, offset: 67526},
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 6, offset: 67527},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 10, offset: 67531},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1732, col: 19, offset: 67540},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1732, col: 19, offset: 67540},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1733, col: 15, offset: 67566},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1734, col: 15, offset: 67595},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1735, col: 15, offset: 67622},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1736, col: 15, offset: 67654},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1737, col: 15, offset: 67688},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 15, offset: 67720},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 15, offset: 67760},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1740, col: 15, offset: 67790},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1741, col: 15, offset: 67819},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 15, offset: 67856},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 15, offset: 67887},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 15, offset: 67929},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1748, col: 1, offset: 67982},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1748, col: 22, offset: 68003},
				expr: &ruleRefExpr{
					pos:  position{line: 1748, col: 22, offset: 68003},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1750, col: 1, offset: 68025},
			expr: &actionExpr{
				pos: position{line: 1750, col: 22, offset: 68046},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 22, offset: 68046},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1750, col: 22, offset: 68046},
							expr: &ruleRefExpr{
								pos:  position{line: 1750, col: 23, offset: 68047},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1750, col: 27, offset: 68051},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1750, col: 36, offset: 68060},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1750, col: 36, offset: 68060},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1750, col: 48, offset: 68072},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1754, col: 1, offset: 68126},
			expr: &actionExpr{
				pos: position{line: 1754, col: 24, offset: 68149},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1754, col: 24, offset: 68149},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1754, col: 30, offset: 68155},
						expr: &ruleRefExpr{
							pos:  position{line: 1754, col: 31, offset: 68156},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1758, col: 1, offset: 68250},
			expr: &actionExpr{
				pos: position{line: 1758, col: 28, offset: 68277},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1758, col: 28, offset: 68277},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1758, col: 28, offset: 68277},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1758, col: 37, offset: 68286},
								expr: &ruleRefExpr{
									pos:  position{line: 1758, col: 38, offset: 68287},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1758, col: 54, offset: 68303},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1765, col: 1, offset: 68552},
			expr: &actionExpr{
				pos: position{line: 1765, col: 10, offset: 68561},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1765, col: 10, offset: 68561},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1765, col: 10, offset: 68561},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1765, col: 21, offset: 68572},
								expr: &ruleRefExpr{
									pos:  position{line: 1765, col: 22, offset: 68573},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1765, col: 35, offset: 68586},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1766, col: 5, offset: 68606},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1766, col: 12, offset: 68613},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 13, offset: 68614},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1767, col: 5, offset: 68637},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1767, col: 11, offset: 68643},
								expr: &ruleRefExpr{
									pos:  position{line: 1767, col: 12, offset: 68644},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1768, col: 6, offset: 68662},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1768, col: 6, offset: 68662},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1768, col: 23, offset: 68679},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1772, col: 1, offset: 68798},
			expr: &seqExpr{
				pos: position{line: 1772, col: 23, offset: 68820},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1772, col: 23, offset: 68820},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1772, col: 27, offset: 68824},
						expr: &ruleRefExpr{
							pos:  position{line: 1772, col: 27, offset: 68824},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1774, col: 1, offset: 68834},
			expr: &seqExpr{
				pos: position{line: 1774, col: 19, offset: 68852},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1774, col: 19, offset: 68852},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1774, col: 26, offset: 68859},
						expr: &ruleRefExpr{
							pos:  position{line: 1774, col: 26, offset: 68859},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1774, col: 33, offset: 68866},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1777, col: 1, offset: 68937},
			expr: &actionExpr{
				pos: position{line: 1777, col: 20, offset: 68956},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 20, offset: 68956},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1777, col: 20, offset: 68956},
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 21, offset: 68957},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1777, col: 36, offset: 68972},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1777, col: 42, offset: 68978},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 43, offset: 68979},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1777, col: 55, offset: 68991},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1777, col: 59, offset: 68995},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1781, col: 1, offset: 69067},
			expr: &actionExpr{
				pos: position{line: 1781, col: 14, offset: 69080},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 14, offset: 69080},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1781, col: 14, offset: 69080},
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 15, offset: 69081},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1781, col: 30, offset: 69096},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1781, col: 36, offset: 69102},
								expr: &ruleRefExpr{
									pos:  position{line: 1781, col: 37, offset: 69103},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 49, offset: 69115},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1781, col: 53, offset: 69119},
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 53, offset: 69119},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1785, col: 1, offset: 69192},
			expr: &actionExpr{
				pos: position{line: 1785, col: 14, offset: 69205},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 14, offset: 69205},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1785, col: 14, offset: 69205},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1785, col: 33, offset: 69224},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1785, col: 42, offset: 69233},
								expr: &seqExpr{
									pos: position{line: 1785, col: 43, offset: 69234},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1785, col: 43, offset: 69234},
											expr: &ruleRefExpr{
												pos:  position{line: 1785, col: 44, offset: 69235},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1785, col: 63, offset: 69254},
											expr: &ruleRefExpr{
												pos:  position{line: 1785, col: 64, offset: 69255},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1785, col: 68, offset: 69259},
											expr: &ruleRefExpr{
												pos:  position{line: 1785, col: 68, offset: 69259},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1785, col: 75, offset: 69266},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1785, col: 89, offset: 69280},
											expr: &ruleRefExpr{
												pos:  position{line: 1785, col: 89, offset: 69280},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1792, col: 1, offset: 69536},
			expr: &seqExpr{
				pos: position{line: 1792, col: 26, offset: 69561},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1792, col: 26, offset: 69561},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1792, col: 33, offset: 69568},
						expr: &ruleRefExpr{
							pos:  position{line: 1792, col: 33, offset: 69568},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1792, col: 40, offset: 69575},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1794, col: 1, offset: 69582},
			expr: &seqExpr{
				pos: position{line: 1794, col: 31, offset: 69612},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1794, col: 31, offset: 69612},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1794, col: 38, offset: 69619},
						expr: &ruleRefExpr{
							pos:  position{line: 1794, col: 38, offset: 69619},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1794, col: 45, offset: 69626},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1796, col: 1, offset: 69633},
			expr: &choiceExpr{
				pos: position{line: 1796, col: 29, offset: 69661},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1796, col: 30, offset: 69662},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1796, col: 30, offset: 69662},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1796, col: 37, offset: 69669},
								expr: &ruleRefExpr{
									pos:  position{line: 1796, col: 37, offset: 69669},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1796, col: 44, offset: 69676},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 51, offset: 69683},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1798, col: 1, offset: 69690},
			expr: &actionExpr{
				pos: position{line: 1798, col: 17, offset: 69706},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 17, offset: 69706},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1798, col: 17, offset: 69706},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 44, offset: 69733},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 53, offset: 69742},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 83, offset: 69772},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1802, col: 1, offset: 69886},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1802, col: 32, offset: 69917},
				expr: &actionExpr{
					pos: position{line: 1802, col: 33, offset: 69918},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1802, col: 33, offset: 69918},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1802, col: 33, offset: 69918},
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 34, offset: 69919},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1802, col: 59, offset: 69944},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 68, offset: 69953},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1806, col: 1, offset: 70098},
			expr: &actionExpr{
				pos: position{line: 1806, col: 22, offset: 70119},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1806, col: 22, offset: 70119},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1806, col: 22, offset: 70119},
							expr: &ruleRefExpr{
								pos:  position{line: 1806, col: 23, offset: 70120},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1806, col: 45, offset: 70142},
							expr: &ruleRefExpr{
								pos:  position{line: 1806, col: 45, offset: 70142},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1806, col: 52, offset: 70149},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1806, col: 57, offset: 70154},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1806, col: 66, offset: 70163},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1806, col: 92, offset: 70189},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1810, col: 1, offset: 70258},
			expr: &actionExpr{
				pos: position{line: 1810, col: 29, offset: 70286},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1810, col: 29, offset: 70286},
					expr: &charClassMatcher{
						pos:        position{line: 1810, col: 29, offset: 70286},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1818, col: 1, offset: 70607},
			expr: &choiceExpr{
				pos: position{line: 1818, col: 17, offset: 70623},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1818, col: 17, offset: 70623},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 49, offset: 70655},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 78, offset: 70684},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1820, col: 1, offset: 70722},
			expr: &litMatcher{
				pos:        position{line: 1820, col: 26, offset: 70747},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1823, col: 1, offset: 70822},
			expr: &actionExpr{
				pos: position{line: 1823, col: 31, offset: 70852},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 31, offset: 70852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1823, col: 31, offset: 70852},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 42, offset: 70863},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 43, offset: 70864},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 56, offset: 70877},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 63, offset: 70884},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1828, col: 1, offset: 71119},
			expr: &actionExpr{
				pos: position{line: 1829, col: 5, offset: 71160},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1829, col: 5, offset: 71160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1829, col: 5, offset: 71160},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1829, col: 16, offset: 71171},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1829, col: 16, offset: 71171},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1829, col: 16, offset: 71171},
											expr: &ruleRefExpr{
												pos:  position{line: 1829, col: 16, offset: 71171},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1829, col: 23, offset: 71178},
											expr: &charClassMatcher{
												pos:        position{line: 1829, col: 23, offset: 71178},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 8, offset: 71233},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1832, col: 5, offset: 71297},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1832, col: 16, offset: 71308},
								expr: &actionExpr{
									pos: position{line: 1833, col: 9, offset: 71319},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1833, col: 9, offset: 71319},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1833, col: 9, offset: 71319},
												expr: &ruleRefExpr{
													pos:  position{line: 1833, col: 10, offset: 71320},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1834, col: 9, offset: 71340},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1834, col: 20, offset: 71351},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1834, col: 20, offset: 71351},
														expr: &charClassMatcher{
															pos:        position{line: 1834, col: 20, offset: 71351},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1836, col: 12, offset: 71414},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1843, col: 1, offset: 71651},
			expr: &actionExpr{
				pos: position{line: 1843, col: 39, offset: 71689},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1843, col: 39, offset: 71689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1843, col: 39, offset: 71689},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1843, col: 50, offset: 71700},
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 51, offset: 71701},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1844, col: 9, offset: 71723},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1844, col: 31, offset: 71745},
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 31, offset: 71745},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1844, col: 38, offset: 71752},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 46, offset: 71760},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 53, offset: 71767},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1844, col: 95, offset: 71809},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1844, col: 96, offset: 71810},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1844, col: 96, offset: 71810},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1844, col: 118, offset: 71832},
											expr: &ruleRefExpr{
												pos:  position{line: 1844, col: 118, offset: 71832},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1844, col: 125, offset: 71839},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 132, offset: 71846},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1849, col: 1, offset: 72010},
			expr: &actionExpr{
				pos: position{line: 1849, col: 44, offset: 72053},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1849, col: 44, offset: 72053},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1849, col: 50, offset: 72059},
						expr: &ruleRefExpr{
							pos:  position{line: 1849, col: 51, offset: 72060},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1853, col: 1, offset: 72148},
			expr: &actionExpr{
				pos: position{line: 1854, col: 5, offset: 72204},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1854, col: 5, offset: 72204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1854, col: 5, offset: 72204},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1854, col: 11, offset: 72210},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1854, col: 11, offset: 72210},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1854, col: 11, offset: 72210},
											expr: &ruleRefExpr{
												pos:  position{line: 1854, col: 12, offset: 72211},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1854, col: 34, offset: 72233},
											expr: &charClassMatcher{
												pos:        position{line: 1854, col: 34, offset: 72233},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1856, col: 8, offset: 72288},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1861, col: 1, offset: 72419},
			expr: &actionExpr{
				pos: position{line: 1862, col: 5, offset: 72458},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1862, col: 5, offset: 72458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1862, col: 5, offset: 72458},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1862, col: 16, offset: 72469},
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 17, offset: 72470},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1863, col: 5, offset: 72488},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1870, col: 5, offset: 72702},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 12, offset: 72709},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1874, col: 1, offset: 72863},
			expr: &actionExpr{
				pos: position{line: 1874, col: 16, offset: 72878},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1874, col: 16, offset: 72878},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1879, col: 1, offset: 72966},
			expr: &actionExpr{
				pos: position{line: 1879, col: 39, offset: 73004},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1879, col: 39, offset: 73004},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1879, col: 45, offset: 73010},
						expr: &ruleRefExpr{
							pos:  position{line: 1879, col: 46, offset: 73011},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1883, col: 1, offset: 73095},
			expr: &actionExpr{
				pos: position{line: 1883, col: 38, offset: 73132},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1883, col: 38, offset: 73132},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1883, col: 38, offset: 73132},
							expr: &ruleRefExpr{
								pos:  position{line: 1883, col: 39, offset: 73133},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1883, col: 49, offset: 73143},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1883, col: 58, offset: 73152},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1883, col: 58, offset: 73152},
									expr: &charClassMatcher{
										pos:        position{line: 1883, col: 58, offset: 73152},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1885, col: 4, offset: 73199},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1892, col: 1, offset: 73392},
			expr: &actionExpr{
				pos: position{line: 1892, col: 14, offset: 73405},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1892, col: 14, offset: 73405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1892, col: 14, offset: 73405},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1892, col: 19, offset: 73410},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1892, col: 25, offset: 73416},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1892, col: 43, offset: 73434},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1896, col: 1, offset: 73503},
			expr: &actionExpr{
				pos: position{line: 1896, col: 21, offset: 73523},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1896, col: 21, offset: 73523},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1896, col: 30, offset: 73532},
						expr: &choiceExpr{
							pos: position{line: 1896, col: 31, offset: 73533},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1896, col: 31, offset: 73533},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1896, col: 38, offset: 73540},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1896, col: 51, offset: 73553},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1896, col: 66, offset: 73568},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1896, col: 74, offset: 73576},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1896, col: 75, offset: 73577},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1896, col: 75, offset: 73577},
												expr: &litMatcher{
													pos:        position{line: 1896, col: 76, offset: 73578},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1896, col: 81, offset: 73583,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1902, col: 1, offset: 73695},
			expr: &actionExpr{
				pos: position{line: 1902, col: 23, offset: 73717},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1902, col: 23, offset: 73717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1902, col: 23, offset: 73717},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1902, col: 29, offset: 73723},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1902, col: 36, offset: 73730},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1903, col: 5, offset: 73763},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1903, col: 11, offset: 73769},
								expr: &actionExpr{
									pos: position{line: 1903, col: 12, offset: 73770},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1903, col: 12, offset: 73770},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1903, col: 12, offset: 73770},
												expr: &ruleRefExpr{
													pos:  position{line: 1903, col: 12, offset: 73770},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1903, col: 19, offset: 73777},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1903, col: 23, offset: 73781},
												expr: &ruleRefExpr{
													pos:  position{line: 1903, col: 23, offset: 73781},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1903, col: 30, offset: 73788},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1903, col: 39, offset: 73797},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 5, offset: 73856},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1904, col: 11, offset: 73862},
								expr: &actionExpr{
									pos: position{line: 1904, col: 12, offset: 73863},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1904, col: 12, offset: 73863},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1904, col: 12, offset: 73863},
												expr: &ruleRefExpr{
													pos:  position{line: 1904, col: 12, offset: 73863},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1904, col: 19, offset: 73870},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1904, col: 23, offset: 73874},
												expr: &ruleRefExpr{
													pos:  position{line: 1904, col: 23, offset: 73874},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1904, col: 30, offset: 73881},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1904, col: 39, offset: 73890},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1905, col: 5, offset: 73949},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1909, col: 1, offset: 74032},
			expr: &actionExpr{
				pos: position{line: 1909, col: 30, offset: 74061},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1909, col: 30, offset: 74061},
					expr: &choiceExpr{
						pos: position{line: 1909, col: 31, offset: 74062},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1909, col: 31, offset: 74062},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1909, col: 42, offset: 74073},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1916, col: 1, offset: 74229},
			expr: &actionExpr{
				pos: position{line: 1916, col: 14, offset: 74242},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 14, offset: 74242},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1916, col: 14, offset: 74242},
							expr: &ruleRefExpr{
								pos:  position{line: 1916, col: 15, offset: 74243},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1916, col: 19, offset: 74247},
							expr: &ruleRefExpr{
								pos:  position{line: 1916, col: 19, offset: 74247},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1916, col: 26, offset: 74254},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1923, col: 1, offset: 74408},
			expr: &charClassMatcher{
				pos:        position{line: 1923, col: 13, offset: 74420},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1925, col: 1, offset: 74432},
			expr: &choiceExpr{
				pos: position{line: 1925, col: 16, offset: 74447},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1925, col: 16, offset: 74447},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1925, col: 22, offset: 74453},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1925, col: 28, offset: 74459},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1925, col: 34, offset: 74465},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1925, col: 40, offset: 74471},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1925, col: 46, offset: 74477},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1927, col: 1, offset: 74485},
			expr: &actionExpr{
				pos: position{line: 1927, col: 14, offset: 74498},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1927, col: 14, offset: 74498},
					expr: &charClassMatcher{
						pos:        position{line: 1927, col: 14, offset: 74498},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1931, col: 1, offset: 74548},
			expr: &choiceExpr{
				pos: position{line: 1935, col: 5, offset: 74879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1935, col: 5, offset: 74879},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1935, col: 5, offset: 74879},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1935, col: 5, offset: 74879},
									expr: &charClassMatcher{
										pos:        position{line: 1935, col: 5, offset: 74879},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1935, col: 15, offset: 74889},
									expr: &choiceExpr{
										pos: position{line: 1935, col: 17, offset: 74891},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1935, col: 17, offset: 74891},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1935, col: 30, offset: 74904},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1937, col: 9, offset: 74976},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1937, col: 9, offset: 74976},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1937, col: 9, offset: 74976},
									expr: &charClassMatcher{
										pos:        position{line: 1937, col: 9, offset: 74976},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1937, col: 19, offset: 74986},
									expr: &seqExpr{
										pos: position{line: 1937, col: 20, offset: 74987},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1937, col: 20, offset: 74987},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1937, col: 27, offset: 74994},
												expr: &charClassMatcher{
													pos:        position{line: 1937, col: 27, offset: 74994},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1941, col: 1, offset: 75074},
			expr: &choiceExpr{
				pos: position{line: 1942, col: 5, offset: 75156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1942, col: 5, offset: 75156},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1942, col: 5, offset: 75156},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1942, col: 5, offset: 75156},
									expr: &charClassMatcher{
										pos:        position{line: 1942, col: 5, offset: 75156},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1942, col: 20, offset: 75171},
									expr: &choiceExpr{
										pos: position{line: 1942, col: 22, offset: 75173},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1942, col: 22, offset: 75173},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1942, col: 32, offset: 75183},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1944, col: 9, offset: 75255},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1947, col: 1, offset: 75358},
			expr: &actionExpr{
				pos: position{line: 1947, col: 12, offset: 75369},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1947, col: 12, offset: 75369},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1951, col: 1, offset: 75438},
			expr: &actionExpr{
				pos: position{line: 1951, col: 17, offset: 75454},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1951, col: 17, offset: 75454},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1951, col: 22, offset: 75459},
						expr: &choiceExpr{
							pos: position{line: 1951, col: 23, offset: 75460},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1951, col: 23, offset: 75460},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1951, col: 34, offset: 75471},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1955, col: 1, offset: 75559},
			expr: &actionExpr{
				pos: position{line: 1955, col: 25, offset: 75583},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1955, col: 25, offset: 75583},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1955, col: 30, offset: 75588},
						expr: &charClassMatcher{
							pos:        position{line: 1955, col: 31, offset: 75589},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1959, col: 1, offset: 75665},
			expr: &actionExpr{
				pos: position{line: 1959, col: 13, offset: 75677},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 13, offset: 75677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1959, col: 13, offset: 75677},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1959, col: 20, offset: 75684},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 21, offset: 75685},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 34, offset: 75698},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1959, col: 39, offset: 75703},
								expr: &choiceExpr{
									pos: position{line: 1959, col: 40, offset: 75704},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1959, col: 40, offset: 75704},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1959, col: 51, offset: 75715},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1963, col: 1, offset: 75807},
			expr: &actionExpr{
				pos: position{line: 1963, col: 23, offset: 75829},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 23, offset: 75829},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1963, col: 23, offset: 75829},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1963, col: 31, offset: 75837},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 43, offset: 75849},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1963, col: 48, offset: 75854},
								expr: &choiceExpr{
									pos: position{line: 1963, col: 49, offset: 75855},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1963, col: 49, offset: 75855},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1963, col: 60, offset: 75866},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1967, col: 1, offset: 75958},
			expr: &oneOrMoreExpr{
				pos: position{line: 1967, col: 13, offset: 75970},
				expr: &charClassMatcher{
					pos:        position{line: 1967, col: 14, offset: 75971},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1969, col: 1, offset: 76107},
			expr: &actionExpr{
				pos: position{line: 1969, col: 21, offset: 76127},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 21, offset: 76127},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1969, col: 21, offset: 76127},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 29, offset: 76135},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 41, offset: 76147},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 47, offset: 76153},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1974, col: 1, offset: 76406},
			expr: &oneOrMoreExpr{
				pos: position{line: 1974, col: 22, offset: 76427},
				expr: &charClassMatcher{
					pos:        position{line: 1974, col: 23, offset: 76428},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1976, col: 1, offset: 76562},
			expr: &actionExpr{
				pos: position{line: 1976, col: 9, offset: 76570},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1976, col: 9, offset: 76570},
					expr: &charClassMatcher{
						pos:        position{line: 1976, col: 9, offset: 76570},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1980, col: 1, offset: 76622},
			expr: &choiceExpr{
				pos: position{line: 1980, col: 15, offset: 76636},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1980, col: 15, offset: 76636},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1980, col: 27, offset: 76648},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1980, col: 40, offset: 76661},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1980, col: 51, offset: 76672},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1980, col: 62, offset: 76683},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1982, col: 1, offset: 76696},
			expr: &actionExpr{
				pos: position{line: 1982, col: 7, offset: 76702},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1982, col: 7, offset: 76702},
					expr: &charClassMatcher{
						pos:        position{line: 1982, col: 7, offset: 76702},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1986, col: 1, offset: 76831},
			expr: &actionExpr{
				pos: position{line: 1986, col: 10, offset: 76840},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1986, col: 10, offset: 76840},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1990, col: 1, offset: 76886},
			expr: &actionExpr{
				pos: position{line: 1990, col: 11, offset: 76896},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1990, col: 11, offset: 76896},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1990, col: 11, offset: 76896},
							expr: &litMatcher{
								pos:        position{line: 1990, col: 11, offset: 76896},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1990, col: 16, offset: 76901},
							expr: &ruleRefExpr{
								pos:  position{line: 1990, col: 16, offset: 76901},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1994, col: 1, offset: 76957},
			expr: &choiceExpr{
				pos: position{line: 1994, col: 10, offset: 76966},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1994, col: 10, offset: 76966},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1994, col: 16, offset: 76972},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1994, col: 16, offset: 76972},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1998, col: 1, offset: 77017},
			expr: &choiceExpr{
				pos: position{line: 1998, col: 12, offset: 77028},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1998, col: 12, offset: 77028},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1998, col: 21, offset: 77037},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1998, col: 28, offset: 77044},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2000, col: 1, offset: 77052},
			expr: &notExpr{
				pos: position{line: 2000, col: 8, offset: 77059},
				expr: &anyMatcher{
					line: 2000, col: 9, offset: 77060,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2002, col: 1, offset: 77065},
			expr: &choiceExpr{
				pos: position{line: 2002, col: 8, offset: 77072},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2002, col: 8, offset: 77072},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2002, col: 18, offset: 77082},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {

	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextStringElement1()
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextStringElement1()
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
