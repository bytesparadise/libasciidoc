// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 519},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 539},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 539},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 547},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 568},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 686},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 697},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 697},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 705},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 865},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 881},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 881},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 889},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1090},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1119},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1119},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1127},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1127},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1144},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1152},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1152},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1404},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1433},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1498},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1519},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1545},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1597},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1615},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1640},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1664},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1692},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1716},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1742},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1771},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1797},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1832},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1856},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1888},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1914},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1951},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 1976},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2007},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2021},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2067},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2074},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2075},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2112},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2149},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2149},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2149},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2150},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2159},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2175},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2175},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2196},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2221},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2272},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2296},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2324},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2348},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2374},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2403},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2429},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2464},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2488},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2520},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2546},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2583},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2608},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2649},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2671},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2678},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2679},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2700},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2721},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2721},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2721},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2722},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2731},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2738},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2750},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 2899},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 2914},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 2932},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 2951},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 2951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 2951},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 2972},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 2980},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 2981},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3006},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3086},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3111},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3111},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3117},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3117},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3124},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3129},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3155},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3155},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3156},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3157},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3157},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3158},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3179,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3345},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3363},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3363},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3367},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3367},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3374},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3381},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3396},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3400},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3400},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3418},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3430},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3431},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3431},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3451},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3474},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3483},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3483},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3510},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3511},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3511},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3531},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3554},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3564},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3564},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3665},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3684},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3712},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3742},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3771},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3771},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3771},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3771},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3778},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3779},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3783},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3792},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3792},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3809},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 3879},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 3911},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 3911},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 3911},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 3911},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 3918},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 3929},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 3937},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 3953},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4032},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4050},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4050},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4050},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4050},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4057},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4067},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4087},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4093},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4094},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4116},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4116},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4123},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4123},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4128},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4128},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4273},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4295},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4295},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4295},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4342},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4365},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4365},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4369},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4376},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4377},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4377},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4424},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4585},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4605},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4605},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4605},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4605},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4612},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4613},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4617},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4636},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4637},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4637},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4637},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4648},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4672},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4672},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4677},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4685},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4686},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4709},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4709},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4714},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4724},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4725},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4842},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4842},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4842},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 4851},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 4873},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 4873},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 4878},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 4888},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 4889},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 4998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5128},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5154},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5154},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5159},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5166},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5166},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5214},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5214},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5214},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5214},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5220},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5227},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5227},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5238},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5238},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5245},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5246},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5286},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5310},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5310},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5310},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5356},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5382},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5382},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5382},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5535},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5559},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5559},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5563},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5569},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5584},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5597},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5603},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5604},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5605},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5605},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5605},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5612},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5619},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5693},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5693},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5700},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 5940},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 5957},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 5957},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 5957},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 5967},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 5968},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6016},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6045},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6045},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6045},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6090},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6108},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6108},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6113},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6119},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6134},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6138},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6138},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6145},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6205},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6205},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6209},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6215},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6230},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6235},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6235},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6242},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6301},
			expr: &choiceExpr{
				pos: position{line: 205, col: 26, offset: 6326},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 26, offset: 6326},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 39, offset: 6339},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 207, col: 1, offset: 6348},
			expr: &actionExpr{
				pos: position{line: 207, col: 12, offset: 6359},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 207, col: 12, offset: 6359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 12, offset: 6359},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 16, offset: 6363},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 21, offset: 6368},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 35, offset: 6382},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 211, col: 1, offset: 6448},
			expr: &choiceExpr{
				pos: position{line: 211, col: 15, offset: 6462},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 15, offset: 6462},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 29, offset: 6476},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 43, offset: 6490},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 61, offset: 6508},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 80, offset: 6527},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 98, offset: 6545},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 213, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 213, col: 16, offset: 6578},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 213, col: 16, offset: 6578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 16, offset: 6578},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 28, offset: 6590},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 33, offset: 6595},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 47, offset: 6609},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 217, col: 1, offset: 6685},
			expr: &actionExpr{
				pos: position{line: 217, col: 16, offset: 6700},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 217, col: 16, offset: 6700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 16, offset: 6700},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 29, offset: 6713},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 34, offset: 6718},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 48, offset: 6732},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 221, col: 1, offset: 6807},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 6826},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 6826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 6826},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 6838},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 6843},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 6857},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 6861},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 221, col: 61, offset: 6867},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 70, offset: 6876},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 225, col: 1, offset: 6954},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 6974},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 6974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 6974},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 6987},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 6992},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7006},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7010},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 225, col: 63, offset: 7016},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 72, offset: 7025},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 229, col: 1, offset: 7102},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7121},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7121},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 32, offset: 7133},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 37, offset: 7138},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 51, offset: 7152},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 55, offset: 7156},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 229, col: 60, offset: 7161},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 229, col: 60, offset: 7161},
									expr: &charClassMatcher{
										pos:        position{line: 229, col: 60, offset: 7161},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 108, offset: 7209},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 233, col: 1, offset: 7291},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7311},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 21, offset: 7311},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 34, offset: 7324},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 39, offset: 7329},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 53, offset: 7343},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 57, offset: 7347},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 233, col: 62, offset: 7352},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 233, col: 62, offset: 7352},
									expr: &charClassMatcher{
										pos:        position{line: 233, col: 62, offset: 7352},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 110, offset: 7400},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 237, col: 1, offset: 7481},
			expr: &actionExpr{
				pos: position{line: 237, col: 15, offset: 7495},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 15, offset: 7495},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 15, offset: 7495},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 21, offset: 7501},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 22, offset: 7502},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 41, offset: 7521},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 41, offset: 7521},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 241, col: 1, offset: 7591},
			expr: &actionExpr{
				pos: position{line: 241, col: 21, offset: 7611},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 241, col: 21, offset: 7611},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 241, col: 21, offset: 7611},
							expr: &choiceExpr{
								pos: position{line: 241, col: 23, offset: 7613},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 241, col: 23, offset: 7613},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 241, col: 29, offset: 7619},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7696},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 242, col: 11, offset: 7702},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 242, col: 11, offset: 7702},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7723},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 9, offset: 7747},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 9, offset: 7784},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 9, offset: 7812},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 7840},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 7867},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 7894},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 7931},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 7967},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 255, col: 1, offset: 8070},
			expr: &actionExpr{
				pos: position{line: 255, col: 14, offset: 8083},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 255, col: 14, offset: 8083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 14, offset: 8083},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 19, offset: 8088},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 23, offset: 8092},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 27, offset: 8096},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 32, offset: 8101},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 32, offset: 8101},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 39, offset: 8108},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 259, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 259, col: 20, offset: 8179},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 259, col: 20, offset: 8179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 20, offset: 8179},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 25, offset: 8184},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 29, offset: 8188},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 33, offset: 8192},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 38, offset: 8197},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 38, offset: 8197},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 265, col: 1, offset: 8474},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8490},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 17, offset: 8490},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 21, offset: 8494},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 28, offset: 8501},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 49, offset: 8522},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 49, offset: 8522},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 56, offset: 8529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 269, col: 1, offset: 8587},
			expr: &actionExpr{
				pos: position{line: 269, col: 24, offset: 8610},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 269, col: 24, offset: 8610},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 269, col: 24, offset: 8610},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 32, offset: 8618},
							expr: &charClassMatcher{
								pos:        position{line: 269, col: 32, offset: 8618},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 275, col: 1, offset: 8871},
			expr: &actionExpr{
				pos: position{line: 275, col: 31, offset: 8901},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 275, col: 31, offset: 8901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 31, offset: 8901},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 35, offset: 8905},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 42, offset: 8912},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 42, offset: 8912},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 42, offset: 8912},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 57, offset: 8927},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 57, offset: 8927},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 69, offset: 8939},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 73, offset: 8943},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 73, offset: 8943},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 80, offset: 8950},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 279, col: 1, offset: 9004},
			expr: &choiceExpr{
				pos: position{line: 279, col: 15, offset: 9018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 279, col: 15, offset: 9018},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 31, offset: 9034},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 46, offset: 9049},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 283, col: 1, offset: 9277},
			expr: &actionExpr{
				pos: position{line: 283, col: 18, offset: 9294},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 283, col: 18, offset: 9294},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 18, offset: 9294},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 22, offset: 9298},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 283, col: 29, offset: 9305},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 283, col: 29, offset: 9305},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 29, offset: 9305},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 45, offset: 9321},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 45, offset: 9321},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 60, offset: 9336},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 60, offset: 9336},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 82, offset: 9358},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 82, offset: 9358},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 104, offset: 9380},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 104, offset: 9380},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 116, offset: 9392},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 120, offset: 9396},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 287, col: 1, offset: 9450},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9468},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 287, col: 19, offset: 9468},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 287, col: 25, offset: 9474},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 291, col: 1, offset: 9544},
			expr: &actionExpr{
				pos: position{line: 291, col: 25, offset: 9568},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 291, col: 25, offset: 9568},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 25, offset: 9568},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 25, offset: 9568},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 32, offset: 9575},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 36, offset: 9579},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 36, offset: 9579},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 43, offset: 9586},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 49, offset: 9592},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 49, offset: 9592},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 298, col: 1, offset: 9742},
			expr: &actionExpr{
				pos: position{line: 298, col: 25, offset: 9766},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 298, col: 25, offset: 9766},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 25, offset: 9766},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 25, offset: 9766},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 32, offset: 9773},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 36, offset: 9777},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 36, offset: 9777},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 43, offset: 9784},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 49, offset: 9790},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 49, offset: 9790},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 305, col: 1, offset: 9940},
			expr: &actionExpr{
				pos: position{line: 305, col: 21, offset: 9960},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 305, col: 21, offset: 9960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 21, offset: 9960},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 33, offset: 9972},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 33, offset: 9972},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 40, offset: 9979},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 309, col: 1, offset: 10031},
			expr: &actionExpr{
				pos: position{line: 309, col: 30, offset: 10060},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 30, offset: 10060},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 10060},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 39, offset: 10069},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 39, offset: 10069},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 46, offset: 10076},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 314, col: 1, offset: 10217},
			expr: &actionExpr{
				pos: position{line: 314, col: 30, offset: 10246},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 314, col: 30, offset: 10246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 30, offset: 10246},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 34, offset: 10250},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 37, offset: 10253},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 53, offset: 10269},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 57, offset: 10273},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 57, offset: 10273},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 64, offset: 10280},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 319, col: 1, offset: 10435},
			expr: &actionExpr{
				pos: position{line: 319, col: 21, offset: 10455},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 319, col: 21, offset: 10455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 21, offset: 10455},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 10470},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 14, offset: 10479},
								expr: &actionExpr{
									pos: position{line: 320, col: 15, offset: 10480},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 320, col: 15, offset: 10480},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 320, col: 15, offset: 10480},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 19, offset: 10484},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 320, col: 24, offset: 10489},
													expr: &ruleRefExpr{
														pos:  position{line: 320, col: 25, offset: 10490},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10545},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 12, offset: 10552},
								expr: &actionExpr{
									pos: position{line: 321, col: 13, offset: 10553},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 321, col: 13, offset: 10553},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 321, col: 13, offset: 10553},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 17, offset: 10557},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 321, col: 22, offset: 10562},
													expr: &ruleRefExpr{
														pos:  position{line: 321, col: 23, offset: 10563},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10610},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 9, offset: 10614},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 9, offset: 10614},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 16, offset: 10621},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 327, col: 1, offset: 10772},
			expr: &actionExpr{
				pos: position{line: 327, col: 19, offset: 10790},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 327, col: 19, offset: 10790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 19, offset: 10790},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 23, offset: 10794},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 327, col: 34, offset: 10805},
								expr: &ruleRefExpr{
									pos:  position{line: 327, col: 35, offset: 10806},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 54, offset: 10825},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 58, offset: 10829},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 58, offset: 10829},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 65, offset: 10836},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 331, col: 1, offset: 10908},
			expr: &choiceExpr{
				pos: position{line: 331, col: 21, offset: 10928},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 21, offset: 10928},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 49, offset: 10956},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 333, col: 1, offset: 10986},
			expr: &actionExpr{
				pos: position{line: 333, col: 30, offset: 11015},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 333, col: 30, offset: 11015},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 333, col: 30, offset: 11015},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 35, offset: 11020},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 49, offset: 11034},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 53, offset: 11038},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 59, offset: 11044},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 60, offset: 11045},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 333, col: 77, offset: 11062},
							expr: &litMatcher{
								pos:        position{line: 333, col: 77, offset: 11062},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 82, offset: 11067},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 82, offset: 11067},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 337, col: 1, offset: 11166},
			expr: &actionExpr{
				pos: position{line: 337, col: 33, offset: 11198},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 337, col: 33, offset: 11198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 33, offset: 11198},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 38, offset: 11203},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 337, col: 52, offset: 11217},
							expr: &litMatcher{
								pos:        position{line: 337, col: 52, offset: 11217},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 337, col: 57, offset: 11222},
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 57, offset: 11222},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 341, col: 1, offset: 11310},
			expr: &actionExpr{
				pos: position{line: 341, col: 17, offset: 11326},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 341, col: 17, offset: 11326},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 341, col: 17, offset: 11326},
							expr: &litMatcher{
								pos:        position{line: 341, col: 18, offset: 11327},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 26, offset: 11335},
							expr: &litMatcher{
								pos:        position{line: 341, col: 27, offset: 11336},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 35, offset: 11344},
							expr: &litMatcher{
								pos:        position{line: 341, col: 36, offset: 11345},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 46, offset: 11355},
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 48, offset: 11357},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 48, offset: 11357},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 56, offset: 11365},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 61, offset: 11370},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 61, offset: 11370},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 341, col: 75, offset: 11384},
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 75, offset: 11384},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 345, col: 1, offset: 11427},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11445},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 345, col: 19, offset: 11445},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 345, col: 26, offset: 11452},
						expr: &charClassMatcher{
							pos:        position{line: 345, col: 26, offset: 11452},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 349, col: 1, offset: 11503},
			expr: &actionExpr{
				pos: position{line: 349, col: 29, offset: 11531},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 349, col: 29, offset: 11531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 29, offset: 11531},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 349, col: 36, offset: 11538},
								expr: &charClassMatcher{
									pos:        position{line: 349, col: 36, offset: 11538},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 349, col: 50, offset: 11552},
							expr: &litMatcher{
								pos:        position{line: 349, col: 51, offset: 11553},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 353, col: 1, offset: 11719},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 11738},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 11738},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 20, offset: 11738},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 29, offset: 11747},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 29, offset: 11747},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 36, offset: 11754},
							expr: &litMatcher{
								pos:        position{line: 353, col: 36, offset: 11754},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 41, offset: 11759},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 48, offset: 11766},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 49, offset: 11767},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 66, offset: 11784},
							expr: &litMatcher{
								pos:        position{line: 353, col: 66, offset: 11784},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 71, offset: 11789},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 77, offset: 11795},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 78, offset: 11796},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 95, offset: 11813},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 99, offset: 11817},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 99, offset: 11817},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 106, offset: 11824},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 357, col: 1, offset: 11893},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 11912},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 11912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 11912},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 29, offset: 11921},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 29, offset: 11921},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 36, offset: 11928},
							expr: &litMatcher{
								pos:        position{line: 357, col: 36, offset: 11928},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 41, offset: 11933},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 48, offset: 11940},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 49, offset: 11941},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 66, offset: 11958},
							expr: &litMatcher{
								pos:        position{line: 357, col: 66, offset: 11958},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 71, offset: 11963},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 77, offset: 11969},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 78, offset: 11970},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 95, offset: 11987},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 99, offset: 11991},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 99, offset: 11991},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 106, offset: 11998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 361, col: 1, offset: 12085},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 12103},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 361, col: 20, offset: 12104},
					expr: &charClassMatcher{
						pos:        position{line: 361, col: 20, offset: 12104},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 365, col: 1, offset: 12153},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 12172},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 12172},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 20, offset: 12172},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 24, offset: 12176},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 365, col: 31, offset: 12183},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 365, col: 31, offset: 12183},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 31, offset: 12183},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 51, offset: 12203},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 51, offset: 12203},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 66, offset: 12218},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 66, offset: 12218},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 78, offset: 12230},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 369, col: 1, offset: 12284},
			expr: &actionExpr{
				pos: position{line: 369, col: 23, offset: 12306},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 369, col: 23, offset: 12306},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 369, col: 28, offset: 12311},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 373, col: 1, offset: 12379},
			expr: &actionExpr{
				pos: position{line: 373, col: 25, offset: 12403},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 373, col: 25, offset: 12403},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 25, offset: 12403},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 373, col: 36, offset: 12414},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 37, offset: 12415},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 373, col: 56, offset: 12434},
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 56, offset: 12434},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 67, offset: 12445},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 377, col: 1, offset: 12553},
			expr: &choiceExpr{
				pos: position{line: 377, col: 18, offset: 12570},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 377, col: 18, offset: 12570},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 36, offset: 12588},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 58, offset: 12610},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 379, col: 1, offset: 12629},
			expr: &actionExpr{
				pos: position{line: 379, col: 24, offset: 12652},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 379, col: 24, offset: 12652},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 24, offset: 12652},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 28, offset: 12656},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 35, offset: 12663},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 50, offset: 12678},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 51, offset: 12679},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 383, col: 1, offset: 12748},
			expr: &actionExpr{
				pos: position{line: 383, col: 20, offset: 12767},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 383, col: 20, offset: 12767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 20, offset: 12767},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 24, offset: 12771},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 27, offset: 12774},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 383, col: 42, offset: 12789},
							expr: &charClassMatcher{
								pos:        position{line: 383, col: 43, offset: 12790},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 387, col: 1, offset: 12851},
			expr: &actionExpr{
				pos: position{line: 387, col: 22, offset: 12872},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 387, col: 22, offset: 12872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 22, offset: 12872},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 26, offset: 12876},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 31, offset: 12881},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 387, col: 46, offset: 12896},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 47, offset: 12897},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 392, col: 1, offset: 13006},
			expr: &actionExpr{
				pos: position{line: 392, col: 20, offset: 13025},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 392, col: 20, offset: 13025},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 20, offset: 13025},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 26, offset: 13031},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 392, col: 41, offset: 13046},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 42, offset: 13047},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 396, col: 1, offset: 13092},
			expr: &choiceExpr{
				pos: position{line: 396, col: 14, offset: 13105},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 396, col: 14, offset: 13105},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 26, offset: 13117},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 38, offset: 13129},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 50, offset: 13141},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 398, col: 1, offset: 13155},
			expr: &actionExpr{
				pos: position{line: 398, col: 15, offset: 13169},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 398, col: 15, offset: 13169},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 398, col: 21, offset: 13175},
						expr: &ruleRefExpr{
							pos:  position{line: 398, col: 21, offset: 13175},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 402, col: 1, offset: 13240},
			expr: &actionExpr{
				pos: position{line: 402, col: 18, offset: 13257},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 402, col: 18, offset: 13257},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 402, col: 18, offset: 13257},
							expr: &litMatcher{
								pos:        position{line: 402, col: 18, offset: 13257},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 23, offset: 13262},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 23, offset: 13262},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 30, offset: 13269},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 32, offset: 13271},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 45, offset: 13284},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 45, offset: 13284},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 52, offset: 13291},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 56, offset: 13295},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 402, col: 59, offset: 13298},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 402, col: 59, offset: 13298},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 71, offset: 13310},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 83, offset: 13322},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 407, col: 1, offset: 13511},
			expr: &actionExpr{
				pos: position{line: 407, col: 14, offset: 13524},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 407, col: 14, offset: 13524},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 14, offset: 13524},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 14, offset: 13524},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 407, col: 21, offset: 13531},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 22, offset: 13532},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 413, col: 1, offset: 13668},
			expr: &actionExpr{
				pos: position{line: 413, col: 14, offset: 13681},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 413, col: 14, offset: 13681},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 14, offset: 13681},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 14, offset: 13681},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 21, offset: 13688},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 25, offset: 13692},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 29, offset: 13696},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 41, offset: 13708},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 45, offset: 13712},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 45, offset: 13712},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 413, col: 52, offset: 13719},
							expr: &charClassMatcher{
								pos:        position{line: 413, col: 53, offset: 13720},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 415, col: 1, offset: 13747},
			expr: &actionExpr{
				pos: position{line: 415, col: 16, offset: 13762},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 16, offset: 13762},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 415, col: 20, offset: 13766},
						expr: &choiceExpr{
							pos: position{line: 415, col: 22, offset: 13768},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 415, col: 22, offset: 13768},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 415, col: 37, offset: 13783},
									expr: &charClassMatcher{
										pos:        position{line: 415, col: 37, offset: 13783},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 415, col: 51, offset: 13797},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 417, col: 1, offset: 13837},
			expr: &actionExpr{
				pos: position{line: 417, col: 17, offset: 13853},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 417, col: 17, offset: 13853},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 420, col: 1, offset: 13913},
			expr: &actionExpr{
				pos: position{line: 420, col: 14, offset: 13926},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 420, col: 14, offset: 13926},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 14, offset: 13926},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 14, offset: 13926},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 21, offset: 13933},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 25, offset: 13937},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 29, offset: 13941},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 41, offset: 13953},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 45, offset: 13957},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 45, offset: 13957},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 422, col: 1, offset: 13985},
			expr: &actionExpr{
				pos: position{line: 422, col: 16, offset: 14000},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 16, offset: 14000},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 422, col: 20, offset: 14004},
						expr: &choiceExpr{
							pos: position{line: 422, col: 22, offset: 14006},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 422, col: 22, offset: 14006},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 422, col: 37, offset: 14021},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 37, offset: 14021},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 422, col: 51, offset: 14035},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 424, col: 1, offset: 14075},
			expr: &actionExpr{
				pos: position{line: 424, col: 17, offset: 14091},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 424, col: 17, offset: 14091},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 427, col: 1, offset: 14182},
			expr: &actionExpr{
				pos: position{line: 427, col: 17, offset: 14198},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 427, col: 17, offset: 14198},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 17, offset: 14198},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 17, offset: 14198},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 427, col: 30, offset: 14211},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 31, offset: 14212},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 430, col: 1, offset: 14323},
			expr: &actionExpr{
				pos: position{line: 430, col: 19, offset: 14341},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 430, col: 19, offset: 14341},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 19, offset: 14341},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 19, offset: 14341},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 430, col: 31, offset: 14353},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 32, offset: 14354},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 432, col: 1, offset: 14411},
			expr: &choiceExpr{
				pos: position{line: 432, col: 19, offset: 14429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 432, col: 19, offset: 14429},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 41, offset: 14451},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 65, offset: 14475},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 436, col: 1, offset: 14673},
			expr: &actionExpr{
				pos: position{line: 436, col: 24, offset: 14696},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 436, col: 24, offset: 14696},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 436, col: 24, offset: 14696},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 45, offset: 14717},
							expr: &choiceExpr{
								pos: position{line: 436, col: 46, offset: 14718},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 436, col: 46, offset: 14718},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 436, col: 68, offset: 14740},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 436, col: 68, offset: 14740},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 436, col: 73, offset: 14745},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 440, col: 1, offset: 14803},
			expr: &actionExpr{
				pos: position{line: 440, col: 13, offset: 14815},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 440, col: 13, offset: 14815},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 440, col: 13, offset: 14815},
							expr: &seqExpr{
								pos: position{line: 440, col: 15, offset: 14817},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 440, col: 15, offset: 14817},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 440, col: 19, offset: 14821},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 19, offset: 14821},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 29, offset: 14831},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 33, offset: 14835},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 46, offset: 14848},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 46, offset: 14848},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 440, col: 53, offset: 14855},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 57, offset: 14859},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 57, offset: 14859},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 64, offset: 14866},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 70, offset: 14872},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 85, offset: 14887},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 85, offset: 14887},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 445, col: 1, offset: 15077},
			expr: &actionExpr{
				pos: position{line: 445, col: 17, offset: 15093},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 445, col: 17, offset: 15093},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 445, col: 17, offset: 15093},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 26, offset: 15102},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 26, offset: 15102},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 449, col: 1, offset: 15150},
			expr: &choiceExpr{
				pos: position{line: 449, col: 19, offset: 15168},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 19, offset: 15168},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 35, offset: 15184},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 59, offset: 15208},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 83, offset: 15232},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 451, col: 1, offset: 15248},
			expr: &actionExpr{
				pos: position{line: 451, col: 19, offset: 15266},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 451, col: 19, offset: 15266},
					expr: &charClassMatcher{
						pos:        position{line: 451, col: 19, offset: 15266},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 455, col: 1, offset: 15319},
			expr: &actionExpr{
				pos: position{line: 455, col: 26, offset: 15344},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 455, col: 26, offset: 15344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 455, col: 26, offset: 15344},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 455, col: 30, offset: 15348},
							expr: &charClassMatcher{
								pos:        position{line: 455, col: 30, offset: 15348},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 455, col: 40, offset: 15358},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 459, col: 1, offset: 15415},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15440},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15440},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15440},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 459, col: 31, offset: 15445},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 31, offset: 15445},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 41, offset: 15455},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 465, col: 1, offset: 15710},
			expr: &actionExpr{
				pos: position{line: 465, col: 18, offset: 15727},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 465, col: 18, offset: 15727},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 473, col: 1, offset: 15909},
			expr: &choiceExpr{
				pos: position{line: 473, col: 17, offset: 15925},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 473, col: 17, offset: 15925},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 38, offset: 15946},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 475, col: 1, offset: 15966},
			expr: &actionExpr{
				pos: position{line: 475, col: 23, offset: 15988},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 475, col: 23, offset: 15988},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 475, col: 23, offset: 15988},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 46, offset: 16011},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 55, offset: 16020},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 82, offset: 16047},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 479, col: 1, offset: 16151},
			expr: &actionExpr{
				pos: position{line: 479, col: 31, offset: 16181},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 479, col: 31, offset: 16181},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 479, col: 41, offset: 16191},
						expr: &ruleRefExpr{
							pos:  position{line: 479, col: 41, offset: 16191},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 483, col: 1, offset: 16269},
			expr: &seqExpr{
				pos: position{line: 483, col: 27, offset: 16295},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 483, col: 27, offset: 16295},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 483, col: 32, offset: 16300},
						expr: &charClassMatcher{
							pos:        position{line: 483, col: 33, offset: 16301},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 485, col: 1, offset: 16312},
			expr: &litMatcher{
				pos:        position{line: 485, col: 25, offset: 16336},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 488, col: 1, offset: 16424},
			expr: &actionExpr{
				pos: position{line: 488, col: 30, offset: 16453},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 488, col: 30, offset: 16453},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 489, col: 9, offset: 16471},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 489, col: 9, offset: 16471},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 489, col: 9, offset: 16471},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 489, col: 19, offset: 16481},
										expr: &ruleRefExpr{
											pos:  position{line: 489, col: 20, offset: 16482},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 490, col: 11, offset: 16538},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 490, col: 11, offset: 16538},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 11, offset: 16538},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 490, col: 18, offset: 16545},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 19, offset: 16546},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 491, col: 11, offset: 16577},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 491, col: 11, offset: 16577},
										expr: &litMatcher{
											pos:        position{line: 491, col: 12, offset: 16578},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 491, col: 16, offset: 16582},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 11, offset: 16630},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16651},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 16673},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16698},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16726},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16741},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16773},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 16792},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16813},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16834},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 16858},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 503, col: 11, offset: 16884},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 503, col: 11, offset: 16884},
										expr: &litMatcher{
											pos:        position{line: 503, col: 12, offset: 16885},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 503, col: 17, offset: 16890},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 16914},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 16943},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 16971},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 510, col: 1, offset: 17037},
			expr: &choiceExpr{
				pos: position{line: 510, col: 41, offset: 17077},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 510, col: 41, offset: 17077},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 510, col: 55, offset: 17091},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 510, col: 55, offset: 17091},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 510, col: 55, offset: 17091},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 510, col: 59, offset: 17095},
									expr: &litMatcher{
										pos:        position{line: 510, col: 60, offset: 17096},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 514, col: 1, offset: 17155},
			expr: &actionExpr{
				pos: position{line: 514, col: 23, offset: 17177},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 514, col: 23, offset: 17177},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 514, col: 23, offset: 17177},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 46, offset: 17200},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 55, offset: 17209},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 82, offset: 17236},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 518, col: 1, offset: 17340},
			expr: &actionExpr{
				pos: position{line: 518, col: 31, offset: 17370},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 518, col: 31, offset: 17370},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 518, col: 41, offset: 17380},
						expr: &ruleRefExpr{
							pos:  position{line: 518, col: 41, offset: 17380},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 523, col: 1, offset: 17540},
			expr: &actionExpr{
				pos: position{line: 523, col: 30, offset: 17569},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 523, col: 30, offset: 17569},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 524, col: 9, offset: 17587},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 524, col: 9, offset: 17587},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 524, col: 9, offset: 17587},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 524, col: 19, offset: 17597},
										expr: &ruleRefExpr{
											pos:  position{line: 524, col: 20, offset: 17598},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 525, col: 11, offset: 17654},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 525, col: 11, offset: 17654},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 11, offset: 17654},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 525, col: 18, offset: 17661},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 19, offset: 17662},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 526, col: 11, offset: 17693},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 17710},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17731},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17753},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17778},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17806},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 17821},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 17853},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 17872},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 17893},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 17914},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 17938},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 538, col: 11, offset: 17964},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 538, col: 11, offset: 17964},
										expr: &litMatcher{
											pos:        position{line: 538, col: 12, offset: 17965},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 18, offset: 17971},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 539, col: 11, offset: 17995},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 540, col: 11, offset: 18024},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 541, col: 11, offset: 18052},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 545, col: 1, offset: 18126},
			expr: &seqExpr{
				pos: position{line: 545, col: 27, offset: 18152},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 545, col: 27, offset: 18152},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 545, col: 33, offset: 18158},
						expr: &charClassMatcher{
							pos:        position{line: 545, col: 34, offset: 18159},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 547, col: 1, offset: 18170},
			expr: &litMatcher{
				pos:        position{line: 547, col: 25, offset: 18194},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 549, col: 1, offset: 18201},
			expr: &actionExpr{
				pos: position{line: 549, col: 41, offset: 18241},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 549, col: 42, offset: 18242},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 549, col: 42, offset: 18242},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 549, col: 56, offset: 18256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 549, col: 56, offset: 18256},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 549, col: 60, offset: 18260},
									expr: &litMatcher{
										pos:        position{line: 549, col: 61, offset: 18261},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 556, col: 1, offset: 18426},
			expr: &actionExpr{
				pos: position{line: 556, col: 12, offset: 18437},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 556, col: 12, offset: 18437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 12, offset: 18437},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 23, offset: 18448},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 24, offset: 18449},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 18466},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 557, col: 12, offset: 18473},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 557, col: 12, offset: 18473},
									expr: &litMatcher{
										pos:        position{line: 557, col: 13, offset: 18474},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 561, col: 5, offset: 18565},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 565, col: 5, offset: 18717},
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 5, offset: 18717},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 12, offset: 18724},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 19, offset: 18731},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 34, offset: 18746},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 565, col: 38, offset: 18750},
								expr: &ruleRefExpr{
									pos:  position{line: 565, col: 38, offset: 18750},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 56, offset: 18768},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 569, col: 1, offset: 18874},
			expr: &actionExpr{
				pos: position{line: 569, col: 18, offset: 18891},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 569, col: 18, offset: 18891},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 569, col: 27, offset: 18900},
						expr: &seqExpr{
							pos: position{line: 569, col: 28, offset: 18901},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 569, col: 28, offset: 18901},
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 29, offset: 18902},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 569, col: 37, offset: 18910},
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 38, offset: 18911},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 569, col: 54, offset: 18927},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 573, col: 1, offset: 19048},
			expr: &actionExpr{
				pos: position{line: 573, col: 17, offset: 19064},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 573, col: 17, offset: 19064},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 573, col: 26, offset: 19073},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 573, col: 26, offset: 19073},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 574, col: 11, offset: 19088},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 575, col: 11, offset: 19133},
								expr: &ruleRefExpr{
									pos:  position{line: 575, col: 11, offset: 19133},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 19151},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 577, col: 11, offset: 19176},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 19204},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 19225},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19247},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19262},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19287},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19310},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19331},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19348},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19380},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 19408},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 594, col: 1, offset: 19559},
			expr: &seqExpr{
				pos: position{line: 594, col: 31, offset: 19589},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 31, offset: 19589},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 594, col: 41, offset: 19599},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 599, col: 1, offset: 19710},
			expr: &actionExpr{
				pos: position{line: 599, col: 19, offset: 19728},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 599, col: 19, offset: 19728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 19, offset: 19728},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 25, offset: 19734},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 599, col: 40, offset: 19749},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 45, offset: 19754},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 52, offset: 19761},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 68, offset: 19777},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 75, offset: 19784},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 603, col: 1, offset: 19899},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 19918},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 19918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 19918},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 26, offset: 19924},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 603, col: 41, offset: 19939},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 45, offset: 19943},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 52, offset: 19950},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 68, offset: 19966},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 75, offset: 19973},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 607, col: 1, offset: 20089},
			expr: &actionExpr{
				pos: position{line: 607, col: 18, offset: 20106},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 19, offset: 20107},
					expr: &charClassMatcher{
						pos:        position{line: 607, col: 19, offset: 20107},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 611, col: 1, offset: 20156},
			expr: &actionExpr{
				pos: position{line: 611, col: 19, offset: 20174},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 611, col: 19, offset: 20174},
					expr: &charClassMatcher{
						pos:        position{line: 611, col: 19, offset: 20174},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 615, col: 1, offset: 20222},
			expr: &actionExpr{
				pos: position{line: 615, col: 24, offset: 20245},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 615, col: 24, offset: 20245},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 24, offset: 20245},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 28, offset: 20249},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 615, col: 34, offset: 20255},
								expr: &ruleRefExpr{
									pos:  position{line: 615, col: 35, offset: 20256},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 615, col: 54, offset: 20275},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 622, col: 1, offset: 20457},
			expr: &actionExpr{
				pos: position{line: 622, col: 18, offset: 20474},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 622, col: 18, offset: 20474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 622, col: 18, offset: 20474},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 622, col: 24, offset: 20480},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 622, col: 24, offset: 20480},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 622, col: 24, offset: 20480},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 622, col: 36, offset: 20492},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 622, col: 42, offset: 20498},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 622, col: 56, offset: 20512},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 622, col: 74, offset: 20530},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 624, col: 8, offset: 20677},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 8, offset: 20677},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 15, offset: 20684},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 628, col: 1, offset: 20736},
			expr: &actionExpr{
				pos: position{line: 628, col: 26, offset: 20761},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 628, col: 26, offset: 20761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 628, col: 26, offset: 20761},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 628, col: 30, offset: 20765},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 628, col: 36, offset: 20771},
								expr: &choiceExpr{
									pos: position{line: 628, col: 37, offset: 20772},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 628, col: 37, offset: 20772},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 59, offset: 20794},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 80, offset: 20815},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 628, col: 99, offset: 20834},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 632, col: 1, offset: 20906},
			expr: &actionExpr{
				pos: position{line: 632, col: 24, offset: 20929},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 632, col: 24, offset: 20929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 24, offset: 20929},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 33, offset: 20938},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 40, offset: 20945},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 632, col: 66, offset: 20971},
							expr: &litMatcher{
								pos:        position{line: 632, col: 66, offset: 20971},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 636, col: 1, offset: 21030},
			expr: &actionExpr{
				pos: position{line: 636, col: 29, offset: 21058},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 636, col: 29, offset: 21058},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 29, offset: 21058},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 636, col: 36, offset: 21065},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 636, col: 36, offset: 21065},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 637, col: 11, offset: 21182},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 11, offset: 21218},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 639, col: 11, offset: 21244},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 640, col: 11, offset: 21276},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21308},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21335},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 642, col: 31, offset: 21355},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 31, offset: 21355},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 642, col: 39, offset: 21363},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 642, col: 39, offset: 21363},
									expr: &litMatcher{
										pos:        position{line: 642, col: 40, offset: 21364},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 642, col: 46, offset: 21370},
									expr: &litMatcher{
										pos:        position{line: 642, col: 47, offset: 21371},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 646, col: 1, offset: 21403},
			expr: &actionExpr{
				pos: position{line: 646, col: 23, offset: 21425},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 646, col: 23, offset: 21425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 23, offset: 21425},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 646, col: 30, offset: 21432},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 646, col: 30, offset: 21432},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 646, col: 47, offset: 21449},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 21471},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 647, col: 12, offset: 21478},
								expr: &actionExpr{
									pos: position{line: 647, col: 13, offset: 21479},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 647, col: 13, offset: 21479},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 647, col: 13, offset: 21479},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 17, offset: 21483},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 647, col: 24, offset: 21490},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 647, col: 24, offset: 21490},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 647, col: 41, offset: 21507},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 653, col: 1, offset: 21645},
			expr: &actionExpr{
				pos: position{line: 653, col: 29, offset: 21673},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 653, col: 29, offset: 21673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 29, offset: 21673},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 34, offset: 21678},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 653, col: 41, offset: 21685},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 653, col: 41, offset: 21685},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 653, col: 58, offset: 21702},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 21724},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 654, col: 12, offset: 21731},
								expr: &actionExpr{
									pos: position{line: 654, col: 13, offset: 21732},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 654, col: 13, offset: 21732},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 654, col: 13, offset: 21732},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 654, col: 17, offset: 21736},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 654, col: 24, offset: 21743},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 654, col: 24, offset: 21743},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 654, col: 41, offset: 21760},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 9, offset: 21813},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 660, col: 1, offset: 21903},
			expr: &actionExpr{
				pos: position{line: 660, col: 19, offset: 21921},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 660, col: 19, offset: 21921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 19, offset: 21921},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 26, offset: 21928},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 34, offset: 21936},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 660, col: 39, offset: 21941},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 44, offset: 21946},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 664, col: 1, offset: 22034},
			expr: &actionExpr{
				pos: position{line: 664, col: 25, offset: 22058},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 664, col: 25, offset: 22058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 664, col: 25, offset: 22058},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 30, offset: 22063},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 37, offset: 22070},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 45, offset: 22078},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 50, offset: 22083},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 55, offset: 22088},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 63, offset: 22096},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 668, col: 1, offset: 22181},
			expr: &actionExpr{
				pos: position{line: 668, col: 20, offset: 22200},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 668, col: 20, offset: 22200},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 668, col: 32, offset: 22212},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 672, col: 1, offset: 22307},
			expr: &actionExpr{
				pos: position{line: 672, col: 26, offset: 22332},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 672, col: 26, offset: 22332},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 22332},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 672, col: 31, offset: 22337},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 43, offset: 22349},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 51, offset: 22357},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 676, col: 1, offset: 22449},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 22471},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 676, col: 23, offset: 22471},
					expr: &charClassMatcher{
						pos:        position{line: 676, col: 23, offset: 22471},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 680, col: 1, offset: 22516},
			expr: &actionExpr{
				pos: position{line: 680, col: 23, offset: 22538},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 680, col: 23, offset: 22538},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 680, col: 24, offset: 22539},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 680, col: 24, offset: 22539},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 680, col: 34, offset: 22549},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 42, offset: 22557},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 48, offset: 22563},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 680, col: 73, offset: 22588},
							expr: &litMatcher{
								pos:        position{line: 680, col: 73, offset: 22588},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 684, col: 1, offset: 22737},
			expr: &actionExpr{
				pos: position{line: 684, col: 28, offset: 22764},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 684, col: 28, offset: 22764},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 28, offset: 22764},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 35, offset: 22771},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 684, col: 54, offset: 22790},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 54, offset: 22790},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 684, col: 62, offset: 22798},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 684, col: 62, offset: 22798},
									expr: &litMatcher{
										pos:        position{line: 684, col: 63, offset: 22799},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 684, col: 69, offset: 22805},
									expr: &litMatcher{
										pos:        position{line: 684, col: 70, offset: 22806},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 688, col: 1, offset: 22838},
			expr: &actionExpr{
				pos: position{line: 688, col: 22, offset: 22859},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 688, col: 22, offset: 22859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 22, offset: 22859},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 29, offset: 22866},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 22880},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 12, offset: 22887},
								expr: &actionExpr{
									pos: position{line: 689, col: 13, offset: 22888},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 689, col: 13, offset: 22888},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 689, col: 13, offset: 22888},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 17, offset: 22892},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 24, offset: 22899},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 695, col: 1, offset: 23030},
			expr: &choiceExpr{
				pos: position{line: 695, col: 13, offset: 23042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 13, offset: 23042},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 695, col: 13, offset: 23042},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 695, col: 18, offset: 23047},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 695, col: 18, offset: 23047},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 30, offset: 23059},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 23127},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 23127},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 23127},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 697, col: 9, offset: 23131},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 697, col: 14, offset: 23136},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 697, col: 14, offset: 23136},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 697, col: 26, offset: 23148},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 701, col: 1, offset: 23216},
			expr: &actionExpr{
				pos: position{line: 701, col: 16, offset: 23231},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 701, col: 16, offset: 23231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 16, offset: 23231},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 701, col: 23, offset: 23238},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 701, col: 23, offset: 23238},
									expr: &litMatcher{
										pos:        position{line: 701, col: 24, offset: 23239},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 704, col: 5, offset: 23293},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 712, col: 1, offset: 23473},
			expr: &actionExpr{
				pos: position{line: 712, col: 21, offset: 23493},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 712, col: 21, offset: 23493},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 712, col: 21, offset: 23493},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 22, offset: 23494},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 26, offset: 23498},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 712, col: 35, offset: 23507},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 712, col: 35, offset: 23507},
									expr: &charClassMatcher{
										pos:        position{line: 712, col: 35, offset: 23507},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 12, offset: 23569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 719, col: 1, offset: 23716},
			expr: &zeroOrMoreExpr{
				pos: position{line: 719, col: 19, offset: 23734},
				expr: &choiceExpr{
					pos: position{line: 719, col: 20, offset: 23735},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 719, col: 20, offset: 23735},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 36, offset: 23751},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 725, col: 1, offset: 23898},
			expr: &actionExpr{
				pos: position{line: 725, col: 21, offset: 23918},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 725, col: 21, offset: 23918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 21, offset: 23918},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 29, offset: 23926},
								expr: &choiceExpr{
									pos: position{line: 725, col: 30, offset: 23927},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 725, col: 30, offset: 23927},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 725, col: 53, offset: 23950},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 725, col: 74, offset: 23971},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 725, col: 74, offset: 23971,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 107, offset: 24004},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 729, col: 1, offset: 24075},
			expr: &actionExpr{
				pos: position{line: 729, col: 25, offset: 24099},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 729, col: 25, offset: 24099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 729, col: 25, offset: 24099},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 33, offset: 24107},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 729, col: 38, offset: 24112},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 38, offset: 24112},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 729, col: 78, offset: 24152},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 733, col: 1, offset: 24217},
			expr: &actionExpr{
				pos: position{line: 733, col: 23, offset: 24239},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 733, col: 23, offset: 24239},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 733, col: 23, offset: 24239},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 31, offset: 24247},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 733, col: 36, offset: 24252},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 36, offset: 24252},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 76, offset: 24292},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 740, col: 1, offset: 24456},
			expr: &choiceExpr{
				pos: position{line: 740, col: 18, offset: 24473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 740, col: 18, offset: 24473},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 740, col: 18, offset: 24473},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 27, offset: 24482},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 9, offset: 24539},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 742, col: 9, offset: 24539},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 742, col: 15, offset: 24545},
								expr: &ruleRefExpr{
									pos:  position{line: 742, col: 16, offset: 24546},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 746, col: 1, offset: 24638},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 24659},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 24659},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 746, col: 22, offset: 24659},
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 23, offset: 24660},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 5, offset: 24668},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 6, offset: 24669},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 748, col: 5, offset: 24684},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 6, offset: 24685},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 749, col: 5, offset: 24707},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 6, offset: 24708},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 750, col: 5, offset: 24734},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 6, offset: 24735},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 24763},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 24764},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 24790},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 24791},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 24816},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 24817},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 24838},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 24839},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 24858},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 24859},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 5, offset: 24886},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 756, col: 11, offset: 24892},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 756, col: 11, offset: 24892},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 756, col: 20, offset: 24901},
										expr: &ruleRefExpr{
											pos:  position{line: 756, col: 21, offset: 24902},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 12, offset: 25001},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 762, col: 1, offset: 25040},
			expr: &seqExpr{
				pos: position{line: 762, col: 25, offset: 25064},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 762, col: 25, offset: 25064},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 762, col: 29, offset: 25068},
						expr: &ruleRefExpr{
							pos:  position{line: 762, col: 29, offset: 25068},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 36, offset: 25075},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 764, col: 1, offset: 25147},
			expr: &actionExpr{
				pos: position{line: 764, col: 29, offset: 25175},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 764, col: 29, offset: 25175},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 764, col: 29, offset: 25175},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 764, col: 50, offset: 25196},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 58, offset: 25204},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 768, col: 1, offset: 25310},
			expr: &actionExpr{
				pos: position{line: 768, col: 29, offset: 25338},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 768, col: 29, offset: 25338},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 768, col: 29, offset: 25338},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 30, offset: 25339},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 5, offset: 25348},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 769, col: 14, offset: 25357},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 769, col: 14, offset: 25357},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 25382},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 25406},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 25427},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 25455},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 25479},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 25506},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 25535},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 25600},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 25651},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 25675},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 25707},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 25733},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 25770},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 25795},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 791, col: 1, offset: 25961},
			expr: &actionExpr{
				pos: position{line: 791, col: 20, offset: 25980},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 791, col: 20, offset: 25980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 791, col: 20, offset: 25980},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 791, col: 26, offset: 25986},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 27, offset: 25987},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 40, offset: 26000},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 48, offset: 26008},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 71, offset: 26031},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 80, offset: 26040},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 795, col: 1, offset: 26175},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 26205},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 796, col: 5, offset: 26205},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 796, col: 5, offset: 26205},
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 5, offset: 26205},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 796, col: 12, offset: 26212},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 798, col: 9, offset: 26275},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 798, col: 9, offset: 26275},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 798, col: 9, offset: 26275},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 798, col: 9, offset: 26275},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 798, col: 16, offset: 26282},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 798, col: 16, offset: 26282},
															expr: &litMatcher{
																pos:        position{line: 798, col: 17, offset: 26283},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 802, col: 9, offset: 26383},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 821, col: 11, offset: 27100},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 821, col: 11, offset: 27100},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 821, col: 11, offset: 27100},
													expr: &charClassMatcher{
														pos:        position{line: 821, col: 12, offset: 27101},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 821, col: 20, offset: 27109},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 13, offset: 27220},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 823, col: 13, offset: 27220},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 823, col: 14, offset: 27221},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 823, col: 21, offset: 27228},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 13, offset: 27342},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 825, col: 13, offset: 27342},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 825, col: 14, offset: 27343},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 825, col: 21, offset: 27350},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 827, col: 13, offset: 27464},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 827, col: 13, offset: 27464},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 827, col: 13, offset: 27464},
													expr: &charClassMatcher{
														pos:        position{line: 827, col: 14, offset: 27465},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 827, col: 22, offset: 27473},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 829, col: 13, offset: 27587},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 829, col: 13, offset: 27587},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 829, col: 13, offset: 27587},
													expr: &charClassMatcher{
														pos:        position{line: 829, col: 14, offset: 27588},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 829, col: 22, offset: 27596},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 831, col: 12, offset: 27709},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 12, offset: 27709},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 835, col: 1, offset: 27744},
			expr: &actionExpr{
				pos: position{line: 835, col: 27, offset: 27770},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 835, col: 27, offset: 27770},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 835, col: 37, offset: 27780},
						expr: &ruleRefExpr{
							pos:  position{line: 835, col: 37, offset: 27780},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 842, col: 1, offset: 27980},
			expr: &actionExpr{
				pos: position{line: 842, col: 22, offset: 28001},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 842, col: 22, offset: 28001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 842, col: 22, offset: 28001},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 842, col: 28, offset: 28007},
								expr: &ruleRefExpr{
									pos:  position{line: 842, col: 29, offset: 28008},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 42, offset: 28021},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 50, offset: 28029},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 75, offset: 28054},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 842, col: 86, offset: 28065},
								expr: &ruleRefExpr{
									pos:  position{line: 842, col: 87, offset: 28066},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 117, offset: 28096},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 126, offset: 28105},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 846, col: 1, offset: 28258},
			expr: &actionExpr{
				pos: position{line: 847, col: 5, offset: 28290},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 847, col: 5, offset: 28290},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 5, offset: 28290},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 5, offset: 28290},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 12, offset: 28297},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 847, col: 20, offset: 28305},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 849, col: 9, offset: 28362},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 849, col: 9, offset: 28362},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 849, col: 9, offset: 28362},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 849, col: 16, offset: 28369},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 849, col: 16, offset: 28369},
															expr: &litMatcher{
																pos:        position{line: 849, col: 17, offset: 28370},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 853, col: 9, offset: 28470},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 870, col: 14, offset: 29177},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 870, col: 21, offset: 29184},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 870, col: 22, offset: 29185},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 872, col: 13, offset: 29271},
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 13, offset: 29271},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 876, col: 1, offset: 29307},
			expr: &actionExpr{
				pos: position{line: 876, col: 32, offset: 29338},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 876, col: 32, offset: 29338},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 876, col: 32, offset: 29338},
							expr: &litMatcher{
								pos:        position{line: 876, col: 33, offset: 29339},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 876, col: 37, offset: 29343},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 877, col: 7, offset: 29357},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 877, col: 7, offset: 29357},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 877, col: 7, offset: 29357},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 878, col: 7, offset: 29402},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 878, col: 7, offset: 29402},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 879, col: 7, offset: 29445},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 879, col: 7, offset: 29445},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 880, col: 7, offset: 29487},
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 7, offset: 29487},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 884, col: 1, offset: 29529},
			expr: &actionExpr{
				pos: position{line: 884, col: 29, offset: 29557},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 884, col: 29, offset: 29557},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 884, col: 39, offset: 29567},
						expr: &ruleRefExpr{
							pos:  position{line: 884, col: 39, offset: 29567},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 891, col: 1, offset: 29883},
			expr: &actionExpr{
				pos: position{line: 891, col: 20, offset: 29902},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 891, col: 20, offset: 29902},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 891, col: 20, offset: 29902},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 891, col: 26, offset: 29908},
								expr: &ruleRefExpr{
									pos:  position{line: 891, col: 27, offset: 29909},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 40, offset: 29922},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 46, offset: 29928},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 75, offset: 29957},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 86, offset: 29968},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 112, offset: 29994},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 891, col: 124, offset: 30006},
								expr: &ruleRefExpr{
									pos:  position{line: 891, col: 125, offset: 30007},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 895, col: 1, offset: 30148},
			expr: &seqExpr{
				pos: position{line: 895, col: 26, offset: 30173},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 26, offset: 30173},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 54, offset: 30201},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 897, col: 1, offset: 30227},
			expr: &choiceExpr{
				pos: position{line: 897, col: 33, offset: 30259},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 897, col: 33, offset: 30259},
						expr: &charClassMatcher{
							pos:        position{line: 897, col: 33, offset: 30259},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 897, col: 45, offset: 30271},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 897, col: 45, offset: 30271},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 897, col: 49, offset: 30275},
								expr: &litMatcher{
									pos:        position{line: 897, col: 50, offset: 30276},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 898, col: 1, offset: 30280},
			expr: &actionExpr{
				pos: position{line: 898, col: 32, offset: 30311},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 898, col: 32, offset: 30311},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 898, col: 42, offset: 30321},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 898, col: 42, offset: 30321},
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 42, offset: 30321},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 904, col: 1, offset: 30476},
			expr: &actionExpr{
				pos: position{line: 904, col: 24, offset: 30499},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 904, col: 24, offset: 30499},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 904, col: 33, offset: 30508},
						expr: &seqExpr{
							pos: position{line: 904, col: 34, offset: 30509},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 904, col: 34, offset: 30509},
									expr: &ruleRefExpr{
										pos:  position{line: 904, col: 35, offset: 30510},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 904, col: 43, offset: 30518},
									expr: &litMatcher{
										pos:        position{line: 904, col: 44, offset: 30519},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 904, col: 49, offset: 30524},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 908, col: 1, offset: 30651},
			expr: &actionExpr{
				pos: position{line: 908, col: 31, offset: 30681},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 908, col: 31, offset: 30681},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 908, col: 40, offset: 30690},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 908, col: 40, offset: 30690},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 909, col: 11, offset: 30705},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 910, col: 11, offset: 30754},
								expr: &ruleRefExpr{
									pos:  position{line: 910, col: 11, offset: 30754},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 11, offset: 30772},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 30797},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 30826},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 914, col: 11, offset: 30846},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 30874},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 30895},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 30918},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 30933},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 30958},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 30981},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31002},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31019},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31051},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 31079},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 928, col: 1, offset: 31118},
			expr: &actionExpr{
				pos: position{line: 929, col: 5, offset: 31151},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 929, col: 5, offset: 31151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 929, col: 5, offset: 31151},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 929, col: 16, offset: 31162},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 929, col: 16, offset: 31162},
									expr: &litMatcher{
										pos:        position{line: 929, col: 17, offset: 31163},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 932, col: 5, offset: 31221},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 936, col: 6, offset: 31397},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 936, col: 6, offset: 31397},
									expr: &choiceExpr{
										pos: position{line: 936, col: 7, offset: 31398},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 936, col: 7, offset: 31398},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 936, col: 15, offset: 31406},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 27, offset: 31418},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 940, col: 1, offset: 31458},
			expr: &actionExpr{
				pos: position{line: 940, col: 31, offset: 31488},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 940, col: 31, offset: 31488},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 940, col: 40, offset: 31497},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 41, offset: 31498},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 947, col: 1, offset: 31689},
			expr: &choiceExpr{
				pos: position{line: 947, col: 19, offset: 31707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 19, offset: 31707},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 947, col: 19, offset: 31707},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 9, offset: 31753},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 949, col: 9, offset: 31753},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 9, offset: 31801},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 951, col: 9, offset: 31801},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 9, offset: 31859},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 953, col: 9, offset: 31859},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 9, offset: 31913},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 955, col: 9, offset: 31913},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 966, col: 1, offset: 32229},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 32279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 32279},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 32279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 968, col: 5, offset: 32279},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 968, col: 16, offset: 32290},
										expr: &ruleRefExpr{
											pos:  position{line: 968, col: 17, offset: 32291},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 968, col: 30, offset: 32304},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 968, col: 33, offset: 32307},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 968, col: 49, offset: 32323},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 54, offset: 32328},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 968, col: 60, offset: 32334},
										expr: &ruleRefExpr{
											pos:  position{line: 968, col: 61, offset: 32335},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 32518},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 32518},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 32518},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 972, col: 16, offset: 32529},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 17, offset: 32530},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 30, offset: 32543},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 35, offset: 32548},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 44, offset: 32557},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 32747},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 32747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 32747},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 976, col: 16, offset: 32758},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 17, offset: 32759},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 976, col: 30, offset: 32772},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 983, col: 7, offset: 33051},
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 8, offset: 33052},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 983, col: 23, offset: 33067},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 983, col: 31, offset: 33075},
										expr: &ruleRefExpr{
											pos:  position{line: 983, col: 32, offset: 33076},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 33259},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 987, col: 5, offset: 33259},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 987, col: 5, offset: 33259},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 987, col: 16, offset: 33270},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 17, offset: 33271},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 987, col: 30, offset: 33284},
									expr: &ruleRefExpr{
										pos:  position{line: 987, col: 31, offset: 33285},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 987, col: 46, offset: 33300},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 987, col: 52, offset: 33306},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 53, offset: 33307},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 991, col: 1, offset: 33405},
			expr: &oneOrMoreExpr{
				pos: position{line: 991, col: 33, offset: 33437},
				expr: &actionExpr{
					pos: position{line: 991, col: 34, offset: 33438},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 991, col: 34, offset: 33438},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 991, col: 34, offset: 33438},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 35, offset: 33439},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 991, col: 45, offset: 33449},
								expr: &litMatcher{
									pos:        position{line: 991, col: 45, offset: 33449},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 991, col: 51, offset: 33455},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 60, offset: 33464},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 995, col: 1, offset: 33597},
			expr: &actionExpr{
				pos: position{line: 995, col: 21, offset: 33617},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 995, col: 21, offset: 33617},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 995, col: 21, offset: 33617},
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 22, offset: 33618},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 995, col: 32, offset: 33628},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 41, offset: 33637},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 995, col: 66, offset: 33662},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 999, col: 1, offset: 33717},
			expr: &actionExpr{
				pos: position{line: 999, col: 28, offset: 33744},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 999, col: 28, offset: 33744},
					expr: &charClassMatcher{
						pos:        position{line: 999, col: 28, offset: 33744},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1005, col: 1, offset: 33943},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 33990},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 33990},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 33990},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 33990},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1007, col: 16, offset: 34001},
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 17, offset: 34002},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 30, offset: 34015},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 33, offset: 34018},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 49, offset: 34034},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 54, offset: 34039},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1007, col: 60, offset: 34045},
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 61, offset: 34046},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 34232},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 34232},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1011, col: 5, offset: 34232},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1011, col: 16, offset: 34243},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 17, offset: 34244},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1011, col: 30, offset: 34257},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1018, col: 7, offset: 34536},
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 8, offset: 34537},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 23, offset: 34552},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1018, col: 31, offset: 34560},
										expr: &ruleRefExpr{
											pos:  position{line: 1018, col: 32, offset: 34561},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 34741},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 34741},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1022, col: 5, offset: 34741},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1022, col: 16, offset: 34752},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 17, offset: 34753},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1022, col: 30, offset: 34766},
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 31, offset: 34767},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 46, offset: 34782},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1022, col: 52, offset: 34788},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 53, offset: 34789},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1026, col: 1, offset: 34884},
			expr: &ruleRefExpr{
				pos:  position{line: 1026, col: 18, offset: 34901},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1028, col: 1, offset: 34917},
			expr: &actionExpr{
				pos: position{line: 1028, col: 34, offset: 34950},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 34, offset: 34950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1028, col: 34, offset: 34950},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 40, offset: 34956},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1028, col: 48, offset: 34964},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1028, col: 49, offset: 34965},
									expr: &charClassMatcher{
										pos:        position{line: 1028, col: 49, offset: 34965},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1030, col: 8, offset: 35015},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1034, col: 1, offset: 35047},
			expr: &oneOrMoreExpr{
				pos: position{line: 1034, col: 36, offset: 35082},
				expr: &actionExpr{
					pos: position{line: 1034, col: 37, offset: 35083},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1034, col: 37, offset: 35083},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1034, col: 37, offset: 35083},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 38, offset: 35084},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1034, col: 48, offset: 35094},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 57, offset: 35103},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1039, col: 1, offset: 35314},
			expr: &actionExpr{
				pos: position{line: 1039, col: 20, offset: 35333},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 20, offset: 35333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 20, offset: 35333},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1039, col: 31, offset: 35344},
								expr: &ruleRefExpr{
									pos:  position{line: 1039, col: 32, offset: 35345},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 5, offset: 35363},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 5, offset: 35649},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 16, offset: 35660},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 5, offset: 35686},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1049, col: 16, offset: 35697},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 17, offset: 35698},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1053, col: 1, offset: 35835},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 35865},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 5, offset: 35865},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 35865},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1054, col: 14, offset: 35874},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1054, col: 14, offset: 35874},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1054, col: 14, offset: 35874},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1054, col: 23, offset: 35883},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1054, col: 28, offset: 35888},
											expr: &charClassMatcher{
												pos:        position{line: 1054, col: 28, offset: 35888},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1054, col: 68, offset: 35928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1058, col: 1, offset: 35984},
			expr: &ruleRefExpr{
				pos:  position{line: 1058, col: 26, offset: 36009},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1061, col: 1, offset: 36105},
			expr: &oneOrMoreExpr{
				pos: position{line: 1061, col: 27, offset: 36131},
				expr: &ruleRefExpr{
					pos:  position{line: 1061, col: 27, offset: 36131},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1068, col: 1, offset: 36342},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 36401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 36401},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 36401},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1070, col: 5, offset: 36401},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1070, col: 16, offset: 36412},
										expr: &ruleRefExpr{
											pos:  position{line: 1070, col: 17, offset: 36413},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 30, offset: 36426},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 33, offset: 36429},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1070, col: 49, offset: 36445},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 54, offset: 36450},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 61, offset: 36457},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 36660},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 36660},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1074, col: 5, offset: 36660},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1074, col: 16, offset: 36671},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 17, offset: 36672},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 30, offset: 36685},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 37, offset: 36692},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1078, col: 1, offset: 36796},
			expr: &actionExpr{
				pos: position{line: 1078, col: 31, offset: 36826},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 31, offset: 36826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1078, col: 31, offset: 36826},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 42, offset: 36837},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 65, offset: 36860},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1078, col: 76, offset: 36871},
								expr: &seqExpr{
									pos: position{line: 1078, col: 77, offset: 36872},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1078, col: 77, offset: 36872},
											expr: &ruleRefExpr{
												pos:  position{line: 1078, col: 78, offset: 36873},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1078, col: 99, offset: 36894},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1086, col: 1, offset: 37116},
			expr: &actionExpr{
				pos: position{line: 1087, col: 5, offset: 37142},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 5, offset: 37142},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 37142},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1087, col: 16, offset: 37153},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 17, offset: 37154},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1088, col: 5, offset: 37171},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 37376},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1095, col: 11, offset: 37382},
								expr: &ruleRefExpr{
									pos:  position{line: 1095, col: 12, offset: 37383},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1103, col: 1, offset: 37589},
			expr: &actionExpr{
				pos: position{line: 1103, col: 19, offset: 37607},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 19, offset: 37607},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1103, col: 19, offset: 37607},
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 20, offset: 37608},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 5, offset: 37622},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1104, col: 15, offset: 37632},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1104, col: 15, offset: 37632},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1104, col: 15, offset: 37632},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1104, col: 24, offset: 37641},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1106, col: 9, offset: 37733},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1106, col: 9, offset: 37733},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1106, col: 9, offset: 37733},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1106, col: 18, offset: 37742},
														expr: &ruleRefExpr{
															pos:  position{line: 1106, col: 19, offset: 37743},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1106, col: 35, offset: 37759},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1112, col: 1, offset: 37876},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 37899},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1113, col: 5, offset: 37899},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1113, col: 14, offset: 37908},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1113, col: 14, offset: 37908},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1114, col: 11, offset: 37959},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1115, col: 11, offset: 38004},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 11, offset: 38004},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1116, col: 11, offset: 38022},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1116, col: 11, offset: 38022},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 12, offset: 38023},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1117, col: 13, offset: 38041},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1117, col: 13, offset: 38041},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1118, col: 15, offset: 38068},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1119, col: 15, offset: 38093},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1120, col: 15, offset: 38114},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1121, col: 15, offset: 38139},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1122, col: 15, offset: 38166},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1123, col: 15, offset: 38186},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1124, col: 15, offset: 38219},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1125, col: 15, offset: 38249},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 38279},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 38310},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 38347},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 38377},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 38410},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 38434},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 38466},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1139, col: 1, offset: 38689},
			expr: &actionExpr{
				pos: position{line: 1139, col: 14, offset: 38702},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 14, offset: 38702},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1139, col: 14, offset: 38702},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1139, col: 20, offset: 38708},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1139, col: 24, offset: 38712},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 24, offset: 38712},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1139, col: 31, offset: 38719},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 32, offset: 38720},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1146, col: 1, offset: 39004},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 15, offset: 39018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 15, offset: 39018},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 41, offset: 39044},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 65, offset: 39068},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1148, col: 1, offset: 39087},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 32, offset: 39118},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1148, col: 32, offset: 39118},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 32, offset: 39118},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 36, offset: 39122},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 37, offset: 39123},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 43, offset: 39129},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 43, offset: 39129},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 47, offset: 39133},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 48, offset: 39134},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 54, offset: 39140},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 54, offset: 39140},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 58, offset: 39144},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 59, offset: 39145},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 65, offset: 39151},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 65, offset: 39151},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 69, offset: 39155},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 70, offset: 39156},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1150, col: 1, offset: 39161},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 34, offset: 39194},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1150, col: 34, offset: 39194},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 41, offset: 39201},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 48, offset: 39208},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 55, offset: 39215},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 62, offset: 39222},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 68, offset: 39228},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1152, col: 1, offset: 39233},
			expr: &actionExpr{
				pos: position{line: 1152, col: 26, offset: 39258},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1152, col: 26, offset: 39258},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1152, col: 32, offset: 39264},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1152, col: 32, offset: 39264},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1153, col: 15, offset: 39299},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1154, col: 15, offset: 39335},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1155, col: 15, offset: 39371},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1156, col: 15, offset: 39411},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1157, col: 15, offset: 39440},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1158, col: 15, offset: 39471},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1162, col: 1, offset: 39625},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 28, offset: 39652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 28, offset: 39652},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 15, offset: 39686},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 15, offset: 39722},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 15, offset: 39758},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1167, col: 1, offset: 39784},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 22, offset: 39805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1167, col: 22, offset: 39805},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 15, offset: 39836},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 15, offset: 39868},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 15, offset: 39900},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 15, offset: 39936},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 15, offset: 39972},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1174, col: 1, offset: 39996},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 33, offset: 40028},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1174, col: 33, offset: 40028},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1174, col: 39, offset: 40034},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1174, col: 39, offset: 40034},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1178, col: 1, offset: 40167},
			expr: &actionExpr{
				pos: position{line: 1178, col: 25, offset: 40191},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1178, col: 25, offset: 40191},
					expr: &litMatcher{
						pos:        position{line: 1178, col: 25, offset: 40191},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1182, col: 1, offset: 40232},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 40256},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 25, offset: 40256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 25, offset: 40256},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1182, col: 30, offset: 40261},
							expr: &litMatcher{
								pos:        position{line: 1182, col: 30, offset: 40261},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1190, col: 1, offset: 40358},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 13, offset: 40370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 13, offset: 40370},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 35, offset: 40392},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1192, col: 1, offset: 40459},
			expr: &actionExpr{
				pos: position{line: 1192, col: 24, offset: 40482},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 24, offset: 40482},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1192, col: 24, offset: 40482},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1192, col: 30, offset: 40488},
								expr: &ruleRefExpr{
									pos:  position{line: 1192, col: 31, offset: 40489},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 49, offset: 40507},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 54, offset: 40512},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 64, offset: 40522},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 93, offset: 40551},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1196, col: 1, offset: 40638},
			expr: &seqExpr{
				pos: position{line: 1196, col: 32, offset: 40669},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 32, offset: 40669},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1196, col: 59, offset: 40696},
						expr: &seqExpr{
							pos: position{line: 1196, col: 60, offset: 40697},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1196, col: 60, offset: 40697},
									expr: &litMatcher{
										pos:        position{line: 1196, col: 62, offset: 40699},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1196, col: 69, offset: 40706},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1196, col: 69, offset: 40706},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1196, col: 77, offset: 40714},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1198, col: 1, offset: 40779},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 31, offset: 40809},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 31, offset: 40809},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1199, col: 11, offset: 40824},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1199, col: 11, offset: 40824},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1199, col: 19, offset: 40832},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 20, offset: 40833},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 40851},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 40881},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 40904},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 40925},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 40946},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 40970},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 40994},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 41020},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 41037},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 41058},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 41080},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 41095},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 41123},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 41155},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 41183},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1217, col: 1, offset: 41222},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 41266},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1218, col: 5, offset: 41266},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1219, col: 7, offset: 41363},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1219, col: 7, offset: 41363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1219, col: 7, offset: 41363},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1219, col: 12, offset: 41368},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1223, col: 1, offset: 41531},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 24, offset: 41554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1223, col: 24, offset: 41554},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1223, col: 24, offset: 41554},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 24, offset: 41554},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1223, col: 30, offset: 41560},
										expr: &ruleRefExpr{
											pos:  position{line: 1223, col: 31, offset: 41561},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1223, col: 51, offset: 41581},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1223, col: 51, offset: 41581},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1223, col: 55, offset: 41585},
											expr: &litMatcher{
												pos:        position{line: 1223, col: 56, offset: 41586},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 61, offset: 41591},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 71, offset: 41601},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 100, offset: 41630},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1223, col: 104, offset: 41634},
									expr: &notExpr{
										pos: position{line: 1223, col: 106, offset: 41636},
										expr: &ruleRefExpr{
											pos:  position{line: 1223, col: 107, offset: 41637},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 41831},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1225, col: 5, offset: 41831},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 5, offset: 41831},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1225, col: 11, offset: 41837},
										expr: &ruleRefExpr{
											pos:  position{line: 1225, col: 12, offset: 41838},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 30, offset: 41856},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 34, offset: 41860},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1225, col: 44, offset: 41870},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1225, col: 44, offset: 41870},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1225, col: 48, offset: 41874},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 77, offset: 41903},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1229, col: 1, offset: 42109},
			expr: &seqExpr{
				pos: position{line: 1229, col: 32, offset: 42140},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1229, col: 32, offset: 42140},
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 33, offset: 42141},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1229, col: 39, offset: 42147},
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 39, offset: 42147},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1231, col: 1, offset: 42176},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 31, offset: 42206},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 31, offset: 42206},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1232, col: 11, offset: 42221},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1232, col: 11, offset: 42221},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1232, col: 19, offset: 42229},
								expr: &ruleRefExpr{
									pos:  position{line: 1232, col: 20, offset: 42230},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 42248},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 42278},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1235, col: 11, offset: 42301},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1235, col: 11, offset: 42301},
								expr: &ruleRefExpr{
									pos:  position{line: 1235, col: 11, offset: 42301},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1235, col: 18, offset: 42308},
								expr: &seqExpr{
									pos: position{line: 1235, col: 19, offset: 42309},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1235, col: 19, offset: 42309},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1235, col: 23, offset: 42313},
											expr: &litMatcher{
												pos:        position{line: 1235, col: 24, offset: 42314},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 42330},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 42351},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 42372},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 42396},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 42420},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 42446},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 42463},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 42484},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 42507},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 42524},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 42552},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 42584},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 42612},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1250, col: 1, offset: 42650},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 42694},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1251, col: 5, offset: 42694},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1252, col: 7, offset: 42791},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1252, col: 7, offset: 42791},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 7, offset: 42791},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1252, col: 11, offset: 42795},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1256, col: 1, offset: 42958},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 42982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 42982},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1257, col: 5, offset: 42982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1257, col: 5, offset: 42982},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 18, offset: 42995},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 40, offset: 43017},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 45, offset: 43022},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 55, offset: 43032},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 84, offset: 43061},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 9, offset: 43218},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1259, col: 9, offset: 43218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 9, offset: 43218},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 22, offset: 43231},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 44, offset: 43253},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 49, offset: 43258},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 59, offset: 43268},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 88, offset: 43297},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1262, col: 9, offset: 43497},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1262, col: 9, offset: 43497},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1262, col: 9, offset: 43497},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1262, col: 22, offset: 43510},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1262, col: 44, offset: 43532},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1262, col: 48, offset: 43536},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1262, col: 58, offset: 43546},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1262, col: 87, offset: 43575},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1270, col: 1, offset: 43783},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 15, offset: 43797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 15, offset: 43797},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 39, offset: 43821},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1272, col: 1, offset: 43844},
			expr: &actionExpr{
				pos: position{line: 1272, col: 26, offset: 43869},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 26, offset: 43869},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1272, col: 26, offset: 43869},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1272, col: 32, offset: 43875},
								expr: &ruleRefExpr{
									pos:  position{line: 1272, col: 33, offset: 43876},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1272, col: 51, offset: 43894},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 56, offset: 43899},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 66, offset: 43909},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1272, col: 97, offset: 43940},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1276, col: 1, offset: 44074},
			expr: &seqExpr{
				pos: position{line: 1276, col: 34, offset: 44107},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 34, offset: 44107},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1276, col: 63, offset: 44136},
						expr: &seqExpr{
							pos: position{line: 1276, col: 64, offset: 44137},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1276, col: 64, offset: 44137},
									expr: &litMatcher{
										pos:        position{line: 1276, col: 66, offset: 44139},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1276, col: 73, offset: 44146},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1276, col: 73, offset: 44146},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1276, col: 81, offset: 44154},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1278, col: 1, offset: 44221},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 33, offset: 44253},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 33, offset: 44253},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1279, col: 11, offset: 44268},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 44268},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1279, col: 19, offset: 44276},
								expr: &ruleRefExpr{
									pos:  position{line: 1279, col: 20, offset: 44277},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 44295},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 44327},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 44350},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 44369},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 44390},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 11, offset: 44414},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 44438},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 44464},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 44481},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 44502},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 44525},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 44541},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 44569},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 44597},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1295, col: 1, offset: 44637},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 5, offset: 44683},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1296, col: 5, offset: 44683},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1297, col: 7, offset: 44782},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1297, col: 7, offset: 44782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 7, offset: 44782},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1297, col: 12, offset: 44787},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1301, col: 1, offset: 44952},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 26, offset: 44977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1301, col: 26, offset: 44977},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1301, col: 26, offset: 44977},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1301, col: 26, offset: 44977},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1301, col: 32, offset: 44983},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 33, offset: 44984},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1301, col: 52, offset: 45003},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1301, col: 52, offset: 45003},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1301, col: 56, offset: 45007},
											expr: &litMatcher{
												pos:        position{line: 1301, col: 57, offset: 45008},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1301, col: 62, offset: 45013},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1301, col: 72, offset: 45023},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 103, offset: 45054},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 45244},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 45244},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1303, col: 5, offset: 45244},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1303, col: 11, offset: 45250},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 12, offset: 45251},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 30, offset: 45269},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 34, offset: 45273},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1303, col: 44, offset: 45283},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1303, col: 44, offset: 45283},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1303, col: 48, offset: 45287},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 79, offset: 45318},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1307, col: 1, offset: 45528},
			expr: &seqExpr{
				pos: position{line: 1307, col: 34, offset: 45561},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1307, col: 34, offset: 45561},
						expr: &ruleRefExpr{
							pos:  position{line: 1307, col: 35, offset: 45562},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1307, col: 41, offset: 45568},
						expr: &ruleRefExpr{
							pos:  position{line: 1307, col: 41, offset: 45568},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1309, col: 1, offset: 45599},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 33, offset: 45631},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 33, offset: 45631},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1310, col: 11, offset: 45646},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 45646},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1310, col: 19, offset: 45654},
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 20, offset: 45655},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 11, offset: 45673},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 45705},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1313, col: 11, offset: 45728},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1313, col: 11, offset: 45728},
								expr: &ruleRefExpr{
									pos:  position{line: 1313, col: 11, offset: 45728},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1313, col: 18, offset: 45735},
								expr: &seqExpr{
									pos: position{line: 1313, col: 19, offset: 45736},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1313, col: 19, offset: 45736},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1313, col: 23, offset: 45740},
											expr: &litMatcher{
												pos:        position{line: 1313, col: 24, offset: 45741},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 11, offset: 45757},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 45776},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 45797},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 45821},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 45845},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 45871},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 45888},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 45909},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 45932},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 45949},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 45978},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 46010},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 46038},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1328, col: 1, offset: 46078},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 46124},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1329, col: 5, offset: 46124},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1330, col: 7, offset: 46223},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1330, col: 7, offset: 46223},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1330, col: 7, offset: 46223},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1330, col: 11, offset: 46227},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1334, col: 1, offset: 46393},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 46419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1335, col: 5, offset: 46419},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 5, offset: 46419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1335, col: 5, offset: 46419},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 18, offset: 46432},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 40, offset: 46454},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1335, col: 45, offset: 46459},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 55, offset: 46469},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 86, offset: 46500},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 9, offset: 46657},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1337, col: 9, offset: 46657},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1337, col: 9, offset: 46657},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 22, offset: 46670},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 44, offset: 46692},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 49, offset: 46697},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 59, offset: 46707},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 90, offset: 46738},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 9, offset: 46938},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1340, col: 9, offset: 46938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1340, col: 9, offset: 46938},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 22, offset: 46951},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 44, offset: 46973},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 48, offset: 46977},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 58, offset: 46987},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 89, offset: 47018},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1347, col: 1, offset: 47228},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 18, offset: 47245},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1347, col: 18, offset: 47245},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 45, offset: 47272},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1349, col: 1, offset: 47298},
			expr: &actionExpr{
				pos: position{line: 1349, col: 29, offset: 47326},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 29, offset: 47326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 29, offset: 47326},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1349, col: 35, offset: 47332},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 36, offset: 47333},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 54, offset: 47351},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 59, offset: 47356},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 69, offset: 47366},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 103, offset: 47400},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1353, col: 1, offset: 47537},
			expr: &seqExpr{
				pos: position{line: 1353, col: 37, offset: 47573},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 37, offset: 47573},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1353, col: 69, offset: 47605},
						expr: &seqExpr{
							pos: position{line: 1353, col: 70, offset: 47606},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1353, col: 70, offset: 47606},
									expr: &litMatcher{
										pos:        position{line: 1353, col: 72, offset: 47608},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1353, col: 79, offset: 47615},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1353, col: 79, offset: 47615},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1353, col: 87, offset: 47623},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1355, col: 1, offset: 47692},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 36, offset: 47727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1355, col: 36, offset: 47727},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1356, col: 11, offset: 47742},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1356, col: 11, offset: 47742},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1356, col: 19, offset: 47750},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 20, offset: 47751},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 47769},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 47786},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 47821},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 47844},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 47863},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 47884},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 47905},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 47929},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 47955},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 47976},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 47998},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 48013},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 48042},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48070},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1372, col: 1, offset: 48113},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 5, offset: 48162},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1373, col: 5, offset: 48162},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1374, col: 7, offset: 48264},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1374, col: 7, offset: 48264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1374, col: 7, offset: 48264},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 12, offset: 48269},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1378, col: 1, offset: 48437},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 29, offset: 48465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1378, col: 29, offset: 48465},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1378, col: 29, offset: 48465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1378, col: 29, offset: 48465},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1378, col: 35, offset: 48471},
										expr: &ruleRefExpr{
											pos:  position{line: 1378, col: 36, offset: 48472},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1378, col: 55, offset: 48491},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1378, col: 55, offset: 48491},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1378, col: 59, offset: 48495},
											expr: &litMatcher{
												pos:        position{line: 1378, col: 60, offset: 48496},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1378, col: 65, offset: 48501},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1378, col: 75, offset: 48511},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1378, col: 109, offset: 48545},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 48738},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1380, col: 5, offset: 48738},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 5, offset: 48738},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1380, col: 11, offset: 48744},
										expr: &ruleRefExpr{
											pos:  position{line: 1380, col: 12, offset: 48745},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 30, offset: 48763},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 34, offset: 48767},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1380, col: 44, offset: 48777},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1380, col: 44, offset: 48777},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1380, col: 48, offset: 48781},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 82, offset: 48815},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1384, col: 1, offset: 49029},
			expr: &seqExpr{
				pos: position{line: 1384, col: 37, offset: 49065},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1384, col: 37, offset: 49065},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 38, offset: 49066},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1384, col: 44, offset: 49072},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 44, offset: 49072},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1386, col: 1, offset: 49106},
			expr: &choiceExpr{
				pos: position{line: 1386, col: 37, offset: 49142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1386, col: 37, offset: 49142},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1387, col: 11, offset: 49157},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1387, col: 11, offset: 49157},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1387, col: 19, offset: 49165},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 20, offset: 49166},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 49184},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 49219},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1390, col: 11, offset: 49242},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1390, col: 11, offset: 49242},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 11, offset: 49242},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1390, col: 18, offset: 49249},
								expr: &seqExpr{
									pos: position{line: 1390, col: 19, offset: 49250},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1390, col: 19, offset: 49250},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1390, col: 23, offset: 49254},
											expr: &litMatcher{
												pos:        position{line: 1390, col: 24, offset: 49255},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 49383},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 11, offset: 49402},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 11, offset: 49423},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 11, offset: 49444},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 49468},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1396, col: 11, offset: 49494},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1396, col: 11, offset: 49494},
								expr: &litMatcher{
									pos:        position{line: 1396, col: 12, offset: 49495},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1396, col: 16, offset: 49499},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 49516},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 49537},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 49560},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 11, offset: 49576},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 49605},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 49637},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 49665},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1405, col: 1, offset: 49708},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 49757},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1406, col: 5, offset: 49757},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1407, col: 7, offset: 49859},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1407, col: 7, offset: 49859},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1407, col: 7, offset: 49859},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1407, col: 11, offset: 49863},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1411, col: 1, offset: 50032},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 50061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 50061},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1412, col: 5, offset: 50061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1412, col: 5, offset: 50061},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 18, offset: 50074},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 40, offset: 50096},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1412, col: 45, offset: 50101},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 55, offset: 50111},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 89, offset: 50145},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 9, offset: 50302},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1414, col: 9, offset: 50302},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1414, col: 9, offset: 50302},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 22, offset: 50315},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 44, offset: 50337},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1414, col: 49, offset: 50342},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 59, offset: 50352},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 93, offset: 50386},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 9, offset: 50586},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1417, col: 9, offset: 50586},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1417, col: 9, offset: 50586},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 22, offset: 50599},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1417, col: 44, offset: 50621},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1417, col: 48, offset: 50625},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 58, offset: 50635},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1417, col: 92, offset: 50669},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1425, col: 1, offset: 50877},
			expr: &choiceExpr{
				pos: position{line: 1425, col: 15, offset: 50891},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1425, col: 15, offset: 50891},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 39, offset: 50915},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1427, col: 1, offset: 50938},
			expr: &actionExpr{
				pos: position{line: 1427, col: 26, offset: 50963},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1427, col: 26, offset: 50963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1427, col: 26, offset: 50963},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1427, col: 32, offset: 50969},
								expr: &ruleRefExpr{
									pos:  position{line: 1427, col: 33, offset: 50970},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1427, col: 51, offset: 50988},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1427, col: 56, offset: 50993},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1427, col: 66, offset: 51003},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1427, col: 97, offset: 51034},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1431, col: 1, offset: 51168},
			expr: &seqExpr{
				pos: position{line: 1431, col: 34, offset: 51201},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 34, offset: 51201},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1431, col: 63, offset: 51230},
						expr: &seqExpr{
							pos: position{line: 1431, col: 64, offset: 51231},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1431, col: 64, offset: 51231},
									expr: &litMatcher{
										pos:        position{line: 1431, col: 66, offset: 51233},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1431, col: 73, offset: 51240},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1431, col: 73, offset: 51240},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1431, col: 81, offset: 51248},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1433, col: 1, offset: 51315},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 33, offset: 51347},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1433, col: 33, offset: 51347},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1434, col: 11, offset: 51362},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1435, col: 11, offset: 51394},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1435, col: 11, offset: 51394},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1435, col: 19, offset: 51402},
								expr: &ruleRefExpr{
									pos:  position{line: 1435, col: 20, offset: 51403},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 11, offset: 51421},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 11, offset: 51444},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 11, offset: 51463},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 11, offset: 51484},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 11, offset: 51508},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 11, offset: 51532},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 11, offset: 51558},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 11, offset: 51575},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 11, offset: 51596},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 51618},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 51633},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 51661},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 51689},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1450, col: 1, offset: 51729},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 5, offset: 51775},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1451, col: 5, offset: 51775},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1452, col: 7, offset: 51874},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1452, col: 7, offset: 51874},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1452, col: 7, offset: 51874},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1452, col: 12, offset: 51879},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1456, col: 1, offset: 52044},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 26, offset: 52069},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1456, col: 26, offset: 52069},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 26, offset: 52069},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1456, col: 26, offset: 52069},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1456, col: 32, offset: 52075},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 33, offset: 52076},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1456, col: 52, offset: 52095},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1456, col: 52, offset: 52095},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1456, col: 56, offset: 52099},
											expr: &litMatcher{
												pos:        position{line: 1456, col: 57, offset: 52100},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 62, offset: 52105},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 72, offset: 52115},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 103, offset: 52146},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1458, col: 5, offset: 52336},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1458, col: 5, offset: 52336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1458, col: 5, offset: 52336},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1458, col: 11, offset: 52342},
										expr: &ruleRefExpr{
											pos:  position{line: 1458, col: 12, offset: 52343},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 30, offset: 52361},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1458, col: 34, offset: 52365},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1458, col: 44, offset: 52375},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1458, col: 44, offset: 52375},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1458, col: 48, offset: 52379},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 79, offset: 52410},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1462, col: 1, offset: 52619},
			expr: &seqExpr{
				pos: position{line: 1462, col: 34, offset: 52652},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1462, col: 34, offset: 52652},
						expr: &ruleRefExpr{
							pos:  position{line: 1462, col: 35, offset: 52653},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1462, col: 41, offset: 52659},
						expr: &ruleRefExpr{
							pos:  position{line: 1462, col: 41, offset: 52659},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1464, col: 1, offset: 52690},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 33, offset: 52722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1464, col: 33, offset: 52722},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 11, offset: 52737},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1466, col: 11, offset: 52769},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1466, col: 11, offset: 52769},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1466, col: 19, offset: 52777},
								expr: &ruleRefExpr{
									pos:  position{line: 1466, col: 20, offset: 52778},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 11, offset: 52796},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1468, col: 11, offset: 52819},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1468, col: 11, offset: 52819},
								expr: &ruleRefExpr{
									pos:  position{line: 1468, col: 11, offset: 52819},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1468, col: 18, offset: 52826},
								expr: &seqExpr{
									pos: position{line: 1468, col: 19, offset: 52827},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1468, col: 19, offset: 52827},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1468, col: 23, offset: 52831},
											expr: &litMatcher{
												pos:        position{line: 1468, col: 24, offset: 52832},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 52848},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 11, offset: 52867},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 52888},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1472, col: 11, offset: 52912},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 11, offset: 52936},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1474, col: 11, offset: 52962},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 11, offset: 52979},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 11, offset: 53000},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 11, offset: 53022},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 11, offset: 53037},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 11, offset: 53065},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 11, offset: 53097},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 53125},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1483, col: 1, offset: 53165},
			expr: &choiceExpr{
				pos: position{line: 1484, col: 5, offset: 53211},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1484, col: 5, offset: 53211},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1485, col: 7, offset: 53308},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1485, col: 7, offset: 53308},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1485, col: 7, offset: 53308},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1485, col: 11, offset: 53312},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1489, col: 1, offset: 53475},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 5, offset: 53500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1490, col: 5, offset: 53500},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1490, col: 5, offset: 53500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1490, col: 5, offset: 53500},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 18, offset: 53513},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 40, offset: 53535},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1490, col: 45, offset: 53540},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 55, offset: 53550},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 86, offset: 53581},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1492, col: 9, offset: 53738},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1492, col: 9, offset: 53738},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1492, col: 9, offset: 53738},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 22, offset: 53751},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1492, col: 44, offset: 53773},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1492, col: 49, offset: 53778},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 59, offset: 53788},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1492, col: 90, offset: 53819},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1495, col: 9, offset: 54019},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1495, col: 9, offset: 54019},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1495, col: 9, offset: 54019},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1495, col: 22, offset: 54032},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 44, offset: 54054},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1495, col: 48, offset: 54058},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1495, col: 58, offset: 54068},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 89, offset: 54099},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1500, col: 1, offset: 54249},
			expr: &actionExpr{
				pos: position{line: 1500, col: 18, offset: 54266},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1500, col: 18, offset: 54266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1500, col: 18, offset: 54266},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1500, col: 24, offset: 54272},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 25, offset: 54273},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 43, offset: 54291},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 47, offset: 54295},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 56, offset: 54304},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 78, offset: 54326},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1504, col: 1, offset: 54422},
			expr: &choiceExpr{
				pos: position{line: 1504, col: 25, offset: 54446},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1504, col: 25, offset: 54446},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1504, col: 38, offset: 54459},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1506, col: 1, offset: 54478},
			expr: &actionExpr{
				pos: position{line: 1506, col: 21, offset: 54498},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1506, col: 21, offset: 54498},
					expr: &charClassMatcher{
						pos:        position{line: 1506, col: 21, offset: 54498},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1510, col: 1, offset: 54575},
			expr: &actionExpr{
				pos: position{line: 1510, col: 25, offset: 54599},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 25, offset: 54599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 25, offset: 54599},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 38, offset: 54612},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1510, col: 60, offset: 54634},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 64, offset: 54638},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 73, offset: 54647},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1510, col: 95, offset: 54669},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1514, col: 1, offset: 54798},
			expr: &actionExpr{
				pos: position{line: 1514, col: 20, offset: 54817},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 20, offset: 54817},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 20, offset: 54817},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1514, col: 26, offset: 54823},
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 27, offset: 54824},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 45, offset: 54842},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 49, offset: 54846},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 58, offset: 54855},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 82, offset: 54879},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1518, col: 1, offset: 54977},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 27, offset: 55003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1518, col: 27, offset: 55003},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1518, col: 40, offset: 55016},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1520, col: 1, offset: 55037},
			expr: &actionExpr{
				pos: position{line: 1520, col: 23, offset: 55059},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1520, col: 23, offset: 55059},
					expr: &charClassMatcher{
						pos:        position{line: 1520, col: 23, offset: 55059},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1524, col: 1, offset: 55136},
			expr: &actionExpr{
				pos: position{line: 1524, col: 27, offset: 55162},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 27, offset: 55162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1524, col: 27, offset: 55162},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 40, offset: 55175},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1524, col: 62, offset: 55197},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 66, offset: 55201},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 75, offset: 55210},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1524, col: 99, offset: 55234},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1531, col: 1, offset: 55476},
			expr: &choiceExpr{
				pos: position{line: 1531, col: 22, offset: 55497},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1531, col: 22, offset: 55497},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 46, offset: 55521},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 70, offset: 55545},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1533, col: 1, offset: 55563},
			expr: &litMatcher{
				pos:        position{line: 1533, col: 32, offset: 55594},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1535, col: 1, offset: 55599},
			expr: &actionExpr{
				pos: position{line: 1535, col: 26, offset: 55624},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 26, offset: 55624},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1535, col: 26, offset: 55624},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 54, offset: 55652},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 63, offset: 55661},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1535, col: 93, offset: 55691},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1535, col: 121, offset: 55719},
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 122, offset: 55720},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1539, col: 1, offset: 55825},
			expr: &choiceExpr{
				pos: position{line: 1539, col: 33, offset: 55857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1539, col: 34, offset: 55858},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1539, col: 34, offset: 55858},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1539, col: 35, offset: 55859},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1539, col: 35, offset: 55859},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 36, offset: 55860},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1539, col: 64, offset: 55888},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 65, offset: 55889},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1539, col: 71, offset: 55895},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 72, offset: 55896},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1539, col: 80, offset: 55904,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1539, col: 83, offset: 55907},
									expr: &seqExpr{
										pos: position{line: 1539, col: 84, offset: 55908},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1539, col: 84, offset: 55908},
												expr: &seqExpr{
													pos: position{line: 1539, col: 86, offset: 55910},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1539, col: 86, offset: 55910},
															expr: &ruleRefExpr{
																pos:  position{line: 1539, col: 86, offset: 55910},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1539, col: 93, offset: 55917},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1539, col: 122, offset: 55946},
												expr: &ruleRefExpr{
													pos:  position{line: 1539, col: 123, offset: 55947},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1539, col: 151, offset: 55975},
												expr: &ruleRefExpr{
													pos:  position{line: 1539, col: 152, offset: 55976},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1539, col: 160, offset: 55984,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1541, col: 7, offset: 56126},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1541, col: 8, offset: 56127},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1541, col: 8, offset: 56127},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 9, offset: 56128},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1541, col: 15, offset: 56134},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 16, offset: 56135},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1541, col: 24, offset: 56143},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 25, offset: 56144},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1541, col: 53, offset: 56172,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1545, col: 1, offset: 56254},
			expr: &litMatcher{
				pos:        position{line: 1545, col: 32, offset: 56285},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1547, col: 1, offset: 56292},
			expr: &actionExpr{
				pos: position{line: 1547, col: 26, offset: 56317},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1547, col: 26, offset: 56317},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1547, col: 26, offset: 56317},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1547, col: 54, offset: 56345},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 63, offset: 56354},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1547, col: 93, offset: 56384},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1547, col: 121, offset: 56412},
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 122, offset: 56413},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1551, col: 1, offset: 56518},
			expr: &choiceExpr{
				pos: position{line: 1551, col: 33, offset: 56550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1551, col: 34, offset: 56551},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1551, col: 34, offset: 56551},
							expr: &seqExpr{
								pos: position{line: 1551, col: 35, offset: 56552},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1551, col: 35, offset: 56552},
										expr: &ruleRefExpr{
											pos:  position{line: 1551, col: 36, offset: 56553},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1551, col: 64, offset: 56581,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 7, offset: 56746},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1553, col: 7, offset: 56746},
							expr: &seqExpr{
								pos: position{line: 1553, col: 8, offset: 56747},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1553, col: 8, offset: 56747},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 9, offset: 56748},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1553, col: 15, offset: 56754},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 16, offset: 56755},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1553, col: 24, offset: 56763},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 25, offset: 56764},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1553, col: 53, offset: 56792,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1557, col: 1, offset: 56875},
			expr: &choiceExpr{
				pos: position{line: 1557, col: 21, offset: 56895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1557, col: 21, offset: 56895},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1557, col: 21, offset: 56895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1557, col: 21, offset: 56895},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 30, offset: 56904},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1557, col: 38, offset: 56912},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 39, offset: 56913},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1557, col: 67, offset: 56941},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1559, col: 5, offset: 57037},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1559, col: 5, offset: 57037},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1559, col: 5, offset: 57037},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1559, col: 15, offset: 57047},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1559, col: 23, offset: 57055},
										expr: &choiceExpr{
											pos: position{line: 1559, col: 24, offset: 57056},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1559, col: 24, offset: 57056},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1559, col: 37, offset: 57069},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1559, col: 65, offset: 57097},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1563, col: 1, offset: 57193},
			expr: &actionExpr{
				pos: position{line: 1563, col: 30, offset: 57222},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1563, col: 30, offset: 57222},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1570, col: 1, offset: 57395},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 19, offset: 57413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1570, col: 19, offset: 57413},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 44, offset: 57438},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1572, col: 1, offset: 57463},
			expr: &choiceExpr{
				pos: position{line: 1572, col: 27, offset: 57489},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1572, col: 27, offset: 57489},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1572, col: 27, offset: 57489},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1572, col: 27, offset: 57489},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 32, offset: 57494},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 36, offset: 57498},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1572, col: 40, offset: 57502},
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 40, offset: 57502},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 47, offset: 57509},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 51, offset: 57513},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 58, offset: 57520},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 79, offset: 57541},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1574, col: 5, offset: 57624},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1574, col: 5, offset: 57624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1574, col: 5, offset: 57624},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 10, offset: 57629},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1574, col: 14, offset: 57633},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1574, col: 18, offset: 57637},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1578, col: 1, offset: 57709},
			expr: &actionExpr{
				pos: position{line: 1578, col: 27, offset: 57735},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1578, col: 27, offset: 57735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1578, col: 27, offset: 57735},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 35, offset: 57743},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 40, offset: 57748},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 54, offset: 57762},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 72, offset: 57780},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1582, col: 1, offset: 57903},
			expr: &ruleRefExpr{
				pos:  position{line: 1582, col: 24, offset: 57926},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1587, col: 1, offset: 58048},
			expr: &choiceExpr{
				pos: position{line: 1587, col: 9, offset: 58056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1587, col: 9, offset: 58056},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 24, offset: 58071},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1590, col: 1, offset: 58152},
			expr: &actionExpr{
				pos: position{line: 1590, col: 17, offset: 58168},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 17, offset: 58168},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1590, col: 17, offset: 58168},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 25, offset: 58176},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 30, offset: 58181},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 40, offset: 58191},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 58, offset: 58209},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1594, col: 1, offset: 58320},
			expr: &actionExpr{
				pos: position{line: 1594, col: 17, offset: 58336},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 17, offset: 58336},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1594, col: 17, offset: 58336},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 22, offset: 58341},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 42, offset: 58361},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1594, col: 59, offset: 58378},
								expr: &ruleRefExpr{
									pos:  position{line: 1594, col: 60, offset: 58379},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1598, col: 1, offset: 58472},
			expr: &actionExpr{
				pos: position{line: 1598, col: 19, offset: 58490},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 19, offset: 58490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1598, col: 19, offset: 58490},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 23, offset: 58494},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1598, col: 33, offset: 58504},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 34, offset: 58505},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1599, col: 5, offset: 58537},
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 5, offset: 58537},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 12, offset: 58544},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1599, col: 23, offset: 58555},
								expr: &ruleRefExpr{
									pos:  position{line: 1599, col: 24, offset: 58556},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1599, col: 43, offset: 58575},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1603, col: 1, offset: 58692},
			expr: &actionExpr{
				pos: position{line: 1603, col: 30, offset: 58721},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1603, col: 30, offset: 58721},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1605, col: 5, offset: 58772},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1605, col: 6, offset: 58773},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1605, col: 6, offset: 58773},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1605, col: 6, offset: 58773},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1605, col: 11, offset: 58778},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1605, col: 20, offset: 58787},
												expr: &choiceExpr{
													pos: position{line: 1605, col: 21, offset: 58788},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1605, col: 21, offset: 58788},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1605, col: 36, offset: 58803},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1605, col: 49, offset: 58816},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1605, col: 71, offset: 58838},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1605, col: 76, offset: 58843},
											expr: &notExpr{
												pos: position{line: 1605, col: 78, offset: 58845},
												expr: &litMatcher{
													pos:        position{line: 1605, col: 79, offset: 58846},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1605, col: 84, offset: 58851},
											expr: &litMatcher{
												pos:        position{line: 1605, col: 84, offset: 58851},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1609, col: 6, offset: 58978},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1609, col: 6, offset: 58978},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1609, col: 6, offset: 58978},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1609, col: 15, offset: 58987},
												expr: &choiceExpr{
													pos: position{line: 1609, col: 16, offset: 58988},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1609, col: 16, offset: 58988},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 31, offset: 59003},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 44, offset: 59016},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1609, col: 68, offset: 59040},
											expr: &notExpr{
												pos: position{line: 1609, col: 70, offset: 59042},
												expr: &litMatcher{
													pos:        position{line: 1609, col: 71, offset: 59043},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1609, col: 76, offset: 59048},
											expr: &litMatcher{
												pos:        position{line: 1609, col: 76, offset: 59048},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1615, col: 1, offset: 59162},
			expr: &actionExpr{
				pos: position{line: 1615, col: 18, offset: 59179},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1615, col: 18, offset: 59179},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1619, col: 1, offset: 59265},
			expr: &actionExpr{
				pos: position{line: 1619, col: 24, offset: 59288},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1619, col: 24, offset: 59288},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1623, col: 1, offset: 59381},
			expr: &actionExpr{
				pos: position{line: 1623, col: 26, offset: 59406},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1623, col: 26, offset: 59406},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1628, col: 1, offset: 59562},
			expr: &actionExpr{
				pos: position{line: 1629, col: 5, offset: 59581},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 5, offset: 59581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1629, col: 5, offset: 59581},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1629, col: 14, offset: 59590},
								expr: &choiceExpr{
									pos: position{line: 1629, col: 15, offset: 59591},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1629, col: 15, offset: 59591},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 11, offset: 59606},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1631, col: 11, offset: 59623},
											expr: &ruleRefExpr{
												pos:  position{line: 1631, col: 11, offset: 59623},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1632, col: 11, offset: 59641},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1633, col: 11, offset: 59665},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 11, offset: 59687},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1635, col: 11, offset: 59715},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 11, offset: 59733},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1636, col: 21, offset: 59743},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1640, col: 1, offset: 59813},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 17, offset: 59829},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1640, col: 17, offset: 59829},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 40, offset: 59852},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1643, col: 1, offset: 59980},
			expr: &actionExpr{
				pos: position{line: 1643, col: 25, offset: 60004},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1643, col: 25, offset: 60004},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1643, col: 25, offset: 60004},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 33, offset: 60012},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1643, col: 38, offset: 60017},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1643, col: 38, offset: 60017},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 57, offset: 60036},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 79, offset: 60058},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 97, offset: 60076},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1647, col: 1, offset: 60187},
			expr: &actionExpr{
				pos: position{line: 1647, col: 25, offset: 60211},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 25, offset: 60211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 25, offset: 60211},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 30, offset: 60216},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 48, offset: 60234},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 65, offset: 60251},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 66, offset: 60252},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1654, col: 1, offset: 60447},
			expr: &actionExpr{
				pos: position{line: 1654, col: 15, offset: 60461},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 15, offset: 60461},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1654, col: 15, offset: 60461},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1654, col: 26, offset: 60472},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 27, offset: 60473},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1654, col: 45, offset: 60491},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 55, offset: 60501},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 61, offset: 60507},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 71, offset: 60517},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 84, offset: 60530},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1654, col: 102, offset: 60548},
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 102, offset: 60548},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1654, col: 109, offset: 60555},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1658, col: 1, offset: 60662},
			expr: &actionExpr{
				pos: position{line: 1658, col: 16, offset: 60677},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 16, offset: 60677},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1658, col: 16, offset: 60677},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1658, col: 25, offset: 60686},
							expr: &litMatcher{
								pos:        position{line: 1658, col: 26, offset: 60687},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 30, offset: 60691},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 36, offset: 60697},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 46, offset: 60707},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 59, offset: 60720},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1662, col: 1, offset: 60830},
			expr: &actionExpr{
				pos: position{line: 1662, col: 21, offset: 60850},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 21, offset: 60850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1662, col: 21, offset: 60850},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 25, offset: 60854},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 29, offset: 60858},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 44, offset: 60873},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 46, offset: 60875},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 57, offset: 60886},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 59, offset: 60888},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 71, offset: 60900},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 74, offset: 60903},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1662, col: 85, offset: 60914},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1666, col: 1, offset: 60976},
			expr: &choiceExpr{
				pos: position{line: 1666, col: 20, offset: 60995},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1666, col: 20, offset: 60995},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 36, offset: 61011},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 51, offset: 61026},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1668, col: 1, offset: 61037},
			expr: &actionExpr{
				pos: position{line: 1668, col: 18, offset: 61054},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 18, offset: 61054},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1668, col: 18, offset: 61054},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 22, offset: 61058},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1668, col: 29, offset: 61065},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 29, offset: 61065},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 29, offset: 61065},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1668, col: 43, offset: 61079},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 43, offset: 61079},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 58, offset: 61094},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 58, offset: 61094},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 74, offset: 61110},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 74, offset: 61110},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1668, col: 91, offset: 61127},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 91, offset: 61127},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 103, offset: 61139},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 107, offset: 61143},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 107, offset: 61143},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 114, offset: 61150},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1672, col: 1, offset: 61204},
			expr: &actionExpr{
				pos: position{line: 1672, col: 19, offset: 61222},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1672, col: 19, offset: 61222},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1672, col: 25, offset: 61228},
						expr: &ruleRefExpr{
							pos:  position{line: 1672, col: 25, offset: 61228},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1676, col: 1, offset: 61307},
			expr: &actionExpr{
				pos: position{line: 1676, col: 15, offset: 61321},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 15, offset: 61321},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1676, col: 15, offset: 61321},
							expr: &litMatcher{
								pos:        position{line: 1676, col: 15, offset: 61321},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 20, offset: 61326},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1676, col: 26, offset: 61332},
								expr: &ruleRefExpr{
									pos:  position{line: 1676, col: 26, offset: 61332},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1680, col: 1, offset: 61408},
			expr: &actionExpr{
				pos: position{line: 1680, col: 16, offset: 61423},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 16, offset: 61423},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1680, col: 16, offset: 61423},
							expr: &litMatcher{
								pos:        position{line: 1680, col: 16, offset: 61423},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 21, offset: 61428},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1680, col: 27, offset: 61434},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 27, offset: 61434},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1684, col: 1, offset: 61516},
			expr: &actionExpr{
				pos: position{line: 1684, col: 17, offset: 61532},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 17, offset: 61532},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1684, col: 17, offset: 61532},
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 17, offset: 61532},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1684, col: 24, offset: 61539},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 30, offset: 61545},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1684, col: 46, offset: 61561},
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 46, offset: 61561},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1688, col: 1, offset: 61646},
			expr: &actionExpr{
				pos: position{line: 1688, col: 19, offset: 61664},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1688, col: 19, offset: 61664},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 19, offset: 61664},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 19, offset: 61664},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1688, col: 26, offset: 61671},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 30, offset: 61675},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 30, offset: 61675},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1688, col: 37, offset: 61682},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1688, col: 43, offset: 61688},
								expr: &ruleRefExpr{
									pos:  position{line: 1688, col: 43, offset: 61688},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1695, col: 1, offset: 61832},
			expr: &actionExpr{
				pos: position{line: 1695, col: 20, offset: 61851},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1695, col: 20, offset: 61851},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1695, col: 20, offset: 61851},
							expr: &ruleRefExpr{
								pos:  position{line: 1695, col: 20, offset: 61851},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1695, col: 27, offset: 61858},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1695, col: 31, offset: 61862},
							expr: &ruleRefExpr{
								pos:  position{line: 1695, col: 31, offset: 61862},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1695, col: 38, offset: 61869},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1695, col: 44, offset: 61875},
								expr: &ruleRefExpr{
									pos:  position{line: 1695, col: 44, offset: 61875},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1706, col: 1, offset: 62218},
			expr: &actionExpr{
				pos: position{line: 1706, col: 15, offset: 62232},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 15, offset: 62232},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1706, col: 15, offset: 62232},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 23, offset: 62240},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1706, col: 29, offset: 62246},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1706, col: 29, offset: 62246},
									expr: &charClassMatcher{
										pos:        position{line: 1706, col: 29, offset: 62246},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 73, offset: 62290},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1706, col: 80, offset: 62297},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1710, col: 1, offset: 62379},
			expr: &actionExpr{
				pos: position{line: 1710, col: 14, offset: 62392},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 14, offset: 62392},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1710, col: 14, offset: 62392},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 18, offset: 62396},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 23, offset: 62401},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 32, offset: 62410},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 35, offset: 62413},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1710, col: 46, offset: 62424},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1714, col: 1, offset: 62481},
			expr: &actionExpr{
				pos: position{line: 1714, col: 13, offset: 62493},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1714, col: 13, offset: 62493},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1714, col: 19, offset: 62499},
						expr: &ruleRefExpr{
							pos:  position{line: 1714, col: 19, offset: 62499},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1721, col: 1, offset: 62775},
			expr: &choiceExpr{
				pos: position{line: 1721, col: 19, offset: 62793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1721, col: 19, offset: 62793},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1721, col: 19, offset: 62793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1721, col: 19, offset: 62793},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1721, col: 32, offset: 62806},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1721, col: 41, offset: 62815},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1721, col: 58, offset: 62832},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1723, col: 5, offset: 62900},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1723, col: 5, offset: 62900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1723, col: 5, offset: 62900},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1723, col: 17, offset: 62912},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1723, col: 22, offset: 62917},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1723, col: 35, offset: 62930},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1723, col: 39, offset: 62934},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1723, col: 47, offset: 62942},
										expr: &ruleRefExpr{
											pos:  position{line: 1723, col: 48, offset: 62943},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1723, col: 66, offset: 62961},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1727, col: 1, offset: 63022},
			expr: &ruleRefExpr{
				pos:  position{line: 1727, col: 16, offset: 63037},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1729, col: 1, offset: 63048},
			expr: &actionExpr{
				pos: position{line: 1729, col: 20, offset: 63067},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1729, col: 20, offset: 63067},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1729, col: 29, offset: 63076},
						expr: &seqExpr{
							pos: position{line: 1729, col: 30, offset: 63077},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1729, col: 30, offset: 63077},
									expr: &litMatcher{
										pos:        position{line: 1729, col: 31, offset: 63078},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1729, col: 35, offset: 63082},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1736, col: 1, offset: 63406},
			expr: &actionExpr{
				pos: position{line: 1736, col: 19, offset: 63424},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1736, col: 19, offset: 63424},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1736, col: 19, offset: 63424},
							expr: &ruleRefExpr{
								pos:  position{line: 1736, col: 20, offset: 63425},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1737, col: 5, offset: 63513},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1737, col: 12, offset: 63520},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1737, col: 12, offset: 63520},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 11, offset: 63543},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 11, offset: 63567},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1740, col: 11, offset: 63591},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1741, col: 11, offset: 63612},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 11, offset: 63635},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 11, offset: 63663},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 11, offset: 63690},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 11, offset: 63706},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1749, col: 1, offset: 63747},
			expr: &choiceExpr{
				pos: position{line: 1749, col: 19, offset: 63765},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1749, col: 19, offset: 63765},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1749, col: 19, offset: 63765},
								expr: &ruleRefExpr{
									pos:  position{line: 1749, col: 21, offset: 63767},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1749, col: 31, offset: 63777},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1750, col: 19, offset: 63848},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 19, offset: 63888},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 19, offset: 63929},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1753, col: 19, offset: 63970},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 19, offset: 64011},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 19, offset: 64049},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 19, offset: 64089},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1758, col: 1, offset: 64116},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 26, offset: 64141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1758, col: 26, offset: 64141},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 42, offset: 64157},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1760, col: 1, offset: 64166},
			expr: &actionExpr{
				pos: position{line: 1760, col: 12, offset: 64177},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 12, offset: 64177},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1760, col: 12, offset: 64177},
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 13, offset: 64178},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 17, offset: 64182},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 26, offset: 64191},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 42, offset: 64207},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1764, col: 1, offset: 64287},
			expr: &actionExpr{
				pos: position{line: 1764, col: 19, offset: 64305},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1764, col: 19, offset: 64305},
					expr: &charClassMatcher{
						pos:        position{line: 1764, col: 19, offset: 64305},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1768, col: 1, offset: 64352},
			expr: &ruleRefExpr{
				pos:  position{line: 1768, col: 20, offset: 64371},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1770, col: 1, offset: 64385},
			expr: &actionExpr{
				pos: position{line: 1770, col: 17, offset: 64401},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1770, col: 17, offset: 64401},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1770, col: 17, offset: 64401},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1770, col: 26, offset: 64410},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 47, offset: 64431},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1770, col: 56, offset: 64440},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 57, offset: 64441},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 68, offset: 64452},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1774, col: 1, offset: 64522},
			expr: &actionExpr{
				pos: position{line: 1774, col: 24, offset: 64545},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1774, col: 24, offset: 64545},
					expr: &seqExpr{
						pos: position{line: 1774, col: 25, offset: 64546},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1774, col: 25, offset: 64546},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 26, offset: 64547},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1774, col: 36, offset: 64557},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1774, col: 36, offset: 64557},
										expr: &ruleRefExpr{
											pos:  position{line: 1774, col: 36, offset: 64557},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1774, col: 45, offset: 64566},
										expr: &charClassMatcher{
											pos:        position{line: 1774, col: 45, offset: 64566},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1778, col: 1, offset: 64616},
			expr: &oneOrMoreExpr{
				pos: position{line: 1778, col: 13, offset: 64628},
				expr: &ruleRefExpr{
					pos:  position{line: 1778, col: 13, offset: 64628},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1780, col: 1, offset: 64638},
			expr: &actionExpr{
				pos: position{line: 1780, col: 12, offset: 64649},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1780, col: 12, offset: 64649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1780, col: 12, offset: 64649},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1780, col: 16, offset: 64653},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1780, col: 21, offset: 64658},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1780, col: 21, offset: 64658},
									expr: &charClassMatcher{
										pos:        position{line: 1780, col: 21, offset: 64658},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1780, col: 69, offset: 64706},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1780, col: 73, offset: 64710},
							expr: &ruleRefExpr{
								pos:  position{line: 1780, col: 73, offset: 64710},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1780, col: 80, offset: 64717},
							expr: &choiceExpr{
								pos: position{line: 1780, col: 82, offset: 64719},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1780, col: 82, offset: 64719},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 88, offset: 64725},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1784, col: 1, offset: 64778},
			expr: &actionExpr{
				pos: position{line: 1784, col: 20, offset: 64797},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 20, offset: 64797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1784, col: 20, offset: 64797},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 25, offset: 64802},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 48, offset: 64825},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1784, col: 61, offset: 64838},
								expr: &ruleRefExpr{
									pos:  position{line: 1784, col: 61, offset: 64838},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1788, col: 1, offset: 64935},
			expr: &actionExpr{
				pos: position{line: 1788, col: 26, offset: 64960},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1788, col: 26, offset: 64960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1788, col: 26, offset: 64960},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 30, offset: 64964},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1788, col: 35, offset: 64969},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1788, col: 35, offset: 64969},
									expr: &charClassMatcher{
										pos:        position{line: 1788, col: 35, offset: 64969},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1788, col: 83, offset: 65017},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1788, col: 87, offset: 65021},
							expr: &ruleRefExpr{
								pos:  position{line: 1788, col: 87, offset: 65021},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1795, col: 1, offset: 65248},
			expr: &seqExpr{
				pos: position{line: 1795, col: 25, offset: 65272},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1795, col: 25, offset: 65272},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1795, col: 31, offset: 65278},
						expr: &ruleRefExpr{
							pos:  position{line: 1795, col: 31, offset: 65278},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 38, offset: 65285},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1797, col: 1, offset: 65345},
			expr: &seqExpr{
				pos: position{line: 1797, col: 30, offset: 65374},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1797, col: 30, offset: 65374},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1797, col: 36, offset: 65380},
						expr: &ruleRefExpr{
							pos:  position{line: 1797, col: 36, offset: 65380},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 43, offset: 65387},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1799, col: 1, offset: 65392},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 28, offset: 65419},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1799, col: 29, offset: 65420},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1799, col: 29, offset: 65420},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1799, col: 35, offset: 65426},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 35, offset: 65426},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1799, col: 42, offset: 65433},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 49, offset: 65440},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1801, col: 1, offset: 65445},
			expr: &actionExpr{
				pos: position{line: 1801, col: 16, offset: 65460},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 16, offset: 65460},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1801, col: 16, offset: 65460},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1801, col: 27, offset: 65471},
								expr: &ruleRefExpr{
									pos:  position{line: 1801, col: 28, offset: 65472},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 41, offset: 65485},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1801, col: 67, offset: 65511},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1801, col: 76, offset: 65520},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 99, offset: 65543},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1805, col: 1, offset: 65658},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1805, col: 26, offset: 65683},
				expr: &actionExpr{
					pos: position{line: 1805, col: 27, offset: 65684},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1805, col: 27, offset: 65684},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1805, col: 27, offset: 65684},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 28, offset: 65685},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1805, col: 52, offset: 65709},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 58, offset: 65715},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1812, col: 1, offset: 66055},
			expr: &seqExpr{
				pos: position{line: 1812, col: 26, offset: 66080},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 26, offset: 66080},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 33, offset: 66087},
						expr: &ruleRefExpr{
							pos:  position{line: 1812, col: 33, offset: 66087},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 40, offset: 66094},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1814, col: 1, offset: 66099},
			expr: &seqExpr{
				pos: position{line: 1814, col: 31, offset: 66129},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1814, col: 31, offset: 66129},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1814, col: 38, offset: 66136},
						expr: &ruleRefExpr{
							pos:  position{line: 1814, col: 38, offset: 66136},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 45, offset: 66143},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1816, col: 1, offset: 66148},
			expr: &choiceExpr{
				pos: position{line: 1816, col: 29, offset: 66176},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1816, col: 30, offset: 66177},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1816, col: 30, offset: 66177},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1816, col: 37, offset: 66184},
								expr: &ruleRefExpr{
									pos:  position{line: 1816, col: 37, offset: 66184},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1816, col: 44, offset: 66191},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 51, offset: 66198},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1818, col: 1, offset: 66203},
			expr: &actionExpr{
				pos: position{line: 1818, col: 17, offset: 66219},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 17, offset: 66219},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1818, col: 17, offset: 66219},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1818, col: 28, offset: 66230},
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 29, offset: 66231},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 42, offset: 66244},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 69, offset: 66271},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 78, offset: 66280},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 102, offset: 66304},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1822, col: 1, offset: 66421},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1822, col: 27, offset: 66447},
				expr: &actionExpr{
					pos: position{line: 1822, col: 28, offset: 66448},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1822, col: 28, offset: 66448},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1822, col: 28, offset: 66448},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 29, offset: 66449},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1822, col: 54, offset: 66474},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 60, offset: 66480},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1829, col: 1, offset: 66820},
			expr: &seqExpr{
				pos: position{line: 1829, col: 26, offset: 66845},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1829, col: 26, offset: 66845},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1829, col: 33, offset: 66852},
						expr: &ruleRefExpr{
							pos:  position{line: 1829, col: 33, offset: 66852},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 40, offset: 66859},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1831, col: 1, offset: 66864},
			expr: &seqExpr{
				pos: position{line: 1831, col: 31, offset: 66894},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1831, col: 31, offset: 66894},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 38, offset: 66901},
						expr: &ruleRefExpr{
							pos:  position{line: 1831, col: 38, offset: 66901},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 45, offset: 66908},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1833, col: 1, offset: 66913},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 29, offset: 66941},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1833, col: 30, offset: 66942},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1833, col: 30, offset: 66942},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1833, col: 37, offset: 66949},
								expr: &ruleRefExpr{
									pos:  position{line: 1833, col: 37, offset: 66949},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1833, col: 44, offset: 66956},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 51, offset: 66963},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1835, col: 1, offset: 66968},
			expr: &actionExpr{
				pos: position{line: 1835, col: 17, offset: 66984},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 17, offset: 66984},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1835, col: 17, offset: 66984},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1835, col: 28, offset: 66995},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 29, offset: 66996},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 42, offset: 67009},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 69, offset: 67036},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 78, offset: 67045},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 102, offset: 67069},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1839, col: 1, offset: 67186},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1839, col: 27, offset: 67212},
				expr: &actionExpr{
					pos: position{line: 1839, col: 28, offset: 67213},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1839, col: 28, offset: 67213},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1839, col: 28, offset: 67213},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 29, offset: 67214},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1839, col: 54, offset: 67239},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 60, offset: 67245},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1846, col: 1, offset: 67583},
			expr: &seqExpr{
				pos: position{line: 1846, col: 24, offset: 67606},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1846, col: 24, offset: 67606},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1846, col: 31, offset: 67613},
						expr: &ruleRefExpr{
							pos:  position{line: 1846, col: 31, offset: 67613},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1846, col: 38, offset: 67620},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1848, col: 1, offset: 67650},
			expr: &seqExpr{
				pos: position{line: 1848, col: 29, offset: 67678},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1848, col: 29, offset: 67678},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 36, offset: 67685},
						expr: &ruleRefExpr{
							pos:  position{line: 1848, col: 36, offset: 67685},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 43, offset: 67692},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1850, col: 1, offset: 67722},
			expr: &choiceExpr{
				pos: position{line: 1850, col: 27, offset: 67748},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1850, col: 28, offset: 67749},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1850, col: 28, offset: 67749},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1850, col: 35, offset: 67756},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 35, offset: 67756},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1850, col: 42, offset: 67763},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 49, offset: 67770},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1852, col: 1, offset: 67800},
			expr: &actionExpr{
				pos: position{line: 1852, col: 15, offset: 67814},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 15, offset: 67814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1852, col: 15, offset: 67814},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1852, col: 26, offset: 67825},
								expr: &ruleRefExpr{
									pos:  position{line: 1852, col: 27, offset: 67826},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 40, offset: 67839},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1852, col: 65, offset: 67864},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 74, offset: 67873},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 101, offset: 67900},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1856, col: 1, offset: 68013},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1856, col: 30, offset: 68042},
				expr: &actionExpr{
					pos: position{line: 1856, col: 31, offset: 68043},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1856, col: 31, offset: 68043},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1856, col: 31, offset: 68043},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 32, offset: 68044},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1856, col: 55, offset: 68067},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 61, offset: 68073},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1863, col: 1, offset: 68413},
			expr: &seqExpr{
				pos: position{line: 1863, col: 26, offset: 68438},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1863, col: 26, offset: 68438},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1863, col: 33, offset: 68445},
						expr: &ruleRefExpr{
							pos:  position{line: 1863, col: 33, offset: 68445},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 40, offset: 68452},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1865, col: 1, offset: 68457},
			expr: &seqExpr{
				pos: position{line: 1865, col: 31, offset: 68487},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1865, col: 31, offset: 68487},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1865, col: 38, offset: 68494},
						expr: &ruleRefExpr{
							pos:  position{line: 1865, col: 38, offset: 68494},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1865, col: 45, offset: 68501},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1867, col: 1, offset: 68506},
			expr: &choiceExpr{
				pos: position{line: 1867, col: 29, offset: 68534},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1867, col: 30, offset: 68535},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1867, col: 30, offset: 68535},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1867, col: 37, offset: 68542},
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 37, offset: 68542},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1867, col: 44, offset: 68549},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 51, offset: 68556},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1869, col: 1, offset: 68561},
			expr: &actionExpr{
				pos: position{line: 1869, col: 17, offset: 68577},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 17, offset: 68577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1869, col: 17, offset: 68577},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1869, col: 28, offset: 68588},
								expr: &ruleRefExpr{
									pos:  position{line: 1869, col: 29, offset: 68589},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 42, offset: 68602},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 69, offset: 68629},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 78, offset: 68638},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 102, offset: 68662},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1873, col: 1, offset: 68779},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1873, col: 27, offset: 68805},
				expr: &actionExpr{
					pos: position{line: 1873, col: 28, offset: 68806},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1873, col: 28, offset: 68806},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1873, col: 28, offset: 68806},
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 29, offset: 68807},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1873, col: 54, offset: 68832},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 60, offset: 68838},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1880, col: 1, offset: 69182},
			expr: &seqExpr{
				pos: position{line: 1880, col: 30, offset: 69211},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1880, col: 30, offset: 69211},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1880, col: 37, offset: 69218},
						expr: &ruleRefExpr{
							pos:  position{line: 1880, col: 37, offset: 69218},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1880, col: 44, offset: 69225},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1882, col: 1, offset: 69230},
			expr: &seqExpr{
				pos: position{line: 1882, col: 35, offset: 69264},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1882, col: 35, offset: 69264},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1882, col: 42, offset: 69271},
						expr: &ruleRefExpr{
							pos:  position{line: 1882, col: 42, offset: 69271},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1882, col: 49, offset: 69278},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1884, col: 1, offset: 69283},
			expr: &choiceExpr{
				pos: position{line: 1884, col: 33, offset: 69315},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1884, col: 34, offset: 69316},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1884, col: 34, offset: 69316},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1884, col: 41, offset: 69323},
								expr: &ruleRefExpr{
									pos:  position{line: 1884, col: 41, offset: 69323},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1884, col: 48, offset: 69330},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1884, col: 55, offset: 69337},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1886, col: 1, offset: 69342},
			expr: &actionExpr{
				pos: position{line: 1886, col: 21, offset: 69362},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1886, col: 21, offset: 69362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1886, col: 21, offset: 69362},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1886, col: 32, offset: 69373},
								expr: &ruleRefExpr{
									pos:  position{line: 1886, col: 33, offset: 69374},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1886, col: 46, offset: 69387},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1886, col: 77, offset: 69418},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1886, col: 86, offset: 69427},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1886, col: 114, offset: 69455},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1890, col: 1, offset: 69580},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1890, col: 31, offset: 69610},
				expr: &actionExpr{
					pos: position{line: 1890, col: 32, offset: 69611},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1890, col: 32, offset: 69611},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1890, col: 32, offset: 69611},
								expr: &ruleRefExpr{
									pos:  position{line: 1890, col: 33, offset: 69612},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1890, col: 62, offset: 69641},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1890, col: 68, offset: 69647},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1895, col: 1, offset: 69809},
			expr: &actionExpr{
				pos: position{line: 1895, col: 18, offset: 69826},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1895, col: 18, offset: 69826},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1895, col: 19, offset: 69827},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1895, col: 19, offset: 69827},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 27, offset: 69835},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 37, offset: 69845},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 45, offset: 69853},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 55, offset: 69863},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 63, offset: 69871},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1895, col: 72, offset: 69880},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1904, col: 1, offset: 70177},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1904, col: 23, offset: 70199},
				expr: &ruleRefExpr{
					pos:  position{line: 1904, col: 23, offset: 70199},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1906, col: 1, offset: 70215},
			expr: &actionExpr{
				pos: position{line: 1907, col: 5, offset: 70237},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1907, col: 5, offset: 70237},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1907, col: 5, offset: 70237},
							expr: &ruleRefExpr{
								pos:  position{line: 1907, col: 6, offset: 70238},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1907, col: 10, offset: 70242},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1907, col: 19, offset: 70251},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1907, col: 19, offset: 70251},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1908, col: 15, offset: 70276},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1909, col: 15, offset: 70304},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1910, col: 15, offset: 70329},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1911, col: 15, offset: 70357},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1912, col: 15, offset: 70388},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1913, col: 15, offset: 70421},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 15, offset: 70452},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1915, col: 15, offset: 70491},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1916, col: 15, offset: 70520},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1917, col: 15, offset: 70548},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1918, col: 15, offset: 70584},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1919, col: 15, offset: 70614},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1920, col: 15, offset: 70655},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1921, col: 15, offset: 70690},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1926, col: 1, offset: 70803},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1926, col: 22, offset: 70824},
				expr: &ruleRefExpr{
					pos:  position{line: 1926, col: 22, offset: 70824},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1928, col: 1, offset: 70844},
			expr: &actionExpr{
				pos: position{line: 1928, col: 22, offset: 70865},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1928, col: 22, offset: 70865},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1928, col: 22, offset: 70865},
							expr: &ruleRefExpr{
								pos:  position{line: 1928, col: 23, offset: 70866},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1928, col: 27, offset: 70870},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1928, col: 36, offset: 70879},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1928, col: 36, offset: 70879},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 48, offset: 70891},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1932, col: 1, offset: 70941},
			expr: &actionExpr{
				pos: position{line: 1932, col: 24, offset: 70964},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1932, col: 24, offset: 70964},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1932, col: 30, offset: 70970},
						expr: &ruleRefExpr{
							pos:  position{line: 1932, col: 31, offset: 70971},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1936, col: 1, offset: 71061},
			expr: &actionExpr{
				pos: position{line: 1936, col: 28, offset: 71088},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1936, col: 28, offset: 71088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1936, col: 28, offset: 71088},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1936, col: 37, offset: 71097},
								expr: &ruleRefExpr{
									pos:  position{line: 1936, col: 38, offset: 71098},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 54, offset: 71114},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1943, col: 1, offset: 71356},
			expr: &actionExpr{
				pos: position{line: 1943, col: 10, offset: 71365},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 10, offset: 71365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1943, col: 10, offset: 71365},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1943, col: 16, offset: 71371},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1943, col: 17, offset: 71372},
									expr: &ruleRefExpr{
										pos:  position{line: 1943, col: 17, offset: 71372},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1943, col: 31, offset: 71386},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 5, offset: 71405},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1944, col: 12, offset: 71412},
								expr: &ruleRefExpr{
									pos:  position{line: 1944, col: 13, offset: 71413},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1945, col: 5, offset: 71435},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1945, col: 11, offset: 71441},
								expr: &ruleRefExpr{
									pos:  position{line: 1945, col: 12, offset: 71442},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1946, col: 6, offset: 71459},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1946, col: 6, offset: 71459},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 23, offset: 71476},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1950, col: 1, offset: 71586},
			expr: &seqExpr{
				pos: position{line: 1950, col: 23, offset: 71608},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1950, col: 23, offset: 71608},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1950, col: 27, offset: 71612},
						expr: &ruleRefExpr{
							pos:  position{line: 1950, col: 27, offset: 71612},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1952, col: 1, offset: 71620},
			expr: &seqExpr{
				pos: position{line: 1952, col: 19, offset: 71638},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1952, col: 19, offset: 71638},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1952, col: 26, offset: 71645},
						expr: &ruleRefExpr{
							pos:  position{line: 1952, col: 26, offset: 71645},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1952, col: 33, offset: 71652},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1955, col: 1, offset: 71720},
			expr: &actionExpr{
				pos: position{line: 1955, col: 20, offset: 71739},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 20, offset: 71739},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1955, col: 20, offset: 71739},
							expr: &ruleRefExpr{
								pos:  position{line: 1955, col: 21, offset: 71740},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 36, offset: 71755},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1955, col: 42, offset: 71761},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 43, offset: 71762},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 55, offset: 71774},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 59, offset: 71778},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1959, col: 1, offset: 71846},
			expr: &actionExpr{
				pos: position{line: 1959, col: 14, offset: 71859},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 14, offset: 71859},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1959, col: 14, offset: 71859},
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 15, offset: 71860},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 30, offset: 71875},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1959, col: 36, offset: 71881},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 37, offset: 71882},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 49, offset: 71894},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1959, col: 53, offset: 71898},
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 53, offset: 71898},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1963, col: 1, offset: 71967},
			expr: &actionExpr{
				pos: position{line: 1963, col: 14, offset: 71980},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 14, offset: 71980},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1963, col: 14, offset: 71980},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 33, offset: 71999},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1963, col: 42, offset: 72008},
								expr: &seqExpr{
									pos: position{line: 1963, col: 43, offset: 72009},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1963, col: 43, offset: 72009},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 44, offset: 72010},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1963, col: 63, offset: 72029},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 64, offset: 72030},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1963, col: 68, offset: 72034},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 68, offset: 72034},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1963, col: 75, offset: 72041},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1963, col: 89, offset: 72055},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 89, offset: 72055},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1970, col: 1, offset: 72304},
			expr: &seqExpr{
				pos: position{line: 1970, col: 26, offset: 72329},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1970, col: 26, offset: 72329},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1970, col: 33, offset: 72336},
						expr: &ruleRefExpr{
							pos:  position{line: 1970, col: 33, offset: 72336},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1970, col: 40, offset: 72343},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1972, col: 1, offset: 72348},
			expr: &seqExpr{
				pos: position{line: 1972, col: 31, offset: 72378},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1972, col: 31, offset: 72378},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1972, col: 38, offset: 72385},
						expr: &ruleRefExpr{
							pos:  position{line: 1972, col: 38, offset: 72385},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 45, offset: 72392},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1974, col: 1, offset: 72397},
			expr: &choiceExpr{
				pos: position{line: 1974, col: 29, offset: 72425},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1974, col: 30, offset: 72426},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1974, col: 30, offset: 72426},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1974, col: 37, offset: 72433},
								expr: &ruleRefExpr{
									pos:  position{line: 1974, col: 37, offset: 72433},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1974, col: 44, offset: 72440},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1974, col: 51, offset: 72447},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1976, col: 1, offset: 72452},
			expr: &actionExpr{
				pos: position{line: 1976, col: 17, offset: 72468},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1976, col: 17, offset: 72468},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1976, col: 17, offset: 72468},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1976, col: 44, offset: 72495},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1976, col: 53, offset: 72504},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1976, col: 78, offset: 72529},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1980, col: 1, offset: 72639},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1980, col: 27, offset: 72665},
				expr: &actionExpr{
					pos: position{line: 1980, col: 28, offset: 72666},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1980, col: 28, offset: 72666},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1980, col: 28, offset: 72666},
								expr: &ruleRefExpr{
									pos:  position{line: 1980, col: 29, offset: 72667},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1980, col: 54, offset: 72692},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1980, col: 60, offset: 72698},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1984, col: 1, offset: 72842},
			expr: &actionExpr{
				pos: position{line: 1984, col: 22, offset: 72863},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 22, offset: 72863},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1984, col: 22, offset: 72863},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 23, offset: 72864},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1984, col: 45, offset: 72886},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 45, offset: 72886},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1984, col: 52, offset: 72893},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 57, offset: 72898},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 66, offset: 72907},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 92, offset: 72933},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1988, col: 1, offset: 72998},
			expr: &actionExpr{
				pos: position{line: 1988, col: 29, offset: 73026},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1988, col: 29, offset: 73026},
					expr: &charClassMatcher{
						pos:        position{line: 1988, col: 29, offset: 73026},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1996, col: 1, offset: 73339},
			expr: &choiceExpr{
				pos: position{line: 1996, col: 17, offset: 73355},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1996, col: 17, offset: 73355},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 49, offset: 73387},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 78, offset: 73416},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1998, col: 1, offset: 73452},
			expr: &litMatcher{
				pos:        position{line: 1998, col: 26, offset: 73477},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2001, col: 1, offset: 73549},
			expr: &actionExpr{
				pos: position{line: 2001, col: 31, offset: 73579},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2001, col: 31, offset: 73579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2001, col: 31, offset: 73579},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2001, col: 42, offset: 73590},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 43, offset: 73591},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2001, col: 56, offset: 73604},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2001, col: 63, offset: 73611},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2006, col: 1, offset: 73841},
			expr: &actionExpr{
				pos: position{line: 2007, col: 5, offset: 73881},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 5, offset: 73881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2007, col: 5, offset: 73881},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2007, col: 16, offset: 73892},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2007, col: 16, offset: 73892},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2007, col: 16, offset: 73892},
											expr: &ruleRefExpr{
												pos:  position{line: 2007, col: 16, offset: 73892},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2007, col: 23, offset: 73899},
											expr: &charClassMatcher{
												pos:        position{line: 2007, col: 23, offset: 73899},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2009, col: 8, offset: 73952},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2010, col: 5, offset: 74015},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2010, col: 16, offset: 74026},
								expr: &actionExpr{
									pos: position{line: 2011, col: 9, offset: 74036},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2011, col: 9, offset: 74036},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2011, col: 9, offset: 74036},
												expr: &ruleRefExpr{
													pos:  position{line: 2011, col: 10, offset: 74037},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2012, col: 9, offset: 74056},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2012, col: 20, offset: 74067},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2012, col: 20, offset: 74067},
														expr: &charClassMatcher{
															pos:        position{line: 2012, col: 20, offset: 74067},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2014, col: 12, offset: 74128},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2021, col: 1, offset: 74358},
			expr: &actionExpr{
				pos: position{line: 2021, col: 39, offset: 74396},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 39, offset: 74396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 39, offset: 74396},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2021, col: 50, offset: 74407},
								expr: &ruleRefExpr{
									pos:  position{line: 2021, col: 51, offset: 74408},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2022, col: 9, offset: 74429},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2022, col: 31, offset: 74451},
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 31, offset: 74451},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2022, col: 38, offset: 74458},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 46, offset: 74466},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 53, offset: 74473},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2022, col: 95, offset: 74515},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2022, col: 96, offset: 74516},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2022, col: 96, offset: 74516},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2022, col: 118, offset: 74538},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 118, offset: 74538},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2022, col: 125, offset: 74545},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 132, offset: 74552},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2027, col: 1, offset: 74711},
			expr: &actionExpr{
				pos: position{line: 2027, col: 44, offset: 74754},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2027, col: 44, offset: 74754},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2027, col: 50, offset: 74760},
						expr: &ruleRefExpr{
							pos:  position{line: 2027, col: 51, offset: 74761},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2031, col: 1, offset: 74845},
			expr: &actionExpr{
				pos: position{line: 2032, col: 5, offset: 74900},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 5, offset: 74900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2032, col: 5, offset: 74900},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2032, col: 11, offset: 74906},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2032, col: 11, offset: 74906},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2032, col: 11, offset: 74906},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 12, offset: 74907},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2032, col: 34, offset: 74929},
											expr: &charClassMatcher{
												pos:        position{line: 2032, col: 34, offset: 74929},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2034, col: 8, offset: 74982},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2039, col: 1, offset: 75108},
			expr: &actionExpr{
				pos: position{line: 2040, col: 5, offset: 75146},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2040, col: 5, offset: 75146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2040, col: 5, offset: 75146},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2040, col: 16, offset: 75157},
								expr: &ruleRefExpr{
									pos:  position{line: 2040, col: 17, offset: 75158},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2041, col: 5, offset: 75175},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2048, col: 5, offset: 75382},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2048, col: 12, offset: 75389},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2052, col: 1, offset: 75539},
			expr: &actionExpr{
				pos: position{line: 2052, col: 16, offset: 75554},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2052, col: 16, offset: 75554},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2057, col: 1, offset: 75637},
			expr: &actionExpr{
				pos: position{line: 2057, col: 39, offset: 75675},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2057, col: 39, offset: 75675},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2057, col: 45, offset: 75681},
						expr: &ruleRefExpr{
							pos:  position{line: 2057, col: 46, offset: 75682},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2061, col: 1, offset: 75762},
			expr: &actionExpr{
				pos: position{line: 2061, col: 38, offset: 75799},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2061, col: 38, offset: 75799},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2061, col: 38, offset: 75799},
							expr: &ruleRefExpr{
								pos:  position{line: 2061, col: 39, offset: 75800},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2061, col: 49, offset: 75810},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2061, col: 58, offset: 75819},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2061, col: 58, offset: 75819},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 58, offset: 75819},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 4, offset: 75864},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2070, col: 1, offset: 76050},
			expr: &actionExpr{
				pos: position{line: 2070, col: 14, offset: 76063},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2070, col: 14, offset: 76063},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2070, col: 14, offset: 76063},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2070, col: 19, offset: 76068},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2070, col: 25, offset: 76074},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2070, col: 43, offset: 76092},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2074, col: 1, offset: 76157},
			expr: &actionExpr{
				pos: position{line: 2074, col: 21, offset: 76177},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2074, col: 21, offset: 76177},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2074, col: 30, offset: 76186},
						expr: &choiceExpr{
							pos: position{line: 2074, col: 31, offset: 76187},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2074, col: 31, offset: 76187},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 38, offset: 76194},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 53, offset: 76209},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 66, offset: 76222},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2074, col: 74, offset: 76230},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2074, col: 75, offset: 76231},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2074, col: 75, offset: 76231},
												expr: &litMatcher{
													pos:        position{line: 2074, col: 76, offset: 76232},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2074, col: 81, offset: 76237,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2080, col: 1, offset: 76343},
			expr: &actionExpr{
				pos: position{line: 2080, col: 23, offset: 76365},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2080, col: 23, offset: 76365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2080, col: 23, offset: 76365},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2080, col: 29, offset: 76371},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2080, col: 36, offset: 76378},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 5, offset: 76410},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2081, col: 11, offset: 76416},
								expr: &actionExpr{
									pos: position{line: 2081, col: 12, offset: 76417},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2081, col: 12, offset: 76417},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2081, col: 12, offset: 76417},
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 12, offset: 76417},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2081, col: 19, offset: 76424},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2081, col: 23, offset: 76428},
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 23, offset: 76428},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2081, col: 30, offset: 76435},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 39, offset: 76444},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2082, col: 5, offset: 76502},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2082, col: 11, offset: 76508},
								expr: &actionExpr{
									pos: position{line: 2082, col: 12, offset: 76509},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2082, col: 12, offset: 76509},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2082, col: 12, offset: 76509},
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 12, offset: 76509},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2082, col: 19, offset: 76516},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2082, col: 23, offset: 76520},
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 23, offset: 76520},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2082, col: 30, offset: 76527},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 39, offset: 76536},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2083, col: 5, offset: 76594},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2087, col: 1, offset: 76673},
			expr: &actionExpr{
				pos: position{line: 2087, col: 30, offset: 76702},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2087, col: 30, offset: 76702},
					expr: &choiceExpr{
						pos: position{line: 2087, col: 31, offset: 76703},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2087, col: 31, offset: 76703},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2087, col: 42, offset: 76714},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2094, col: 1, offset: 76863},
			expr: &actionExpr{
				pos: position{line: 2094, col: 14, offset: 76876},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2094, col: 14, offset: 76876},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2094, col: 14, offset: 76876},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 15, offset: 76877},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2094, col: 19, offset: 76881},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 19, offset: 76881},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2094, col: 26, offset: 76888},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2102, col: 1, offset: 77033},
			expr: &choiceExpr{
				pos: position{line: 2102, col: 11, offset: 77043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2102, col: 11, offset: 77043},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 24, offset: 77056},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 36, offset: 77068},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 48, offset: 77080},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 61, offset: 77093},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2104, col: 1, offset: 77103},
			expr: &actionExpr{
				pos: position{line: 2104, col: 15, offset: 77117},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2104, col: 15, offset: 77117},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2107, col: 1, offset: 77170},
			expr: &actionExpr{
				pos: position{line: 2107, col: 14, offset: 77183},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2107, col: 14, offset: 77183},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2110, col: 1, offset: 77237},
			expr: &actionExpr{
				pos: position{line: 2110, col: 14, offset: 77250},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2110, col: 14, offset: 77250},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2113, col: 1, offset: 77305},
			expr: &actionExpr{
				pos: position{line: 2113, col: 15, offset: 77319},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2113, col: 15, offset: 77319},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2116, col: 1, offset: 77373},
			expr: &actionExpr{
				pos: position{line: 2116, col: 13, offset: 77385},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2116, col: 13, offset: 77385},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2124, col: 1, offset: 77660},
			expr: &actionExpr{
				pos: position{line: 2124, col: 22, offset: 77681},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2124, col: 22, offset: 77681},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2124, col: 22, offset: 77681},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2124, col: 31, offset: 77690},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2124, col: 35, offset: 77694},
							expr: &charClassMatcher{
								pos:        position{line: 2124, col: 36, offset: 77695},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2131, col: 1, offset: 77875},
			expr: &charClassMatcher{
				pos:        position{line: 2131, col: 13, offset: 77887},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2133, col: 1, offset: 77897},
			expr: &choiceExpr{
				pos: position{line: 2133, col: 16, offset: 77912},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2133, col: 16, offset: 77912},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 22, offset: 77918},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 28, offset: 77924},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 34, offset: 77930},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 40, offset: 77936},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 46, offset: 77942},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2135, col: 1, offset: 77948},
			expr: &actionExpr{
				pos: position{line: 2135, col: 14, offset: 77961},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2135, col: 14, offset: 77961},
					expr: &charClassMatcher{
						pos:        position{line: 2135, col: 14, offset: 77961},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2139, col: 1, offset: 78007},
			expr: &choiceExpr{
				pos: position{line: 2143, col: 5, offset: 78334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2143, col: 5, offset: 78334},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2143, col: 5, offset: 78334},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2143, col: 5, offset: 78334},
									expr: &charClassMatcher{
										pos:        position{line: 2143, col: 5, offset: 78334},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2143, col: 15, offset: 78344},
									expr: &choiceExpr{
										pos: position{line: 2143, col: 17, offset: 78346},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2143, col: 17, offset: 78346},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2143, col: 30, offset: 78359},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2145, col: 9, offset: 78429},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2145, col: 9, offset: 78429},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2145, col: 9, offset: 78429},
									expr: &charClassMatcher{
										pos:        position{line: 2145, col: 9, offset: 78429},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2145, col: 19, offset: 78439},
									expr: &seqExpr{
										pos: position{line: 2145, col: 20, offset: 78440},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2145, col: 20, offset: 78440},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2145, col: 27, offset: 78447},
												expr: &charClassMatcher{
													pos:        position{line: 2145, col: 27, offset: 78447},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2149, col: 1, offset: 78523},
			expr: &choiceExpr{
				pos: position{line: 2150, col: 5, offset: 78604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2150, col: 5, offset: 78604},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2150, col: 5, offset: 78604},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2150, col: 5, offset: 78604},
									expr: &charClassMatcher{
										pos:        position{line: 2150, col: 5, offset: 78604},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2150, col: 19, offset: 78618},
									expr: &choiceExpr{
										pos: position{line: 2150, col: 21, offset: 78620},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2150, col: 21, offset: 78620},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2150, col: 31, offset: 78630},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2152, col: 9, offset: 78699},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2155, col: 1, offset: 78799},
			expr: &actionExpr{
				pos: position{line: 2155, col: 12, offset: 78810},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2155, col: 12, offset: 78810},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2159, col: 1, offset: 78875},
			expr: &actionExpr{
				pos: position{line: 2159, col: 17, offset: 78891},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2159, col: 17, offset: 78891},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2159, col: 22, offset: 78896},
						expr: &choiceExpr{
							pos: position{line: 2159, col: 23, offset: 78897},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2159, col: 23, offset: 78897},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2159, col: 34, offset: 78908},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2163, col: 1, offset: 78992},
			expr: &actionExpr{
				pos: position{line: 2163, col: 25, offset: 79016},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2163, col: 25, offset: 79016},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2163, col: 30, offset: 79021},
						expr: &charClassMatcher{
							pos:        position{line: 2163, col: 31, offset: 79022},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2167, col: 1, offset: 79094},
			expr: &actionExpr{
				pos: position{line: 2167, col: 13, offset: 79106},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2167, col: 13, offset: 79106},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2167, col: 13, offset: 79106},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2167, col: 20, offset: 79113},
								expr: &ruleRefExpr{
									pos:  position{line: 2167, col: 21, offset: 79114},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2167, col: 34, offset: 79127},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2167, col: 39, offset: 79132},
								expr: &choiceExpr{
									pos: position{line: 2167, col: 40, offset: 79133},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2167, col: 40, offset: 79133},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2167, col: 51, offset: 79144},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2171, col: 1, offset: 79232},
			expr: &actionExpr{
				pos: position{line: 2171, col: 23, offset: 79254},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2171, col: 23, offset: 79254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2171, col: 23, offset: 79254},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2171, col: 31, offset: 79262},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2171, col: 43, offset: 79274},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2171, col: 48, offset: 79279},
								expr: &choiceExpr{
									pos: position{line: 2171, col: 49, offset: 79280},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2171, col: 49, offset: 79280},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2171, col: 60, offset: 79291},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2175, col: 1, offset: 79379},
			expr: &oneOrMoreExpr{
				pos: position{line: 2175, col: 13, offset: 79391},
				expr: &charClassMatcher{
					pos:        position{line: 2175, col: 14, offset: 79392},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2177, col: 1, offset: 79526},
			expr: &actionExpr{
				pos: position{line: 2177, col: 21, offset: 79546},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2177, col: 21, offset: 79546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2177, col: 21, offset: 79546},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2177, col: 29, offset: 79554},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2177, col: 41, offset: 79566},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2177, col: 47, offset: 79572},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2182, col: 1, offset: 79820},
			expr: &oneOrMoreExpr{
				pos: position{line: 2182, col: 22, offset: 79841},
				expr: &charClassMatcher{
					pos:        position{line: 2182, col: 23, offset: 79842},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2184, col: 1, offset: 79974},
			expr: &actionExpr{
				pos: position{line: 2184, col: 9, offset: 79982},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2184, col: 9, offset: 79982},
					expr: &charClassMatcher{
						pos:        position{line: 2184, col: 9, offset: 79982},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2188, col: 1, offset: 80030},
			expr: &choiceExpr{
				pos: position{line: 2188, col: 15, offset: 80044},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2188, col: 15, offset: 80044},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 27, offset: 80056},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 40, offset: 80069},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 51, offset: 80080},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 62, offset: 80091},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2190, col: 1, offset: 80102},
			expr: &actionExpr{
				pos: position{line: 2190, col: 7, offset: 80108},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2190, col: 7, offset: 80108},
					expr: &charClassMatcher{
						pos:        position{line: 2190, col: 7, offset: 80108},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2194, col: 1, offset: 80233},
			expr: &actionExpr{
				pos: position{line: 2194, col: 10, offset: 80242},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2194, col: 10, offset: 80242},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2198, col: 1, offset: 80284},
			expr: &actionExpr{
				pos: position{line: 2198, col: 11, offset: 80294},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2198, col: 11, offset: 80294},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2198, col: 11, offset: 80294},
							expr: &litMatcher{
								pos:        position{line: 2198, col: 11, offset: 80294},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2198, col: 16, offset: 80299},
							expr: &ruleRefExpr{
								pos:  position{line: 2198, col: 16, offset: 80299},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2202, col: 1, offset: 80351},
			expr: &choiceExpr{
				pos: position{line: 2202, col: 10, offset: 80360},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2202, col: 10, offset: 80360},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2202, col: 16, offset: 80366},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2202, col: 16, offset: 80366},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2206, col: 1, offset: 80407},
			expr: &choiceExpr{
				pos: position{line: 2206, col: 12, offset: 80418},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2206, col: 12, offset: 80418},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2206, col: 21, offset: 80427},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2206, col: 28, offset: 80434},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2208, col: 1, offset: 80440},
			expr: &notExpr{
				pos: position{line: 2208, col: 8, offset: 80447},
				expr: &anyMatcher{
					line: 2208, col: 9, offset: 80448,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2210, col: 1, offset: 80451},
			expr: &choiceExpr{
				pos: position{line: 2210, col: 8, offset: 80458},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2210, col: 8, offset: 80458},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2210, col: 18, offset: 80468},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
