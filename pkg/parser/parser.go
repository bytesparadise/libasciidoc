// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1179},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1179},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 42, col: 18, offset: 1179},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 19, offset: 1180},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 5, offset: 1189},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 43, col: 12, offset: 1196},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 43, col: 12, offset: 1196},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1222},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1241},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1266},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1290},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1344},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1366},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1385},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1436},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1460},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1500},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1534},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1571},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 56, col: 11, offset: 1596},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 60, col: 1, offset: 1634},
			expr: &labeledExpr{
				pos:   position{line: 60, col: 47, offset: 1680},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 60, col: 54, offset: 1687},
					expr: &ruleRefExpr{
						pos:  position{line: 60, col: 55, offset: 1688},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1725},
			expr: &actionExpr{
				pos: position{line: 62, col: 38, offset: 1762},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 62, col: 38, offset: 1762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 62, col: 38, offset: 1762},
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 39, offset: 1763},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 63, col: 5, offset: 1772},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 63, col: 12, offset: 1779},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 63, col: 12, offset: 1779},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1804},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1828},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1853},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1875},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1894},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1945},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 1969},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2009},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2043},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2080},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2105},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 78, col: 1, offset: 2143},
			expr: &labeledExpr{
				pos:   position{line: 78, col: 23, offset: 2165},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 78, col: 30, offset: 2172},
					expr: &ruleRefExpr{
						pos:  position{line: 78, col: 31, offset: 2173},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 80, col: 1, offset: 2194},
			expr: &actionExpr{
				pos: position{line: 80, col: 22, offset: 2215},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 80, col: 22, offset: 2215},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 80, col: 22, offset: 2215},
							expr: &ruleRefExpr{
								pos:  position{line: 80, col: 23, offset: 2216},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 5, offset: 2225},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 81, col: 12, offset: 2232},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 81, col: 12, offset: 2232},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 24, offset: 2244},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 88, col: 1, offset: 2390},
			expr: &ruleRefExpr{
				pos:  position{line: 88, col: 16, offset: 2405},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 90, col: 1, offset: 2423},
			expr: &actionExpr{
				pos: position{line: 90, col: 20, offset: 2442},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 90, col: 20, offset: 2442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 90, col: 20, offset: 2442},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 90, col: 41, offset: 2463},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 90, col: 49, offset: 2471},
								expr: &ruleRefExpr{
									pos:  position{line: 90, col: 50, offset: 2472},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 90, col: 75, offset: 2497},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 94, col: 1, offset: 2577},
			expr: &seqExpr{
				pos: position{line: 94, col: 26, offset: 2602},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 94, col: 26, offset: 2602},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 94, col: 32, offset: 2608},
						expr: &ruleRefExpr{
							pos:  position{line: 94, col: 32, offset: 2608},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 36, offset: 2612},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 96, col: 1, offset: 2617},
			expr: &actionExpr{
				pos: position{line: 96, col: 27, offset: 2643},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 96, col: 27, offset: 2643},
					expr: &oneOrMoreExpr{
						pos: position{line: 96, col: 28, offset: 2644},
						expr: &seqExpr{
							pos: position{line: 96, col: 29, offset: 2645},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 96, col: 29, offset: 2645},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 30, offset: 2646},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 96, col: 51, offset: 2667,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 103, col: 1, offset: 2833},
			expr: &actionExpr{
				pos: position{line: 103, col: 19, offset: 2851},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 103, col: 19, offset: 2851},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 103, col: 19, offset: 2851},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 103, col: 23, offset: 2855},
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 23, offset: 2855},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 27, offset: 2859},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 34, offset: 2866},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 49, offset: 2881},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 53, offset: 2885},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 53, offset: 2885},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 71, offset: 2903},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 9, offset: 2915},
							expr: &choiceExpr{
								pos: position{line: 104, col: 10, offset: 2916},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 104, col: 10, offset: 2916},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 2936},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 9, offset: 2959},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 105, col: 18, offset: 2968},
								expr: &ruleRefExpr{
									pos:  position{line: 105, col: 18, offset: 2968},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 106, col: 9, offset: 2995},
							expr: &choiceExpr{
								pos: position{line: 106, col: 10, offset: 2996},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 106, col: 10, offset: 2996},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 106, col: 30, offset: 3016},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 9, offset: 3039},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 107, col: 19, offset: 3049},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 19, offset: 3049},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 111, col: 1, offset: 3150},
			expr: &choiceExpr{
				pos: position{line: 111, col: 20, offset: 3169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 111, col: 20, offset: 3169},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 48, offset: 3197},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 113, col: 1, offset: 3227},
			expr: &actionExpr{
				pos: position{line: 113, col: 30, offset: 3256},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 113, col: 30, offset: 3256},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 113, col: 30, offset: 3256},
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 30, offset: 3256},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 113, col: 34, offset: 3260},
							expr: &litMatcher{
								pos:        position{line: 113, col: 35, offset: 3261},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 39, offset: 3265},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 113, col: 48, offset: 3274},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 48, offset: 3274},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 65, offset: 3291},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 117, col: 1, offset: 3361},
			expr: &actionExpr{
				pos: position{line: 117, col: 33, offset: 3393},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 33, offset: 3393},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 33, offset: 3393},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 33, offset: 3393},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 117, col: 37, offset: 3397},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 48, offset: 3408},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 56, offset: 3416},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 72, offset: 3432},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 121, col: 1, offset: 3511},
			expr: &actionExpr{
				pos: position{line: 121, col: 19, offset: 3529},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 121, col: 19, offset: 3529},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 19, offset: 3529},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 19, offset: 3529},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 23, offset: 3533},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3543},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 53, offset: 3563},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 59, offset: 3569},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 60, offset: 3570},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 82, offset: 3592},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 82, offset: 3592},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 121, col: 86, offset: 3596},
							expr: &litMatcher{
								pos:        position{line: 121, col: 86, offset: 3596},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 91, offset: 3601},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 91, offset: 3601},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 126, col: 1, offset: 3743},
			expr: &actionExpr{
				pos: position{line: 126, col: 23, offset: 3765},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 126, col: 23, offset: 3765},
					expr: &choiceExpr{
						pos: position{line: 126, col: 24, offset: 3766},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 126, col: 24, offset: 3766},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 126, col: 37, offset: 3779},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 126, col: 37, offset: 3779},
										expr: &litMatcher{
											pos:        position{line: 126, col: 38, offset: 3780},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 126, col: 42, offset: 3784},
										expr: &litMatcher{
											pos:        position{line: 126, col: 43, offset: 3785},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 126, col: 47, offset: 3789},
										expr: &ruleRefExpr{
											pos:  position{line: 126, col: 48, offset: 3790},
											name: "Newline",
										},
									},
									&anyMatcher{
										line: 126, col: 56, offset: 3798,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 130, col: 1, offset: 3839},
			expr: &actionExpr{
				pos: position{line: 130, col: 24, offset: 3862},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 130, col: 24, offset: 3862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 24, offset: 3862},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 130, col: 28, offset: 3866},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 130, col: 35, offset: 3873},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 130, col: 35, offset: 3873},
									expr: &choiceExpr{
										pos: position{line: 130, col: 36, offset: 3874},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 130, col: 36, offset: 3874},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 130, col: 49, offset: 3887},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 130, col: 49, offset: 3887},
														expr: &litMatcher{
															pos:        position{line: 130, col: 50, offset: 3888},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 130, col: 54, offset: 3892},
														expr: &ruleRefExpr{
															pos:  position{line: 130, col: 55, offset: 3893},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 130, col: 60, offset: 3898,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 132, col: 4, offset: 3939},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 138, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 138, col: 21, offset: 4120},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 138, col: 21, offset: 4120},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 21, offset: 4120},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 21, offset: 4120},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 138, col: 25, offset: 4124},
							expr: &litMatcher{
								pos:        position{line: 138, col: 26, offset: 4125},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 30, offset: 4129},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 139, col: 9, offset: 4148},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 139, col: 10, offset: 4149},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 139, col: 10, offset: 4149},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 139, col: 10, offset: 4149},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 139, col: 21, offset: 4160},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 139, col: 45, offset: 4184},
													expr: &litMatcher{
														pos:        position{line: 139, col: 45, offset: 4184},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 139, col: 50, offset: 4189},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 139, col: 58, offset: 4197},
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 59, offset: 4198},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 139, col: 82, offset: 4221},
													expr: &litMatcher{
														pos:        position{line: 139, col: 82, offset: 4221},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 139, col: 87, offset: 4226},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 139, col: 97, offset: 4236},
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 98, offset: 4237},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 141, col: 15, offset: 4354},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 141, col: 15, offset: 4354},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 141, col: 15, offset: 4354},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 141, col: 24, offset: 4363},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 141, col: 46, offset: 4385},
													expr: &litMatcher{
														pos:        position{line: 141, col: 46, offset: 4385},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 141, col: 51, offset: 4390},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 141, col: 61, offset: 4400},
														expr: &ruleRefExpr{
															pos:  position{line: 141, col: 62, offset: 4401},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 143, col: 13, offset: 4510},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 148, col: 1, offset: 4640},
			expr: &choiceExpr{
				pos: position{line: 148, col: 27, offset: 4666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 148, col: 27, offset: 4666},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 148, col: 27, offset: 4666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 148, col: 27, offset: 4666},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 32, offset: 4671},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 148, col: 39, offset: 4678},
									expr: &choiceExpr{
										pos: position{line: 148, col: 40, offset: 4679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 148, col: 40, offset: 4679},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 148, col: 52, offset: 4691},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 148, col: 62, offset: 4701},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 148, col: 62, offset: 4701},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 63, offset: 4702},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 148, col: 67, offset: 4706},
														expr: &litMatcher{
															pos:        position{line: 148, col: 68, offset: 4707},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 148, col: 72, offset: 4711},
														expr: &litMatcher{
															pos:        position{line: 148, col: 73, offset: 4712},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 148, col: 78, offset: 4717,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4759},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4759},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 150, col: 5, offset: 4759},
									expr: &litMatcher{
										pos:        position{line: 150, col: 5, offset: 4759},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 11, offset: 4765},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 150, col: 18, offset: 4772},
									expr: &choiceExpr{
										pos: position{line: 150, col: 19, offset: 4773},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 150, col: 19, offset: 4773},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 150, col: 31, offset: 4785},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 150, col: 41, offset: 4795},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 150, col: 41, offset: 4795},
														expr: &ruleRefExpr{
															pos:  position{line: 150, col: 42, offset: 4796},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 150, col: 46, offset: 4800},
														expr: &litMatcher{
															pos:        position{line: 150, col: 47, offset: 4801},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 150, col: 51, offset: 4805},
														expr: &litMatcher{
															pos:        position{line: 150, col: 52, offset: 4806},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 150, col: 57, offset: 4811,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 150, col: 62, offset: 4816},
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 62, offset: 4816},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 150, col: 66, offset: 4820},
									expr: &litMatcher{
										pos:        position{line: 150, col: 67, offset: 4821},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 154, col: 1, offset: 4861},
			expr: &actionExpr{
				pos: position{line: 154, col: 25, offset: 4885},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 154, col: 25, offset: 4885},
					expr: &choiceExpr{
						pos: position{line: 154, col: 26, offset: 4886},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 154, col: 26, offset: 4886},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 154, col: 38, offset: 4898},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 154, col: 48, offset: 4908},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 154, col: 48, offset: 4908},
										expr: &ruleRefExpr{
											pos:  position{line: 154, col: 49, offset: 4909},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 154, col: 53, offset: 4913},
										expr: &litMatcher{
											pos:        position{line: 154, col: 54, offset: 4914},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 154, col: 59, offset: 4919,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 158, col: 1, offset: 4960},
			expr: &actionExpr{
				pos: position{line: 158, col: 27, offset: 4986},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 27, offset: 4986},
					expr: &choiceExpr{
						pos: position{line: 158, col: 28, offset: 4987},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 158, col: 28, offset: 4987},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 158, col: 40, offset: 4999},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 158, col: 50, offset: 5009},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 158, col: 50, offset: 5009},
										expr: &ruleRefExpr{
											pos:  position{line: 158, col: 51, offset: 5010},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 158, col: 56, offset: 5015,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 165, col: 1, offset: 5171},
			expr: &actionExpr{
				pos: position{line: 165, col: 33, offset: 5203},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 165, col: 33, offset: 5203},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 165, col: 33, offset: 5203},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 165, col: 37, offset: 5207},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 165, col: 43, offset: 5213},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 165, col: 66, offset: 5236},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 165, col: 70, offset: 5240},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 165, col: 76, offset: 5246},
								expr: &actionExpr{
									pos: position{line: 165, col: 77, offset: 5247},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 165, col: 78, offset: 5248},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 165, col: 78, offset: 5248},
												expr: &ruleRefExpr{
													pos:  position{line: 165, col: 78, offset: 5248},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 165, col: 82, offset: 5252},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 165, col: 89, offset: 5259},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 165, col: 138, offset: 5308},
							expr: &ruleRefExpr{
								pos:  position{line: 165, col: 138, offset: 5308},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 165, col: 142, offset: 5312},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 172, col: 1, offset: 5560},
			expr: &actionExpr{
				pos: position{line: 172, col: 26, offset: 5585},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 172, col: 26, offset: 5585},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 172, col: 27, offset: 5586},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 172, col: 27, offset: 5586},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 172, col: 35, offset: 5594},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 172, col: 43, offset: 5602},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 172, col: 51, offset: 5610},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 172, col: 56, offset: 5615},
							expr: &choiceExpr{
								pos: position{line: 172, col: 57, offset: 5616},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 172, col: 57, offset: 5616},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 172, col: 65, offset: 5624},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 172, col: 73, offset: 5632},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 172, col: 81, offset: 5640},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 176, col: 1, offset: 5682},
			expr: &actionExpr{
				pos: position{line: 176, col: 27, offset: 5708},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 176, col: 27, offset: 5708},
					expr: &seqExpr{
						pos: position{line: 176, col: 28, offset: 5709},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 176, col: 28, offset: 5709},
								expr: &ruleRefExpr{
									pos:  position{line: 176, col: 29, offset: 5710},
									name: "Newline",
								},
							},
							&anyMatcher{
								line: 176, col: 37, offset: 5718,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 180, col: 1, offset: 5758},
			expr: &choiceExpr{
				pos: position{line: 180, col: 27, offset: 5784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 180, col: 27, offset: 5784},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 180, col: 27, offset: 5784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 180, col: 27, offset: 5784},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 180, col: 32, offset: 5789},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 38, offset: 5795},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 61, offset: 5818},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 180, col: 65, offset: 5822},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 65, offset: 5822},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 180, col: 69, offset: 5826},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5894},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 182, col: 5, offset: 5894},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 182, col: 9, offset: 5898},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 15, offset: 5904},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 182, col: 38, offset: 5927},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 182, col: 43, offset: 5932},
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 43, offset: 5932},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 182, col: 47, offset: 5936},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 186, col: 1, offset: 6003},
			expr: &actionExpr{
				pos: position{line: 186, col: 34, offset: 6036},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 186, col: 34, offset: 6036},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 186, col: 34, offset: 6036},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 186, col: 38, offset: 6040},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 44, offset: 6046},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 186, col: 67, offset: 6069},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 193, col: 1, offset: 6257},
			expr: &actionExpr{
				pos: position{line: 193, col: 22, offset: 6278},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 193, col: 22, offset: 6278},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 193, col: 22, offset: 6278},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 193, col: 28, offset: 6284},
								expr: &ruleRefExpr{
									pos:  position{line: 193, col: 29, offset: 6285},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 193, col: 48, offset: 6304},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 48, offset: 6304},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 197, col: 1, offset: 6386},
			expr: &actionExpr{
				pos: position{line: 197, col: 21, offset: 6406},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 197, col: 21, offset: 6406},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 197, col: 21, offset: 6406},
							expr: &choiceExpr{
								pos: position{line: 197, col: 23, offset: 6408},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 197, col: 23, offset: 6408},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 197, col: 29, offset: 6414},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 197, col: 35, offset: 6420},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 198, col: 5, offset: 6496},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 198, col: 11, offset: 6502},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 198, col: 11, offset: 6502},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6523},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6547},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6570},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6598},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6626},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6653},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6680},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6717},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6745},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 212, col: 1, offset: 6928},
			expr: &choiceExpr{
				pos: position{line: 212, col: 24, offset: 6951},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 24, offset: 6951},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 42, offset: 6969},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 214, col: 1, offset: 6986},
			expr: &choiceExpr{
				pos: position{line: 214, col: 14, offset: 6999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 214, col: 14, offset: 6999},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 214, col: 14, offset: 6999},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 214, col: 14, offset: 6999},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 214, col: 19, offset: 7004},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 23, offset: 7008},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 214, col: 27, offset: 7012},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 214, col: 32, offset: 7017},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 32, offset: 7017},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 214, col: 36, offset: 7021},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 7074},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 216, col: 5, offset: 7074},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 216, col: 5, offset: 7074},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 216, col: 10, offset: 7079},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 216, col: 14, offset: 7083},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 216, col: 18, offset: 7087},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 216, col: 23, offset: 7092},
									expr: &ruleRefExpr{
										pos:  position{line: 216, col: 23, offset: 7092},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 216, col: 27, offset: 7096},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 220, col: 1, offset: 7148},
			expr: &actionExpr{
				pos: position{line: 220, col: 20, offset: 7167},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 220, col: 20, offset: 7167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 20, offset: 7167},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 220, col: 25, offset: 7172},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 29, offset: 7176},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 33, offset: 7180},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 220, col: 38, offset: 7185},
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 38, offset: 7185},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 226, col: 1, offset: 7459},
			expr: &actionExpr{
				pos: position{line: 226, col: 17, offset: 7475},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 226, col: 17, offset: 7475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 17, offset: 7475},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 226, col: 21, offset: 7479},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 226, col: 28, offset: 7486},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 226, col: 28, offset: 7486},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 226, col: 28, offset: 7486},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 226, col: 38, offset: 7496},
											expr: &choiceExpr{
												pos: position{line: 226, col: 39, offset: 7497},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 226, col: 39, offset: 7497},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 226, col: 51, offset: 7509},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 226, col: 61, offset: 7519},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 226, col: 61, offset: 7519},
																expr: &ruleRefExpr{
																	pos:  position{line: 226, col: 62, offset: 7520},
																	name: "Newline",
																},
															},
															&anyMatcher{
																line: 226, col: 70, offset: 7528,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 4, offset: 7569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 234, col: 1, offset: 7721},
			expr: &actionExpr{
				pos: position{line: 234, col: 16, offset: 7736},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 234, col: 16, offset: 7736},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 16, offset: 7736},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 234, col: 21, offset: 7741},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 234, col: 27, offset: 7747},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 234, col: 27, offset: 7747},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 234, col: 27, offset: 7747},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 234, col: 37, offset: 7757},
											expr: &choiceExpr{
												pos: position{line: 234, col: 38, offset: 7758},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 234, col: 38, offset: 7758},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 234, col: 50, offset: 7770},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 234, col: 60, offset: 7780},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 234, col: 60, offset: 7780},
																expr: &ruleRefExpr{
																	pos:  position{line: 234, col: 61, offset: 7781},
																	name: "Newline",
																},
															},
															&notExpr{
																pos: position{line: 234, col: 69, offset: 7789},
																expr: &litMatcher{
																	pos:        position{line: 234, col: 70, offset: 7790},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 234, col: 74, offset: 7794,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 236, col: 4, offset: 7835},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 8, offset: 7839},
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 8, offset: 7839},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 12, offset: 7843},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 240, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 240, col: 21, offset: 7919},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 240, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 240, col: 21, offset: 7919},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 240, col: 33, offset: 7931},
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 33, offset: 7931},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 37, offset: 7935},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 245, col: 1, offset: 8067},
			expr: &actionExpr{
				pos: position{line: 245, col: 30, offset: 8096},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 245, col: 30, offset: 8096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 30, offset: 8096},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 245, col: 34, offset: 8100},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 37, offset: 8103},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 53, offset: 8119},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 57, offset: 8123},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 57, offset: 8123},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 61, offset: 8127},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 250, col: 1, offset: 8282},
			expr: &actionExpr{
				pos: position{line: 250, col: 21, offset: 8302},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 250, col: 21, offset: 8302},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 21, offset: 8302},
							val:        "[source",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8317},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 251, col: 14, offset: 8326},
								expr: &actionExpr{
									pos: position{line: 251, col: 15, offset: 8327},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 251, col: 15, offset: 8327},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 251, col: 15, offset: 8327},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 251, col: 19, offset: 8331},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 251, col: 24, offset: 8336},
													expr: &ruleRefExpr{
														pos:  position{line: 251, col: 25, offset: 8337},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 252, col: 5, offset: 8392},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 252, col: 12, offset: 8399},
								expr: &actionExpr{
									pos: position{line: 252, col: 13, offset: 8400},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 252, col: 13, offset: 8400},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 252, col: 13, offset: 8400},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 252, col: 17, offset: 8404},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 252, col: 22, offset: 8409},
													expr: &ruleRefExpr{
														pos:  position{line: 252, col: 23, offset: 8410},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 253, col: 5, offset: 8457},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 9, offset: 8461},
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 9, offset: 8461},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 13, offset: 8465},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 258, col: 1, offset: 8616},
			expr: &actionExpr{
				pos: position{line: 258, col: 19, offset: 8634},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 258, col: 19, offset: 8634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 19, offset: 8634},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 258, col: 23, offset: 8638},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 258, col: 34, offset: 8649},
								expr: &ruleRefExpr{
									pos:  position{line: 258, col: 35, offset: 8650},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 54, offset: 8669},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 58, offset: 8673},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 58, offset: 8673},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 62, offset: 8677},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 262, col: 1, offset: 8749},
			expr: &choiceExpr{
				pos: position{line: 262, col: 21, offset: 8769},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 262, col: 21, offset: 8769},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 49, offset: 8797},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 264, col: 1, offset: 8827},
			expr: &actionExpr{
				pos: position{line: 264, col: 30, offset: 8856},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 264, col: 30, offset: 8856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 264, col: 30, offset: 8856},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 35, offset: 8861},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 264, col: 49, offset: 8875},
							val:        "=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 264, col: 53, offset: 8879},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 59, offset: 8885},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 60, offset: 8886},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 264, col: 77, offset: 8903},
							expr: &litMatcher{
								pos:        position{line: 264, col: 77, offset: 8903},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 82, offset: 8908},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 82, offset: 8908},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 268, col: 1, offset: 9004},
			expr: &actionExpr{
				pos: position{line: 268, col: 33, offset: 9036},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 268, col: 33, offset: 9036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 268, col: 33, offset: 9036},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 38, offset: 9041},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 268, col: 52, offset: 9055},
							expr: &litMatcher{
								pos:        position{line: 268, col: 52, offset: 9055},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 57, offset: 9060},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 57, offset: 9060},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 272, col: 1, offset: 9145},
			expr: &actionExpr{
				pos: position{line: 272, col: 17, offset: 9161},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 272, col: 17, offset: 9161},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 272, col: 17, offset: 9161},
							expr: &litMatcher{
								pos:        position{line: 272, col: 18, offset: 9162},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 272, col: 26, offset: 9170},
							expr: &litMatcher{
								pos:        position{line: 272, col: 27, offset: 9171},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 272, col: 35, offset: 9179},
							expr: &litMatcher{
								pos:        position{line: 272, col: 36, offset: 9180},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 272, col: 46, offset: 9190},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 47, offset: 9191},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 54, offset: 9198},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 272, col: 58, offset: 9202},
								expr: &choiceExpr{
									pos: position{line: 272, col: 59, offset: 9203},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 272, col: 59, offset: 9203},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 272, col: 71, offset: 9215},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 272, col: 92, offset: 9236},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 92, offset: 9236},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 276, col: 1, offset: 9276},
			expr: &actionExpr{
				pos: position{line: 276, col: 19, offset: 9294},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 276, col: 19, offset: 9294},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 276, col: 25, offset: 9300},
						expr: &choiceExpr{
							pos: position{line: 276, col: 26, offset: 9301},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 276, col: 26, offset: 9301},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 38, offset: 9313},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 47, offset: 9322},
									name: "OtherAttributeChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 280, col: 1, offset: 9380},
			expr: &actionExpr{
				pos: position{line: 280, col: 29, offset: 9408},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 280, col: 29, offset: 9408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 29, offset: 9408},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 280, col: 35, offset: 9414},
								expr: &choiceExpr{
									pos: position{line: 280, col: 36, offset: 9415},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 280, col: 36, offset: 9415},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 280, col: 48, offset: 9427},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 280, col: 57, offset: 9436},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 280, col: 78, offset: 9457},
							expr: &litMatcher{
								pos:        position{line: 280, col: 79, offset: 9458},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 284, col: 1, offset: 9624},
			expr: &seqExpr{
				pos: position{line: 284, col: 24, offset: 9647},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 284, col: 24, offset: 9647},
						expr: &ruleRefExpr{
							pos:  position{line: 284, col: 25, offset: 9648},
							name: "Newline",
						},
					},
					&notExpr{
						pos: position{line: 284, col: 33, offset: 9656},
						expr: &litMatcher{
							pos:        position{line: 284, col: 34, offset: 9657},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 284, col: 38, offset: 9661},
						expr: &litMatcher{
							pos:        position{line: 284, col: 39, offset: 9662},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 284, col: 43, offset: 9666},
						expr: &litMatcher{
							pos:        position{line: 284, col: 44, offset: 9667},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 284, col: 48, offset: 9671,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 286, col: 1, offset: 9675},
			expr: &actionExpr{
				pos: position{line: 286, col: 21, offset: 9695},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 286, col: 21, offset: 9695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 21, offset: 9695},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 36, offset: 9710},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 36, offset: 9710},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 40, offset: 9714},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 290, col: 1, offset: 9787},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 9806},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 9806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 20, offset: 9806},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 29, offset: 9815},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 29, offset: 9815},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 33, offset: 9819},
							expr: &litMatcher{
								pos:        position{line: 290, col: 33, offset: 9819},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 38, offset: 9824},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 45, offset: 9831},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 46, offset: 9832},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 63, offset: 9849},
							expr: &litMatcher{
								pos:        position{line: 290, col: 63, offset: 9849},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 68, offset: 9854},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 74, offset: 9860},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 75, offset: 9861},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 92, offset: 9878},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 96, offset: 9882},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 96, offset: 9882},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 100, offset: 9886},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 294, col: 1, offset: 9955},
			expr: &actionExpr{
				pos: position{line: 294, col: 20, offset: 9974},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 294, col: 20, offset: 9974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 294, col: 20, offset: 9974},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 29, offset: 9983},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 29, offset: 9983},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 294, col: 33, offset: 9987},
							expr: &litMatcher{
								pos:        position{line: 294, col: 33, offset: 9987},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 38, offset: 9992},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 294, col: 45, offset: 9999},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 46, offset: 10000},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 294, col: 63, offset: 10017},
							expr: &litMatcher{
								pos:        position{line: 294, col: 63, offset: 10017},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 68, offset: 10022},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 294, col: 74, offset: 10028},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 75, offset: 10029},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 92, offset: 10046},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 96, offset: 10050},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 96, offset: 10050},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 100, offset: 10054},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 298, col: 1, offset: 10141},
			expr: &actionExpr{
				pos: position{line: 298, col: 19, offset: 10159},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 298, col: 19, offset: 10159},
					expr: &choiceExpr{
						pos: position{line: 298, col: 20, offset: 10160},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 298, col: 20, offset: 10160},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 298, col: 32, offset: 10172},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 298, col: 42, offset: 10182},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 298, col: 42, offset: 10182},
										expr: &litMatcher{
											pos:        position{line: 298, col: 43, offset: 10183},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 298, col: 47, offset: 10187},
										expr: &litMatcher{
											pos:        position{line: 298, col: 48, offset: 10188},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 298, col: 52, offset: 10192},
										expr: &ruleRefExpr{
											pos:  position{line: 298, col: 53, offset: 10193},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 298, col: 57, offset: 10197,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 302, col: 1, offset: 10238},
			expr: &actionExpr{
				pos: position{line: 302, col: 21, offset: 10258},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 302, col: 21, offset: 10258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 21, offset: 10258},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 302, col: 25, offset: 10262},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 302, col: 31, offset: 10268},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 32, offset: 10269},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 51, offset: 10288},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 309, col: 1, offset: 10462},
			expr: &actionExpr{
				pos: position{line: 309, col: 12, offset: 10473},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 309, col: 12, offset: 10473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 309, col: 12, offset: 10473},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 23, offset: 10484},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 24, offset: 10485},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 5, offset: 10509},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 310, col: 12, offset: 10516},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 310, col: 12, offset: 10516},
									expr: &litMatcher{
										pos:        position{line: 310, col: 13, offset: 10517},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 314, col: 5, offset: 10608},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 318, col: 5, offset: 10760},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 5, offset: 10760},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 9, offset: 10764},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 16, offset: 10771},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 31, offset: 10786},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 318, col: 35, offset: 10790},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 35, offset: 10790},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 53, offset: 10808},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 322, col: 1, offset: 10914},
			expr: &actionExpr{
				pos: position{line: 322, col: 18, offset: 10931},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 18, offset: 10931},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 322, col: 27, offset: 10940},
						expr: &seqExpr{
							pos: position{line: 322, col: 28, offset: 10941},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 322, col: 28, offset: 10941},
									expr: &ruleRefExpr{
										pos:  position{line: 322, col: 29, offset: 10942},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 322, col: 37, offset: 10950},
									expr: &ruleRefExpr{
										pos:  position{line: 322, col: 38, offset: 10951},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 322, col: 54, offset: 10967},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 326, col: 1, offset: 11088},
			expr: &actionExpr{
				pos: position{line: 326, col: 17, offset: 11104},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 17, offset: 11104},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 326, col: 26, offset: 11113},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 26, offset: 11113},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11134},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11152},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 329, col: 11, offset: 11177},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 330, col: 11, offset: 11199},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 11, offset: 11222},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 11, offset: 11237},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 333, col: 11, offset: 11262},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 334, col: 11, offset: 11283},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 335, col: 11, offset: 11323},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 336, col: 11, offset: 11343},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 11365},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 338, col: 11, offset: 11384},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 345, col: 1, offset: 11536},
			expr: &seqExpr{
				pos: position{line: 345, col: 31, offset: 11566},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 345, col: 31, offset: 11566},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 41, offset: 11576},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 350, col: 1, offset: 11687},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11705},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 350, col: 19, offset: 11705},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 350, col: 19, offset: 11705},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 25, offset: 11711},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 40, offset: 11726},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 350, col: 45, offset: 11731},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 52, offset: 11738},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 68, offset: 11754},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 75, offset: 11761},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 354, col: 1, offset: 11902},
			expr: &actionExpr{
				pos: position{line: 354, col: 20, offset: 11921},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 354, col: 20, offset: 11921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 354, col: 20, offset: 11921},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 26, offset: 11927},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 41, offset: 11942},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 45, offset: 11946},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 52, offset: 11953},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 68, offset: 11969},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 75, offset: 11976},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 358, col: 1, offset: 12118},
			expr: &actionExpr{
				pos: position{line: 358, col: 18, offset: 12135},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 358, col: 18, offset: 12135},
					expr: &choiceExpr{
						pos: position{line: 358, col: 19, offset: 12136},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 358, col: 19, offset: 12136},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 358, col: 33, offset: 12150},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 358, col: 39, offset: 12156},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 362, col: 1, offset: 12198},
			expr: &actionExpr{
				pos: position{line: 362, col: 19, offset: 12216},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 362, col: 19, offset: 12216},
					expr: &choiceExpr{
						pos: position{line: 362, col: 20, offset: 12217},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 362, col: 20, offset: 12217},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 362, col: 33, offset: 12230},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 362, col: 33, offset: 12230},
										expr: &ruleRefExpr{
											pos:  position{line: 362, col: 34, offset: 12231},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 362, col: 37, offset: 12234},
										expr: &litMatcher{
											pos:        position{line: 362, col: 38, offset: 12235},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 362, col: 42, offset: 12239},
										expr: &litMatcher{
											pos:        position{line: 362, col: 43, offset: 12240},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 362, col: 47, offset: 12244},
										expr: &ruleRefExpr{
											pos:  position{line: 362, col: 48, offset: 12245},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 362, col: 52, offset: 12249,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 366, col: 1, offset: 12290},
			expr: &actionExpr{
				pos: position{line: 366, col: 24, offset: 12313},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 366, col: 24, offset: 12313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 24, offset: 12313},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 366, col: 28, offset: 12317},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 366, col: 34, offset: 12323},
								expr: &ruleRefExpr{
									pos:  position{line: 366, col: 35, offset: 12324},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 366, col: 54, offset: 12343},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 373, col: 1, offset: 12523},
			expr: &actionExpr{
				pos: position{line: 373, col: 18, offset: 12540},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 373, col: 18, offset: 12540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 18, offset: 12540},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 373, col: 24, offset: 12546},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 373, col: 24, offset: 12546},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 373, col: 24, offset: 12546},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 373, col: 36, offset: 12558},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 373, col: 42, offset: 12564},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 373, col: 56, offset: 12578},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 373, col: 74, offset: 12596},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 375, col: 8, offset: 12750},
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 8, offset: 12750},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 375, col: 12, offset: 12754},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 379, col: 1, offset: 12806},
			expr: &actionExpr{
				pos: position{line: 379, col: 26, offset: 12831},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 379, col: 26, offset: 12831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 26, offset: 12831},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 379, col: 30, offset: 12835},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 379, col: 36, offset: 12841},
								expr: &choiceExpr{
									pos: position{line: 379, col: 37, offset: 12842},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 379, col: 37, offset: 12842},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 379, col: 59, offset: 12864},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 379, col: 80, offset: 12885},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 379, col: 99, offset: 12904},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 383, col: 1, offset: 12974},
			expr: &actionExpr{
				pos: position{line: 383, col: 24, offset: 12997},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 383, col: 24, offset: 12997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 24, offset: 12997},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 383, col: 33, offset: 13006},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 40, offset: 13013},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 383, col: 66, offset: 13039},
							expr: &litMatcher{
								pos:        position{line: 383, col: 66, offset: 13039},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 387, col: 1, offset: 13098},
			expr: &actionExpr{
				pos: position{line: 387, col: 29, offset: 13126},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 387, col: 29, offset: 13126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 29, offset: 13126},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 387, col: 36, offset: 13133},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 36, offset: 13133},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 388, col: 11, offset: 13250},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 389, col: 11, offset: 13286},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 390, col: 11, offset: 13312},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 391, col: 11, offset: 13344},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 11, offset: 13376},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 393, col: 11, offset: 13403},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 393, col: 31, offset: 13423},
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 31, offset: 13423},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 393, col: 36, offset: 13428},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 393, col: 36, offset: 13428},
									expr: &litMatcher{
										pos:        position{line: 393, col: 37, offset: 13429},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 393, col: 43, offset: 13435},
									expr: &litMatcher{
										pos:        position{line: 393, col: 44, offset: 13436},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 397, col: 1, offset: 13468},
			expr: &actionExpr{
				pos: position{line: 397, col: 23, offset: 13490},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 397, col: 23, offset: 13490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 397, col: 23, offset: 13490},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 397, col: 30, offset: 13497},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 397, col: 30, offset: 13497},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 47, offset: 13514},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 5, offset: 13536},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 398, col: 12, offset: 13543},
								expr: &actionExpr{
									pos: position{line: 398, col: 13, offset: 13544},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 398, col: 13, offset: 13544},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 398, col: 13, offset: 13544},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 398, col: 17, offset: 13548},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 398, col: 24, offset: 13555},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 398, col: 24, offset: 13555},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 398, col: 41, offset: 13572},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 404, col: 1, offset: 13710},
			expr: &actionExpr{
				pos: position{line: 404, col: 29, offset: 13738},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 404, col: 29, offset: 13738},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 29, offset: 13738},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 404, col: 34, offset: 13743},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 404, col: 41, offset: 13750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 404, col: 41, offset: 13750},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 404, col: 58, offset: 13767},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 5, offset: 13789},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 405, col: 12, offset: 13796},
								expr: &actionExpr{
									pos: position{line: 405, col: 13, offset: 13797},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 405, col: 13, offset: 13797},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 405, col: 13, offset: 13797},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 405, col: 17, offset: 13801},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 405, col: 24, offset: 13808},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 405, col: 24, offset: 13808},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 405, col: 41, offset: 13825},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 9, offset: 13878},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 411, col: 1, offset: 13968},
			expr: &actionExpr{
				pos: position{line: 411, col: 19, offset: 13986},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 19, offset: 13986},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 411, col: 19, offset: 13986},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 26, offset: 13993},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 34, offset: 14001},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 39, offset: 14006},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 44, offset: 14011},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 415, col: 1, offset: 14099},
			expr: &actionExpr{
				pos: position{line: 415, col: 25, offset: 14123},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 415, col: 25, offset: 14123},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 25, offset: 14123},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 415, col: 30, offset: 14128},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 37, offset: 14135},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 45, offset: 14143},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 415, col: 50, offset: 14148},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 55, offset: 14153},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 63, offset: 14161},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 419, col: 1, offset: 14246},
			expr: &actionExpr{
				pos: position{line: 419, col: 20, offset: 14265},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 419, col: 20, offset: 14265},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 419, col: 32, offset: 14277},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 423, col: 1, offset: 14372},
			expr: &actionExpr{
				pos: position{line: 423, col: 26, offset: 14397},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 423, col: 26, offset: 14397},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 423, col: 26, offset: 14397},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 423, col: 31, offset: 14402},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 43, offset: 14414},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 51, offset: 14422},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 427, col: 1, offset: 14514},
			expr: &actionExpr{
				pos: position{line: 427, col: 23, offset: 14536},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 427, col: 23, offset: 14536},
					expr: &seqExpr{
						pos: position{line: 427, col: 24, offset: 14537},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 427, col: 24, offset: 14537},
								expr: &litMatcher{
									pos:        position{line: 427, col: 25, offset: 14538},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 427, col: 29, offset: 14542},
								expr: &litMatcher{
									pos:        position{line: 427, col: 30, offset: 14543},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 427, col: 34, offset: 14547},
								expr: &ruleRefExpr{
									pos:  position{line: 427, col: 35, offset: 14548},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 427, col: 38, offset: 14551,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 431, col: 1, offset: 14591},
			expr: &actionExpr{
				pos: position{line: 431, col: 23, offset: 14613},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 431, col: 23, offset: 14613},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 431, col: 24, offset: 14614},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 431, col: 24, offset: 14614},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 431, col: 34, offset: 14624},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 42, offset: 14632},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 48, offset: 14638},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 431, col: 73, offset: 14663},
							expr: &litMatcher{
								pos:        position{line: 431, col: 73, offset: 14663},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 435, col: 1, offset: 14812},
			expr: &actionExpr{
				pos: position{line: 435, col: 28, offset: 14839},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 435, col: 28, offset: 14839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 435, col: 28, offset: 14839},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 35, offset: 14846},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 435, col: 54, offset: 14865},
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 54, offset: 14865},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 435, col: 59, offset: 14870},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 435, col: 59, offset: 14870},
									expr: &litMatcher{
										pos:        position{line: 435, col: 60, offset: 14871},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 435, col: 66, offset: 14877},
									expr: &litMatcher{
										pos:        position{line: 435, col: 67, offset: 14878},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 439, col: 1, offset: 14910},
			expr: &actionExpr{
				pos: position{line: 439, col: 22, offset: 14931},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 439, col: 22, offset: 14931},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 22, offset: 14931},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 29, offset: 14938},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 14952},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 12, offset: 14959},
								expr: &actionExpr{
									pos: position{line: 440, col: 13, offset: 14960},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 440, col: 13, offset: 14960},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 440, col: 13, offset: 14960},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 440, col: 17, offset: 14964},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 24, offset: 14971},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 446, col: 1, offset: 15102},
			expr: &choiceExpr{
				pos: position{line: 446, col: 13, offset: 15114},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 446, col: 13, offset: 15114},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 446, col: 13, offset: 15114},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 446, col: 18, offset: 15119},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 446, col: 18, offset: 15119},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 446, col: 30, offset: 15131},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 448, col: 5, offset: 15199},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 448, col: 5, offset: 15199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 448, col: 5, offset: 15199},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 448, col: 9, offset: 15203},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 448, col: 14, offset: 15208},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 448, col: 14, offset: 15208},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 26, offset: 15220},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 452, col: 1, offset: 15288},
			expr: &actionExpr{
				pos: position{line: 452, col: 16, offset: 15303},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 452, col: 16, offset: 15303},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 452, col: 16, offset: 15303},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 452, col: 23, offset: 15310},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 452, col: 23, offset: 15310},
									expr: &litMatcher{
										pos:        position{line: 452, col: 24, offset: 15311},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 455, col: 5, offset: 15365},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 463, col: 1, offset: 15607},
			expr: &zeroOrMoreExpr{
				pos: position{line: 463, col: 24, offset: 15630},
				expr: &choiceExpr{
					pos: position{line: 463, col: 25, offset: 15631},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 463, col: 25, offset: 15631},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 41, offset: 15647},
							name: "VerbatimLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 465, col: 1, offset: 15663},
			expr: &actionExpr{
				pos: position{line: 465, col: 17, offset: 15679},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 465, col: 17, offset: 15679},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 465, col: 17, offset: 15679},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 18, offset: 15680},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 22, offset: 15684},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 465, col: 31, offset: 15693},
								run: (*parser).callonVerbatimLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 465, col: 31, offset: 15693},
									expr: &choiceExpr{
										pos: position{line: 465, col: 32, offset: 15694},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 465, col: 32, offset: 15694},
												name: "AlphanumsAndSpaces",
											},
											&seqExpr{
												pos: position{line: 465, col: 53, offset: 15715},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 465, col: 53, offset: 15715},
														expr: &ruleRefExpr{
															pos:  position{line: 465, col: 54, offset: 15716},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 465, col: 58, offset: 15720,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 12, offset: 15777},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 474, col: 1, offset: 15972},
			expr: &actionExpr{
				pos: position{line: 474, col: 21, offset: 15992},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 474, col: 21, offset: 15992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 21, offset: 15992},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 29, offset: 16000},
								expr: &choiceExpr{
									pos: position{line: 474, col: 30, offset: 16001},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 474, col: 30, offset: 16001},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 474, col: 53, offset: 16024},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 474, col: 74, offset: 16045},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 474, col: 74, offset: 16045,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 107, offset: 16078},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 478, col: 1, offset: 16149},
			expr: &actionExpr{
				pos: position{line: 478, col: 25, offset: 16173},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 478, col: 25, offset: 16173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 478, col: 25, offset: 16173},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 478, col: 33, offset: 16181},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 478, col: 38, offset: 16186},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 478, col: 38, offset: 16186},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 478, col: 78, offset: 16226},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 482, col: 1, offset: 16291},
			expr: &actionExpr{
				pos: position{line: 482, col: 23, offset: 16313},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 482, col: 23, offset: 16313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 23, offset: 16313},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 31, offset: 16321},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 482, col: 36, offset: 16326},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 36, offset: 16326},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 76, offset: 16366},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 489, col: 1, offset: 16530},
			expr: &oneOrMoreExpr{
				pos: position{line: 489, col: 14, offset: 16543},
				expr: &ruleRefExpr{
					pos:  position{line: 489, col: 14, offset: 16543},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 491, col: 1, offset: 16554},
			expr: &choiceExpr{
				pos: position{line: 491, col: 13, offset: 16566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 13, offset: 16566},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 31, offset: 16584},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 51, offset: 16604},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 69, offset: 16622},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 493, col: 1, offset: 16648},
			expr: &choiceExpr{
				pos: position{line: 493, col: 18, offset: 16665},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 493, col: 18, offset: 16665},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 493, col: 18, offset: 16665},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 27, offset: 16674},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 495, col: 9, offset: 16731},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 495, col: 9, offset: 16731},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 495, col: 15, offset: 16737},
								expr: &ruleRefExpr{
									pos:  position{line: 495, col: 16, offset: 16738},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 499, col: 1, offset: 16830},
			expr: &actionExpr{
				pos: position{line: 499, col: 22, offset: 16851},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 499, col: 22, offset: 16851},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 499, col: 22, offset: 16851},
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 23, offset: 16852},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 500, col: 5, offset: 16860},
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 6, offset: 16861},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 501, col: 5, offset: 16876},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 6, offset: 16877},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 502, col: 5, offset: 16899},
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 6, offset: 16900},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 503, col: 5, offset: 16926},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 6, offset: 16927},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 504, col: 5, offset: 16955},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 6, offset: 16956},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 505, col: 5, offset: 16981},
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 6, offset: 16982},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 506, col: 5, offset: 17003},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 6, offset: 17004},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 17023},
							expr: &seqExpr{
								pos: position{line: 507, col: 7, offset: 17025},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 507, col: 7, offset: 17025},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 507, col: 33, offset: 17051},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 5, offset: 17082},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 509, col: 9, offset: 17097},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 509, col: 9, offset: 17097},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 509, col: 9, offset: 17097},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 509, col: 18, offset: 17106},
												expr: &ruleRefExpr{
													pos:  position{line: 509, col: 19, offset: 17107},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 509, col: 35, offset: 17123},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 509, col: 45, offset: 17133},
												expr: &ruleRefExpr{
													pos:  position{line: 509, col: 46, offset: 17134},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 511, col: 12, offset: 17286},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 515, col: 1, offset: 17333},
			expr: &seqExpr{
				pos: position{line: 515, col: 25, offset: 17357},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 515, col: 25, offset: 17357},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 515, col: 29, offset: 17361},
						expr: &ruleRefExpr{
							pos:  position{line: 515, col: 29, offset: 17361},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 515, col: 33, offset: 17365},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 517, col: 1, offset: 17371},
			expr: &actionExpr{
				pos: position{line: 517, col: 29, offset: 17399},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 517, col: 29, offset: 17399},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 517, col: 29, offset: 17399},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 517, col: 41, offset: 17411},
								expr: &ruleRefExpr{
									pos:  position{line: 517, col: 41, offset: 17411},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 53, offset: 17423},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 74, offset: 17444},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 82, offset: 17452},
								name: "ContinuedListItemBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemBlock",
			pos:  position{line: 521, col: 1, offset: 17590},
			expr: &actionExpr{
				pos: position{line: 521, col: 27, offset: 17616},
				run: (*parser).callonContinuedListItemBlock1,
				expr: &seqExpr{
					pos: position{line: 521, col: 27, offset: 17616},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 521, col: 27, offset: 17616},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 28, offset: 17617},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 5, offset: 17626},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 522, col: 12, offset: 17633},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 522, col: 12, offset: 17633},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 11, offset: 17658},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 524, col: 11, offset: 17682},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 11, offset: 17736},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 526, col: 11, offset: 17758},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 17777},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17828},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 11, offset: 17852},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17892},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17926},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17963},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17988},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 540, col: 1, offset: 18149},
			expr: &actionExpr{
				pos: position{line: 540, col: 20, offset: 18168},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 540, col: 20, offset: 18168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 20, offset: 18168},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 540, col: 31, offset: 18179},
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 32, offset: 18180},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 52, offset: 18200},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 60, offset: 18208},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 83, offset: 18231},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 92, offset: 18240},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 544, col: 1, offset: 18380},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 18410},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 18410},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 5, offset: 18410},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 5, offset: 18410},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 9, offset: 18414},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 547, col: 9, offset: 18477},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 547, col: 9, offset: 18477},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 547, col: 9, offset: 18477},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 547, col: 9, offset: 18477},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 547, col: 16, offset: 18484},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 547, col: 16, offset: 18484},
															expr: &litMatcher{
																pos:        position{line: 547, col: 17, offset: 18485},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 551, col: 9, offset: 18585},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 570, col: 11, offset: 19302},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 570, col: 11, offset: 19302},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 570, col: 11, offset: 19302},
													expr: &charClassMatcher{
														pos:        position{line: 570, col: 12, offset: 19303},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 570, col: 20, offset: 19311},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 572, col: 13, offset: 19422},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 572, col: 13, offset: 19422},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 572, col: 14, offset: 19423},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 572, col: 21, offset: 19430},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 574, col: 13, offset: 19544},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 574, col: 13, offset: 19544},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 574, col: 14, offset: 19545},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 574, col: 21, offset: 19552},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 576, col: 13, offset: 19666},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 576, col: 13, offset: 19666},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 576, col: 13, offset: 19666},
													expr: &charClassMatcher{
														pos:        position{line: 576, col: 14, offset: 19667},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 576, col: 22, offset: 19675},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 578, col: 13, offset: 19789},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 578, col: 13, offset: 19789},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 578, col: 13, offset: 19789},
													expr: &charClassMatcher{
														pos:        position{line: 578, col: 14, offset: 19790},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 578, col: 22, offset: 19798},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 580, col: 12, offset: 19911},
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 12, offset: 19911},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 584, col: 1, offset: 19943},
			expr: &actionExpr{
				pos: position{line: 584, col: 27, offset: 19969},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 584, col: 27, offset: 19969},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 584, col: 37, offset: 19979},
						expr: &ruleRefExpr{
							pos:  position{line: 584, col: 37, offset: 19979},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 591, col: 1, offset: 20179},
			expr: &actionExpr{
				pos: position{line: 591, col: 22, offset: 20200},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 591, col: 22, offset: 20200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 591, col: 22, offset: 20200},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 33, offset: 20211},
								expr: &ruleRefExpr{
									pos:  position{line: 591, col: 34, offset: 20212},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 54, offset: 20232},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 62, offset: 20240},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 87, offset: 20265},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 98, offset: 20276},
								expr: &ruleRefExpr{
									pos:  position{line: 591, col: 99, offset: 20277},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 129, offset: 20307},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 138, offset: 20316},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 595, col: 1, offset: 20474},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 20506},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 20506},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 596, col: 5, offset: 20506},
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 5, offset: 20506},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 9, offset: 20510},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 596, col: 17, offset: 20518},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 598, col: 9, offset: 20575},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 598, col: 9, offset: 20575},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 598, col: 9, offset: 20575},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 598, col: 16, offset: 20582},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 598, col: 16, offset: 20582},
															expr: &litMatcher{
																pos:        position{line: 598, col: 17, offset: 20583},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 602, col: 9, offset: 20683},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 619, col: 14, offset: 21390},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 619, col: 21, offset: 21397},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 619, col: 22, offset: 21398},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 621, col: 13, offset: 21484},
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 13, offset: 21484},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 625, col: 1, offset: 21517},
			expr: &actionExpr{
				pos: position{line: 625, col: 32, offset: 21548},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 625, col: 32, offset: 21548},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 625, col: 32, offset: 21548},
							expr: &litMatcher{
								pos:        position{line: 625, col: 33, offset: 21549},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 625, col: 37, offset: 21553},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 626, col: 7, offset: 21567},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 626, col: 7, offset: 21567},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 626, col: 7, offset: 21567},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 627, col: 7, offset: 21612},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 627, col: 7, offset: 21612},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 628, col: 7, offset: 21655},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 628, col: 7, offset: 21655},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 629, col: 7, offset: 21697},
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 7, offset: 21697},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 633, col: 1, offset: 21736},
			expr: &actionExpr{
				pos: position{line: 633, col: 29, offset: 21764},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 633, col: 29, offset: 21764},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 633, col: 39, offset: 21774},
						expr: &ruleRefExpr{
							pos:  position{line: 633, col: 39, offset: 21774},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 640, col: 1, offset: 22090},
			expr: &actionExpr{
				pos: position{line: 640, col: 20, offset: 22109},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 640, col: 20, offset: 22109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 20, offset: 22109},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 640, col: 31, offset: 22120},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 32, offset: 22121},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 52, offset: 22141},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 58, offset: 22147},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 85, offset: 22174},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 96, offset: 22185},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 122, offset: 22211},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 640, col: 134, offset: 22223},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 135, offset: 22224},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 644, col: 1, offset: 22370},
			expr: &actionExpr{
				pos: position{line: 644, col: 30, offset: 22399},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 30, offset: 22399},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 644, col: 39, offset: 22408},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 644, col: 39, offset: 22408},
							expr: &choiceExpr{
								pos: position{line: 644, col: 40, offset: 22409},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 644, col: 40, offset: 22409},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 644, col: 52, offset: 22421},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 644, col: 62, offset: 22431},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 644, col: 62, offset: 22431},
												expr: &ruleRefExpr{
													pos:  position{line: 644, col: 63, offset: 22432},
													name: "Newline",
												},
											},
											&notExpr{
												pos: position{line: 644, col: 71, offset: 22440},
												expr: &ruleRefExpr{
													pos:  position{line: 644, col: 72, offset: 22441},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 644, col: 97, offset: 22466,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 650, col: 1, offset: 22595},
			expr: &actionExpr{
				pos: position{line: 650, col: 24, offset: 22618},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 650, col: 24, offset: 22618},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 650, col: 33, offset: 22627},
						expr: &seqExpr{
							pos: position{line: 650, col: 34, offset: 22628},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 650, col: 34, offset: 22628},
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 35, offset: 22629},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 650, col: 43, offset: 22637},
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 44, offset: 22638},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 69, offset: 22663},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 654, col: 1, offset: 22798},
			expr: &actionExpr{
				pos: position{line: 654, col: 31, offset: 22828},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 654, col: 31, offset: 22828},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 654, col: 40, offset: 22837},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 654, col: 40, offset: 22837},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 22858},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 656, col: 11, offset: 22876},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 657, col: 11, offset: 22901},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 22930},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 659, col: 11, offset: 22950},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 22972},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 661, col: 11, offset: 22995},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 23010},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 663, col: 11, offset: 23035},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 23056},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 23096},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 23116},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 23138},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 668, col: 11, offset: 23157},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 672, col: 1, offset: 23196},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 23229},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 673, col: 5, offset: 23229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 23229},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 673, col: 16, offset: 23240},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 673, col: 16, offset: 23240},
									expr: &litMatcher{
										pos:        position{line: 673, col: 17, offset: 23241},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 676, col: 5, offset: 23299},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 680, col: 6, offset: 23475},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 680, col: 6, offset: 23475},
									expr: &choiceExpr{
										pos: position{line: 680, col: 7, offset: 23476},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 680, col: 7, offset: 23476},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 680, col: 12, offset: 23481},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 680, col: 24, offset: 23493},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 684, col: 1, offset: 23533},
			expr: &actionExpr{
				pos: position{line: 684, col: 31, offset: 23563},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 684, col: 31, offset: 23563},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 684, col: 40, offset: 23572},
						expr: &ruleRefExpr{
							pos:  position{line: 684, col: 41, offset: 23573},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 691, col: 1, offset: 23764},
			expr: &choiceExpr{
				pos: position{line: 691, col: 19, offset: 23782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 691, col: 19, offset: 23782},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 691, col: 19, offset: 23782},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 693, col: 9, offset: 23828},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 693, col: 9, offset: 23828},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 695, col: 9, offset: 23876},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 695, col: 9, offset: 23876},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 9, offset: 23934},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 697, col: 9, offset: 23934},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 9, offset: 23988},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 699, col: 9, offset: 23988},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 708, col: 1, offset: 24295},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 24342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 24342},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 710, col: 5, offset: 24342},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 710, col: 5, offset: 24342},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 710, col: 16, offset: 24353},
										expr: &ruleRefExpr{
											pos:  position{line: 710, col: 17, offset: 24354},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 710, col: 37, offset: 24374},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 710, col: 40, offset: 24377},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 710, col: 56, offset: 24393},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 710, col: 61, offset: 24398},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 710, col: 67, offset: 24404},
										expr: &ruleRefExpr{
											pos:  position{line: 710, col: 68, offset: 24405},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 24597},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 714, col: 5, offset: 24597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 714, col: 5, offset: 24597},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 714, col: 16, offset: 24608},
										expr: &ruleRefExpr{
											pos:  position{line: 714, col: 17, offset: 24609},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 714, col: 37, offset: 24629},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 714, col: 43, offset: 24635},
										expr: &ruleRefExpr{
											pos:  position{line: 714, col: 44, offset: 24636},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 719, col: 1, offset: 24801},
			expr: &actionExpr{
				pos: position{line: 719, col: 20, offset: 24820},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 719, col: 20, offset: 24820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 20, offset: 24820},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 719, col: 31, offset: 24831},
								expr: &ruleRefExpr{
									pos:  position{line: 719, col: 32, offset: 24832},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 720, col: 5, offset: 24857},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 728, col: 5, offset: 25148},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 16, offset: 25159},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 25182},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 16, offset: 25193},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 17, offset: 25194},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 734, col: 1, offset: 25402},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 25458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 25458},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 25458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 25458},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 736, col: 16, offset: 25469},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 17, offset: 25470},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 37, offset: 25490},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 40, offset: 25493},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 736, col: 56, offset: 25509},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 736, col: 61, offset: 25514},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 68, offset: 25521},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 25721},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 25721},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 740, col: 5, offset: 25721},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 740, col: 16, offset: 25732},
										expr: &ruleRefExpr{
											pos:  position{line: 740, col: 17, offset: 25733},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 740, col: 37, offset: 25753},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 44, offset: 25760},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 744, col: 1, offset: 25861},
			expr: &actionExpr{
				pos: position{line: 744, col: 28, offset: 25888},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 744, col: 28, offset: 25888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 744, col: 28, offset: 25888},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 39, offset: 25899},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 59, offset: 25919},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 744, col: 70, offset: 25930},
								expr: &seqExpr{
									pos: position{line: 744, col: 71, offset: 25931},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 744, col: 71, offset: 25931},
											expr: &ruleRefExpr{
												pos:  position{line: 744, col: 72, offset: 25932},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 744, col: 93, offset: 25953},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 748, col: 1, offset: 26059},
			expr: &actionExpr{
				pos: position{line: 748, col: 23, offset: 26081},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 748, col: 23, offset: 26081},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 748, col: 23, offset: 26081},
							expr: &seqExpr{
								pos: position{line: 748, col: 25, offset: 26083},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 748, col: 25, offset: 26083},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 51, offset: 26109},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 26139},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 749, col: 15, offset: 26149},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 749, col: 15, offset: 26149},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 749, col: 26, offset: 26160},
										expr: &ruleRefExpr{
											pos:  position{line: 749, col: 26, offset: 26160},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 42, offset: 26176},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 749, col: 52, offset: 26186},
								expr: &ruleRefExpr{
									pos:  position{line: 749, col: 53, offset: 26187},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 65, offset: 26199},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 753, col: 1, offset: 26289},
			expr: &actionExpr{
				pos: position{line: 753, col: 23, offset: 26311},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 753, col: 23, offset: 26311},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 753, col: 33, offset: 26321},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 757, col: 1, offset: 26367},
			expr: &choiceExpr{
				pos: position{line: 759, col: 5, offset: 26419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 26419},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 26419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 759, col: 5, offset: 26419},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 759, col: 16, offset: 26430},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 17, offset: 26431},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 760, col: 5, offset: 26455},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 767, col: 5, offset: 26667},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 8, offset: 26670},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 767, col: 24, offset: 26686},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 767, col: 29, offset: 26691},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 767, col: 35, offset: 26697},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 36, offset: 26698},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 26890},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 26890},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 771, col: 5, offset: 26890},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 771, col: 16, offset: 26901},
										expr: &ruleRefExpr{
											pos:  position{line: 771, col: 17, offset: 26902},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 772, col: 5, offset: 26926},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 779, col: 5, offset: 27138},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 779, col: 11, offset: 27144},
										expr: &ruleRefExpr{
											pos:  position{line: 779, col: 12, offset: 27145},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 783, col: 1, offset: 27246},
			expr: &actionExpr{
				pos: position{line: 783, col: 19, offset: 27264},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 783, col: 19, offset: 27264},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 783, col: 19, offset: 27264},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 20, offset: 27265},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 783, col: 24, offset: 27269},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 25, offset: 27270},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 5, offset: 27284},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 784, col: 15, offset: 27294},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 784, col: 15, offset: 27294},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 784, col: 15, offset: 27294},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 784, col: 24, offset: 27303},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 786, col: 9, offset: 27395},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 786, col: 9, offset: 27395},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 786, col: 9, offset: 27395},
													expr: &ruleRefExpr{
														pos:  position{line: 786, col: 10, offset: 27396},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 786, col: 25, offset: 27411},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 786, col: 34, offset: 27420},
														expr: &ruleRefExpr{
															pos:  position{line: 786, col: 35, offset: 27421},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 786, col: 51, offset: 27437},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 786, col: 61, offset: 27447},
														expr: &ruleRefExpr{
															pos:  position{line: 786, col: 62, offset: 27448},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 786, col: 74, offset: 27460},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 792, col: 1, offset: 27596},
			expr: &actionExpr{
				pos: position{line: 792, col: 18, offset: 27613},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 792, col: 18, offset: 27613},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 792, col: 18, offset: 27613},
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 19, offset: 27614},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 792, col: 23, offset: 27618},
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 24, offset: 27619},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 5, offset: 27634},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 793, col: 14, offset: 27643},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 793, col: 14, offset: 27643},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 11, offset: 27664},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 27686},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 27704},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 27727},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 27743},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 27766},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 27792},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 801, col: 11, offset: 27818},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 802, col: 11, offset: 27845},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 803, col: 11, offset: 27886},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 804, col: 11, offset: 27913},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 805, col: 11, offset: 27942},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 11, offset: 27962},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 11, offset: 27984},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 11, offset: 28003},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 816, col: 1, offset: 28263},
			expr: &actionExpr{
				pos: position{line: 816, col: 37, offset: 28299},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 816, col: 37, offset: 28299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 816, col: 37, offset: 28299},
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 38, offset: 28300},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 816, col: 48, offset: 28310},
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 49, offset: 28311},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 64, offset: 28326},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 816, col: 73, offset: 28335},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 74, offset: 28336},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 108, offset: 28370},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 118, offset: 28380},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 119, offset: 28381},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 816, col: 131, offset: 28393},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 820, col: 1, offset: 28484},
			expr: &actionExpr{
				pos: position{line: 820, col: 36, offset: 28519},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 820, col: 36, offset: 28519},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 820, col: 36, offset: 28519},
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 37, offset: 28520},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 820, col: 41, offset: 28524},
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 42, offset: 28525},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 5, offset: 28540},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 821, col: 14, offset: 28549},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 821, col: 14, offset: 28549},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 11, offset: 28570},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 28592},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 824, col: 11, offset: 28610},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 825, col: 11, offset: 28633},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 826, col: 11, offset: 28649},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 827, col: 11, offset: 28672},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 28698},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 28724},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 830, col: 11, offset: 28746},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 28765},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 835, col: 1, offset: 28804},
			expr: &actionExpr{
				pos: position{line: 835, col: 22, offset: 28825},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 835, col: 22, offset: 28825},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 22, offset: 28825},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 835, col: 33, offset: 28836},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 34, offset: 28837},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 54, offset: 28857},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 835, col: 60, offset: 28863},
								expr: &actionExpr{
									pos: position{line: 835, col: 61, offset: 28864},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 835, col: 61, offset: 28864},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 835, col: 61, offset: 28864},
												expr: &ruleRefExpr{
													pos:  position{line: 835, col: 62, offset: 28865},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 835, col: 66, offset: 28869},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 835, col: 72, offset: 28875},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 841, col: 1, offset: 28995},
			expr: &actionExpr{
				pos: position{line: 841, col: 26, offset: 29020},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 841, col: 26, offset: 29020},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 841, col: 26, offset: 29020},
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 27, offset: 29021},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 841, col: 42, offset: 29036},
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 43, offset: 29037},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 841, col: 53, offset: 29047},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 841, col: 62, offset: 29056},
								expr: &ruleRefExpr{
									pos:  position{line: 841, col: 63, offset: 29057},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 841, col: 94, offset: 29088},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 841, col: 104, offset: 29098},
								expr: &ruleRefExpr{
									pos:  position{line: 841, col: 105, offset: 29099},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 117, offset: 29111},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 845, col: 1, offset: 29202},
			expr: &actionExpr{
				pos: position{line: 845, col: 33, offset: 29234},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 845, col: 33, offset: 29234},
					expr: &seqExpr{
						pos: position{line: 845, col: 34, offset: 29235},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 845, col: 34, offset: 29235},
								expr: &ruleRefExpr{
									pos:  position{line: 845, col: 35, offset: 29236},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 845, col: 39, offset: 29240},
								expr: &ruleRefExpr{
									pos:  position{line: 845, col: 40, offset: 29241},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 845, col: 50, offset: 29251,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 852, col: 1, offset: 29475},
			expr: &actionExpr{
				pos: position{line: 852, col: 14, offset: 29488},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 852, col: 14, offset: 29488},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 852, col: 14, offset: 29488},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 852, col: 17, offset: 29491},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 852, col: 21, offset: 29495},
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 21, offset: 29495},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 852, col: 25, offset: 29499},
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 26, offset: 29500},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 859, col: 1, offset: 29784},
			expr: &choiceExpr{
				pos: position{line: 859, col: 15, offset: 29798},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 15, offset: 29798},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 41, offset: 29824},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 65, offset: 29848},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 861, col: 1, offset: 29867},
			expr: &choiceExpr{
				pos: position{line: 861, col: 32, offset: 29898},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 861, col: 32, offset: 29898},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 861, col: 32, offset: 29898},
								val:        "*",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 861, col: 36, offset: 29902},
								expr: &litMatcher{
									pos:        position{line: 861, col: 37, offset: 29903},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 861, col: 43, offset: 29909},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 861, col: 43, offset: 29909},
								val:        "_",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 861, col: 47, offset: 29913},
								expr: &litMatcher{
									pos:        position{line: 861, col: 48, offset: 29914},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 861, col: 54, offset: 29920},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 861, col: 54, offset: 29920},
								val:        "`",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 861, col: 58, offset: 29924},
								expr: &litMatcher{
									pos:        position{line: 861, col: 59, offset: 29925},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 863, col: 1, offset: 29931},
			expr: &choiceExpr{
				pos: position{line: 863, col: 34, offset: 29964},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 863, col: 34, offset: 29964},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 863, col: 41, offset: 29971},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 863, col: 48, offset: 29978},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 863, col: 55, offset: 29985},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 863, col: 61, offset: 29991},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 865, col: 1, offset: 29996},
			expr: &actionExpr{
				pos: position{line: 865, col: 26, offset: 30021},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 865, col: 26, offset: 30021},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 865, col: 26, offset: 30021},
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 27, offset: 30022},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 30, offset: 30025},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 865, col: 36, offset: 30031},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 865, col: 36, offset: 30031},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 866, col: 15, offset: 30066},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 867, col: 15, offset: 30103},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 868, col: 15, offset: 30143},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 869, col: 15, offset: 30172},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 870, col: 15, offset: 30203},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 874, col: 1, offset: 30357},
			expr: &choiceExpr{
				pos: position{line: 874, col: 28, offset: 30384},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 874, col: 28, offset: 30384},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 875, col: 15, offset: 30418},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 15, offset: 30454},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 878, col: 1, offset: 30480},
			expr: &choiceExpr{
				pos: position{line: 878, col: 22, offset: 30501},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 878, col: 22, offset: 30501},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 15, offset: 30532},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 15, offset: 30565},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 15, offset: 30601},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 15, offset: 30637},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 884, col: 1, offset: 30661},
			expr: &choiceExpr{
				pos: position{line: 884, col: 33, offset: 30693},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 884, col: 33, offset: 30693},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 884, col: 39, offset: 30699},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 884, col: 39, offset: 30699},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 888, col: 1, offset: 30832},
			expr: &actionExpr{
				pos: position{line: 888, col: 25, offset: 30856},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 888, col: 25, offset: 30856},
					expr: &litMatcher{
						pos:        position{line: 888, col: 25, offset: 30856},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 892, col: 1, offset: 30897},
			expr: &actionExpr{
				pos: position{line: 892, col: 25, offset: 30921},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 892, col: 25, offset: 30921},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 892, col: 25, offset: 30921},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 892, col: 30, offset: 30926},
							expr: &litMatcher{
								pos:        position{line: 892, col: 30, offset: 30926},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 900, col: 1, offset: 31023},
			expr: &choiceExpr{
				pos: position{line: 900, col: 13, offset: 31035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 900, col: 13, offset: 31035},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 900, col: 35, offset: 31057},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 902, col: 1, offset: 31124},
			expr: &actionExpr{
				pos: position{line: 902, col: 24, offset: 31147},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 902, col: 24, offset: 31147},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 902, col: 24, offset: 31147},
							expr: &litMatcher{
								pos:        position{line: 902, col: 25, offset: 31148},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 902, col: 30, offset: 31153},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 902, col: 35, offset: 31158},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 45, offset: 31168},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 902, col: 74, offset: 31197},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 906, col: 1, offset: 31278},
			expr: &seqExpr{
				pos: position{line: 906, col: 32, offset: 31309},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 906, col: 32, offset: 31309},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 906, col: 59, offset: 31336},
						expr: &seqExpr{
							pos: position{line: 906, col: 60, offset: 31337},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 906, col: 60, offset: 31337},
									expr: &litMatcher{
										pos:        position{line: 906, col: 62, offset: 31339},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 906, col: 69, offset: 31346},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 906, col: 69, offset: 31346},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 906, col: 74, offset: 31351},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 908, col: 1, offset: 31416},
			expr: &actionExpr{
				pos: position{line: 908, col: 31, offset: 31446},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 908, col: 31, offset: 31446},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 908, col: 31, offset: 31446},
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 32, offset: 31447},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 908, col: 40, offset: 31455},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 908, col: 49, offset: 31464},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 908, col: 49, offset: 31464},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 11, offset: 31486},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 31517},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 11, offset: 31539},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 912, col: 11, offset: 31563},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 913, col: 11, offset: 31587},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 31613},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 31636},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 31658},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 31681},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 31721},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 31754},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 31776},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 31795},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 925, col: 1, offset: 31937},
			expr: &actionExpr{
				pos: position{line: 925, col: 27, offset: 31963},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 925, col: 27, offset: 31963},
					exprs: []interface{}{
						&anyMatcher{
							line: 925, col: 28, offset: 31964,
						},
						&zeroOrMoreExpr{
							pos: position{line: 925, col: 31, offset: 31967},
							expr: &seqExpr{
								pos: position{line: 925, col: 32, offset: 31968},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 925, col: 32, offset: 31968},
										expr: &litMatcher{
											pos:        position{line: 925, col: 33, offset: 31969},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 925, col: 38, offset: 31974},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 39, offset: 31975},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 925, col: 42, offset: 31978},
										expr: &litMatcher{
											pos:        position{line: 925, col: 43, offset: 31979},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 925, col: 47, offset: 31983},
										expr: &litMatcher{
											pos:        position{line: 925, col: 48, offset: 31984},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 925, col: 52, offset: 31988},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 53, offset: 31989},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 925, col: 61, offset: 31997},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 62, offset: 31998},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 925, col: 74, offset: 32010,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 929, col: 1, offset: 32070},
			expr: &choiceExpr{
				pos: position{line: 929, col: 24, offset: 32093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 929, col: 24, offset: 32093},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 929, col: 24, offset: 32093},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 929, col: 24, offset: 32093},
									expr: &litMatcher{
										pos:        position{line: 929, col: 25, offset: 32094},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 929, col: 29, offset: 32098},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 929, col: 33, offset: 32102},
									expr: &litMatcher{
										pos:        position{line: 929, col: 34, offset: 32103},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 929, col: 38, offset: 32107},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 48, offset: 32117},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 929, col: 77, offset: 32146},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 32327},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 32327},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 931, col: 5, offset: 32327},
									expr: &litMatcher{
										pos:        position{line: 931, col: 6, offset: 32328},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 11, offset: 32333},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 931, col: 15, offset: 32337},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 931, col: 25, offset: 32347},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 931, col: 25, offset: 32347},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 931, col: 29, offset: 32351},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 58, offset: 32380},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 935, col: 1, offset: 32579},
			expr: &seqExpr{
				pos: position{line: 935, col: 32, offset: 32610},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 935, col: 32, offset: 32610},
						expr: &ruleRefExpr{
							pos:  position{line: 935, col: 33, offset: 32611},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 935, col: 36, offset: 32614},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 935, col: 63, offset: 32641},
						expr: &seqExpr{
							pos: position{line: 935, col: 64, offset: 32642},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 935, col: 64, offset: 32642},
									expr: &seqExpr{
										pos: position{line: 935, col: 66, offset: 32644},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 935, col: 66, offset: 32644},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 935, col: 70, offset: 32648},
												expr: &ruleRefExpr{
													pos:  position{line: 935, col: 71, offset: 32649},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 935, col: 81, offset: 32659},
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 81, offset: 32659},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 85, offset: 32663},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 937, col: 1, offset: 32694},
			expr: &actionExpr{
				pos: position{line: 937, col: 31, offset: 32724},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 937, col: 31, offset: 32724},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 937, col: 31, offset: 32724},
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 32, offset: 32725},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 937, col: 40, offset: 32733},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 937, col: 49, offset: 32742},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 937, col: 49, offset: 32742},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 938, col: 11, offset: 32764},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 32794},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 32816},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 32840},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 32864},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 32890},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 32913},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 32935},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 32958},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 32998},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 948, col: 11, offset: 33031},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 33053},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 33072},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 954, col: 1, offset: 33214},
			expr: &actionExpr{
				pos: position{line: 954, col: 27, offset: 33240},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 954, col: 27, offset: 33240},
					exprs: []interface{}{
						&anyMatcher{
							line: 954, col: 28, offset: 33241,
						},
						&zeroOrMoreExpr{
							pos: position{line: 954, col: 31, offset: 33244},
							expr: &seqExpr{
								pos: position{line: 954, col: 32, offset: 33245},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 954, col: 32, offset: 33245},
										expr: &litMatcher{
											pos:        position{line: 954, col: 33, offset: 33246},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 954, col: 37, offset: 33250},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 38, offset: 33251},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 954, col: 41, offset: 33254},
										expr: &litMatcher{
											pos:        position{line: 954, col: 42, offset: 33255},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 954, col: 46, offset: 33259},
										expr: &litMatcher{
											pos:        position{line: 954, col: 47, offset: 33260},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 954, col: 51, offset: 33264},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 52, offset: 33265},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 954, col: 60, offset: 33273},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 61, offset: 33274},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 954, col: 73, offset: 33286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 958, col: 1, offset: 33346},
			expr: &choiceExpr{
				pos: position{line: 959, col: 5, offset: 33370},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 33370},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 33370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 33370},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 18, offset: 33383},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 40, offset: 33405},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 959, col: 45, offset: 33410},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 55, offset: 33420},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 84, offset: 33449},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 9, offset: 33606},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 961, col: 9, offset: 33606},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 9, offset: 33606},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 22, offset: 33619},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 44, offset: 33641},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 49, offset: 33646},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 59, offset: 33656},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 88, offset: 33685},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 9, offset: 33885},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 964, col: 9, offset: 33885},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 964, col: 9, offset: 33885},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 22, offset: 33898},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 44, offset: 33920},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 964, col: 48, offset: 33924},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 58, offset: 33934},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 87, offset: 33963},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 972, col: 1, offset: 34171},
			expr: &choiceExpr{
				pos: position{line: 972, col: 15, offset: 34185},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 972, col: 15, offset: 34185},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 39, offset: 34209},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 974, col: 1, offset: 34232},
			expr: &actionExpr{
				pos: position{line: 974, col: 26, offset: 34257},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 974, col: 26, offset: 34257},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 974, col: 26, offset: 34257},
							expr: &litMatcher{
								pos:        position{line: 974, col: 27, offset: 34258},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 974, col: 32, offset: 34263},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 974, col: 37, offset: 34268},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 47, offset: 34278},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 974, col: 78, offset: 34309},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 978, col: 1, offset: 34436},
			expr: &seqExpr{
				pos: position{line: 978, col: 34, offset: 34469},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 978, col: 34, offset: 34469},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 978, col: 63, offset: 34498},
						expr: &seqExpr{
							pos: position{line: 978, col: 64, offset: 34499},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 978, col: 64, offset: 34499},
									expr: &litMatcher{
										pos:        position{line: 978, col: 66, offset: 34501},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 978, col: 73, offset: 34508},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 978, col: 73, offset: 34508},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 978, col: 78, offset: 34513},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 980, col: 1, offset: 34580},
			expr: &actionExpr{
				pos: position{line: 980, col: 33, offset: 34612},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 980, col: 33, offset: 34612},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 980, col: 33, offset: 34612},
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 34, offset: 34613},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 42, offset: 34621},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 980, col: 51, offset: 34630},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 980, col: 51, offset: 34630},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 34652},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 34685},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 34705},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 34729},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 34753},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 34779},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 34802},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 988, col: 11, offset: 34824},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 989, col: 11, offset: 34847},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 990, col: 11, offset: 34882},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 991, col: 11, offset: 34904},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 992, col: 11, offset: 34923},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 996, col: 1, offset: 35065},
			expr: &actionExpr{
				pos: position{line: 996, col: 29, offset: 35093},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 996, col: 29, offset: 35093},
					exprs: []interface{}{
						&anyMatcher{
							line: 996, col: 30, offset: 35094,
						},
						&zeroOrMoreExpr{
							pos: position{line: 996, col: 33, offset: 35097},
							expr: &seqExpr{
								pos: position{line: 996, col: 34, offset: 35098},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 996, col: 34, offset: 35098},
										expr: &litMatcher{
											pos:        position{line: 996, col: 35, offset: 35099},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 996, col: 40, offset: 35104},
										expr: &litMatcher{
											pos:        position{line: 996, col: 41, offset: 35105},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 996, col: 45, offset: 35109},
										expr: &litMatcher{
											pos:        position{line: 996, col: 46, offset: 35110},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 996, col: 50, offset: 35114},
										expr: &ruleRefExpr{
											pos:  position{line: 996, col: 51, offset: 35115},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 996, col: 59, offset: 35123},
										expr: &ruleRefExpr{
											pos:  position{line: 996, col: 60, offset: 35124},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 996, col: 72, offset: 35136,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1000, col: 1, offset: 35196},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 26, offset: 35221},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1000, col: 26, offset: 35221},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1000, col: 26, offset: 35221},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1000, col: 26, offset: 35221},
									expr: &litMatcher{
										pos:        position{line: 1000, col: 27, offset: 35222},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 31, offset: 35226},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 1000, col: 35, offset: 35230},
									expr: &litMatcher{
										pos:        position{line: 1000, col: 36, offset: 35231},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 40, offset: 35235},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 50, offset: 35245},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 81, offset: 35276},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 35459},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 1002, col: 5, offset: 35459},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1002, col: 5, offset: 35459},
									expr: &litMatcher{
										pos:        position{line: 1002, col: 6, offset: 35460},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 11, offset: 35465},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1002, col: 15, offset: 35469},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1002, col: 25, offset: 35479},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1002, col: 25, offset: 35479},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1002, col: 29, offset: 35483},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 60, offset: 35514},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1006, col: 1, offset: 35717},
			expr: &seqExpr{
				pos: position{line: 1006, col: 34, offset: 35750},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1006, col: 34, offset: 35750},
						expr: &ruleRefExpr{
							pos:  position{line: 1006, col: 35, offset: 35751},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 38, offset: 35754},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1006, col: 67, offset: 35783},
						expr: &seqExpr{
							pos: position{line: 1006, col: 68, offset: 35784},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1006, col: 68, offset: 35784},
									expr: &seqExpr{
										pos: position{line: 1006, col: 70, offset: 35786},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1006, col: 70, offset: 35786},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1006, col: 74, offset: 35790},
												expr: &ruleRefExpr{
													pos:  position{line: 1006, col: 75, offset: 35791},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1006, col: 85, offset: 35801},
									expr: &ruleRefExpr{
										pos:  position{line: 1006, col: 85, offset: 35801},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1006, col: 89, offset: 35805},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1008, col: 1, offset: 35837},
			expr: &actionExpr{
				pos: position{line: 1008, col: 33, offset: 35869},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1008, col: 33, offset: 35869},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1008, col: 33, offset: 35869},
							expr: &ruleRefExpr{
								pos:  position{line: 1008, col: 34, offset: 35870},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1008, col: 42, offset: 35878},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1008, col: 51, offset: 35887},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1008, col: 51, offset: 35887},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1009, col: 11, offset: 35909},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1010, col: 11, offset: 35941},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1011, col: 11, offset: 35961},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1012, col: 11, offset: 35985},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1013, col: 11, offset: 36009},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1014, col: 11, offset: 36035},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1015, col: 11, offset: 36058},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 1016, col: 11, offset: 36080},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 11, offset: 36103},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1018, col: 11, offset: 36138},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 1019, col: 11, offset: 36160},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 1020, col: 11, offset: 36179},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 1024, col: 1, offset: 36321},
			expr: &actionExpr{
				pos: position{line: 1024, col: 29, offset: 36349},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 29, offset: 36349},
					exprs: []interface{}{
						&anyMatcher{
							line: 1024, col: 30, offset: 36350,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1024, col: 33, offset: 36353},
							expr: &seqExpr{
								pos: position{line: 1024, col: 34, offset: 36354},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1024, col: 34, offset: 36354},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 35, offset: 36355},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 39, offset: 36359},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 40, offset: 36360},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 43, offset: 36363},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 44, offset: 36364},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 48, offset: 36368},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 49, offset: 36369},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 53, offset: 36373},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 54, offset: 36374},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 62, offset: 36382},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 63, offset: 36383},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1024, col: 75, offset: 36395,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1028, col: 1, offset: 36455},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 5, offset: 36481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1029, col: 5, offset: 36481},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1029, col: 5, offset: 36481},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1029, col: 5, offset: 36481},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1029, col: 18, offset: 36494},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1029, col: 40, offset: 36516},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1029, col: 45, offset: 36521},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1029, col: 55, offset: 36531},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1029, col: 86, offset: 36562},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 9, offset: 36719},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1031, col: 9, offset: 36719},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1031, col: 9, offset: 36719},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 22, offset: 36732},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1031, col: 44, offset: 36754},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 49, offset: 36759},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 59, offset: 36769},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1031, col: 90, offset: 36800},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 9, offset: 37000},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1034, col: 9, offset: 37000},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1034, col: 9, offset: 37000},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 22, offset: 37013},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1034, col: 44, offset: 37035},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 48, offset: 37039},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 58, offset: 37049},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1034, col: 89, offset: 37080},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1041, col: 1, offset: 37290},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 18, offset: 37307},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 18, offset: 37307},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 45, offset: 37334},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1043, col: 1, offset: 37360},
			expr: &actionExpr{
				pos: position{line: 1043, col: 29, offset: 37388},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 29, offset: 37388},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1043, col: 29, offset: 37388},
							expr: &litMatcher{
								pos:        position{line: 1043, col: 30, offset: 37389},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 35, offset: 37394},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1043, col: 40, offset: 37399},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1043, col: 50, offset: 37409},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 84, offset: 37443},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1047, col: 1, offset: 37573},
			expr: &seqExpr{
				pos: position{line: 1047, col: 37, offset: 37609},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 37, offset: 37609},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1047, col: 69, offset: 37641},
						expr: &seqExpr{
							pos: position{line: 1047, col: 70, offset: 37642},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1047, col: 70, offset: 37642},
									expr: &litMatcher{
										pos:        position{line: 1047, col: 72, offset: 37644},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 1047, col: 79, offset: 37651},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1047, col: 79, offset: 37651},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 1047, col: 84, offset: 37656},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1049, col: 1, offset: 37725},
			expr: &actionExpr{
				pos: position{line: 1049, col: 36, offset: 37760},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 36, offset: 37760},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1049, col: 36, offset: 37760},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 37, offset: 37761},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 45, offset: 37769},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1049, col: 54, offset: 37778},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1049, col: 54, offset: 37778},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1050, col: 11, offset: 37800},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 11, offset: 37836},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1052, col: 11, offset: 37855},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1053, col: 11, offset: 37877},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1054, col: 11, offset: 37901},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 37927},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 37950},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 37972},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 37995},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 38033},
										name: "Parenthesis",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 38055},
										name: "AnyChars",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 38074},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 1065, col: 1, offset: 38216},
			expr: &actionExpr{
				pos: position{line: 1065, col: 32, offset: 38247},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1065, col: 32, offset: 38247},
					exprs: []interface{}{
						&anyMatcher{
							line: 1065, col: 33, offset: 38248,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1065, col: 36, offset: 38251},
							expr: &seqExpr{
								pos: position{line: 1065, col: 37, offset: 38252},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1065, col: 37, offset: 38252},
										expr: &litMatcher{
											pos:        position{line: 1065, col: 38, offset: 38253},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1065, col: 43, offset: 38258},
										expr: &ruleRefExpr{
											pos:  position{line: 1065, col: 44, offset: 38259},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1065, col: 47, offset: 38262},
										expr: &litMatcher{
											pos:        position{line: 1065, col: 48, offset: 38263},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1065, col: 52, offset: 38267},
										expr: &litMatcher{
											pos:        position{line: 1065, col: 53, offset: 38268},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1065, col: 57, offset: 38272},
										expr: &ruleRefExpr{
											pos:  position{line: 1065, col: 58, offset: 38273},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1065, col: 66, offset: 38281},
										expr: &ruleRefExpr{
											pos:  position{line: 1065, col: 67, offset: 38282},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1065, col: 79, offset: 38294,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1069, col: 1, offset: 38354},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 29, offset: 38382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 29, offset: 38382},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1069, col: 29, offset: 38382},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1069, col: 29, offset: 38382},
									expr: &litMatcher{
										pos:        position{line: 1069, col: 30, offset: 38383},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1069, col: 34, offset: 38387},
									expr: &litMatcher{
										pos:        position{line: 1069, col: 35, offset: 38388},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 40, offset: 38393},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 44, offset: 38397},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 54, offset: 38407},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 88, offset: 38441},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 38627},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 38627},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1071, col: 5, offset: 38627},
									expr: &litMatcher{
										pos:        position{line: 1071, col: 6, offset: 38628},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 11, offset: 38633},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 15, offset: 38637},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1071, col: 25, offset: 38647},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1071, col: 25, offset: 38647},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1071, col: 29, offset: 38651},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 63, offset: 38685},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1075, col: 1, offset: 38894},
			expr: &seqExpr{
				pos: position{line: 1075, col: 37, offset: 38930},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1075, col: 37, offset: 38930},
						expr: &ruleRefExpr{
							pos:  position{line: 1075, col: 38, offset: 38931},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 41, offset: 38934},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1075, col: 73, offset: 38966},
						expr: &seqExpr{
							pos: position{line: 1075, col: 74, offset: 38967},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1075, col: 74, offset: 38967},
									expr: &seqExpr{
										pos: position{line: 1075, col: 76, offset: 38969},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1075, col: 76, offset: 38969},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1075, col: 80, offset: 38973},
												expr: &ruleRefExpr{
													pos:  position{line: 1075, col: 81, offset: 38974},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1075, col: 91, offset: 38984},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 91, offset: 38984},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1075, col: 95, offset: 38988},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1077, col: 1, offset: 39023},
			expr: &actionExpr{
				pos: position{line: 1077, col: 37, offset: 39059},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1077, col: 37, offset: 39059},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1077, col: 46, offset: 39068},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1077, col: 46, offset: 39068},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1078, col: 11, offset: 39090},
								name: "Newline",
							},
							&ruleRefExpr{
								pos:  position{line: 1079, col: 11, offset: 39128},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1080, col: 11, offset: 39164},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1081, col: 11, offset: 39183},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1082, col: 11, offset: 39204},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1083, col: 11, offset: 39228},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1084, col: 11, offset: 39254},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1085, col: 11, offset: 39277},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1086, col: 11, offset: 39299},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1087, col: 11, offset: 39322},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1088, col: 11, offset: 39360},
								name: "Parenthesis",
							},
							&ruleRefExpr{
								pos:  position{line: 1089, col: 11, offset: 39382},
								name: "AnyChars",
							},
							&ruleRefExpr{
								pos:  position{line: 1090, col: 11, offset: 39401},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1094, col: 1, offset: 39543},
			expr: &actionExpr{
				pos: position{line: 1094, col: 32, offset: 39574},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1094, col: 32, offset: 39574},
					exprs: []interface{}{
						&anyMatcher{
							line: 1094, col: 33, offset: 39575,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1094, col: 36, offset: 39578},
							expr: &seqExpr{
								pos: position{line: 1094, col: 37, offset: 39579},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1094, col: 37, offset: 39579},
										expr: &ruleRefExpr{
											pos:  position{line: 1094, col: 38, offset: 39580},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1094, col: 41, offset: 39583},
										expr: &litMatcher{
											pos:        position{line: 1094, col: 42, offset: 39584},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1094, col: 46, offset: 39588},
										expr: &litMatcher{
											pos:        position{line: 1094, col: 47, offset: 39589},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1094, col: 51, offset: 39593},
										expr: &litMatcher{
											pos:        position{line: 1094, col: 52, offset: 39594},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1094, col: 56, offset: 39598},
										expr: &ruleRefExpr{
											pos:  position{line: 1094, col: 57, offset: 39599},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1094, col: 65, offset: 39607},
										expr: &ruleRefExpr{
											pos:  position{line: 1094, col: 66, offset: 39608},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1094, col: 78, offset: 39620,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1098, col: 1, offset: 39701},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 39730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 39730},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 39730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 5, offset: 39730},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 18, offset: 39743},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 40, offset: 39765},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 45, offset: 39770},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 55, offset: 39780},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 89, offset: 39814},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 9, offset: 39971},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1101, col: 9, offset: 39971},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1101, col: 9, offset: 39971},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 22, offset: 39984},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 44, offset: 40006},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 49, offset: 40011},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 59, offset: 40021},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 93, offset: 40055},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 9, offset: 40255},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1104, col: 9, offset: 40255},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 9, offset: 40255},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 22, offset: 40268},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 44, offset: 40290},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 48, offset: 40294},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 58, offset: 40304},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 92, offset: 40338},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1108, col: 1, offset: 40488},
			expr: &actionExpr{
				pos: position{line: 1108, col: 18, offset: 40505},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 18, offset: 40505},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1108, col: 18, offset: 40505},
							expr: &litMatcher{
								pos:        position{line: 1108, col: 19, offset: 40506},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1108, col: 23, offset: 40510},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 27, offset: 40514},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 36, offset: 40523},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1108, col: 58, offset: 40545},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1112, col: 1, offset: 40634},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 25, offset: 40658},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1112, col: 25, offset: 40658},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 38, offset: 40671},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1114, col: 1, offset: 40690},
			expr: &actionExpr{
				pos: position{line: 1114, col: 21, offset: 40710},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1114, col: 21, offset: 40710},
					expr: &seqExpr{
						pos: position{line: 1114, col: 22, offset: 40711},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1114, col: 22, offset: 40711},
								expr: &ruleRefExpr{
									pos:  position{line: 1114, col: 23, offset: 40712},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1114, col: 31, offset: 40720},
								expr: &ruleRefExpr{
									pos:  position{line: 1114, col: 32, offset: 40721},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1114, col: 35, offset: 40724},
								expr: &litMatcher{
									pos:        position{line: 1114, col: 36, offset: 40725},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1114, col: 40, offset: 40729,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1118, col: 1, offset: 40762},
			expr: &actionExpr{
				pos: position{line: 1118, col: 25, offset: 40786},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 25, offset: 40786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1118, col: 25, offset: 40786},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 38, offset: 40799},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1118, col: 60, offset: 40821},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 64, offset: 40825},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 73, offset: 40834},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1118, col: 95, offset: 40856},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1122, col: 1, offset: 40985},
			expr: &actionExpr{
				pos: position{line: 1122, col: 20, offset: 41004},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 20, offset: 41004},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1122, col: 20, offset: 41004},
							expr: &litMatcher{
								pos:        position{line: 1122, col: 21, offset: 41005},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 25, offset: 41009},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 29, offset: 41013},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 38, offset: 41022},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 62, offset: 41046},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1126, col: 1, offset: 41137},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 27, offset: 41163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1126, col: 27, offset: 41163},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 40, offset: 41176},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1128, col: 1, offset: 41197},
			expr: &actionExpr{
				pos: position{line: 1128, col: 23, offset: 41219},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1128, col: 23, offset: 41219},
					expr: &seqExpr{
						pos: position{line: 1128, col: 24, offset: 41220},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1128, col: 24, offset: 41220},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 25, offset: 41221},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1128, col: 33, offset: 41229},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 34, offset: 41230},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1128, col: 37, offset: 41233},
								expr: &litMatcher{
									pos:        position{line: 1128, col: 38, offset: 41234},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1128, col: 42, offset: 41238,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1132, col: 1, offset: 41271},
			expr: &actionExpr{
				pos: position{line: 1132, col: 27, offset: 41297},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 27, offset: 41297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1132, col: 27, offset: 41297},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 40, offset: 41310},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1132, col: 62, offset: 41332},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 66, offset: 41336},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 75, offset: 41345},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1132, col: 99, offset: 41369},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1139, col: 1, offset: 41605},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 16, offset: 41620},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 16, offset: 41620},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 40, offset: 41644},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 64, offset: 41668},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1141, col: 1, offset: 41686},
			expr: &litMatcher{
				pos:        position{line: 1141, col: 32, offset: 41717},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1143, col: 1, offset: 41722},
			expr: &actionExpr{
				pos: position{line: 1143, col: 26, offset: 41747},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 26, offset: 41747},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1143, col: 26, offset: 41747},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1143, col: 54, offset: 41775},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 63, offset: 41784},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1143, col: 93, offset: 41814},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1143, col: 121, offset: 41842},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 122, offset: 41843},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1147, col: 1, offset: 41942},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 33, offset: 41974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 34, offset: 41975},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 34, offset: 41975},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1147, col: 35, offset: 41976},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1147, col: 35, offset: 41976},
											expr: &ruleRefExpr{
												pos:  position{line: 1147, col: 36, offset: 41977},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1147, col: 64, offset: 42005},
											expr: &ruleRefExpr{
												pos:  position{line: 1147, col: 65, offset: 42006},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1147, col: 68, offset: 42009},
											expr: &ruleRefExpr{
												pos:  position{line: 1147, col: 69, offset: 42010},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1147, col: 77, offset: 42018,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1147, col: 80, offset: 42021},
									expr: &seqExpr{
										pos: position{line: 1147, col: 81, offset: 42022},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1147, col: 81, offset: 42022},
												expr: &seqExpr{
													pos: position{line: 1147, col: 83, offset: 42024},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1147, col: 83, offset: 42024},
															expr: &ruleRefExpr{
																pos:  position{line: 1147, col: 83, offset: 42024},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1147, col: 87, offset: 42028},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1147, col: 116, offset: 42057},
												expr: &ruleRefExpr{
													pos:  position{line: 1147, col: 117, offset: 42058},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1147, col: 145, offset: 42086},
												expr: &ruleRefExpr{
													pos:  position{line: 1147, col: 146, offset: 42087},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1147, col: 154, offset: 42095,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 7, offset: 42237},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1149, col: 8, offset: 42238},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1149, col: 8, offset: 42238},
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 9, offset: 42239},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1149, col: 12, offset: 42242},
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 13, offset: 42243},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1149, col: 21, offset: 42251},
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 22, offset: 42252},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1149, col: 50, offset: 42280,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1153, col: 1, offset: 42362},
			expr: &litMatcher{
				pos:        position{line: 1153, col: 32, offset: 42393},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1155, col: 1, offset: 42400},
			expr: &actionExpr{
				pos: position{line: 1155, col: 26, offset: 42425},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 26, offset: 42425},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1155, col: 26, offset: 42425},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 54, offset: 42453},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 63, offset: 42462},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1155, col: 93, offset: 42492},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1155, col: 121, offset: 42520},
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 122, offset: 42521},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1159, col: 1, offset: 42620},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 33, offset: 42652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1159, col: 34, offset: 42653},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1159, col: 34, offset: 42653},
							expr: &seqExpr{
								pos: position{line: 1159, col: 35, offset: 42654},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1159, col: 35, offset: 42654},
										expr: &ruleRefExpr{
											pos:  position{line: 1159, col: 36, offset: 42655},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1159, col: 64, offset: 42683,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1161, col: 7, offset: 42848},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1161, col: 7, offset: 42848},
							expr: &seqExpr{
								pos: position{line: 1161, col: 8, offset: 42849},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1161, col: 8, offset: 42849},
										expr: &ruleRefExpr{
											pos:  position{line: 1161, col: 9, offset: 42850},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1161, col: 12, offset: 42853},
										expr: &ruleRefExpr{
											pos:  position{line: 1161, col: 13, offset: 42854},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1161, col: 21, offset: 42862},
										expr: &ruleRefExpr{
											pos:  position{line: 1161, col: 22, offset: 42863},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1161, col: 50, offset: 42891,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1165, col: 1, offset: 42974},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 21, offset: 42994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1165, col: 21, offset: 42994},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1165, col: 21, offset: 42994},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1165, col: 21, offset: 42994},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 30, offset: 43003},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1165, col: 38, offset: 43011},
										expr: &ruleRefExpr{
											pos:  position{line: 1165, col: 39, offset: 43012},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1165, col: 67, offset: 43040},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1167, col: 5, offset: 43130},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1167, col: 5, offset: 43130},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1167, col: 5, offset: 43130},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1167, col: 15, offset: 43140},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1167, col: 23, offset: 43148},
										expr: &choiceExpr{
											pos: position{line: 1167, col: 24, offset: 43149},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1167, col: 24, offset: 43149},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1167, col: 37, offset: 43162},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1167, col: 65, offset: 43190},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1171, col: 1, offset: 43280},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 31, offset: 43310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 31, offset: 43310},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 43, offset: 43322},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1171, col: 52, offset: 43331},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1171, col: 53, offset: 43332},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1171, col: 53, offset: 43332},
									expr: &litMatcher{
										pos:        position{line: 1171, col: 54, offset: 43333},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1171, col: 58, offset: 43337,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1178, col: 1, offset: 43507},
			expr: &choiceExpr{
				pos: position{line: 1178, col: 19, offset: 43525},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1178, col: 19, offset: 43525},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 44, offset: 43550},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1180, col: 1, offset: 43575},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 27, offset: 43601},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1180, col: 27, offset: 43601},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1180, col: 27, offset: 43601},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1180, col: 27, offset: 43601},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 32, offset: 43606},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 36, offset: 43610},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1180, col: 40, offset: 43614},
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 40, offset: 43614},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 44, offset: 43618},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 48, offset: 43622},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 55, offset: 43629},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 76, offset: 43650},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 43733},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 43733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 5, offset: 43733},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 10, offset: 43738},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 14, offset: 43742},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 18, offset: 43746},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1186, col: 1, offset: 43818},
			expr: &actionExpr{
				pos: position{line: 1186, col: 27, offset: 43844},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 27, offset: 43844},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1186, col: 27, offset: 43844},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 35, offset: 43852},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 40, offset: 43857},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 54, offset: 43871},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 72, offset: 43889},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1190, col: 1, offset: 44019},
			expr: &actionExpr{
				pos: position{line: 1190, col: 24, offset: 44042},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1190, col: 24, offset: 44042},
					expr: &choiceExpr{
						pos: position{line: 1190, col: 25, offset: 44043},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1190, col: 25, offset: 44043},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1190, col: 37, offset: 44055},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1190, col: 47, offset: 44065},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1190, col: 47, offset: 44065},
										expr: &litMatcher{
											pos:        position{line: 1190, col: 48, offset: 44066},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1190, col: 54, offset: 44072,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1197, col: 1, offset: 44214},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 9, offset: 44222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1197, col: 9, offset: 44222},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 24, offset: 44237},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1200, col: 1, offset: 44318},
			expr: &actionExpr{
				pos: position{line: 1200, col: 17, offset: 44334},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 17, offset: 44334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1200, col: 17, offset: 44334},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 25, offset: 44342},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1200, col: 30, offset: 44347},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1200, col: 30, offset: 44347},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 41, offset: 44358},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 55, offset: 44372},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 73, offset: 44390},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1204, col: 1, offset: 44508},
			expr: &actionExpr{
				pos: position{line: 1204, col: 17, offset: 44524},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 17, offset: 44524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 17, offset: 44524},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 22, offset: 44529},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 32, offset: 44539},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1204, col: 49, offset: 44556},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 50, offset: 44557},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1208, col: 1, offset: 44650},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 19, offset: 44668},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 19, offset: 44668},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 44, offset: 44693},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1210, col: 1, offset: 44720},
			expr: &actionExpr{
				pos: position{line: 1210, col: 27, offset: 44746},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 27, offset: 44746},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1210, col: 27, offset: 44746},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 31, offset: 44750},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1210, col: 36, offset: 44755},
								expr: &choiceExpr{
									pos: position{line: 1212, col: 5, offset: 44798},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1212, col: 5, offset: 44798},
											run: (*parser).callonTextOnlyLinkAttributes7,
											expr: &seqExpr{
												pos: position{line: 1212, col: 5, offset: 44798},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1212, col: 5, offset: 44798},
														val:        "\"",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 1212, col: 10, offset: 44803},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1212, col: 19, offset: 44812},
															expr: &seqExpr{
																pos: position{line: 1212, col: 20, offset: 44813},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1212, col: 20, offset: 44813},
																		expr: &litMatcher{
																			pos:        position{line: 1212, col: 21, offset: 44814},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1212, col: 26, offset: 44819},
																		expr: &litMatcher{
																			pos:        position{line: 1212, col: 27, offset: 44820},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1212, col: 32, offset: 44825},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1212, col: 32, offset: 44825},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1212, col: 45, offset: 44838},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1212, col: 54, offset: 44847},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1212, col: 67, offset: 44860},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1212, col: 78, offset: 44871},
														val:        "\"",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1212, col: 83, offset: 44876},
														expr: &ruleRefExpr{
															pos:  position{line: 1212, col: 83, offset: 44876},
															name: "Spaces",
														},
													},
													&andExpr{
														pos: position{line: 1212, col: 91, offset: 44884},
														expr: &notExpr{
															pos: position{line: 1212, col: 93, offset: 44886},
															expr: &litMatcher{
																pos:        position{line: 1212, col: 94, offset: 44887},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1216, col: 5, offset: 45012},
											run: (*parser).callonTextOnlyLinkAttributes28,
											expr: &seqExpr{
												pos: position{line: 1216, col: 5, offset: 45012},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1216, col: 5, offset: 45012},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1216, col: 14, offset: 45021},
															expr: &seqExpr{
																pos: position{line: 1216, col: 15, offset: 45022},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1216, col: 15, offset: 45022},
																		expr: &litMatcher{
																			pos:        position{line: 1216, col: 16, offset: 45023},
																			val:        "=",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1216, col: 20, offset: 45027},
																		expr: &litMatcher{
																			pos:        position{line: 1216, col: 21, offset: 45028},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1216, col: 26, offset: 45033},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1216, col: 26, offset: 45033},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1216, col: 39, offset: 45046},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1216, col: 48, offset: 45055},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1216, col: 61, offset: 45068},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 1216, col: 72, offset: 45079},
														expr: &notExpr{
															pos: position{line: 1216, col: 74, offset: 45081},
															expr: &litMatcher{
																pos:        position{line: 1216, col: 75, offset: 45082},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1218, col: 9, offset: 45162},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1222, col: 1, offset: 45228},
			expr: &actionExpr{
				pos: position{line: 1222, col: 30, offset: 45257},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 30, offset: 45257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1222, col: 30, offset: 45257},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 34, offset: 45261},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1222, col: 39, offset: 45266},
								expr: &choiceExpr{
									pos: position{line: 1224, col: 5, offset: 45309},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1224, col: 5, offset: 45309},
											run: (*parser).callonTextAndMoreLinkAttributes7,
											expr: &seqExpr{
												pos: position{line: 1224, col: 5, offset: 45309},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1224, col: 5, offset: 45309},
														val:        "\"",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 1224, col: 10, offset: 45314},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1224, col: 19, offset: 45323},
															expr: &seqExpr{
																pos: position{line: 1224, col: 20, offset: 45324},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1224, col: 20, offset: 45324},
																		expr: &litMatcher{
																			pos:        position{line: 1224, col: 21, offset: 45325},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1224, col: 26, offset: 45330},
																		expr: &litMatcher{
																			pos:        position{line: 1224, col: 27, offset: 45331},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1224, col: 32, offset: 45336},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1224, col: 32, offset: 45336},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1224, col: 45, offset: 45349},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1224, col: 54, offset: 45358},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1224, col: 67, offset: 45371},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1224, col: 78, offset: 45382},
														val:        "\"",
														ignoreCase: false,
													},
													&andExpr{
														pos: position{line: 1224, col: 83, offset: 45387},
														expr: &notExpr{
															pos: position{line: 1224, col: 85, offset: 45389},
															expr: &litMatcher{
																pos:        position{line: 1224, col: 86, offset: 45390},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1228, col: 5, offset: 45515},
											run: (*parser).callonTextAndMoreLinkAttributes26,
											expr: &seqExpr{
												pos: position{line: 1228, col: 5, offset: 45515},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1228, col: 5, offset: 45515},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 1228, col: 14, offset: 45524},
															expr: &seqExpr{
																pos: position{line: 1228, col: 15, offset: 45525},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1228, col: 15, offset: 45525},
																		expr: &litMatcher{
																			pos:        position{line: 1228, col: 16, offset: 45526},
																			val:        ",",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1228, col: 20, offset: 45530},
																		expr: &litMatcher{
																			pos:        position{line: 1228, col: 21, offset: 45531},
																			val:        "=",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1228, col: 25, offset: 45535},
																		expr: &litMatcher{
																			pos:        position{line: 1228, col: 26, offset: 45536},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																	&notExpr{
																		pos: position{line: 1228, col: 30, offset: 45540},
																		expr: &litMatcher{
																			pos:        position{line: 1228, col: 31, offset: 45541},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1228, col: 37, offset: 45547},
																		alternatives: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1228, col: 37, offset: 45547},
																				name: "SimpleWord",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1228, col: 50, offset: 45560},
																				name: "Spaces",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1228, col: 59, offset: 45569},
																				name: "QuotedText",
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1228, col: 72, offset: 45582},
																				name: "AnyChar",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 1228, col: 83, offset: 45593},
														expr: &notExpr{
															pos: position{line: 1228, col: 85, offset: 45595},
															expr: &litMatcher{
																pos:        position{line: 1228, col: 86, offset: 45596},
																val:        "=",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1230, col: 9, offset: 45676},
							expr: &litMatcher{
								pos:        position{line: 1230, col: 9, offset: 45676},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1230, col: 14, offset: 45681},
							expr: &ruleRefExpr{
								pos:  position{line: 1230, col: 14, offset: 45681},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1230, col: 18, offset: 45685},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1230, col: 29, offset: 45696},
								expr: &ruleRefExpr{
									pos:  position{line: 1230, col: 30, offset: 45697},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1230, col: 49, offset: 45716},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1235, col: 1, offset: 45872},
			expr: &actionExpr{
				pos: position{line: 1236, col: 5, offset: 45892},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 5, offset: 45892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1236, col: 5, offset: 45892},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1236, col: 14, offset: 45901},
								expr: &choiceExpr{
									pos: position{line: 1236, col: 15, offset: 45902},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1236, col: 15, offset: 45902},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1237, col: 11, offset: 45923},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1238, col: 11, offset: 45941},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1239, col: 11, offset: 45965},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1240, col: 11, offset: 45987},
											name: "AnyChars",
										},
										&ruleRefExpr{
											pos:  position{line: 1241, col: 11, offset: 46006},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1242, col: 11, offset: 46024},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1242, col: 21, offset: 46034},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1246, col: 1, offset: 46104},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 17, offset: 46120},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 17, offset: 46120},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 40, offset: 46143},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1249, col: 1, offset: 46279},
			expr: &actionExpr{
				pos: position{line: 1249, col: 25, offset: 46303},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1249, col: 25, offset: 46303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1249, col: 25, offset: 46303},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 33, offset: 46311},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1249, col: 38, offset: 46316},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1249, col: 38, offset: 46316},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 57, offset: 46335},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 79, offset: 46357},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 97, offset: 46375},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1253, col: 1, offset: 46493},
			expr: &actionExpr{
				pos: position{line: 1253, col: 25, offset: 46517},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 25, offset: 46517},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1253, col: 25, offset: 46517},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 30, offset: 46522},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1253, col: 48, offset: 46540},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1253, col: 65, offset: 46557},
								expr: &ruleRefExpr{
									pos:  position{line: 1253, col: 66, offset: 46558},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1257, col: 1, offset: 46651},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 15, offset: 46665},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 15, offset: 46665},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 30, offset: 46680},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1259, col: 1, offset: 46700},
			expr: &actionExpr{
				pos: position{line: 1259, col: 23, offset: 46722},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 23, offset: 46722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 23, offset: 46722},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 28, offset: 46727},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 38, offset: 46737},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 56, offset: 46755},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1266, col: 1, offset: 47090},
			expr: &actionExpr{
				pos: position{line: 1266, col: 15, offset: 47104},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 15, offset: 47104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1266, col: 15, offset: 47104},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1266, col: 26, offset: 47115},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 27, offset: 47116},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1266, col: 47, offset: 47136},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 57, offset: 47146},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1266, col: 63, offset: 47152},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1266, col: 63, offset: 47152},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 74, offset: 47163},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 88, offset: 47177},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 106, offset: 47195},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1266, col: 123, offset: 47212},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 123, offset: 47212},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 127, offset: 47216},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1270, col: 1, offset: 47335},
			expr: &actionExpr{
				pos: position{line: 1270, col: 16, offset: 47350},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 16, offset: 47350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1270, col: 16, offset: 47350},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1270, col: 25, offset: 47359},
							expr: &litMatcher{
								pos:        position{line: 1270, col: 26, offset: 47360},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 30, offset: 47364},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1270, col: 36, offset: 47370},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1270, col: 36, offset: 47370},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 47, offset: 47381},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 61, offset: 47395},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 79, offset: 47413},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1274, col: 1, offset: 47534},
			expr: &actionExpr{
				pos: position{line: 1274, col: 20, offset: 47553},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 20, offset: 47553},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1274, col: 20, offset: 47553},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 24, offset: 47557},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1274, col: 28, offset: 47561},
								expr: &ruleRefExpr{
									pos:  position{line: 1274, col: 29, offset: 47562},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1274, col: 56, offset: 47589},
							expr: &litMatcher{
								pos:        position{line: 1274, col: 56, offset: 47589},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 61, offset: 47594},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1274, col: 67, offset: 47600},
								expr: &ruleRefExpr{
									pos:  position{line: 1274, col: 68, offset: 47601},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1274, col: 95, offset: 47628},
							expr: &litMatcher{
								pos:        position{line: 1274, col: 95, offset: 47628},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 100, offset: 47633},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1274, col: 107, offset: 47640},
								expr: &ruleRefExpr{
									pos:  position{line: 1274, col: 108, offset: 47641},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1274, col: 135, offset: 47668},
							expr: &litMatcher{
								pos:        position{line: 1274, col: 135, offset: 47668},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1274, col: 140, offset: 47673},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 140, offset: 47673},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 144, offset: 47677},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1274, col: 155, offset: 47688},
								expr: &ruleRefExpr{
									pos:  position{line: 1274, col: 156, offset: 47689},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1274, col: 175, offset: 47708},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1281, col: 1, offset: 47998},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 19, offset: 48016},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1281, col: 19, offset: 48016},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1281, col: 19, offset: 48016},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1281, col: 19, offset: 48016},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 32, offset: 48029},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 41, offset: 48038},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 58, offset: 48055},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 5, offset: 48123},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1283, col: 5, offset: 48123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1283, col: 5, offset: 48123},
									val:        "footnote:",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1283, col: 17, offset: 48135},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 22, offset: 48140},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 35, offset: 48153},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1283, col: 39, offset: 48157},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1283, col: 47, offset: 48165},
										expr: &ruleRefExpr{
											pos:  position{line: 1283, col: 48, offset: 48166},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 66, offset: 48184},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1287, col: 1, offset: 48245},
			expr: &actionExpr{
				pos: position{line: 1287, col: 16, offset: 48260},
				run: (*parser).callonFootnoteRef1,
				expr: &ruleRefExpr{
					pos:  position{line: 1287, col: 16, offset: 48260},
					name: "Alphanums",
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1291, col: 1, offset: 48307},
			expr: &actionExpr{
				pos: position{line: 1291, col: 20, offset: 48326},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1291, col: 20, offset: 48326},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1291, col: 29, offset: 48335},
						expr: &seqExpr{
							pos: position{line: 1291, col: 30, offset: 48336},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1291, col: 30, offset: 48336},
									expr: &litMatcher{
										pos:        position{line: 1291, col: 31, offset: 48337},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1291, col: 35, offset: 48341},
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 36, offset: 48342},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1291, col: 40, offset: 48346},
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 40, offset: 48346},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1291, col: 44, offset: 48350},
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 45, offset: 48351},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1291, col: 61, offset: 48367},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1291, col: 75, offset: 48381},
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 75, offset: 48381},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1298, col: 1, offset: 48695},
			expr: &actionExpr{
				pos: position{line: 1298, col: 19, offset: 48713},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 19, offset: 48713},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1298, col: 19, offset: 48713},
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 20, offset: 48714},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 5, offset: 48743},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1299, col: 12, offset: 48750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1299, col: 12, offset: 48750},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 11, offset: 48773},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 11, offset: 48797},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 11, offset: 48821},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1303, col: 11, offset: 48843},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1304, col: 11, offset: 48865},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 11, offset: 48888},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 11, offset: 48916},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 11, offset: 48932},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1311, col: 1, offset: 48973},
			expr: &choiceExpr{
				pos: position{line: 1311, col: 19, offset: 48991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1311, col: 19, offset: 48991},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 19, offset: 49062},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 19, offset: 49102},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 19, offset: 49143},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 19, offset: 49184},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 19, offset: 49225},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 19, offset: 49263},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1319, col: 1, offset: 49286},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 20, offset: 49305},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1319, col: 20, offset: 49305},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 36, offset: 49321},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1324, col: 1, offset: 49530},
			expr: &seqExpr{
				pos: position{line: 1324, col: 25, offset: 49554},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1324, col: 25, offset: 49554},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1324, col: 31, offset: 49560},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 31, offset: 49560},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 35, offset: 49564},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1326, col: 1, offset: 49624},
			expr: &seqExpr{
				pos: position{line: 1326, col: 30, offset: 49653},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1326, col: 30, offset: 49653},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1326, col: 36, offset: 49659},
						expr: &ruleRefExpr{
							pos:  position{line: 1326, col: 36, offset: 49659},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 40, offset: 49663},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1328, col: 1, offset: 49668},
			expr: &choiceExpr{
				pos: position{line: 1328, col: 28, offset: 49695},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1328, col: 29, offset: 49696},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1328, col: 29, offset: 49696},
								val:        "```",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1328, col: 35, offset: 49702},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 35, offset: 49702},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1328, col: 39, offset: 49706},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 46, offset: 49713},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1330, col: 1, offset: 49718},
			expr: &actionExpr{
				pos: position{line: 1330, col: 16, offset: 49733},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 16, offset: 49733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 16, offset: 49733},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1330, col: 27, offset: 49744},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 28, offset: 49745},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1330, col: 48, offset: 49765},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 74, offset: 49791},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 83, offset: 49800},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1330, col: 111, offset: 49828},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1334, col: 1, offset: 49943},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1334, col: 31, offset: 49973},
				expr: &actionExpr{
					pos: position{line: 1334, col: 32, offset: 49974},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1334, col: 32, offset: 49974},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1334, col: 32, offset: 49974},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 33, offset: 49975},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1334, col: 57, offset: 49999},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 66, offset: 50008},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1341, col: 1, offset: 50345},
			expr: &seqExpr{
				pos: position{line: 1341, col: 26, offset: 50370},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1341, col: 26, offset: 50370},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1341, col: 33, offset: 50377},
						expr: &ruleRefExpr{
							pos:  position{line: 1341, col: 33, offset: 50377},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 37, offset: 50381},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1343, col: 1, offset: 50386},
			expr: &seqExpr{
				pos: position{line: 1343, col: 31, offset: 50416},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1343, col: 31, offset: 50416},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1343, col: 38, offset: 50423},
						expr: &ruleRefExpr{
							pos:  position{line: 1343, col: 38, offset: 50423},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 42, offset: 50427},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1345, col: 1, offset: 50432},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 29, offset: 50460},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1345, col: 30, offset: 50461},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1345, col: 30, offset: 50461},
								val:        "----",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1345, col: 37, offset: 50468},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 37, offset: 50468},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1345, col: 41, offset: 50472},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 48, offset: 50479},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1347, col: 1, offset: 50484},
			expr: &actionExpr{
				pos: position{line: 1347, col: 17, offset: 50500},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 17, offset: 50500},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1347, col: 17, offset: 50500},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1347, col: 28, offset: 50511},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 29, offset: 50512},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 49, offset: 50532},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 76, offset: 50559},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 85, offset: 50568},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 114, offset: 50597},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1351, col: 1, offset: 50714},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1351, col: 32, offset: 50745},
				expr: &actionExpr{
					pos: position{line: 1351, col: 33, offset: 50746},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1351, col: 33, offset: 50746},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1351, col: 33, offset: 50746},
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 34, offset: 50747},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1351, col: 59, offset: 50772},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 68, offset: 50781},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1358, col: 1, offset: 51118},
			expr: &seqExpr{
				pos: position{line: 1358, col: 26, offset: 51143},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1358, col: 26, offset: 51143},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1358, col: 33, offset: 51150},
						expr: &ruleRefExpr{
							pos:  position{line: 1358, col: 33, offset: 51150},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 37, offset: 51154},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1360, col: 1, offset: 51159},
			expr: &seqExpr{
				pos: position{line: 1360, col: 31, offset: 51189},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1360, col: 31, offset: 51189},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1360, col: 38, offset: 51196},
						expr: &ruleRefExpr{
							pos:  position{line: 1360, col: 38, offset: 51196},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 42, offset: 51200},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1362, col: 1, offset: 51205},
			expr: &choiceExpr{
				pos: position{line: 1362, col: 29, offset: 51233},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1362, col: 30, offset: 51234},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1362, col: 30, offset: 51234},
								val:        "====",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1362, col: 37, offset: 51241},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 37, offset: 51241},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1362, col: 41, offset: 51245},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 48, offset: 51252},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1364, col: 1, offset: 51257},
			expr: &actionExpr{
				pos: position{line: 1364, col: 17, offset: 51273},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 17, offset: 51273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1364, col: 17, offset: 51273},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1364, col: 28, offset: 51284},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 29, offset: 51285},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1364, col: 49, offset: 51305},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 76, offset: 51332},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 85, offset: 51341},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1364, col: 114, offset: 51370},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1368, col: 1, offset: 51487},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1368, col: 32, offset: 51518},
				expr: &actionExpr{
					pos: position{line: 1368, col: 33, offset: 51519},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1368, col: 33, offset: 51519},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1368, col: 33, offset: 51519},
								expr: &ruleRefExpr{
									pos:  position{line: 1368, col: 34, offset: 51520},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1368, col: 59, offset: 51545},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1368, col: 68, offset: 51554},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1375, col: 1, offset: 51889},
			expr: &seqExpr{
				pos: position{line: 1375, col: 24, offset: 51912},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1375, col: 24, offset: 51912},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1375, col: 31, offset: 51919},
						expr: &ruleRefExpr{
							pos:  position{line: 1375, col: 31, offset: 51919},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 35, offset: 51923},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1377, col: 1, offset: 51953},
			expr: &seqExpr{
				pos: position{line: 1377, col: 29, offset: 51981},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1377, col: 29, offset: 51981},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1377, col: 36, offset: 51988},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 36, offset: 51988},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 40, offset: 51992},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1379, col: 1, offset: 52022},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 27, offset: 52048},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1379, col: 28, offset: 52049},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1379, col: 28, offset: 52049},
								val:        "____",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1379, col: 35, offset: 52056},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 35, offset: 52056},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 39, offset: 52060},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 46, offset: 52067},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1381, col: 1, offset: 52097},
			expr: &actionExpr{
				pos: position{line: 1381, col: 15, offset: 52111},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1381, col: 15, offset: 52111},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1381, col: 15, offset: 52111},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1381, col: 26, offset: 52122},
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 27, offset: 52123},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1381, col: 47, offset: 52143},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 72, offset: 52168},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1381, col: 81, offset: 52177},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1381, col: 108, offset: 52204},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1385, col: 1, offset: 52317},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1385, col: 30, offset: 52346},
				expr: &actionExpr{
					pos: position{line: 1385, col: 31, offset: 52347},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1385, col: 31, offset: 52347},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1385, col: 31, offset: 52347},
								expr: &ruleRefExpr{
									pos:  position{line: 1385, col: 32, offset: 52348},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1385, col: 55, offset: 52371},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1385, col: 64, offset: 52380},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1394, col: 1, offset: 52764},
			expr: &actionExpr{
				pos: position{line: 1394, col: 15, offset: 52778},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 15, offset: 52778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1394, col: 15, offset: 52778},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1394, col: 27, offset: 52790},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1395, col: 5, offset: 52814},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1399, col: 5, offset: 53000},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1399, col: 30, offset: 53025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1399, col: 39, offset: 53034},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1399, col: 66, offset: 53061},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1403, col: 1, offset: 53182},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1403, col: 30, offset: 53211},
				expr: &actionExpr{
					pos: position{line: 1403, col: 31, offset: 53212},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1403, col: 31, offset: 53212},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1403, col: 31, offset: 53212},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 32, offset: 53213},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1403, col: 55, offset: 53236},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 64, offset: 53245},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1410, col: 1, offset: 53582},
			expr: &seqExpr{
				pos: position{line: 1410, col: 26, offset: 53607},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1410, col: 26, offset: 53607},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1410, col: 33, offset: 53614},
						expr: &ruleRefExpr{
							pos:  position{line: 1410, col: 33, offset: 53614},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 37, offset: 53618},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1412, col: 1, offset: 53623},
			expr: &seqExpr{
				pos: position{line: 1412, col: 31, offset: 53653},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1412, col: 31, offset: 53653},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1412, col: 38, offset: 53660},
						expr: &ruleRefExpr{
							pos:  position{line: 1412, col: 38, offset: 53660},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 42, offset: 53664},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1414, col: 1, offset: 53669},
			expr: &choiceExpr{
				pos: position{line: 1414, col: 29, offset: 53697},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1414, col: 30, offset: 53698},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1414, col: 30, offset: 53698},
								val:        "****",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1414, col: 37, offset: 53705},
								expr: &ruleRefExpr{
									pos:  position{line: 1414, col: 37, offset: 53705},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1414, col: 41, offset: 53709},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 48, offset: 53716},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1416, col: 1, offset: 53721},
			expr: &actionExpr{
				pos: position{line: 1416, col: 17, offset: 53737},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 17, offset: 53737},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1416, col: 17, offset: 53737},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 28, offset: 53748},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 29, offset: 53749},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1416, col: 49, offset: 53769},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 76, offset: 53796},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1416, col: 85, offset: 53805},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1416, col: 114, offset: 53834},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1420, col: 1, offset: 53951},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1420, col: 32, offset: 53982},
				expr: &actionExpr{
					pos: position{line: 1420, col: 33, offset: 53983},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1420, col: 33, offset: 53983},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1420, col: 33, offset: 53983},
								expr: &ruleRefExpr{
									pos:  position{line: 1420, col: 34, offset: 53984},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1420, col: 59, offset: 54009},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1420, col: 68, offset: 54018},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1428, col: 1, offset: 54364},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1428, col: 23, offset: 54386},
				expr: &ruleRefExpr{
					pos:  position{line: 1428, col: 23, offset: 54386},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1430, col: 1, offset: 54407},
			expr: &actionExpr{
				pos: position{line: 1431, col: 5, offset: 54434},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 5, offset: 54434},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1431, col: 5, offset: 54434},
							expr: &ruleRefExpr{
								pos:  position{line: 1431, col: 6, offset: 54435},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1431, col: 10, offset: 54439},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1431, col: 19, offset: 54448},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1431, col: 19, offset: 54448},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1432, col: 15, offset: 54473},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1433, col: 15, offset: 54501},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1434, col: 15, offset: 54527},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1435, col: 15, offset: 54550},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1436, col: 15, offset: 54579},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1437, col: 15, offset: 54607},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1438, col: 15, offset: 54651},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1439, col: 15, offset: 54689},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1440, col: 15, offset: 54730},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1444, col: 1, offset: 54779},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1444, col: 22, offset: 54800},
				expr: &ruleRefExpr{
					pos:  position{line: 1444, col: 22, offset: 54800},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1446, col: 1, offset: 54820},
			expr: &actionExpr{
				pos: position{line: 1446, col: 22, offset: 54841},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 22, offset: 54841},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1446, col: 22, offset: 54841},
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 23, offset: 54842},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 27, offset: 54846},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1446, col: 36, offset: 54855},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1446, col: 36, offset: 54855},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1446, col: 48, offset: 54867},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1450, col: 1, offset: 54917},
			expr: &actionExpr{
				pos: position{line: 1450, col: 24, offset: 54940},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1450, col: 24, offset: 54940},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1450, col: 30, offset: 54946},
						expr: &ruleRefExpr{
							pos:  position{line: 1450, col: 31, offset: 54947},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1454, col: 1, offset: 55037},
			expr: &actionExpr{
				pos: position{line: 1454, col: 28, offset: 55064},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 28, offset: 55064},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1454, col: 28, offset: 55064},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1454, col: 37, offset: 55073},
								expr: &ruleRefExpr{
									pos:  position{line: 1454, col: 38, offset: 55074},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1454, col: 54, offset: 55090},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1461, col: 1, offset: 55332},
			expr: &actionExpr{
				pos: position{line: 1461, col: 10, offset: 55341},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 10, offset: 55341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1461, col: 10, offset: 55341},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1461, col: 21, offset: 55352},
								expr: &ruleRefExpr{
									pos:  position{line: 1461, col: 22, offset: 55353},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1461, col: 42, offset: 55373},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1462, col: 5, offset: 55392},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1462, col: 12, offset: 55399},
								expr: &ruleRefExpr{
									pos:  position{line: 1462, col: 13, offset: 55400},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 5, offset: 55422},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1463, col: 11, offset: 55428},
								expr: &ruleRefExpr{
									pos:  position{line: 1463, col: 12, offset: 55429},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1464, col: 6, offset: 55446},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1464, col: 6, offset: 55446},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1464, col: 23, offset: 55463},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1468, col: 1, offset: 55578},
			expr: &seqExpr{
				pos: position{line: 1468, col: 23, offset: 55600},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1468, col: 23, offset: 55600},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1468, col: 27, offset: 55604},
						expr: &ruleRefExpr{
							pos:  position{line: 1468, col: 27, offset: 55604},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1470, col: 1, offset: 55609},
			expr: &seqExpr{
				pos: position{line: 1470, col: 19, offset: 55627},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1470, col: 19, offset: 55627},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1470, col: 26, offset: 55634},
						expr: &ruleRefExpr{
							pos:  position{line: 1470, col: 26, offset: 55634},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 30, offset: 55638},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1473, col: 1, offset: 55706},
			expr: &actionExpr{
				pos: position{line: 1473, col: 20, offset: 55725},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 20, offset: 55725},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1473, col: 20, offset: 55725},
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 21, offset: 55726},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 36, offset: 55741},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1473, col: 42, offset: 55747},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 43, offset: 55748},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 55, offset: 55760},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 59, offset: 55764},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1477, col: 1, offset: 55832},
			expr: &actionExpr{
				pos: position{line: 1477, col: 14, offset: 55845},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 14, offset: 55845},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1477, col: 14, offset: 55845},
							expr: &ruleRefExpr{
								pos:  position{line: 1477, col: 15, offset: 55846},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1477, col: 30, offset: 55861},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1477, col: 36, offset: 55867},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 37, offset: 55868},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 49, offset: 55880},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1477, col: 53, offset: 55884},
							expr: &ruleRefExpr{
								pos:  position{line: 1477, col: 53, offset: 55884},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1481, col: 1, offset: 55953},
			expr: &actionExpr{
				pos: position{line: 1481, col: 14, offset: 55966},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 14, offset: 55966},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1481, col: 14, offset: 55966},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1481, col: 33, offset: 55985},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1481, col: 42, offset: 55994},
								expr: &seqExpr{
									pos: position{line: 1481, col: 43, offset: 55995},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1481, col: 43, offset: 55995},
											expr: &ruleRefExpr{
												pos:  position{line: 1481, col: 44, offset: 55996},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1481, col: 63, offset: 56015},
											expr: &ruleRefExpr{
												pos:  position{line: 1481, col: 64, offset: 56016},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1481, col: 68, offset: 56020},
											expr: &ruleRefExpr{
												pos:  position{line: 1481, col: 68, offset: 56020},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1481, col: 72, offset: 56024},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1481, col: 86, offset: 56038},
											expr: &ruleRefExpr{
												pos:  position{line: 1481, col: 86, offset: 56038},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1488, col: 1, offset: 56284},
			expr: &seqExpr{
				pos: position{line: 1488, col: 26, offset: 56309},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1488, col: 26, offset: 56309},
						val:        "////",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1488, col: 33, offset: 56316},
						expr: &ruleRefExpr{
							pos:  position{line: 1488, col: 33, offset: 56316},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 37, offset: 56320},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1490, col: 1, offset: 56325},
			expr: &seqExpr{
				pos: position{line: 1490, col: 31, offset: 56355},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1490, col: 31, offset: 56355},
						val:        "////",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1490, col: 38, offset: 56362},
						expr: &ruleRefExpr{
							pos:  position{line: 1490, col: 38, offset: 56362},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1490, col: 42, offset: 56366},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1492, col: 1, offset: 56371},
			expr: &choiceExpr{
				pos: position{line: 1492, col: 29, offset: 56399},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1492, col: 30, offset: 56400},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1492, col: 30, offset: 56400},
								val:        "////",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1492, col: 37, offset: 56407},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 37, offset: 56407},
									name: "WS",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1492, col: 41, offset: 56411},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1492, col: 48, offset: 56418},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1494, col: 1, offset: 56423},
			expr: &actionExpr{
				pos: position{line: 1494, col: 17, offset: 56439},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1494, col: 17, offset: 56439},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1494, col: 17, offset: 56439},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1494, col: 44, offset: 56466},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1494, col: 53, offset: 56475},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 83, offset: 56505},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1498, col: 1, offset: 56615},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1498, col: 32, offset: 56646},
				expr: &actionExpr{
					pos: position{line: 1498, col: 33, offset: 56647},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1498, col: 33, offset: 56647},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1498, col: 33, offset: 56647},
								expr: &ruleRefExpr{
									pos:  position{line: 1498, col: 34, offset: 56648},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1498, col: 59, offset: 56673},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1498, col: 68, offset: 56682},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1502, col: 1, offset: 56823},
			expr: &actionExpr{
				pos: position{line: 1502, col: 22, offset: 56844},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 22, offset: 56844},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1502, col: 22, offset: 56844},
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 23, offset: 56845},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1502, col: 45, offset: 56867},
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 45, offset: 56867},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1502, col: 49, offset: 56871},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 54, offset: 56876},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 63, offset: 56885},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1502, col: 89, offset: 56911},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1506, col: 1, offset: 56976},
			expr: &actionExpr{
				pos: position{line: 1506, col: 29, offset: 57004},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1506, col: 29, offset: 57004},
					expr: &choiceExpr{
						pos: position{line: 1506, col: 30, offset: 57005},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1506, col: 30, offset: 57005},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1506, col: 42, offset: 57017},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1506, col: 52, offset: 57027},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1506, col: 52, offset: 57027},
										expr: &ruleRefExpr{
											pos:  position{line: 1506, col: 53, offset: 57028},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1506, col: 58, offset: 57033,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1514, col: 1, offset: 57342},
			expr: &choiceExpr{
				pos: position{line: 1514, col: 17, offset: 57358},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1514, col: 17, offset: 57358},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 49, offset: 57390},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 78, offset: 57419},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1516, col: 1, offset: 57455},
			expr: &litMatcher{
				pos:        position{line: 1516, col: 26, offset: 57480},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1519, col: 1, offset: 57552},
			expr: &actionExpr{
				pos: position{line: 1519, col: 31, offset: 57582},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 31, offset: 57582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1519, col: 31, offset: 57582},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1519, col: 42, offset: 57593},
								expr: &ruleRefExpr{
									pos:  position{line: 1519, col: 43, offset: 57594},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 63, offset: 57614},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 70, offset: 57621},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1524, col: 1, offset: 57851},
			expr: &actionExpr{
				pos: position{line: 1525, col: 5, offset: 57891},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1525, col: 5, offset: 57891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1525, col: 5, offset: 57891},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1525, col: 16, offset: 57902},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1525, col: 16, offset: 57902},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1525, col: 16, offset: 57902},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1525, col: 19, offset: 57905},
											expr: &choiceExpr{
												pos: position{line: 1525, col: 20, offset: 57906},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1525, col: 20, offset: 57906},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1525, col: 32, offset: 57918},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1525, col: 41, offset: 57927},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1525, col: 42, offset: 57928},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1525, col: 42, offset: 57928},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1525, col: 43, offset: 57929},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1525, col: 48, offset: 57934,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 8, offset: 58025},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1530, col: 5, offset: 58088},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1530, col: 16, offset: 58099},
								expr: &actionExpr{
									pos: position{line: 1531, col: 9, offset: 58109},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1531, col: 9, offset: 58109},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1531, col: 9, offset: 58109},
												expr: &ruleRefExpr{
													pos:  position{line: 1531, col: 10, offset: 58110},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1532, col: 9, offset: 58129},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1532, col: 20, offset: 58140},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1532, col: 20, offset: 58140},
														expr: &choiceExpr{
															pos: position{line: 1532, col: 21, offset: 58141},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1532, col: 21, offset: 58141},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1532, col: 33, offset: 58153},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1532, col: 43, offset: 58163},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1532, col: 43, offset: 58163},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1532, col: 44, offset: 58164},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1532, col: 49, offset: 58169,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1534, col: 12, offset: 58226},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1541, col: 1, offset: 58456},
			expr: &actionExpr{
				pos: position{line: 1541, col: 39, offset: 58494},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 39, offset: 58494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1541, col: 39, offset: 58494},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1541, col: 50, offset: 58505},
								expr: &ruleRefExpr{
									pos:  position{line: 1541, col: 51, offset: 58506},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1542, col: 9, offset: 58534},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1542, col: 31, offset: 58556},
							expr: &ruleRefExpr{
								pos:  position{line: 1542, col: 31, offset: 58556},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1542, col: 35, offset: 58560},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1542, col: 43, offset: 58568},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1542, col: 50, offset: 58575},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1542, col: 92, offset: 58617},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1542, col: 93, offset: 58618},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1542, col: 93, offset: 58618},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1542, col: 115, offset: 58640},
											expr: &ruleRefExpr{
												pos:  position{line: 1542, col: 115, offset: 58640},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1542, col: 119, offset: 58644},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1542, col: 126, offset: 58651},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1547, col: 1, offset: 58810},
			expr: &actionExpr{
				pos: position{line: 1547, col: 44, offset: 58853},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1547, col: 44, offset: 58853},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1547, col: 50, offset: 58859},
						expr: &ruleRefExpr{
							pos:  position{line: 1547, col: 51, offset: 58860},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1551, col: 1, offset: 58944},
			expr: &actionExpr{
				pos: position{line: 1552, col: 5, offset: 58999},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 5, offset: 58999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1552, col: 5, offset: 58999},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1552, col: 11, offset: 59005},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1552, col: 11, offset: 59005},
									expr: &choiceExpr{
										pos: position{line: 1552, col: 12, offset: 59006},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1552, col: 12, offset: 59006},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1552, col: 24, offset: 59018},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1552, col: 34, offset: 59028},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1552, col: 34, offset: 59028},
														expr: &ruleRefExpr{
															pos:  position{line: 1552, col: 35, offset: 59029},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1552, col: 57, offset: 59051},
														expr: &ruleRefExpr{
															pos:  position{line: 1552, col: 58, offset: 59052},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1552, col: 62, offset: 59056,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1554, col: 8, offset: 59105},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1559, col: 1, offset: 59231},
			expr: &actionExpr{
				pos: position{line: 1560, col: 5, offset: 59269},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 5, offset: 59269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1560, col: 5, offset: 59269},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1560, col: 16, offset: 59280},
								expr: &ruleRefExpr{
									pos:  position{line: 1560, col: 17, offset: 59281},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1561, col: 5, offset: 59305},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 5, offset: 59519},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1568, col: 12, offset: 59526},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1572, col: 1, offset: 59676},
			expr: &actionExpr{
				pos: position{line: 1572, col: 16, offset: 59691},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1572, col: 16, offset: 59691},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1577, col: 1, offset: 59774},
			expr: &actionExpr{
				pos: position{line: 1577, col: 39, offset: 59812},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1577, col: 39, offset: 59812},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1577, col: 45, offset: 59818},
						expr: &ruleRefExpr{
							pos:  position{line: 1577, col: 46, offset: 59819},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1581, col: 1, offset: 59899},
			expr: &actionExpr{
				pos: position{line: 1581, col: 38, offset: 59936},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 38, offset: 59936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1581, col: 38, offset: 59936},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1581, col: 44, offset: 59942},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1581, col: 44, offset: 59942},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1581, col: 44, offset: 59942},
											expr: &ruleRefExpr{
												pos:  position{line: 1581, col: 46, offset: 59944},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1581, col: 57, offset: 59955},
											expr: &choiceExpr{
												pos: position{line: 1581, col: 58, offset: 59956},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1581, col: 58, offset: 59956},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1581, col: 70, offset: 59968},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1581, col: 80, offset: 59978},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1581, col: 80, offset: 59978},
																expr: &ruleRefExpr{
																	pos:  position{line: 1581, col: 81, offset: 59979},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1581, col: 86, offset: 59984,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1583, col: 4, offset: 60025},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1590, col: 1, offset: 60199},
			expr: &actionExpr{
				pos: position{line: 1590, col: 14, offset: 60212},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 14, offset: 60212},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1590, col: 14, offset: 60212},
							val:        "((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 19, offset: 60217},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 25, offset: 60223},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1590, col: 43, offset: 60241},
							val:        "))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1594, col: 1, offset: 60306},
			expr: &actionExpr{
				pos: position{line: 1594, col: 21, offset: 60326},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1594, col: 21, offset: 60326},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1594, col: 30, offset: 60335},
						expr: &choiceExpr{
							pos: position{line: 1594, col: 31, offset: 60336},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1594, col: 31, offset: 60336},
									name: "SimpleWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1594, col: 44, offset: 60349},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1594, col: 57, offset: 60362},
									name: "WS",
								},
								&ruleRefExpr{
									pos:  position{line: 1594, col: 62, offset: 60367},
									name: "AnyChars",
								},
								&actionExpr{
									pos: position{line: 1594, col: 73, offset: 60378},
									run: (*parser).callonIndexTermContent9,
									expr: &oneOrMoreExpr{
										pos: position{line: 1594, col: 73, offset: 60378},
										expr: &seqExpr{
											pos: position{line: 1594, col: 74, offset: 60379},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1594, col: 74, offset: 60379},
													expr: &litMatcher{
														pos:        position{line: 1594, col: 75, offset: 60380},
														val:        "))",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1594, col: 80, offset: 60385,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1600, col: 1, offset: 60492},
			expr: &actionExpr{
				pos: position{line: 1600, col: 23, offset: 60514},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1600, col: 23, offset: 60514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1600, col: 23, offset: 60514},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 29, offset: 60520},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1600, col: 36, offset: 60527},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 5, offset: 60559},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1601, col: 11, offset: 60565},
								expr: &actionExpr{
									pos: position{line: 1601, col: 12, offset: 60566},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1601, col: 12, offset: 60566},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1601, col: 12, offset: 60566},
												expr: &ruleRefExpr{
													pos:  position{line: 1601, col: 12, offset: 60566},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1601, col: 16, offset: 60570},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1601, col: 20, offset: 60574},
												expr: &ruleRefExpr{
													pos:  position{line: 1601, col: 20, offset: 60574},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1601, col: 24, offset: 60578},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1601, col: 33, offset: 60587},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1602, col: 5, offset: 60645},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1602, col: 11, offset: 60651},
								expr: &actionExpr{
									pos: position{line: 1602, col: 12, offset: 60652},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1602, col: 12, offset: 60652},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1602, col: 12, offset: 60652},
												expr: &ruleRefExpr{
													pos:  position{line: 1602, col: 12, offset: 60652},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1602, col: 16, offset: 60656},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1602, col: 20, offset: 60660},
												expr: &ruleRefExpr{
													pos:  position{line: 1602, col: 20, offset: 60660},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1602, col: 24, offset: 60664},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1602, col: 33, offset: 60673},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 5, offset: 60731},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1607, col: 1, offset: 60810},
			expr: &actionExpr{
				pos: position{line: 1607, col: 30, offset: 60839},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1607, col: 30, offset: 60839},
					expr: &choiceExpr{
						pos: position{line: 1607, col: 31, offset: 60840},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1607, col: 31, offset: 60840},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1607, col: 42, offset: 60851},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1613, col: 1, offset: 60996},
			expr: &actionExpr{
				pos: position{line: 1613, col: 14, offset: 61009},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 14, offset: 61009},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1613, col: 14, offset: 61009},
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 15, offset: 61010},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1613, col: 19, offset: 61014},
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 19, offset: 61014},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1613, col: 23, offset: 61018},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1620, col: 1, offset: 61165},
			expr: &charClassMatcher{
				pos:        position{line: 1620, col: 13, offset: 61177},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1622, col: 1, offset: 61187},
			expr: &choiceExpr{
				pos: position{line: 1622, col: 16, offset: 61202},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1622, col: 16, offset: 61202},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1622, col: 22, offset: 61208},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1622, col: 28, offset: 61214},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1622, col: 34, offset: 61220},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1622, col: 40, offset: 61226},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1622, col: 46, offset: 61232},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1624, col: 1, offset: 61238},
			expr: &actionExpr{
				pos: position{line: 1624, col: 14, offset: 61251},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1624, col: 14, offset: 61251},
					expr: &charClassMatcher{
						pos:        position{line: 1624, col: 14, offset: 61251},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "AlphanumsAndSpaces",
			pos:  position{line: 1628, col: 1, offset: 61297},
			expr: &actionExpr{
				pos: position{line: 1628, col: 23, offset: 61319},
				run: (*parser).callonAlphanumsAndSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1628, col: 23, offset: 61319},
					expr: &charClassMatcher{
						pos:        position{line: 1628, col: 23, offset: 61319},
						val:        "[\\pL0-9 ]",
						chars:      []rune{' '},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PunctuationMark",
			pos:  position{line: 1632, col: 1, offset: 61366},
			expr: &choiceExpr{
				pos: position{line: 1632, col: 20, offset: 61385},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1632, col: 20, offset: 61385},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1632, col: 26, offset: 61391},
						val:        "?",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1632, col: 32, offset: 61397},
						val:        "!",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1632, col: 38, offset: 61403},
						val:        ",",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1632, col: 44, offset: 61409},
						val:        ";",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1632, col: 50, offset: 61415},
						val:        ":",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1634, col: 1, offset: 61420},
			expr: &actionExpr{
				pos: position{line: 1634, col: 15, offset: 61434},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 15, offset: 61434},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1634, col: 15, offset: 61434},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1634, col: 25, offset: 61444},
							expr: &choiceExpr{
								pos: position{line: 1634, col: 27, offset: 61446},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1634, col: 27, offset: 61446},
										name: "WS",
									},
									&litMatcher{
										pos:        position{line: 1634, col: 32, offset: 61451},
										val:        ",",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1634, col: 38, offset: 61457},
										val:        "]",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1634, col: 44, offset: 61463},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AnyChars",
			pos:  position{line: 1638, col: 1, offset: 61670},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 13, offset: 61682},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1638, col: 13, offset: 61682},
						expr: &choiceExpr{
							pos: position{line: 1640, col: 5, offset: 61839},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1640, col: 5, offset: 61839},
									run: (*parser).callonAnyChars4,
									expr: &seqExpr{
										pos: position{line: 1640, col: 6, offset: 61840},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1640, col: 6, offset: 61840},
												expr: &choiceExpr{
													pos: position{line: 1640, col: 8, offset: 61842},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1640, col: 8, offset: 61842},
															name: "Alphanum",
														},
														&litMatcher{
															pos:        position{line: 1640, col: 19, offset: 61853},
															val:        ",",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 1640, col: 25, offset: 61859},
															val:        ";",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 1640, col: 31, offset: 61865},
															val:        "}",
															ignoreCase: false,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1640, col: 36, offset: 61870},
												name: "ConstrainedQuotedTextMarker",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1644, col: 8, offset: 62018},
									run: (*parser).callonAnyChars13,
									expr: &seqExpr{
										pos: position{line: 1644, col: 9, offset: 62019},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1644, col: 9, offset: 62019},
												name: "Alphanums",
											},
											&zeroOrOneExpr{
												pos: position{line: 1644, col: 19, offset: 62029},
												expr: &seqExpr{
													pos: position{line: 1644, col: 20, offset: 62030},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1644, col: 20, offset: 62030},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 21, offset: 62031},
																name: "Newline",
															},
														},
														&notExpr{
															pos: position{line: 1644, col: 29, offset: 62039},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 30, offset: 62040},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 1644, col: 33, offset: 62043},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 34, offset: 62044},
																name: "Parenthesis",
															},
														},
														&notExpr{
															pos: position{line: 1644, col: 46, offset: 62056},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 47, offset: 62057},
																name: "UnconstrainedQuotedTextPrefix",
															},
														},
														&notExpr{
															pos: position{line: 1644, col: 77, offset: 62087},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 78, offset: 62088},
																name: "LabeledListItemSeparator",
															},
														},
														&notExpr{
															pos: position{line: 1644, col: 103, offset: 62113},
															expr: &ruleRefExpr{
																pos:  position{line: 1644, col: 104, offset: 62114},
																name: "PunctuationMark",
															},
														},
														&anyMatcher{
															line: 1644, col: 120, offset: 62130,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1647, col: 7, offset: 62188},
						run: (*parser).callonAnyChars31,
						expr: &ruleRefExpr{
							pos:  position{line: 1647, col: 7, offset: 62188},
							name: "PunctuationMark",
						},
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1652, col: 1, offset: 62478},
			expr: &actionExpr{
				pos: position{line: 1652, col: 12, offset: 62489},
				run: (*parser).callonAnyChar1,
				expr: &seqExpr{
					pos: position{line: 1652, col: 12, offset: 62489},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1652, col: 12, offset: 62489},
							expr: &ruleRefExpr{
								pos:  position{line: 1652, col: 13, offset: 62490},
								name: "EOF",
							},
						},
						&anyMatcher{
							line: 1652, col: 17, offset: 62494,
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1656, col: 1, offset: 62646},
			expr: &oneOrMoreExpr{
				pos: position{line: 1656, col: 11, offset: 62656},
				expr: &ruleRefExpr{
					pos:  position{line: 1656, col: 11, offset: 62656},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1658, col: 1, offset: 62662},
			expr: &actionExpr{
				pos: position{line: 1658, col: 17, offset: 62678},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1658, col: 17, offset: 62678},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1658, col: 26, offset: 62687},
						expr: &choiceExpr{
							pos: position{line: 1658, col: 27, offset: 62688},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1658, col: 27, offset: 62688},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1658, col: 38, offset: 62699},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1662, col: 1, offset: 62791},
			expr: &actionExpr{
				pos: position{line: 1662, col: 25, offset: 62815},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1662, col: 25, offset: 62815},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1662, col: 34, offset: 62824},
						expr: &seqExpr{
							pos: position{line: 1662, col: 35, offset: 62825},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1662, col: 35, offset: 62825},
									expr: &ruleRefExpr{
										pos:  position{line: 1662, col: 36, offset: 62826},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1662, col: 40, offset: 62830},
									expr: &ruleRefExpr{
										pos:  position{line: 1662, col: 41, offset: 62831},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1662, col: 44, offset: 62834},
									expr: &litMatcher{
										pos:        position{line: 1662, col: 45, offset: 62835},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1662, col: 49, offset: 62839,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1666, col: 1, offset: 62903},
			expr: &actionExpr{
				pos: position{line: 1666, col: 13, offset: 62915},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1666, col: 13, offset: 62915},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1666, col: 23, offset: 62925},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1666, col: 23, offset: 62925},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1666, col: 34, offset: 62936},
								expr: &choiceExpr{
									pos: position{line: 1666, col: 35, offset: 62937},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1666, col: 35, offset: 62937},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 46, offset: 62948},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1670, col: 1, offset: 63041},
			expr: &oneOrMoreExpr{
				pos: position{line: 1670, col: 13, offset: 63053},
				expr: &choiceExpr{
					pos: position{line: 1670, col: 14, offset: 63054},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1670, col: 14, offset: 63054},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1670, col: 99, offset: 63139},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1670, col: 105, offset: 63145},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1672, col: 1, offset: 63266},
			expr: &actionExpr{
				pos: position{line: 1672, col: 21, offset: 63286},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1672, col: 21, offset: 63286},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1672, col: 31, offset: 63296},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1672, col: 31, offset: 63296},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1672, col: 42, offset: 63307},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1676, col: 1, offset: 63386},
			expr: &oneOrMoreExpr{
				pos: position{line: 1676, col: 22, offset: 63407},
				expr: &choiceExpr{
					pos: position{line: 1676, col: 23, offset: 63408},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1676, col: 23, offset: 63408},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1676, col: 110, offset: 63495},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1676, col: 116, offset: 63501},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1678, col: 1, offset: 63550},
			expr: &actionExpr{
				pos: position{line: 1678, col: 8, offset: 63557},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1678, col: 8, offset: 63557},
					expr: &choiceExpr{
						pos: position{line: 1678, col: 9, offset: 63558},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1678, col: 9, offset: 63558},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1678, col: 22, offset: 63571},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1678, col: 22, offset: 63571},
										expr: &ruleRefExpr{
											pos:  position{line: 1678, col: 23, offset: 63572},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1678, col: 31, offset: 63580},
										expr: &ruleRefExpr{
											pos:  position{line: 1678, col: 32, offset: 63581},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1678, col: 35, offset: 63584},
										expr: &litMatcher{
											pos:        position{line: 1678, col: 36, offset: 63585},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1678, col: 40, offset: 63589},
										expr: &litMatcher{
											pos:        position{line: 1678, col: 41, offset: 63590},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1678, col: 46, offset: 63595,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1682, col: 1, offset: 63636},
			expr: &choiceExpr{
				pos: position{line: 1682, col: 15, offset: 63650},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1682, col: 15, offset: 63650},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1682, col: 27, offset: 63662},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1682, col: 40, offset: 63675},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1682, col: 51, offset: 63686},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1682, col: 62, offset: 63697},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1684, col: 1, offset: 63708},
			expr: &actionExpr{
				pos: position{line: 1684, col: 7, offset: 63714},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1684, col: 7, offset: 63714},
					expr: &choiceExpr{
						pos: position{line: 1684, col: 8, offset: 63715},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1684, col: 8, offset: 63715},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1684, col: 21, offset: 63728},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1684, col: 21, offset: 63728},
										expr: &ruleRefExpr{
											pos:  position{line: 1684, col: 22, offset: 63729},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 30, offset: 63737},
										expr: &ruleRefExpr{
											pos:  position{line: 1684, col: 31, offset: 63738},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 34, offset: 63741},
										expr: &litMatcher{
											pos:        position{line: 1684, col: 35, offset: 63742},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 39, offset: 63746},
										expr: &litMatcher{
											pos:        position{line: 1684, col: 40, offset: 63747},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 44, offset: 63751},
										expr: &litMatcher{
											pos:        position{line: 1684, col: 45, offset: 63752},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 50, offset: 63757},
										expr: &litMatcher{
											pos:        position{line: 1684, col: 51, offset: 63758},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1684, col: 56, offset: 63763},
										expr: &litMatcher{
											pos:        position{line: 1684, col: 57, offset: 63764},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1684, col: 62, offset: 63769,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1688, col: 1, offset: 63810},
			expr: &actionExpr{
				pos: position{line: 1688, col: 10, offset: 63819},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1688, col: 10, offset: 63819},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1692, col: 1, offset: 63861},
			expr: &actionExpr{
				pos: position{line: 1692, col: 11, offset: 63871},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1692, col: 11, offset: 63871},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1692, col: 11, offset: 63871},
							expr: &litMatcher{
								pos:        position{line: 1692, col: 11, offset: 63871},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1692, col: 16, offset: 63876},
							expr: &ruleRefExpr{
								pos:  position{line: 1692, col: 16, offset: 63876},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1696, col: 1, offset: 63928},
			expr: &choiceExpr{
				pos: position{line: 1696, col: 7, offset: 63934},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1696, col: 7, offset: 63934},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1696, col: 13, offset: 63940},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1696, col: 13, offset: 63940},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1700, col: 1, offset: 63981},
			expr: &choiceExpr{
				pos: position{line: 1700, col: 12, offset: 63992},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1700, col: 12, offset: 63992},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1700, col: 21, offset: 64001},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1700, col: 28, offset: 64008},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1702, col: 1, offset: 64014},
			expr: &notExpr{
				pos: position{line: 1702, col: 8, offset: 64021},
				expr: &anyMatcher{
					line: 1702, col: 9, offset: 64022,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1704, col: 1, offset: 64025},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 8, offset: 64032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1704, col: 8, offset: 64032},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 18, offset: 64042},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine6()
}

func (c *current) onVerbatimLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string))
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onContinuedListItemBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonContinuedListItemBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemBlock1(stack["block"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes7(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextOnlyLinkAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes7(stack["elements"])
}

func (c *current) onTextOnlyLinkAttributes28(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextOnlyLinkAttributes28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes28(stack["elements"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onTextAndMoreLinkAttributes7(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextAndMoreLinkAttributes7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes7(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes26(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonTextAndMoreLinkAttributes26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes26(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onAlphanumsAndSpaces1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanumsAndSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanumsAndSpaces1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onAnyChars4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyChars4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars4()
}

func (c *current) onAnyChars13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyChars13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars13()
}

func (c *current) onAnyChars31() (interface{}, error) {
	// punctuation marks are treated separately, so any following macro (image, footnote, etc.) is not included in this rule
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChars31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChars31()
}

func (c *current) onAnyChar1() (interface{}, error) {
	// this is a fall-back rule in case all preceeding rules failed to match the current content.
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
