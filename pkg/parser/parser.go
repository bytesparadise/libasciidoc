// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragment",
			pos:  position{line: 21, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 448},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 448},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 16, offset: 459},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 17, offset: 460},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 482},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 24, col: 9, offset: 500},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 9, offset: 500},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 25, col: 11, offset: 521},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 11, offset: 546},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 11, offset: 570},
										name: "ShortcutParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 28, col: 11, offset: 598},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 29, col: 11, offset: 629},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 654},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 31, col: 11, offset: 679},
										name: "DocumentHeader",
									},
									&ruleRefExpr{
										pos:  position{line: 32, col: 11, offset: 734},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 33, col: 11, offset: 790},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 34, col: 11, offset: 876},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 937},
										name: "ListElements",
									},
									&ruleRefExpr{
										pos:  position{line: 36, col: 11, offset: 960},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 37, col: 11, offset: 976},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 38, col: 11, offset: 1004},
										name: "AdmonitionParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1034},
										name: "LiteralParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1061},
										name: "FrontMatter",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1083},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentWithinVerbatimBlock",
			pos:  position{line: 94, col: 1, offset: 2772},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 2815},
				run: (*parser).callonDocumentFragmentWithinVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 2815},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2815},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 14, offset: 2824},
								expr: &choiceExpr{
									pos: position{line: 96, col: 9, offset: 2834},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 96, col: 9, offset: 2834},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 97, col: 11, offset: 2858},
											name: "RawLine",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 8, offset: 2873},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 102, col: 1, offset: 2915},
			expr: &actionExpr{
				pos: position{line: 103, col: 5, offset: 2931},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 103, col: 5, offset: 2931},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 103, col: 5, offset: 2931},
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 6, offset: 2932},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 2940},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 104, col: 14, offset: 2949},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 104, col: 14, offset: 2949},
									expr: &charClassMatcher{
										pos:        position{line: 104, col: 14, offset: 2949},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 5, offset: 3006},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 113, col: 1, offset: 3140},
			expr: &actionExpr{
				pos: position{line: 114, col: 5, offset: 3171},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 114, col: 5, offset: 3171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 114, col: 5, offset: 3171},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 114, col: 14, offset: 3180},
								expr: &choiceExpr{
									pos: position{line: 115, col: 9, offset: 3190},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 115, col: 9, offset: 3190},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 116, col: 11, offset: 3252},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 5, offset: 3281},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragmentElement",
			pos:  position{line: 127, col: 1, offset: 3581},
			expr: &choiceExpr{
				pos: position{line: 128, col: 5, offset: 3615},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 5, offset: 3615},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 129, col: 7, offset: 3642},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 135, col: 1, offset: 3933},
			expr: &choiceExpr{
				pos: position{line: 135, col: 19, offset: 3951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 19, offset: 3951},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 135, col: 19, offset: 3951},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 3989},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 137, col: 5, offset: 3989},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4029},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 139, col: 5, offset: 4029},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 141, col: 5, offset: 4079},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 141, col: 5, offset: 4079},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4125},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 143, col: 5, offset: 4125},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 150, col: 1, offset: 4385},
			expr: &actionExpr{
				pos: position{line: 151, col: 5, offset: 4414},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 151, col: 5, offset: 4414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 151, col: 5, offset: 4414},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 151, col: 9, offset: 4418},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 15, offset: 4424},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 151, col: 30, offset: 4439},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 5, offset: 4448},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 11, offset: 4454},
								expr: &ruleRefExpr{
									pos:  position{line: 152, col: 12, offset: 4455},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 153, col: 5, offset: 4488},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 161, col: 1, offset: 4788},
			expr: &actionExpr{
				pos: position{line: 161, col: 18, offset: 4805},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 161, col: 18, offset: 4805},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 161, col: 18, offset: 4805},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 161, col: 28, offset: 4815},
							expr: &charClassMatcher{
								pos:        position{line: 161, col: 29, offset: 4816},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 165, col: 1, offset: 4872},
			expr: &actionExpr{
				pos: position{line: 166, col: 5, offset: 4906},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 166, col: 5, offset: 4906},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 166, col: 5, offset: 4906},
							name: "Spaces",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 12, offset: 4913},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 21, offset: 4922},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 22, offset: 4923},
									name: "AttributeDeclarationValueElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 170, col: 1, offset: 5045},
			expr: &actionExpr{
				pos: position{line: 170, col: 37, offset: 5081},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 170, col: 37, offset: 5081},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 170, col: 37, offset: 5081},
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 38, offset: 5082},
								name: "EOL",
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 5, offset: 5091},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 172, col: 9, offset: 5109},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 172, col: 10, offset: 5110},
										run: (*parser).callonAttributeDeclarationValueElement7,
										expr: &oneOrMoreExpr{
											pos: position{line: 172, col: 10, offset: 5110},
											expr: &charClassMatcher{
												pos:        position{line: 172, col: 10, offset: 5110},
												val:        "[^\\r\\n{]",
												chars:      []rune{'\r', '\n', '{'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 175, col: 11, offset: 5205},
										name: "AttributeSubstitution",
									},
									&actionExpr{
										pos: position{line: 176, col: 12, offset: 5238},
										run: (*parser).callonAttributeDeclarationValueElement11,
										expr: &litMatcher{
											pos:        position{line: 176, col: 12, offset: 5238},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 183, col: 1, offset: 5375},
			expr: &choiceExpr{
				pos: position{line: 183, col: 19, offset: 5393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 183, col: 19, offset: 5393},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 183, col: 19, offset: 5393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 183, col: 19, offset: 5393},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 183, col: 24, offset: 5398},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 30, offset: 5404},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 183, col: 45, offset: 5419},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 183, col: 49, offset: 5423},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 49, offset: 5423},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 183, col: 56, offset: 5430},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5490},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 185, col: 5, offset: 5490},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 185, col: 9, offset: 5494},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 15, offset: 5500},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 185, col: 30, offset: 5515},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 185, col: 35, offset: 5520},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 35, offset: 5520},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 185, col: 42, offset: 5527},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 192, col: 1, offset: 5795},
			expr: &actionExpr{
				pos: position{line: 193, col: 5, offset: 5818},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 193, col: 5, offset: 5818},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 193, col: 16, offset: 5829},
						expr: &choiceExpr{
							pos: position{line: 195, col: 9, offset: 5896},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 195, col: 10, offset: 5897},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 195, col: 10, offset: 5897},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 195, col: 10, offset: 5897},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 195, col: 18, offset: 5905},
													name: "ShortHandAnchor",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 195, col: 35, offset: 5922},
												expr: &ruleRefExpr{
													pos:  position{line: 195, col: 35, offset: 5922},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 195, col: 42, offset: 5929},
												name: "EOL",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 199, col: 12, offset: 6043},
									run: (*parser).callonBlockAttributes12,
									expr: &seqExpr{
										pos: position{line: 199, col: 12, offset: 6043},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 199, col: 12, offset: 6043},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 199, col: 19, offset: 6050},
													name: "ShortHandTitle",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 199, col: 35, offset: 6066},
												expr: &ruleRefExpr{
													pos:  position{line: 199, col: 35, offset: 6066},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 199, col: 42, offset: 6073},
												name: "EOL",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 203, col: 12, offset: 6157},
									run: (*parser).callonBlockAttributes19,
									expr: &seqExpr{
										pos: position{line: 203, col: 12, offset: 6157},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 203, col: 12, offset: 6157},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 203, col: 24, offset: 6169},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 203, col: 44, offset: 6189},
												expr: &ruleRefExpr{
													pos:  position{line: 203, col: 44, offset: 6189},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 203, col: 51, offset: 6196},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 211, col: 1, offset: 6374},
			expr: &actionExpr{
				pos: position{line: 212, col: 5, offset: 6398},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 212, col: 5, offset: 6398},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 212, col: 5, offset: 6398},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 5, offset: 6406},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 213, col: 16, offset: 6417},
								expr: &actionExpr{
									pos: position{line: 214, col: 9, offset: 6427},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 215, col: 13, offset: 6441},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 215, col: 13, offset: 6441},
												expr: &litMatcher{
													pos:        position{line: 215, col: 14, offset: 6442},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 216, col: 13, offset: 6474},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 216, col: 24, offset: 6485},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 216, col: 24, offset: 6485},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 216, col: 46, offset: 6507},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 5, offset: 6590},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 226, col: 1, offset: 6718},
			expr: &actionExpr{
				pos: position{line: 227, col: 4, offset: 6740},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 227, col: 4, offset: 6740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 4, offset: 6740},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6750},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 229, col: 9, offset: 6763},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 229, col: 9, offset: 6763},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 229, col: 18, offset: 6772},
										expr: &choiceExpr{
											pos: position{line: 230, col: 13, offset: 6786},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 230, col: 14, offset: 6787},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 230, col: 14, offset: 6787},
														expr: &charClassMatcher{
															pos:        position{line: 230, col: 14, offset: 6787},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 233, col: 15, offset: 6953},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 234, col: 15, offset: 6986},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 235, col: 16, offset: 7023},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 235, col: 16, offset: 7023},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 241, col: 5, offset: 7209},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 246, col: 1, offset: 7310},
			expr: &actionExpr{
				pos: position{line: 246, col: 19, offset: 7328},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 246, col: 19, offset: 7328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 246, col: 19, offset: 7328},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 23, offset: 7332},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 247, col: 5, offset: 7344},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 247, col: 5, offset: 7344},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 247, col: 5, offset: 7344},
											expr: &charClassMatcher{
												pos:        position{line: 247, col: 6, offset: 7345},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 248, col: 5, offset: 7457},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 248, col: 14, offset: 7466},
												expr: &choiceExpr{
													pos: position{line: 249, col: 9, offset: 7476},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 249, col: 10, offset: 7477},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 249, col: 10, offset: 7477},
																expr: &charClassMatcher{
																	pos:        position{line: 249, col: 10, offset: 7477},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 252, col: 11, offset: 7574},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 253, col: 11, offset: 7603},
															name: "AttributeSubstitution",
														},
														&actionExpr{
															pos: position{line: 254, col: 12, offset: 7636},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 254, col: 12, offset: 7636},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 265, col: 1, offset: 8036},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8062},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8062},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8062},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 266, col: 9, offset: 8066},
							expr: &litMatcher{
								pos:        position{line: 266, col: 10, offset: 8067},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 5, offset: 8237},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 268, col: 31, offset: 8263},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 32, offset: 8264},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 5, offset: 8296},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 269, col: 21, offset: 8312},
								expr: &choiceExpr{
									pos: position{line: 269, col: 22, offset: 8313},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 22, offset: 8313},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 44, offset: 8335},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 5, offset: 8356},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 283, col: 1, offset: 8884},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8918},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 8918},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 10, offset: 8923},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 9, offset: 8933},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 5, offset: 8963},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 287, col: 12, offset: 8970},
								expr: &actionExpr{
									pos: position{line: 288, col: 9, offset: 8981},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 288, col: 9, offset: 8981},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 288, col: 9, offset: 8981},
												expr: &litMatcher{
													pos:        position{line: 288, col: 10, offset: 8982},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 288, col: 14, offset: 8986},
												expr: &litMatcher{
													pos:        position{line: 288, col: 15, offset: 8987},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 289, col: 9, offset: 8999},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 290, col: 13, offset: 9019},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 290, col: 13, offset: 9019},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 291, col: 15, offset: 9055},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 292, col: 15, offset: 9094},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 295, col: 8, offset: 9170},
							expr: &seqExpr{
								pos: position{line: 295, col: 9, offset: 9171},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 295, col: 9, offset: 9171},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 295, col: 13, offset: 9175},
										expr: &ruleRefExpr{
											pos:  position{line: 295, col: 13, offset: 9175},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 296, col: 5, offset: 9189},
							run: (*parser).callonFirstPositionalAttributes24,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 312, col: 1, offset: 9605},
			expr: &actionExpr{
				pos: position{line: 312, col: 25, offset: 9629},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 312, col: 25, offset: 9629},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 25, offset: 9629},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 29, offset: 9633},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 33, offset: 9637},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 316, col: 1, offset: 9711},
			expr: &actionExpr{
				pos: position{line: 316, col: 23, offset: 9733},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 316, col: 23, offset: 9733},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 316, col: 30, offset: 9740},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 321, col: 1, offset: 9866},
			expr: &actionExpr{
				pos: position{line: 321, col: 30, offset: 9895},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 321, col: 30, offset: 9895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 30, offset: 9895},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 34, offset: 9899},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 40, offset: 9905},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 326, col: 1, offset: 10027},
			expr: &actionExpr{
				pos: position{line: 326, col: 29, offset: 10055},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 326, col: 29, offset: 10055},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 326, col: 29, offset: 10055},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 33, offset: 10059},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 41, offset: 10067},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 331, col: 1, offset: 10180},
			expr: &choiceExpr{
				pos: position{line: 332, col: 5, offset: 10212},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 10212},
						name: "SingleQuotedAttributeRawValue",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 7, offset: 10249},
						name: "DoubleQuotedAttributeRawValue",
					},
					&actionExpr{
						pos: position{line: 334, col: 7, offset: 10286},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 334, col: 7, offset: 10286},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 334, col: 7, offset: 10286},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 334, col: 16, offset: 10295},
										expr: &choiceExpr{
											pos: position{line: 337, col: 9, offset: 10477},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 337, col: 10, offset: 10478},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 337, col: 10, offset: 10478},
														expr: &charClassMatcher{
															pos:        position{line: 337, col: 10, offset: 10478},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 340, col: 11, offset: 10584},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 342, col: 11, offset: 10633},
													name: "AttributeSubstitution",
												},
												&actionExpr{
													pos: position{line: 343, col: 12, offset: 10666},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 343, col: 12, offset: 10666},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 346, col: 8, offset: 10749},
									expr: &notExpr{
										pos: position{line: 346, col: 10, offset: 10751},
										expr: &seqExpr{
											pos: position{line: 346, col: 12, offset: 10753},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 346, col: 12, offset: 10753},
													expr: &ruleRefExpr{
														pos:  position{line: 346, col: 12, offset: 10753},
														name: "Space",
													},
												},
												&litMatcher{
													pos:        position{line: 346, col: 19, offset: 10760},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 350, col: 1, offset: 10837},
			expr: &choiceExpr{
				pos: position{line: 350, col: 24, offset: 10860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10866},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10866},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 12, offset: 10873},
										name: "AttributeRawValue",
									},
								},
								&choiceExpr{
									pos: position{line: 351, col: 32, offset: 10893},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 351, col: 32, offset: 10893},
											expr: &seqExpr{
												pos: position{line: 351, col: 33, offset: 10894},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 351, col: 33, offset: 10894},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 351, col: 37, offset: 10898},
														expr: &ruleRefExpr{
															pos:  position{line: 351, col: 37, offset: 10898},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 351, col: 48, offset: 10909},
											expr: &litMatcher{
												pos:        position{line: 351, col: 49, offset: 10910},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 6, offset: 11147},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 356, col: 6, offset: 11147},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 356, col: 6, offset: 11147},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 356, col: 13, offset: 11154},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 356, col: 13, offset: 11154},
												expr: &ruleRefExpr{
													pos:  position{line: 356, col: 13, offset: 11154},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 356, col: 21, offset: 11162},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 356, col: 22, offset: 11163},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 356, col: 22, offset: 11163},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 356, col: 26, offset: 11167},
																expr: &ruleRefExpr{
																	pos:  position{line: 356, col: 26, offset: 11167},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 356, col: 36, offset: 11177},
														expr: &litMatcher{
															pos:        position{line: 356, col: 37, offset: 11178},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 357, col: 5, offset: 11188},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 367, col: 1, offset: 11503},
			expr: &actionExpr{
				pos: position{line: 367, col: 19, offset: 11521},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 367, col: 19, offset: 11521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 367, col: 19, offset: 11521},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 24, offset: 11526},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 43, offset: 11545},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 47, offset: 11549},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 47, offset: 11549},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 54, offset: 11556},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 61, offset: 11563},
								name: "AttributeRawValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 367, col: 80, offset: 11582},
							expr: &seqExpr{
								pos: position{line: 367, col: 81, offset: 11583},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 367, col: 81, offset: 11583},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 367, col: 85, offset: 11587},
										expr: &ruleRefExpr{
											pos:  position{line: 367, col: 85, offset: 11587},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 372, col: 1, offset: 11811},
			expr: &actionExpr{
				pos: position{line: 372, col: 22, offset: 11832},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 372, col: 22, offset: 11832},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 372, col: 22, offset: 11832},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 23, offset: 11833},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 372, col: 29, offset: 11839},
							expr: &charClassMatcher{
								pos:        position{line: 372, col: 29, offset: 11839},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 42, offset: 11852},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 42, offset: 11852},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeRawValue",
			pos:  position{line: 376, col: 1, offset: 11922},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11948},
				run: (*parser).callonAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 11948},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 5, offset: 11948},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 378, col: 9, offset: 11964},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 378, col: 9, offset: 11964},
										name: "SingleQuotedAttributeRawValue",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12005},
										name: "DoubleQuotedAttributeRawValue",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12046},
										name: "UnquotedAttributeRawValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 382, col: 5, offset: 12083},
							expr: &notExpr{
								pos: position{line: 382, col: 7, offset: 12085},
								expr: &seqExpr{
									pos: position{line: 382, col: 9, offset: 12087},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 382, col: 9, offset: 12087},
											expr: &ruleRefExpr{
												pos:  position{line: 382, col: 9, offset: 12087},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 382, col: 16, offset: 12094},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeRawValue",
			pos:  position{line: 386, col: 1, offset: 12135},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 12173},
				run: (*parser).callonSingleQuotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 12173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 5, offset: 12173},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 387, col: 9, offset: 12177},
							expr: &litMatcher{
								pos:        position{line: 387, col: 10, offset: 12178},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 388, col: 5, offset: 12257},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 14, offset: 12266},
								name: "SingleQuotedAttributeRawValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 12308},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeRawValueContent",
			pos:  position{line: 398, col: 1, offset: 12475},
			expr: &actionExpr{
				pos: position{line: 399, col: 5, offset: 12520},
				run: (*parser).callonSingleQuotedAttributeRawValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 5, offset: 12520},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 399, col: 14, offset: 12529},
						expr: &choiceExpr{
							pos: position{line: 400, col: 9, offset: 12539},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 400, col: 9, offset: 12539},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 401, col: 11, offset: 12559},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 402, col: 11, offset: 12575},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 403, col: 12, offset: 12608},
									run: (*parser).callonSingleQuotedAttributeRawValueContent8,
									expr: &litMatcher{
										pos:        position{line: 403, col: 12, offset: 12608},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&choiceExpr{
									pos: position{line: 406, col: 13, offset: 12710},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 406, col: 13, offset: 12710},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
										&litMatcher{
											pos:        position{line: 406, col: 20, offset: 12717},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
										&actionExpr{
											pos: position{line: 406, col: 27, offset: 12724},
											run: (*parser).callonSingleQuotedAttributeRawValueContent13,
											expr: &litMatcher{
												pos:        position{line: 406, col: 27, offset: 12724},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 409, col: 12, offset: 12884},
									run: (*parser).callonSingleQuotedAttributeRawValueContent15,
									expr: &oneOrMoreExpr{
										pos: position{line: 409, col: 12, offset: 12884},
										expr: &charClassMatcher{
											pos:        position{line: 409, col: 12, offset: 12884},
											val:        "[^\\r\\n\\\\'' ]",
											chars:      []rune{'\r', '\n', '\\', '\'', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeRawValue",
			pos:  position{line: 416, col: 1, offset: 13081},
			expr: &actionExpr{
				pos: position{line: 417, col: 5, offset: 13119},
				run: (*parser).callonDoubleQuotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 417, col: 5, offset: 13119},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 417, col: 5, offset: 13119},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 417, col: 10, offset: 13124},
							expr: &litMatcher{
								pos:        position{line: 417, col: 11, offset: 13125},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 418, col: 5, offset: 13204},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 14, offset: 13213},
								name: "DoubleQuotedAttributeRawValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 5, offset: 13255},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 419, col: 10, offset: 13260},
							expr: &notExpr{
								pos: position{line: 419, col: 12, offset: 13262},
								expr: &seqExpr{
									pos: position{line: 419, col: 14, offset: 13264},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 419, col: 14, offset: 13264},
											expr: &ruleRefExpr{
												pos:  position{line: 419, col: 14, offset: 13264},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 419, col: 21, offset: 13271},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeRawValueContent",
			pos:  position{line: 427, col: 1, offset: 13439},
			expr: &actionExpr{
				pos: position{line: 428, col: 5, offset: 13484},
				run: (*parser).callonDoubleQuotedAttributeRawValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 428, col: 5, offset: 13484},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 428, col: 14, offset: 13493},
						expr: &choiceExpr{
							pos: position{line: 429, col: 9, offset: 13503},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 429, col: 9, offset: 13503},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 430, col: 11, offset: 13523},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 431, col: 11, offset: 13539},
									name: "AttributeSubstitution",
								},
								&actionExpr{
									pos: position{line: 432, col: 12, offset: 13572},
									run: (*parser).callonDoubleQuotedAttributeRawValueContent8,
									expr: &litMatcher{
										pos:        position{line: 432, col: 12, offset: 13572},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&choiceExpr{
									pos: position{line: 435, col: 13, offset: 13674},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 435, col: 13, offset: 13674},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
										&litMatcher{
											pos:        position{line: 435, col: 21, offset: 13682},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
										&litMatcher{
											pos:        position{line: 435, col: 29, offset: 13690},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
										&actionExpr{
											pos: position{line: 435, col: 35, offset: 13696},
											run: (*parser).callonDoubleQuotedAttributeRawValueContent14,
											expr: &litMatcher{
												pos:        position{line: 435, col: 35, offset: 13696},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 438, col: 12, offset: 13879},
									run: (*parser).callonDoubleQuotedAttributeRawValueContent16,
									expr: &oneOrMoreExpr{
										pos: position{line: 438, col: 12, offset: 13879},
										expr: &charClassMatcher{
											pos:        position{line: 438, col: 12, offset: 13879},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeRawValue",
			pos:  position{line: 446, col: 1, offset: 14153},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 14340},
				run: (*parser).callonUnquotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 14340},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 449, col: 5, offset: 14340},
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 6, offset: 14341},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 5, offset: 14409},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 450, col: 14, offset: 14418},
								expr: &choiceExpr{
									pos: position{line: 451, col: 9, offset: 14428},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 451, col: 10, offset: 14429},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 451, col: 10, offset: 14429},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 451, col: 14, offset: 14433},
													name: "UnquotedAttributeRawValue",
												},
												&litMatcher{
													pos:        position{line: 451, col: 40, offset: 14459},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 452, col: 11, offset: 14505},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 11, offset: 14534},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 454, col: 12, offset: 14567},
											run: (*parser).callonUnquotedAttributeRawValue14,
											expr: &oneOrMoreExpr{
												pos: position{line: 454, col: 12, offset: 14567},
												expr: &charClassMatcher{
													pos:        position{line: 454, col: 12, offset: 14567},
													val:        "[^=,\\r\\n\\uFFFD\\] ]",
													chars:      []rune{'=', ',', '\r', '\n', '�', ']', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 11, offset: 14691},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 490, col: 1, offset: 15758},
			expr: &actionExpr{
				pos: position{line: 492, col: 5, offset: 15849},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 492, col: 5, offset: 15849},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 492, col: 5, offset: 15849},
							run: (*parser).callonAttributeSubstitution3,
						},
						&labeledExpr{
							pos:   position{line: 495, col: 5, offset: 15913},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 495, col: 14, offset: 15922},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 495, col: 14, offset: 15922},
										name: "CounterSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 495, col: 36, offset: 15944},
										name: "AttributeValueSubstitution",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValueSubstitution",
			pos:  position{line: 499, col: 1, offset: 16009},
			expr: &actionExpr{
				pos: position{line: 499, col: 31, offset: 16039},
				run: (*parser).callonAttributeValueSubstitution1,
				expr: &seqExpr{
					pos: position{line: 499, col: 31, offset: 16039},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 499, col: 31, offset: 16039},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 35, offset: 16043},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 40, offset: 16048},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 499, col: 54, offset: 16062},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 504, col: 1, offset: 16178},
			expr: &choiceExpr{
				pos: position{line: 504, col: 24, offset: 16201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 504, col: 24, offset: 16201},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 47, offset: 16224},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 506, col: 1, offset: 16360},
			expr: &actionExpr{
				pos: position{line: 506, col: 25, offset: 16384},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 506, col: 25, offset: 16384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 506, col: 25, offset: 16384},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 506, col: 37, offset: 16396},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 42, offset: 16401},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 506, col: 56, offset: 16415},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 506, col: 62, offset: 16421},
								expr: &ruleRefExpr{
									pos:  position{line: 506, col: 63, offset: 16422},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 506, col: 78, offset: 16437},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 510, col: 1, offset: 16515},
			expr: &actionExpr{
				pos: position{line: 510, col: 25, offset: 16539},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 510, col: 25, offset: 16539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 510, col: 25, offset: 16539},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 38, offset: 16552},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 43, offset: 16557},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 57, offset: 16571},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 510, col: 63, offset: 16577},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 64, offset: 16578},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 510, col: 79, offset: 16593},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 514, col: 1, offset: 16668},
			expr: &actionExpr{
				pos: position{line: 514, col: 17, offset: 16684},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 514, col: 17, offset: 16684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 17, offset: 16684},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 21, offset: 16688},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 514, col: 28, offset: 16695},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 514, col: 28, offset: 16695},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 514, col: 28, offset: 16695},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 516, col: 9, offset: 16749},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 516, col: 9, offset: 16749},
											expr: &charClassMatcher{
												pos:        position{line: 516, col: 9, offset: 16749},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 525, col: 1, offset: 17037},
			expr: &actionExpr{
				pos: position{line: 525, col: 14, offset: 17050},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 525, col: 14, offset: 17050},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 525, col: 14, offset: 17050},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 15, offset: 17051},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 525, col: 19, offset: 17055},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 19, offset: 17055},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 26, offset: 17062},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 532, col: 1, offset: 17309},
			expr: &choiceExpr{
				pos: position{line: 532, col: 19, offset: 17327},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 532, col: 19, offset: 17327},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 532, col: 44, offset: 17352},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 534, col: 1, offset: 17377},
			expr: &choiceExpr{
				pos: position{line: 534, col: 27, offset: 17403},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 534, col: 27, offset: 17403},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 534, col: 27, offset: 17403},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 534, col: 27, offset: 17403},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 32, offset: 17408},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 36, offset: 17412},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 534, col: 40, offset: 17416},
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 40, offset: 17416},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 534, col: 47, offset: 17423},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 51, offset: 17427},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 58, offset: 17434},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 534, col: 79, offset: 17455},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 9, offset: 17528},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 536, col: 9, offset: 17528},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 536, col: 9, offset: 17528},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 536, col: 14, offset: 17533},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 18, offset: 17537},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 536, col: 22, offset: 17541},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 540, col: 1, offset: 17612},
			expr: &actionExpr{
				pos: position{line: 540, col: 27, offset: 17638},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 540, col: 27, offset: 17638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 27, offset: 17638},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 35, offset: 17646},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 40, offset: 17651},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 54, offset: 17665},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 72, offset: 17683},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 544, col: 1, offset: 17817},
			expr: &oneOrMoreExpr{
				pos: position{line: 544, col: 24, offset: 17840},
				expr: &choiceExpr{
					pos: position{line: 545, col: 5, offset: 17846},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 545, col: 6, offset: 17847},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 545, col: 6, offset: 17847},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 545, col: 6, offset: 17847},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 545, col: 14, offset: 17855},
										expr: &charClassMatcher{
											pos:        position{line: 545, col: 14, offset: 17855},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 7, offset: 18050},
							name: "AttributeSubstitution",
						},
						&actionExpr{
							pos: position{line: 549, col: 8, offset: 18079},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 549, col: 8, offset: 18079},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 558, col: 1, offset: 18354},
			expr: &choiceExpr{
				pos: position{line: 559, col: 5, offset: 18376},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 559, col: 5, offset: 18376},
						name: "CommentBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 7, offset: 18395},
						name: "ExampleBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 7, offset: 18414},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 7, offset: 18432},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 563, col: 7, offset: 18451},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 7, offset: 18470},
						name: "MarkdownQuoteBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 565, col: 7, offset: 18495},
						name: "PassthroughBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 566, col: 7, offset: 18518},
						name: "QuoteBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 567, col: 7, offset: 18535},
						name: "SidebarBlock",
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 569, col: 1, offset: 18549},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 18571},
				run: (*parser).callonBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 18571},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 570, col: 5, offset: 18571},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 6, offset: 18572},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 5, offset: 18601},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 572, col: 9, offset: 18621},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 572, col: 9, offset: 18621},
										name: "CommentBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 573, col: 11, offset: 18653},
										name: "ExampleBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 574, col: 11, offset: 18685},
										name: "FencedBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 575, col: 11, offset: 18716},
										name: "ListingBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 576, col: 11, offset: 18748},
										name: "LiteralBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 577, col: 11, offset: 18780},
										name: "PassthroughBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 578, col: 11, offset: 18816},
										name: "QuoteBlockDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 579, col: 11, offset: 18846},
										name: "SidebarBlockDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 584, col: 1, offset: 18917},
			expr: &seqExpr{
				pos: position{line: 584, col: 26, offset: 18942},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 584, col: 26, offset: 18942},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 584, col: 33, offset: 18949},
						expr: &ruleRefExpr{
							pos:  position{line: 584, col: 33, offset: 18949},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 40, offset: 18956},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 586, col: 1, offset: 18961},
			expr: &seqExpr{
				pos: position{line: 586, col: 26, offset: 18986},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 586, col: 26, offset: 18986},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 586, col: 33, offset: 18993},
						expr: &ruleRefExpr{
							pos:  position{line: 586, col: 33, offset: 18993},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 586, col: 40, offset: 19000},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 588, col: 1, offset: 19005},
			expr: &seqExpr{
				pos: position{line: 588, col: 25, offset: 19029},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 588, col: 25, offset: 19029},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 588, col: 31, offset: 19035},
						expr: &ruleRefExpr{
							pos:  position{line: 588, col: 31, offset: 19035},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 588, col: 38, offset: 19042},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 590, col: 1, offset: 19047},
			expr: &seqExpr{
				pos: position{line: 590, col: 26, offset: 19072},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 590, col: 26, offset: 19072},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 590, col: 33, offset: 19079},
						expr: &ruleRefExpr{
							pos:  position{line: 590, col: 33, offset: 19079},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 590, col: 40, offset: 19086},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 592, col: 1, offset: 19091},
			expr: &seqExpr{
				pos: position{line: 592, col: 26, offset: 19116},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 592, col: 26, offset: 19116},
						val:        "....",
						ignoreCase: false,
						want:       "\"....\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 592, col: 33, offset: 19123},
						expr: &ruleRefExpr{
							pos:  position{line: 592, col: 33, offset: 19123},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 592, col: 40, offset: 19130},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 594, col: 1, offset: 19135},
			expr: &seqExpr{
				pos: position{line: 594, col: 30, offset: 19164},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 30, offset: 19164},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 594, col: 37, offset: 19171},
						expr: &ruleRefExpr{
							pos:  position{line: 594, col: 37, offset: 19171},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 594, col: 44, offset: 19178},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 596, col: 1, offset: 19183},
			expr: &seqExpr{
				pos: position{line: 596, col: 24, offset: 19206},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 596, col: 24, offset: 19206},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 596, col: 31, offset: 19213},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 31, offset: 19213},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 38, offset: 19220},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 598, col: 1, offset: 19225},
			expr: &seqExpr{
				pos: position{line: 598, col: 26, offset: 19250},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 598, col: 26, offset: 19250},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 598, col: 33, offset: 19257},
						expr: &ruleRefExpr{
							pos:  position{line: 598, col: 33, offset: 19257},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 40, offset: 19264},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 600, col: 1, offset: 19269},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 19299},
				run: (*parser).callonDelimitedBlockRawLine1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 19299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 601, col: 5, offset: 19299},
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 6, offset: 19300},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 5, offset: 19372},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 602, col: 14, offset: 19381},
								run: (*parser).callonDelimitedBlockRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 602, col: 14, offset: 19381},
									expr: &charClassMatcher{
										pos:        position{line: 602, col: 14, offset: 19381},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 8, offset: 19462},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 611, col: 1, offset: 19584},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 19604},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 19604},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 612, col: 5, offset: 19604},
							run: (*parser).callonCommentBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 5, offset: 19756},
							name: "CommentBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 617, col: 5, offset: 19787},
							run: (*parser).callonCommentBlock5,
						},
						&labeledExpr{
							pos:   position{line: 622, col: 5, offset: 19988},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 14, offset: 19997},
								name: "CommentBlockContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 623, col: 5, offset: 20022},
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 5, offset: 20022},
								name: "CommentBlockEndDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 628, col: 1, offset: 20174},
			expr: &ruleRefExpr{
				pos:  position{line: 628, col: 31, offset: 20204},
				name: "CommentBlockDelimiter",
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 630, col: 1, offset: 20227},
			expr: &choiceExpr{
				pos: position{line: 630, col: 29, offset: 20255},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 630, col: 29, offset: 20255},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 53, offset: 20279},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlockContent",
			pos:  position{line: 632, col: 1, offset: 20284},
			expr: &zeroOrMoreExpr{
				pos: position{line: 633, col: 5, offset: 20312},
				expr: &actionExpr{
					pos: position{line: 633, col: 6, offset: 20313},
					run: (*parser).callonCommentBlockContent2,
					expr: &seqExpr{
						pos: position{line: 633, col: 6, offset: 20313},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 633, col: 6, offset: 20313},
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 7, offset: 20314},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 634, col: 5, offset: 20343},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 634, col: 10, offset: 20348},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 641, col: 1, offset: 20476},
			expr: &actionExpr{
				pos: position{line: 642, col: 5, offset: 20496},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 642, col: 5, offset: 20496},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 642, col: 5, offset: 20496},
							run: (*parser).callonExampleBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 5, offset: 20648},
							name: "ExampleBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 647, col: 5, offset: 20679},
							run: (*parser).callonExampleBlock5,
						},
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 20880},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 14, offset: 20889},
								name: "ExampleBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 5, offset: 20914},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 658, col: 1, offset: 21065},
			expr: &ruleRefExpr{
				pos:  position{line: 658, col: 31, offset: 21095},
				name: "ExampleBlockDelimiter",
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 660, col: 1, offset: 21118},
			expr: &choiceExpr{
				pos: position{line: 660, col: 29, offset: 21146},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 660, col: 29, offset: 21146},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 660, col: 53, offset: 21170},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockContent",
			pos:  position{line: 662, col: 1, offset: 21175},
			expr: &zeroOrMoreExpr{
				pos: position{line: 663, col: 4, offset: 21202},
				expr: &actionExpr{
					pos: position{line: 663, col: 5, offset: 21203},
					run: (*parser).callonExampleBlockContent2,
					expr: &seqExpr{
						pos: position{line: 663, col: 5, offset: 21203},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 663, col: 5, offset: 21203},
								expr: &ruleRefExpr{
									pos:  position{line: 663, col: 6, offset: 21204},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 664, col: 5, offset: 21233},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 664, col: 11, offset: 21239},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 664, col: 11, offset: 21239},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 664, col: 25, offset: 21253},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 671, col: 1, offset: 21381},
			expr: &actionExpr{
				pos: position{line: 672, col: 5, offset: 21400},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 672, col: 5, offset: 21400},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 672, col: 5, offset: 21400},
							run: (*parser).callonFencedBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 676, col: 5, offset: 21551},
							name: "FencedBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 677, col: 5, offset: 21581},
							run: (*parser).callonFencedBlock5,
						},
						&labeledExpr{
							pos:   position{line: 682, col: 5, offset: 21781},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 14, offset: 21790},
								name: "FencedBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 5, offset: 21814},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 688, col: 1, offset: 21963},
			expr: &ruleRefExpr{
				pos:  position{line: 688, col: 30, offset: 21992},
				name: "FencedBlockDelimiter",
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 690, col: 1, offset: 22019},
			expr: &choiceExpr{
				pos: position{line: 690, col: 28, offset: 22046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 690, col: 28, offset: 22046},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 690, col: 51, offset: 22069},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 692, col: 1, offset: 22074},
			expr: &zeroOrMoreExpr{
				pos: position{line: 693, col: 5, offset: 22101},
				expr: &actionExpr{
					pos: position{line: 693, col: 6, offset: 22102},
					run: (*parser).callonFencedBlockContent2,
					expr: &seqExpr{
						pos: position{line: 693, col: 6, offset: 22102},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 693, col: 6, offset: 22102},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 7, offset: 22103},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 694, col: 5, offset: 22131},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 694, col: 11, offset: 22137},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 694, col: 11, offset: 22137},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 694, col: 25, offset: 22151},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 701, col: 1, offset: 22280},
			expr: &actionExpr{
				pos: position{line: 702, col: 5, offset: 22300},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 702, col: 5, offset: 22300},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 702, col: 5, offset: 22300},
							run: (*parser).callonListingBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 5, offset: 22452},
							name: "ListingBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 707, col: 5, offset: 22483},
							run: (*parser).callonListingBlock5,
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 22684},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 14, offset: 22693},
								name: "ListingBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 713, col: 5, offset: 22718},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 718, col: 1, offset: 22869},
			expr: &ruleRefExpr{
				pos:  position{line: 718, col: 31, offset: 22899},
				name: "ListingBlockDelimiter",
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 720, col: 1, offset: 22927},
			expr: &choiceExpr{
				pos: position{line: 720, col: 29, offset: 22955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 29, offset: 22955},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 53, offset: 22979},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockContent",
			pos:  position{line: 722, col: 1, offset: 22984},
			expr: &zeroOrMoreExpr{
				pos: position{line: 723, col: 5, offset: 23012},
				expr: &actionExpr{
					pos: position{line: 723, col: 6, offset: 23013},
					run: (*parser).callonListingBlockContent2,
					expr: &seqExpr{
						pos: position{line: 723, col: 6, offset: 23013},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 723, col: 6, offset: 23013},
								expr: &ruleRefExpr{
									pos:  position{line: 723, col: 7, offset: 23014},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 724, col: 5, offset: 23043},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 724, col: 11, offset: 23049},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 724, col: 11, offset: 23049},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 724, col: 25, offset: 23063},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 731, col: 1, offset: 23192},
			expr: &actionExpr{
				pos: position{line: 732, col: 5, offset: 23212},
				run: (*parser).callonLiteralBlock1,
				expr: &seqExpr{
					pos: position{line: 732, col: 5, offset: 23212},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 732, col: 5, offset: 23212},
							name: "LiteralBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 733, col: 5, offset: 23243},
							run: (*parser).callonLiteralBlock4,
						},
						&labeledExpr{
							pos:   position{line: 737, col: 5, offset: 23395},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 14, offset: 23404},
								name: "LiteralBlockContent",
							},
						},
						&andCodeExpr{
							pos: position{line: 738, col: 5, offset: 23429},
							run: (*parser).callonLiteralBlock7,
						},
						&zeroOrOneExpr{
							pos: position{line: 743, col: 5, offset: 23630},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 5, offset: 23630},
								name: "LiteralBlockEndDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockStartDelimiter",
			pos:  position{line: 748, col: 1, offset: 23782},
			expr: &ruleRefExpr{
				pos:  position{line: 748, col: 31, offset: 23812},
				name: "LiteralBlockDelimiter",
			},
		},
		{
			name: "LiteralBlockEndDelimiter",
			pos:  position{line: 750, col: 1, offset: 23835},
			expr: &choiceExpr{
				pos: position{line: 750, col: 29, offset: 23863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 750, col: 29, offset: 23863},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 53, offset: 23887},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 752, col: 1, offset: 23892},
			expr: &zeroOrMoreExpr{
				pos: position{line: 753, col: 5, offset: 23920},
				expr: &actionExpr{
					pos: position{line: 753, col: 6, offset: 23921},
					run: (*parser).callonLiteralBlockContent2,
					expr: &seqExpr{
						pos: position{line: 753, col: 6, offset: 23921},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 753, col: 6, offset: 23921},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 7, offset: 23922},
									name: "LiteralBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 754, col: 5, offset: 23951},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 754, col: 11, offset: 23957},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 754, col: 11, offset: 23957},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 754, col: 25, offset: 23971},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlock",
			pos:  position{line: 761, col: 1, offset: 24107},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 24134},
				run: (*parser).callonMarkdownQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 762, col: 5, offset: 24134},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 762, col: 5, offset: 24134},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 16, offset: 24145},
								name: "MarkdownQuoteRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 5, offset: 24171},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 763, col: 16, offset: 24182},
								expr: &choiceExpr{
									pos: position{line: 763, col: 17, offset: 24183},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 763, col: 17, offset: 24183},
											name: "MarkdownQuoteRawLine",
										},
										&ruleRefExpr{
											pos:  position{line: 763, col: 40, offset: 24206},
											name: "ParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteRawLine",
			pos:  position{line: 768, col: 1, offset: 24364},
			expr: &actionExpr{
				pos: position{line: 769, col: 5, offset: 24393},
				run: (*parser).callonMarkdownQuoteRawLine1,
				expr: &seqExpr{
					pos: position{line: 769, col: 5, offset: 24393},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 5, offset: 24393},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 6, offset: 24394},
								name: "BlankLine",
							},
						},
						&litMatcher{
							pos:        position{line: 770, col: 5, offset: 24408},
							val:        "> ",
							ignoreCase: false,
							want:       "\"> \"",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 5, offset: 24418},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 771, col: 14, offset: 24427},
								run: (*parser).callonMarkdownQuoteRawLine7,
								expr: &oneOrMoreExpr{
									pos: position{line: 771, col: 15, offset: 24428},
									expr: &charClassMatcher{
										pos:        position{line: 771, col: 15, offset: 24428},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 8, offset: 24483},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 777, col: 1, offset: 24546},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 24579},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 24579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 778, col: 5, offset: 24579},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 11, offset: 24585},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 778, col: 19, offset: 24593},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 778, col: 20, offset: 24594},
									expr: &charClassMatcher{
										pos:        position{line: 778, col: 20, offset: 24594},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 8, offset: 24648},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 787, col: 1, offset: 24762},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 24786},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 24786},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 788, col: 5, offset: 24786},
							run: (*parser).callonPassthroughBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 5, offset: 24942},
							name: "PassthroughBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 793, col: 5, offset: 24977},
							run: (*parser).callonPassthroughBlock5,
						},
						&labeledExpr{
							pos:   position{line: 798, col: 5, offset: 25182},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 14, offset: 25191},
								name: "PassthroughBlockContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 799, col: 5, offset: 25220},
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 5, offset: 25220},
								name: "PassthroughBlockEndDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 804, col: 1, offset: 25380},
			expr: &ruleRefExpr{
				pos:  position{line: 804, col: 35, offset: 25414},
				name: "PassthroughBlockDelimiter",
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 806, col: 1, offset: 25441},
			expr: &choiceExpr{
				pos: position{line: 806, col: 33, offset: 25473},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 806, col: 33, offset: 25473},
						name: "PassthroughBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 61, offset: 25501},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockContent",
			pos:  position{line: 808, col: 1, offset: 25506},
			expr: &zeroOrMoreExpr{
				pos: position{line: 809, col: 5, offset: 25538},
				expr: &actionExpr{
					pos: position{line: 809, col: 6, offset: 25539},
					run: (*parser).callonPassthroughBlockContent2,
					expr: &seqExpr{
						pos: position{line: 809, col: 6, offset: 25539},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 809, col: 6, offset: 25539},
								expr: &ruleRefExpr{
									pos:  position{line: 809, col: 7, offset: 25540},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 810, col: 5, offset: 25573},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 810, col: 11, offset: 25579},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 810, col: 11, offset: 25579},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 810, col: 25, offset: 25593},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 817, col: 1, offset: 25720},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 25738},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 25738},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 818, col: 5, offset: 25738},
							run: (*parser).callonQuoteBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 822, col: 5, offset: 25888},
							name: "QuoteBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 823, col: 5, offset: 25917},
							run: (*parser).callonQuoteBlock5,
						},
						&labeledExpr{
							pos:   position{line: 828, col: 5, offset: 26116},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 14, offset: 26125},
								name: "QuoteBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 5, offset: 26148},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 834, col: 1, offset: 26295},
			expr: &ruleRefExpr{
				pos:  position{line: 834, col: 29, offset: 26323},
				name: "QuoteBlockDelimiter",
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 836, col: 1, offset: 26344},
			expr: &choiceExpr{
				pos: position{line: 836, col: 27, offset: 26370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 836, col: 27, offset: 26370},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 836, col: 49, offset: 26392},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockContent",
			pos:  position{line: 838, col: 1, offset: 26397},
			expr: &zeroOrMoreExpr{
				pos: position{line: 839, col: 4, offset: 26422},
				expr: &actionExpr{
					pos: position{line: 839, col: 5, offset: 26423},
					run: (*parser).callonQuoteBlockContent2,
					expr: &seqExpr{
						pos: position{line: 839, col: 5, offset: 26423},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 839, col: 5, offset: 26423},
								expr: &ruleRefExpr{
									pos:  position{line: 839, col: 6, offset: 26424},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 840, col: 5, offset: 26451},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 840, col: 11, offset: 26457},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 840, col: 11, offset: 26457},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 840, col: 25, offset: 26471},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 847, col: 1, offset: 26600},
			expr: &actionExpr{
				pos: position{line: 848, col: 5, offset: 26620},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 848, col: 5, offset: 26620},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 848, col: 5, offset: 26620},
							run: (*parser).callonSidebarBlock3,
						},
						&ruleRefExpr{
							pos:  position{line: 852, col: 5, offset: 26772},
							name: "SidebarBlockStartDelimiter",
						},
						&andCodeExpr{
							pos: position{line: 853, col: 5, offset: 26803},
							run: (*parser).callonSidebarBlock5,
						},
						&labeledExpr{
							pos:   position{line: 858, col: 5, offset: 27004},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 14, offset: 27013},
								name: "SidebarBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 5, offset: 27038},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 864, col: 1, offset: 27189},
			expr: &ruleRefExpr{
				pos:  position{line: 864, col: 31, offset: 27219},
				name: "SidebarBlockDelimiter",
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 866, col: 1, offset: 27243},
			expr: &choiceExpr{
				pos: position{line: 866, col: 29, offset: 27271},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 866, col: 29, offset: 27271},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 53, offset: 27295},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 868, col: 1, offset: 27301},
			expr: &zeroOrMoreExpr{
				pos: position{line: 869, col: 4, offset: 27328},
				expr: &actionExpr{
					pos: position{line: 869, col: 5, offset: 27329},
					run: (*parser).callonSidebarBlockContent2,
					expr: &seqExpr{
						pos: position{line: 869, col: 5, offset: 27329},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 869, col: 5, offset: 27329},
								expr: &ruleRefExpr{
									pos:  position{line: 869, col: 6, offset: 27330},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 870, col: 5, offset: 27359},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 870, col: 11, offset: 27365},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 870, col: 11, offset: 27365},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 870, col: 25, offset: 27379},
											name: "DelimitedBlockRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 877, col: 1, offset: 27648},
			expr: &actionExpr{
				pos: position{line: 878, col: 5, offset: 27671},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 878, col: 5, offset: 27671},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 878, col: 5, offset: 27671},
							run: (*parser).callonDocumentHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 881, col: 5, offset: 27732},
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 5, offset: 27732},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 27782},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 11, offset: 27788},
								name: "DocumentTitle",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 27806},
							label: "info",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 10, offset: 27811},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 10, offset: 27811},
									name: "DocumentInformation",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 27836},
							label: "extraAttrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 884, col: 16, offset: 27847},
								expr: &choiceExpr{
									pos: position{line: 884, col: 17, offset: 27848},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 884, col: 17, offset: 27848},
											name: "AttributeDeclaration",
										},
										&ruleRefExpr{
											pos:  position{line: 884, col: 40, offset: 27871},
											name: "AttributeReset",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 895, col: 1, offset: 28293},
			expr: &actionExpr{
				pos: position{line: 896, col: 5, offset: 28315},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 896, col: 5, offset: 28315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 896, col: 5, offset: 28315},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 9, offset: 28319},
							name: "Spaces",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 16, offset: 28326},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 23, offset: 28333},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 40, offset: 28350},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentInformation",
			pos:  position{line: 900, col: 1, offset: 28396},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 28423},
				run: (*parser).callonDocumentInformation1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 28423},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 901, col: 5, offset: 28423},
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 6, offset: 28424},
								name: "BlankLine",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 902, col: 5, offset: 28438},
							expr: &choiceExpr{
								pos: position{line: 902, col: 6, offset: 28439},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 902, col: 6, offset: 28439},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 26, offset: 28459},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 28513},
							label: "authors",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 14, offset: 28522},
								name: "DocumentAuthors",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 904, col: 5, offset: 28544},
							expr: &choiceExpr{
								pos: position{line: 904, col: 6, offset: 28545},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 904, col: 6, offset: 28545},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 26, offset: 28565},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 905, col: 5, offset: 28619},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 905, col: 14, offset: 28628},
								expr: &ruleRefExpr{
									pos:  position{line: 905, col: 15, offset: 28629},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 909, col: 1, offset: 28744},
			expr: &actionExpr{
				pos: position{line: 909, col: 20, offset: 28763},
				run: (*parser).callonDocumentAuthors1,
				expr: &seqExpr{
					pos: position{line: 909, col: 20, offset: 28763},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 909, col: 20, offset: 28763},
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 20, offset: 28763},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 27, offset: 28770},
							label: "authors",
							expr: &choiceExpr{
								pos: position{line: 909, col: 36, offset: 28779},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 909, col: 36, offset: 28779},
										name: "DocumentAuthorsInlineForm",
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 64, offset: 28807},
										name: "DocumentAuthorsAttributeForm",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 94, offset: 28837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 913, col: 1, offset: 28870},
			expr: &actionExpr{
				pos: position{line: 913, col: 30, offset: 28899},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 913, col: 30, offset: 28899},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 913, col: 30, offset: 28899},
							expr: &litMatcher{
								pos:        position{line: 913, col: 31, offset: 28900},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 35, offset: 28904},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 913, col: 44, offset: 28913},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 44, offset: 28913},
									name: "DocumentAuthor",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 917, col: 1, offset: 28999},
			expr: &actionExpr{
				pos: position{line: 917, col: 33, offset: 29031},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 917, col: 33, offset: 29031},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 917, col: 33, offset: 29031},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 917, col: 44, offset: 29042},
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 44, offset: 29042},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 51, offset: 29049},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 59, offset: 29057},
								name: "DocumentAuthor",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 921, col: 1, offset: 29122},
			expr: &actionExpr{
				pos: position{line: 922, col: 5, offset: 29145},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 922, col: 5, offset: 29145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 922, col: 5, offset: 29145},
							label: "fullName",
							expr: &zeroOrOneExpr{
								pos: position{line: 922, col: 14, offset: 29154},
								expr: &ruleRefExpr{
									pos:  position{line: 922, col: 15, offset: 29155},
									name: "DocumentAuthorFullName",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 40, offset: 29180},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 922, col: 46, offset: 29186},
								expr: &ruleRefExpr{
									pos:  position{line: 922, col: 47, offset: 29187},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 922, col: 69, offset: 29209},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 69, offset: 29209},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 922, col: 76, offset: 29216},
							expr: &litMatcher{
								pos:        position{line: 922, col: 76, offset: 29216},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 922, col: 81, offset: 29221},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 81, offset: 29221},
								name: "Space",
							},
						},
						&andCodeExpr{
							pos: position{line: 923, col: 5, offset: 29233},
							run: (*parser).callonDocumentAuthor15,
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorFullName",
			pos:  position{line: 932, col: 1, offset: 29503},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 29534},
				run: (*parser).callonDocumentAuthorFullName1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 29534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 29534},
							label: "part1",
							expr: &actionExpr{
								pos: position{line: 933, col: 12, offset: 29541},
								run: (*parser).callonDocumentAuthorFullName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 933, col: 12, offset: 29541},
									expr: &charClassMatcher{
										pos:        position{line: 933, col: 12, offset: 29541},
										val:        "[^<;\\r\\n ]",
										chars:      []rune{'<', ';', '\r', '\n', ' '},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 936, col: 5, offset: 29621},
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 5, offset: 29621},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 937, col: 5, offset: 29632},
							label: "part2",
							expr: &zeroOrOneExpr{
								pos: position{line: 937, col: 11, offset: 29638},
								expr: &actionExpr{
									pos: position{line: 937, col: 12, offset: 29639},
									run: (*parser).callonDocumentAuthorFullName11,
									expr: &oneOrMoreExpr{
										pos: position{line: 937, col: 12, offset: 29639},
										expr: &charClassMatcher{
											pos:        position{line: 937, col: 12, offset: 29639},
											val:        "[^<;\\r\\n ]",
											chars:      []rune{'<', ';', '\r', '\n', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 940, col: 5, offset: 29720},
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 5, offset: 29720},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 941, col: 5, offset: 29731},
							label: "part3",
							expr: &zeroOrOneExpr{
								pos: position{line: 941, col: 11, offset: 29737},
								expr: &actionExpr{
									pos: position{line: 941, col: 12, offset: 29738},
									run: (*parser).callonDocumentAuthorFullName18,
									expr: &oneOrMoreExpr{
										pos: position{line: 941, col: 12, offset: 29738},
										expr: &charClassMatcher{
											pos:        position{line: 941, col: 12, offset: 29738},
											val:        "[^<;\\r\\n]",
											chars:      []rune{'<', ';', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 944, col: 5, offset: 29817},
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 5, offset: 29817},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 949, col: 1, offset: 29911},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 29939},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 29939},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 950, col: 5, offset: 29939},
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 6, offset: 29940},
								name: "EOF",
							},
						},
						&litMatcher{
							pos:        position{line: 951, col: 5, offset: 29949},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 952, col: 5, offset: 29958},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 952, col: 12, offset: 29965},
								run: (*parser).callonDocumentAuthorEmail7,
								expr: &oneOrMoreExpr{
									pos: position{line: 952, col: 13, offset: 29966},
									expr: &charClassMatcher{
										pos:        position{line: 952, col: 13, offset: 29966},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 955, col: 5, offset: 30026},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 961, col: 1, offset: 30195},
			expr: &actionExpr{
				pos: position{line: 961, col: 21, offset: 30215},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 961, col: 21, offset: 30215},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 961, col: 21, offset: 30215},
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 21, offset: 30215},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 961, col: 28, offset: 30222},
							expr: &litMatcher{
								pos:        position{line: 961, col: 29, offset: 30223},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 961, col: 33, offset: 30227},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 962, col: 9, offset: 30246},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 962, col: 10, offset: 30247},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 962, col: 10, offset: 30247},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 962, col: 10, offset: 30247},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 962, col: 21, offset: 30258},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 962, col: 45, offset: 30282},
													expr: &litMatcher{
														pos:        position{line: 962, col: 45, offset: 30282},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 962, col: 50, offset: 30287},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 962, col: 58, offset: 30295},
														expr: &ruleRefExpr{
															pos:  position{line: 962, col: 59, offset: 30296},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 962, col: 82, offset: 30319},
													expr: &litMatcher{
														pos:        position{line: 962, col: 82, offset: 30319},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 962, col: 87, offset: 30324},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 962, col: 97, offset: 30334},
														expr: &ruleRefExpr{
															pos:  position{line: 962, col: 98, offset: 30335},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 964, col: 15, offset: 30452},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 964, col: 15, offset: 30452},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 964, col: 15, offset: 30452},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 964, col: 24, offset: 30461},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 964, col: 46, offset: 30483},
													expr: &litMatcher{
														pos:        position{line: 964, col: 46, offset: 30483},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 964, col: 51, offset: 30488},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 964, col: 61, offset: 30498},
														expr: &ruleRefExpr{
															pos:  position{line: 964, col: 62, offset: 30499},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 13, offset: 30608},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 971, col: 1, offset: 30738},
			expr: &choiceExpr{
				pos: position{line: 971, col: 27, offset: 30764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 971, col: 27, offset: 30764},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 971, col: 27, offset: 30764},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 971, col: 27, offset: 30764},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 971, col: 32, offset: 30769},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 971, col: 39, offset: 30776},
									expr: &charClassMatcher{
										pos:        position{line: 971, col: 39, offset: 30776},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 30824},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 30824},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 973, col: 5, offset: 30824},
									expr: &litMatcher{
										pos:        position{line: 973, col: 5, offset: 30824},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 973, col: 11, offset: 30830},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 973, col: 18, offset: 30837},
									expr: &charClassMatcher{
										pos:        position{line: 973, col: 18, offset: 30837},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 973, col: 29, offset: 30848},
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 29, offset: 30848},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 973, col: 36, offset: 30855},
									expr: &litMatcher{
										pos:        position{line: 973, col: 37, offset: 30856},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 977, col: 1, offset: 30896},
			expr: &actionExpr{
				pos: position{line: 977, col: 25, offset: 30920},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 977, col: 25, offset: 30920},
					expr: &charClassMatcher{
						pos:        position{line: 977, col: 25, offset: 30920},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 981, col: 1, offset: 30966},
			expr: &actionExpr{
				pos: position{line: 981, col: 27, offset: 30992},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 981, col: 27, offset: 30992},
					expr: &charClassMatcher{
						pos:        position{line: 981, col: 27, offset: 30992},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "ElementPlaceHolderDelimiter",
			pos:  position{line: 988, col: 1, offset: 31239},
			expr: &litMatcher{
				pos:        position{line: 988, col: 32, offset: 31270},
				val:        "�",
				ignoreCase: false,
				want:       "\"�\"",
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 990, col: 1, offset: 31280},
			expr: &actionExpr{
				pos: position{line: 990, col: 23, offset: 31302},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 990, col: 23, offset: 31302},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 990, col: 23, offset: 31302},
							name: "ElementPlaceHolderDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 990, col: 51, offset: 31330},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 990, col: 56, offset: 31335},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 990, col: 56, offset: 31335},
									expr: &charClassMatcher{
										pos:        position{line: 990, col: 56, offset: 31335},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 990, col: 95, offset: 31374},
							name: "ElementPlaceHolderDelimiter",
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 997, col: 1, offset: 31730},
			expr: &actionExpr{
				pos: position{line: 997, col: 14, offset: 31743},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 997, col: 14, offset: 31743},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 997, col: 14, offset: 31743},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 997, col: 20, offset: 31749},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 997, col: 24, offset: 31753},
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 24, offset: 31753},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 997, col: 31, offset: 31760},
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 33, offset: 31762},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 1004, col: 1, offset: 32013},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 32035},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 5, offset: 32035},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1005, col: 5, offset: 32035},
							run: (*parser).callonFileInclusion3,
						},
						&stateCodeExpr{
							pos: position{line: 1009, col: 5, offset: 32122},
							run: (*parser).callonFileInclusion4,
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 5, offset: 32289},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 1015, col: 9, offset: 32304},
								run: (*parser).callonFileInclusion6,
								expr: &seqExpr{
									pos: position{line: 1015, col: 9, offset: 32304},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1015, col: 9, offset: 32304},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 1016, col: 9, offset: 32325},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 32331},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 1017, col: 9, offset: 32354},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 1017, col: 27, offset: 32372},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1021, col: 5, offset: 32533},
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 5, offset: 32533},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1021, col: 12, offset: 32540},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 1025, col: 1, offset: 32601},
			expr: &ruleRefExpr{
				pos:  position{line: 1025, col: 26, offset: 32626},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 1028, col: 1, offset: 32666},
			expr: &actionExpr{
				pos: position{line: 1028, col: 15, offset: 32680},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 15, offset: 32680},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1028, col: 15, offset: 32680},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 1028, col: 22, offset: 32687},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1028, col: 22, offset: 32687},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 1029, col: 7, offset: 32713},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 1030, col: 7, offset: 32735},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1031, col: 7, offset: 32758},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 1035, col: 1, offset: 32848},
			expr: &actionExpr{
				pos: position{line: 1035, col: 23, offset: 32870},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 23, offset: 32870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1035, col: 23, offset: 32870},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 1035, col: 30, offset: 32877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1035, col: 30, offset: 32877},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 1035, col: 47, offset: 32894},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 5, offset: 32916},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 1036, col: 12, offset: 32923},
								expr: &actionExpr{
									pos: position{line: 1037, col: 9, offset: 32933},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 1037, col: 9, offset: 32933},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 1037, col: 10, offset: 32934},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1037, col: 10, offset: 32934},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 1037, col: 16, offset: 32940},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1038, col: 9, offset: 33051},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 1038, col: 16, offset: 33058},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1038, col: 16, offset: 33058},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 1038, col: 33, offset: 33075},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 1044, col: 1, offset: 33217},
			expr: &actionExpr{
				pos: position{line: 1044, col: 19, offset: 33235},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 19, offset: 33235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1044, col: 19, offset: 33235},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 26, offset: 33242},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 34, offset: 33250},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 39, offset: 33255},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 44, offset: 33260},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 1048, col: 1, offset: 33356},
			expr: &actionExpr{
				pos: position{line: 1048, col: 20, offset: 33375},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 1048, col: 20, offset: 33375},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 1048, col: 32, offset: 33387},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 1053, col: 1, offset: 33510},
			expr: &actionExpr{
				pos: position{line: 1053, col: 14, offset: 33523},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 14, offset: 33523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 14, offset: 33523},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 21, offset: 33530},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1053, col: 40, offset: 33549},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 1057, col: 1, offset: 33639},
			expr: &actionExpr{
				pos: position{line: 1057, col: 22, offset: 33660},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 22, offset: 33660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1057, col: 22, offset: 33660},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 29, offset: 33667},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 5, offset: 33681},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1058, col: 12, offset: 33688},
								expr: &actionExpr{
									pos: position{line: 1059, col: 9, offset: 33698},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 1059, col: 9, offset: 33698},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 1059, col: 10, offset: 33699},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1059, col: 10, offset: 33699},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 1059, col: 16, offset: 33705},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1060, col: 9, offset: 33816},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 1060, col: 16, offset: 33823},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 1066, col: 1, offset: 33958},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 13, offset: 33970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 13, offset: 33970},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 1066, col: 13, offset: 33970},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 1066, col: 18, offset: 33975},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1066, col: 18, offset: 33975},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 30, offset: 33987},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 9, offset: 34063},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 1068, col: 9, offset: 34063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1068, col: 9, offset: 34063},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 13, offset: 34067},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 1068, col: 18, offset: 34072},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1068, col: 18, offset: 34072},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1068, col: 30, offset: 34084},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 1072, col: 1, offset: 34160},
			expr: &actionExpr{
				pos: position{line: 1072, col: 16, offset: 34175},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 16, offset: 34175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1072, col: 16, offset: 34175},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 1072, col: 23, offset: 34182},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1072, col: 23, offset: 34182},
									expr: &litMatcher{
										pos:        position{line: 1072, col: 24, offset: 34183},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1075, col: 5, offset: 34237},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 1082, col: 1, offset: 34404},
			expr: &actionExpr{
				pos: position{line: 1082, col: 21, offset: 34424},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 21, offset: 34424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1082, col: 21, offset: 34424},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1082, col: 29, offset: 34432},
								expr: &choiceExpr{
									pos: position{line: 1082, col: 30, offset: 34433},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1082, col: 30, offset: 34433},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 1082, col: 53, offset: 34456},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 1082, col: 74, offset: 34477},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 1082, col: 74, offset: 34477,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 107, offset: 34510},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 1086, col: 1, offset: 34589},
			expr: &actionExpr{
				pos: position{line: 1086, col: 25, offset: 34613},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 25, offset: 34613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1086, col: 25, offset: 34613},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 33, offset: 34621},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 1086, col: 38, offset: 34626},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 1086, col: 38, offset: 34626},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1086, col: 78, offset: 34666},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 1090, col: 1, offset: 34739},
			expr: &actionExpr{
				pos: position{line: 1090, col: 23, offset: 34761},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 1090, col: 23, offset: 34761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1090, col: 23, offset: 34761},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 1090, col: 31, offset: 34769},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 1090, col: 36, offset: 34774},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 1090, col: 36, offset: 34774},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1090, col: 76, offset: 34814},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 1097, col: 1, offset: 35079},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 35099},
				run: (*parser).callonFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 35099},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1098, col: 5, offset: 35099},
							run: (*parser).callonFrontMatter3,
						},
						&labeledExpr{
							pos:   position{line: 1101, col: 5, offset: 35157},
							label: "frontmatter",
							expr: &ruleRefExpr{
								pos:  position{line: 1101, col: 18, offset: 35170},
								name: "YamlFrontMatter",
							},
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 1107, col: 1, offset: 35295},
			expr: &actionExpr{
				pos: position{line: 1107, col: 20, offset: 35314},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 20, offset: 35314},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1107, col: 20, offset: 35314},
							name: "YamlFrontMatterDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 45, offset: 35339},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 1107, col: 53, offset: 35347},
								expr: &ruleRefExpr{
									pos:  position{line: 1107, col: 54, offset: 35348},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1107, col: 79, offset: 35373},
							name: "YamlFrontMatterDelimiter",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterDelimiter",
			pos:  position{line: 1111, col: 1, offset: 35457},
			expr: &seqExpr{
				pos: position{line: 1111, col: 30, offset: 35486},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1111, col: 30, offset: 35486},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1111, col: 36, offset: 35492},
						expr: &ruleRefExpr{
							pos:  position{line: 1111, col: 36, offset: 35492},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 43, offset: 35499},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 1113, col: 1, offset: 35504},
			expr: &actionExpr{
				pos: position{line: 1113, col: 27, offset: 35530},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1113, col: 27, offset: 35530},
					expr: &oneOrMoreExpr{
						pos: position{line: 1113, col: 28, offset: 35531},
						expr: &seqExpr{
							pos: position{line: 1113, col: 29, offset: 35532},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1113, col: 29, offset: 35532},
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 30, offset: 35533},
										name: "YamlFrontMatterDelimiter",
									},
								},
								&anyMatcher{
									line: 1113, col: 55, offset: 35558,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatterFragment",
			pos:  position{line: 1117, col: 1, offset: 35604},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 24, offset: 35627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 24, offset: 35627},
						name: "FrontMatterDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 47, offset: 35650},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 59, offset: 35662},
						name: "FrontMatterLine",
					},
				},
			},
		},
		{
			name: "FrontMatterDelimiter",
			pos:  position{line: 1119, col: 1, offset: 35679},
			expr: &seqExpr{
				pos: position{line: 1119, col: 26, offset: 35704},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1119, col: 26, offset: 35704},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1119, col: 32, offset: 35710},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 32, offset: 35710},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 39, offset: 35717},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FrontMatterLine",
			pos:  position{line: 1121, col: 1, offset: 35722},
			expr: &actionExpr{
				pos: position{line: 1121, col: 20, offset: 35741},
				run: (*parser).callonFrontMatterLine1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1121, col: 20, offset: 35741},
					expr: &anyMatcher{
						line: 1121, col: 21, offset: 35742,
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1128, col: 1, offset: 35992},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 36015},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 1129, col: 5, offset: 36015},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 1129, col: 15, offset: 36025},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1129, col: 15, offset: 36025},
								run: (*parser).callonInlineElements4,
								expr: &labeledExpr{
									pos:   position{line: 1129, col: 15, offset: 36025},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 24, offset: 36034},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 1131, col: 9, offset: 36126},
								run: (*parser).callonInlineElements7,
								expr: &seqExpr{
									pos: position{line: 1131, col: 9, offset: 36126},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1131, col: 9, offset: 36126},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1131, col: 18, offset: 36135},
												expr: &ruleRefExpr{
													pos:  position{line: 1131, col: 19, offset: 36136},
													name: "InlineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1131, col: 35, offset: 36152},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1147, col: 1, offset: 36469},
			expr: &actionExpr{
				pos: position{line: 1148, col: 5, offset: 36492},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1148, col: 5, offset: 36492},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1149, col: 9, offset: 36510},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1149, col: 9, offset: 36510},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1150, col: 11, offset: 36571},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 1151, col: 11, offset: 36616},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1152, col: 11, offset: 36634},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1152, col: 11, offset: 36634},
										expr: &ruleRefExpr{
											pos:  position{line: 1152, col: 12, offset: 36635},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1153, col: 13, offset: 36653},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1153, col: 13, offset: 36653},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1154, col: 15, offset: 36684},
												name: "Quote",
											},
											&ruleRefExpr{
												pos:  position{line: 1155, col: 15, offset: 36704},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1156, col: 15, offset: 36741},
												name: "Replacement",
											},
											&ruleRefExpr{
												pos:  position{line: 1157, col: 15, offset: 36767},
												name: "InlineMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1158, col: 15, offset: 36793},
												name: "PostReplacement",
											},
											&ruleRefExpr{
												pos:  position{line: 1159, col: 15, offset: 36823},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1161, col: 15, offset: 36923},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 1168, col: 1, offset: 37160},
			expr: &actionExpr{
				pos: position{line: 1168, col: 20, offset: 37179},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 20, offset: 37179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1168, col: 20, offset: 37179},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 1168, col: 25, offset: 37184},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 29, offset: 37188},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 1168, col: 33, offset: 37192},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1168, col: 38, offset: 37197},
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 38, offset: 37197},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1175, col: 1, offset: 37529},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 37542},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 14, offset: 37542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1175, col: 14, offset: 37542},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 19, offset: 37547},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 25, offset: 37553},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 43, offset: 37571},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1179, col: 1, offset: 37643},
			expr: &actionExpr{
				pos: position{line: 1179, col: 21, offset: 37663},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1179, col: 21, offset: 37663},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1179, col: 30, offset: 37672},
						expr: &choiceExpr{
							pos: position{line: 1179, col: 31, offset: 37673},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1179, col: 31, offset: 37673},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 38, offset: 37680},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 53, offset: 37695},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 66, offset: 37708},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 74, offset: 37716},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 93, offset: 37735},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1179, col: 114, offset: 37756},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 1179, col: 115, offset: 37757},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1179, col: 115, offset: 37757},
												expr: &litMatcher{
													pos:        position{line: 1179, col: 116, offset: 37758},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1179, col: 121, offset: 37763,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1185, col: 1, offset: 37869},
			expr: &actionExpr{
				pos: position{line: 1185, col: 23, offset: 37891},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 23, offset: 37891},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1185, col: 23, offset: 37891},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 29, offset: 37897},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 36, offset: 37904},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 5, offset: 37936},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1186, col: 11, offset: 37942},
								expr: &actionExpr{
									pos: position{line: 1186, col: 12, offset: 37943},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1186, col: 12, offset: 37943},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1186, col: 12, offset: 37943},
												expr: &ruleRefExpr{
													pos:  position{line: 1186, col: 12, offset: 37943},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1186, col: 19, offset: 37950},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1186, col: 23, offset: 37954},
												expr: &ruleRefExpr{
													pos:  position{line: 1186, col: 23, offset: 37954},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1186, col: 30, offset: 37961},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1186, col: 39, offset: 37970},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 5, offset: 38028},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1187, col: 11, offset: 38034},
								expr: &actionExpr{
									pos: position{line: 1187, col: 12, offset: 38035},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1187, col: 12, offset: 38035},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1187, col: 12, offset: 38035},
												expr: &ruleRefExpr{
													pos:  position{line: 1187, col: 12, offset: 38035},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1187, col: 19, offset: 38042},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1187, col: 23, offset: 38046},
												expr: &ruleRefExpr{
													pos:  position{line: 1187, col: 23, offset: 38046},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1187, col: 30, offset: 38053},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1187, col: 39, offset: 38062},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 5, offset: 38120},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1192, col: 1, offset: 38199},
			expr: &actionExpr{
				pos: position{line: 1192, col: 30, offset: 38228},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1192, col: 30, offset: 38228},
					expr: &choiceExpr{
						pos: position{line: 1192, col: 31, offset: 38229},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1192, col: 31, offset: 38229},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1192, col: 42, offset: 38240},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1199, col: 1, offset: 38472},
			expr: &actionExpr{
				pos: position{line: 1200, col: 5, offset: 38491},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 5, offset: 38491},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1200, col: 5, offset: 38491},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1204, col: 5, offset: 38643},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 15, offset: 38653},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 21, offset: 38659},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 31, offset: 38669},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 49, offset: 38687},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1204, col: 67, offset: 38705},
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 67, offset: 38705},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 74, offset: 38712},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1210, col: 1, offset: 38999},
			expr: &actionExpr{
				pos: position{line: 1210, col: 16, offset: 39014},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 16, offset: 39014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1210, col: 16, offset: 39014},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1210, col: 25, offset: 39023},
							expr: &litMatcher{
								pos:        position{line: 1210, col: 26, offset: 39024},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 30, offset: 39028},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 36, offset: 39034},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 46, offset: 39044},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 64, offset: 39062},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1217, col: 1, offset: 39492},
			expr: &actionExpr{
				pos: position{line: 1217, col: 15, offset: 39506},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 15, offset: 39506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1217, col: 15, offset: 39506},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 23, offset: 39514},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1217, col: 29, offset: 39520},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1217, col: 29, offset: 39520},
									expr: &charClassMatcher{
										pos:        position{line: 1217, col: 29, offset: 39520},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 73, offset: 39564},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 85, offset: 39576},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1224, col: 1, offset: 39942},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 19, offset: 39960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1224, col: 19, offset: 39960},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1224, col: 19, offset: 39960},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 19, offset: 39960},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1224, col: 32, offset: 39973},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 41, offset: 39982},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 58, offset: 39999},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 9, offset: 40059},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1226, col: 9, offset: 40059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 9, offset: 40059},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 21, offset: 40071},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 26, offset: 40076},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 39, offset: 40089},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 43, offset: 40093},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1226, col: 51, offset: 40101},
										expr: &ruleRefExpr{
											pos:  position{line: 1226, col: 52, offset: 40102},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 70, offset: 40120},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1230, col: 1, offset: 40243},
			expr: &ruleRefExpr{
				pos:  position{line: 1230, col: 16, offset: 40258},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1232, col: 1, offset: 40269},
			expr: &actionExpr{
				pos: position{line: 1232, col: 20, offset: 40288},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1232, col: 20, offset: 40288},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1232, col: 29, offset: 40297},
						expr: &seqExpr{
							pos: position{line: 1232, col: 30, offset: 40298},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1232, col: 30, offset: 40298},
									expr: &litMatcher{
										pos:        position{line: 1232, col: 31, offset: 40299},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1232, col: 35, offset: 40303},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1240, col: 1, offset: 40632},
			expr: &litMatcher{
				pos:        position{line: 1240, col: 32, offset: 40663},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1242, col: 1, offset: 40668},
			expr: &actionExpr{
				pos: position{line: 1242, col: 26, offset: 40693},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1242, col: 26, offset: 40693},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1242, col: 26, offset: 40693},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 54, offset: 40721},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1242, col: 63, offset: 40730},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1242, col: 93, offset: 40760},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1242, col: 121, offset: 40788},
							expr: &ruleRefExpr{
								pos:  position{line: 1242, col: 122, offset: 40789},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1246, col: 1, offset: 40902},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 33, offset: 40934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1246, col: 34, offset: 40935},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1246, col: 34, offset: 40935},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1246, col: 35, offset: 40936},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1246, col: 35, offset: 40936},
											expr: &ruleRefExpr{
												pos:  position{line: 1246, col: 36, offset: 40937},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1246, col: 64, offset: 40965},
											expr: &ruleRefExpr{
												pos:  position{line: 1246, col: 65, offset: 40966},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1246, col: 71, offset: 40972},
											expr: &ruleRefExpr{
												pos:  position{line: 1246, col: 72, offset: 40973},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1246, col: 80, offset: 40981,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1246, col: 83, offset: 40984},
									expr: &seqExpr{
										pos: position{line: 1246, col: 84, offset: 40985},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1246, col: 84, offset: 40985},
												expr: &seqExpr{
													pos: position{line: 1246, col: 86, offset: 40987},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1246, col: 86, offset: 40987},
															name: "Spaces",
														},
														&ruleRefExpr{
															pos:  position{line: 1246, col: 93, offset: 40994},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1246, col: 122, offset: 41023},
												expr: &ruleRefExpr{
													pos:  position{line: 1246, col: 123, offset: 41024},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1246, col: 151, offset: 41052},
												expr: &ruleRefExpr{
													pos:  position{line: 1246, col: 152, offset: 41053},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1246, col: 160, offset: 41061,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 11, offset: 41211},
						run: (*parser).callonSinglePlusPassthroughContent23,
						expr: &seqExpr{
							pos: position{line: 1248, col: 12, offset: 41212},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1248, col: 12, offset: 41212},
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 13, offset: 41213},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1248, col: 19, offset: 41219},
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 20, offset: 41220},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1248, col: 28, offset: 41228},
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 29, offset: 41229},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1248, col: 57, offset: 41257,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1252, col: 1, offset: 41347},
			expr: &litMatcher{
				pos:        position{line: 1252, col: 32, offset: 41378},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1254, col: 1, offset: 41385},
			expr: &actionExpr{
				pos: position{line: 1254, col: 26, offset: 41410},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1254, col: 26, offset: 41410},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1254, col: 26, offset: 41410},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1254, col: 54, offset: 41438},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 63, offset: 41447},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1254, col: 93, offset: 41477},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1254, col: 121, offset: 41505},
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 122, offset: 41506},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1258, col: 1, offset: 41619},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 33, offset: 41651},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1258, col: 34, offset: 41652},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1258, col: 34, offset: 41652},
							expr: &seqExpr{
								pos: position{line: 1258, col: 35, offset: 41653},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1258, col: 35, offset: 41653},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 36, offset: 41654},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1258, col: 64, offset: 41682,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1260, col: 11, offset: 41855},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1260, col: 11, offset: 41855},
							expr: &seqExpr{
								pos: position{line: 1260, col: 12, offset: 41856},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1260, col: 12, offset: 41856},
										expr: &ruleRefExpr{
											pos:  position{line: 1260, col: 13, offset: 41857},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1260, col: 19, offset: 41863},
										expr: &ruleRefExpr{
											pos:  position{line: 1260, col: 20, offset: 41864},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1260, col: 28, offset: 41872},
										expr: &ruleRefExpr{
											pos:  position{line: 1260, col: 29, offset: 41873},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1260, col: 57, offset: 41901,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1264, col: 1, offset: 41992},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 21, offset: 42012},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1264, col: 21, offset: 42012},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1264, col: 21, offset: 42012},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1264, col: 21, offset: 42012},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 30, offset: 42021},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1264, col: 38, offset: 42029},
										expr: &ruleRefExpr{
											pos:  position{line: 1264, col: 39, offset: 42030},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 67, offset: 42058},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1266, col: 9, offset: 42162},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1266, col: 9, offset: 42162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 9, offset: 42162},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 19, offset: 42172},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1266, col: 27, offset: 42180},
										expr: &choiceExpr{
											pos: position{line: 1266, col: 28, offset: 42181},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1266, col: 28, offset: 42181},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1266, col: 41, offset: 42194},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 69, offset: 42222},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1270, col: 1, offset: 42326},
			expr: &actionExpr{
				pos: position{line: 1270, col: 30, offset: 42355},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1270, col: 30, offset: 42355},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1277, col: 1, offset: 42611},
			expr: &choiceExpr{
				pos: position{line: 1277, col: 9, offset: 42619},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1277, col: 9, offset: 42619},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 24, offset: 42634},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1280, col: 1, offset: 42715},
			expr: &actionExpr{
				pos: position{line: 1280, col: 17, offset: 42731},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 17, offset: 42731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1280, col: 17, offset: 42731},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 25, offset: 42739},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 30, offset: 42744},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 40, offset: 42754},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 58, offset: 42772},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1284, col: 1, offset: 42894},
			expr: &actionExpr{
				pos: position{line: 1284, col: 17, offset: 42910},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 17, offset: 42910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1284, col: 17, offset: 42910},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 22, offset: 42915},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 42, offset: 42935},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1284, col: 59, offset: 42952},
								expr: &ruleRefExpr{
									pos:  position{line: 1284, col: 60, offset: 42953},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1292, col: 1, offset: 43313},
			expr: &actionExpr{
				pos: position{line: 1293, col: 5, offset: 43334},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1293, col: 5, offset: 43334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1293, col: 5, offset: 43334},
							label: "firstElement",
							expr: &ruleRefExpr{
								pos:  position{line: 1293, col: 19, offset: 43348},
								name: "ListElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 5, offset: 43365},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 20, offset: 43380},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListElement",
			pos:  position{line: 1298, col: 1, offset: 43516},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 43536},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1299, col: 5, offset: 43536},
						name: "OrderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 43562},
						name: "UnorderedListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 7, offset: 43589},
						name: "CalloutListElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 7, offset: 43614},
						name: "LabeledListElement",
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1304, col: 1, offset: 43635},
			expr: &actionExpr{
				pos: position{line: 1304, col: 22, offset: 43656},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 22, offset: 43656},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1304, col: 31, offset: 43665},
						expr: &ruleRefExpr{
							pos:  position{line: 1304, col: 32, offset: 43666},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1308, col: 1, offset: 43746},
			expr: &actionExpr{
				pos: position{line: 1309, col: 5, offset: 43885},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 5, offset: 43885},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1309, col: 5, offset: 43885},
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 6, offset: 43886},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 5, offset: 43895},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1311, col: 9, offset: 43913},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1311, col: 13, offset: 43917},
										run: (*parser).callonExtraListElement7,
										expr: &seqExpr{
											pos: position{line: 1311, col: 13, offset: 43917},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1311, col: 13, offset: 43917},
													expr: &ruleRefExpr{
														pos:  position{line: 1311, col: 13, offset: 43917},
														name: "BlankLine",
													},
												},
												&labeledExpr{
													pos:   position{line: 1312, col: 13, offset: 43941},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1312, col: 21, offset: 43949},
														name: "OrderedListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1315, col: 13, offset: 44033},
										run: (*parser).callonExtraListElement13,
										expr: &seqExpr{
											pos: position{line: 1315, col: 13, offset: 44033},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1315, col: 13, offset: 44033},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1315, col: 24, offset: 44044},
														expr: &ruleRefExpr{
															pos:  position{line: 1315, col: 25, offset: 44045},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1316, col: 13, offset: 44076},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1316, col: 21, offset: 44084},
														name: "OrderedListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1319, col: 13, offset: 44204},
										run: (*parser).callonExtraListElement20,
										expr: &seqExpr{
											pos: position{line: 1319, col: 13, offset: 44204},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1319, col: 13, offset: 44204},
													expr: &ruleRefExpr{
														pos:  position{line: 1319, col: 13, offset: 44204},
														name: "BlankLine",
													},
												},
												&labeledExpr{
													pos:   position{line: 1320, col: 13, offset: 44228},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1320, col: 21, offset: 44236},
														name: "UnorderedListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1323, col: 13, offset: 44322},
										run: (*parser).callonExtraListElement26,
										expr: &seqExpr{
											pos: position{line: 1323, col: 13, offset: 44322},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1323, col: 13, offset: 44322},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1323, col: 24, offset: 44333},
														expr: &ruleRefExpr{
															pos:  position{line: 1323, col: 25, offset: 44334},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1324, col: 13, offset: 44365},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1324, col: 21, offset: 44373},
														name: "UnorderedListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1327, col: 13, offset: 44495},
										run: (*parser).callonExtraListElement33,
										expr: &seqExpr{
											pos: position{line: 1327, col: 13, offset: 44495},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1327, col: 13, offset: 44495},
													expr: &ruleRefExpr{
														pos:  position{line: 1327, col: 13, offset: 44495},
														name: "BlankLine",
													},
												},
												&labeledExpr{
													pos:   position{line: 1328, col: 13, offset: 44519},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1328, col: 21, offset: 44527},
														name: "CalloutListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1331, col: 13, offset: 44611},
										run: (*parser).callonExtraListElement39,
										expr: &seqExpr{
											pos: position{line: 1331, col: 13, offset: 44611},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1331, col: 13, offset: 44611},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1331, col: 24, offset: 44622},
														expr: &ruleRefExpr{
															pos:  position{line: 1331, col: 25, offset: 44623},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1332, col: 13, offset: 44654},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1332, col: 21, offset: 44662},
														name: "CalloutListElement",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 11, offset: 44780},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1336, col: 13, offset: 44816},
										run: (*parser).callonExtraListElement47,
										expr: &seqExpr{
											pos: position{line: 1336, col: 13, offset: 44816},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1336, col: 13, offset: 44816},
													expr: &ruleRefExpr{
														pos:  position{line: 1336, col: 13, offset: 44816},
														name: "BlankLine",
													},
												},
												&labeledExpr{
													pos:   position{line: 1337, col: 13, offset: 44840},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1337, col: 21, offset: 44848},
														name: "LabeledListElement",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1340, col: 13, offset: 44932},
										run: (*parser).callonExtraListElement53,
										expr: &seqExpr{
											pos: position{line: 1340, col: 13, offset: 44932},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1340, col: 13, offset: 44932},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1340, col: 24, offset: 44943},
														expr: &ruleRefExpr{
															pos:  position{line: 1340, col: 25, offset: 44944},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1341, col: 13, offset: 44975},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1341, col: 21, offset: 44983},
														name: "LabeledListElement",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 11, offset: 45101},
										name: "SingleLineComment",
									},
									&actionExpr{
										pos: position{line: 1345, col: 13, offset: 45131},
										run: (*parser).callonExtraListElement61,
										expr: &labeledExpr{
											pos:   position{line: 1345, col: 13, offset: 45131},
											label: "element",
											expr: &ruleRefExpr{
												pos:  position{line: 1345, col: 21, offset: 45139},
												name: "ListElementParagraphLine",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementParagraphLine",
			pos:  position{line: 1352, col: 1, offset: 45299},
			expr: &actionExpr{
				pos: position{line: 1353, col: 5, offset: 45332},
				run: (*parser).callonListElementParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 5, offset: 45332},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1353, col: 5, offset: 45332},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 6, offset: 45333},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 1354, col: 5, offset: 45347},
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 6, offset: 45348},
								name: "ListElementContinuationMarker",
							},
						},
						&notExpr{
							pos: position{line: 1355, col: 5, offset: 45382},
							expr: &ruleRefExpr{
								pos:  position{line: 1355, col: 6, offset: 45383},
								name: "OrderedListElementPrefix",
							},
						},
						&notExpr{
							pos: position{line: 1356, col: 5, offset: 45412},
							expr: &ruleRefExpr{
								pos:  position{line: 1356, col: 6, offset: 45413},
								name: "UnorderedListElementPrefix",
							},
						},
						&notExpr{
							pos: position{line: 1357, col: 5, offset: 45444},
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 6, offset: 45445},
								name: "CalloutListElementPrefix",
							},
						},
						&notExpr{
							pos: position{line: 1358, col: 5, offset: 45474},
							expr: &seqExpr{
								pos: position{line: 1358, col: 7, offset: 45476},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1358, col: 7, offset: 45476},
										name: "LabeledListElementTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 30, offset: 45499},
										name: "LabeledListElementSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1359, col: 5, offset: 45532},
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 6, offset: 45533},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 5, offset: 45552},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1360, col: 14, offset: 45561},
								run: (*parser).callonListElementParagraphLine20,
								expr: &oneOrMoreExpr{
									pos: position{line: 1360, col: 14, offset: 45561},
									expr: &charClassMatcher{
										pos:        position{line: 1360, col: 14, offset: 45561},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1363, col: 5, offset: 45637},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListElementContent",
			pos:  position{line: 1367, col: 1, offset: 45731},
			expr: &actionExpr{
				pos: position{line: 1368, col: 5, offset: 45758},
				run: (*parser).callonListElementContent1,
				expr: &seqExpr{
					pos: position{line: 1368, col: 5, offset: 45758},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1368, col: 5, offset: 45758},
							label: "rawline",
							expr: &actionExpr{
								pos: position{line: 1368, col: 14, offset: 45767},
								run: (*parser).callonListElementContent4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1368, col: 14, offset: 45767},
									expr: &charClassMatcher{
										pos:        position{line: 1368, col: 14, offset: 45767},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1371, col: 5, offset: 45837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1378, col: 1, offset: 45985},
			expr: &actionExpr{
				pos: position{line: 1379, col: 5, offset: 46017},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 5, offset: 46017},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 5, offset: 46017},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1379, col: 12, offset: 46024},
								expr: &seqExpr{
									pos: position{line: 1379, col: 13, offset: 46025},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1379, col: 13, offset: 46025},
											expr: &ruleRefExpr{
												pos:  position{line: 1379, col: 13, offset: 46025},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1379, col: 20, offset: 46032},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1380, col: 5, offset: 46047},
							name: "ListElementContinuationMarker",
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 5, offset: 46081},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1381, col: 13, offset: 46089},
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 13, offset: 46089},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationMarker",
			pos:  position{line: 1386, col: 1, offset: 46224},
			expr: &seqExpr{
				pos: position{line: 1386, col: 34, offset: 46257},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1386, col: 34, offset: 46257},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1386, col: 38, offset: 46261},
						expr: &ruleRefExpr{
							pos:  position{line: 1386, col: 38, offset: 46261},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 45, offset: 46268},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1388, col: 1, offset: 46277},
			expr: &actionExpr{
				pos: position{line: 1389, col: 5, offset: 46355},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 5, offset: 46355},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1389, col: 5, offset: 46355},
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 6, offset: 46356},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 1390, col: 5, offset: 46381},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 6, offset: 46382},
								name: "ListElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 5, offset: 46398},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 16, offset: 46409},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 17, offset: 46410},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 5, offset: 46432},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1393, col: 9, offset: 46450},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1393, col: 9, offset: 46450},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 11, offset: 46470},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 11, offset: 46501},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 46526},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 46551},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1398, col: 11, offset: 46612},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1399, col: 11, offset: 46633},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1400, col: 11, offset: 46657},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 11, offset: 46673},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 46701},
										name: "AdmonitionParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 1403, col: 11, offset: 46731},
										name: "LiteralParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 11, offset: 46758},
										name: "ListContinuationParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuationParagraph",
			pos:  position{line: 1416, col: 1, offset: 47233},
			expr: &actionExpr{
				pos: position{line: 1417, col: 5, offset: 47267},
				run: (*parser).callonListContinuationParagraph1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 5, offset: 47267},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 5, offset: 47267},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1417, col: 14, offset: 47276},
								run: (*parser).callonListContinuationParagraph4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1417, col: 14, offset: 47276},
									expr: &charClassMatcher{
										pos:        position{line: 1417, col: 14, offset: 47276},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1420, col: 5, offset: 47333},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OrderedListElement",
			pos:  position{line: 1427, col: 1, offset: 47525},
			expr: &actionExpr{
				pos: position{line: 1428, col: 5, offset: 47552},
				run: (*parser).callonOrderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 5, offset: 47552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1428, col: 5, offset: 47552},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 13, offset: 47560},
								name: "OrderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 5, offset: 47591},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 14, offset: 47600},
								name: "ListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListElementPrefix",
			pos:  position{line: 1434, col: 1, offset: 47727},
			expr: &actionExpr{
				pos: position{line: 1435, col: 5, offset: 47760},
				run: (*parser).callonOrderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1435, col: 5, offset: 47760},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1435, col: 5, offset: 47760},
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 5, offset: 47760},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 12, offset: 47767},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1437, col: 9, offset: 47830},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1437, col: 9, offset: 47830},
										run: (*parser).callonOrderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1437, col: 9, offset: 47830},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1437, col: 9, offset: 47830},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1437, col: 16, offset: 47837},
														run: (*parser).callonOrderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1437, col: 16, offset: 47837},
															expr: &litMatcher{
																pos:        position{line: 1437, col: 17, offset: 47838},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1441, col: 9, offset: 47938},
													run: (*parser).callonOrderedListElementPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1460, col: 11, offset: 48655},
										run: (*parser).callonOrderedListElementPrefix14,
										expr: &seqExpr{
											pos: position{line: 1460, col: 11, offset: 48655},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1460, col: 11, offset: 48655},
													expr: &charClassMatcher{
														pos:        position{line: 1460, col: 12, offset: 48656},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1460, col: 20, offset: 48664},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1462, col: 13, offset: 48781},
										run: (*parser).callonOrderedListElementPrefix19,
										expr: &seqExpr{
											pos: position{line: 1462, col: 13, offset: 48781},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1462, col: 14, offset: 48782},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1462, col: 21, offset: 48789},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1464, col: 13, offset: 48909},
										run: (*parser).callonOrderedListElementPrefix23,
										expr: &seqExpr{
											pos: position{line: 1464, col: 13, offset: 48909},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1464, col: 14, offset: 48910},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1464, col: 21, offset: 48917},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1466, col: 13, offset: 49037},
										run: (*parser).callonOrderedListElementPrefix27,
										expr: &seqExpr{
											pos: position{line: 1466, col: 13, offset: 49037},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1466, col: 13, offset: 49037},
													expr: &charClassMatcher{
														pos:        position{line: 1466, col: 14, offset: 49038},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1466, col: 26, offset: 49050},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1468, col: 13, offset: 49170},
										run: (*parser).callonOrderedListElementPrefix32,
										expr: &seqExpr{
											pos: position{line: 1468, col: 13, offset: 49170},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1468, col: 13, offset: 49170},
													expr: &charClassMatcher{
														pos:        position{line: 1468, col: 14, offset: 49171},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1468, col: 26, offset: 49183},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1470, col: 12, offset: 49302},
							name: "Spaces",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElement",
			pos:  position{line: 1477, col: 1, offset: 49420},
			expr: &actionExpr{
				pos: position{line: 1478, col: 5, offset: 49449},
				run: (*parser).callonUnorderedListElement1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 5, offset: 49449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1478, col: 5, offset: 49449},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 13, offset: 49457},
								name: "UnorderedListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1479, col: 5, offset: 49490},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 1479, col: 16, offset: 49501},
								expr: &ruleRefExpr{
									pos:  position{line: 1479, col: 17, offset: 49502},
									name: "UnorderedListElementCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 5, offset: 49540},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 14, offset: 49549},
								name: "ListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementPrefix",
			pos:  position{line: 1484, col: 1, offset: 49687},
			expr: &actionExpr{
				pos: position{line: 1485, col: 5, offset: 49722},
				run: (*parser).callonUnorderedListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 5, offset: 49722},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1485, col: 5, offset: 49722},
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 5, offset: 49722},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 12, offset: 49729},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 1485, col: 20, offset: 49737},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1487, col: 9, offset: 49794},
										run: (*parser).callonUnorderedListElementPrefix7,
										expr: &seqExpr{
											pos: position{line: 1487, col: 9, offset: 49794},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1487, col: 9, offset: 49794},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 1487, col: 16, offset: 49801},
														run: (*parser).callonUnorderedListElementPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1487, col: 16, offset: 49801},
															expr: &litMatcher{
																pos:        position{line: 1487, col: 17, offset: 49802},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1491, col: 9, offset: 49902},
													run: (*parser).callonUnorderedListElementPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1508, col: 14, offset: 50609},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 1508, col: 21, offset: 50616},
											run: (*parser).callonUnorderedListElementPrefix15,
											expr: &litMatcher{
												pos:        position{line: 1508, col: 22, offset: 50617},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 13, offset: 50703},
							name: "Spaces",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListElementCheckStyle",
			pos:  position{line: 1514, col: 1, offset: 50739},
			expr: &actionExpr{
				pos: position{line: 1515, col: 5, offset: 50778},
				run: (*parser).callonUnorderedListElementCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 1515, col: 5, offset: 50778},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1515, col: 5, offset: 50778},
							expr: &litMatcher{
								pos:        position{line: 1515, col: 6, offset: 50779},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 10, offset: 50783},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 1516, col: 7, offset: 50797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1516, col: 7, offset: 50797},
										run: (*parser).callonUnorderedListElementCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 1516, col: 7, offset: 50797},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1517, col: 7, offset: 50842},
										run: (*parser).callonUnorderedListElementCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 1517, col: 7, offset: 50842},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1518, col: 7, offset: 50885},
										run: (*parser).callonUnorderedListElementCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 1518, col: 7, offset: 50885},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1519, col: 7, offset: 50927},
							name: "Spaces",
						},
					},
				},
			},
		},
		{
			name: "LabeledListElement",
			pos:  position{line: 1526, col: 1, offset: 51051},
			expr: &actionExpr{
				pos: position{line: 1527, col: 5, offset: 51078},
				run: (*parser).callonLabeledListElement1,
				expr: &seqExpr{
					pos: position{line: 1527, col: 5, offset: 51078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1527, col: 5, offset: 51078},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 11, offset: 51084},
								name: "LabeledListElementTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 5, offset: 51113},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 16, offset: 51124},
								name: "LabeledListElementSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 5, offset: 51158},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 18, offset: 51171},
								name: "LabeledListElementDescription",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListElementTerm",
			pos:  position{line: 1534, col: 1, offset: 51306},
			expr: &actionExpr{
				pos: position{line: 1535, col: 5, offset: 51337},
				run: (*parser).callonLabeledListElementTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1535, col: 5, offset: 51337},
					expr: &seqExpr{
						pos: position{line: 1535, col: 6, offset: 51338},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1535, col: 6, offset: 51338},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 7, offset: 51339},
									name: "LabeledListElementSeparator",
								},
							},
							&notExpr{
								pos: position{line: 1535, col: 35, offset: 51367},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 36, offset: 51368},
									name: "EOL",
								},
							},
							&anyMatcher{
								line: 1535, col: 40, offset: 51372,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListElementSeparator",
			pos:  position{line: 1539, col: 1, offset: 51433},
			expr: &actionExpr{
				pos: position{line: 1540, col: 5, offset: 51469},
				run: (*parser).callonLabeledListElementSeparator1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 5, offset: 51469},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 51469},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 1540, col: 16, offset: 51480},
								run: (*parser).callonLabeledListElementSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1540, col: 16, offset: 51480},
									expr: &litMatcher{
										pos:        position{line: 1540, col: 17, offset: 51481},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1543, col: 5, offset: 51538},
							run: (*parser).callonLabeledListElementSeparator7,
						},
					},
				},
			},
		},
		{
			name: "LabeledListElementDescription",
			pos:  position{line: 1550, col: 1, offset: 51750},
			expr: &choiceExpr{
				pos: position{line: 1551, col: 5, offset: 51788},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1553, col: 9, offset: 51853},
						run: (*parser).callonLabeledListElementDescription2,
						expr: &seqExpr{
							pos: position{line: 1553, col: 9, offset: 51853},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1553, col: 9, offset: 51853},
									expr: &ruleRefExpr{
										pos:  position{line: 1553, col: 9, offset: 51853},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1553, col: 16, offset: 51860},
									name: "EOL",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1554, col: 9, offset: 51873},
									expr: &ruleRefExpr{
										pos:  position{line: 1554, col: 9, offset: 51873},
										name: "BlankLine",
									},
								},
								&labeledExpr{
									pos:   position{line: 1555, col: 9, offset: 51893},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1555, col: 17, offset: 51901},
										expr: &ruleRefExpr{
											pos:  position{line: 1555, col: 18, offset: 51902},
											name: "ListElementParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1563, col: 9, offset: 52136},
						run: (*parser).callonLabeledListElementDescription12,
						expr: &seqExpr{
							pos: position{line: 1563, col: 9, offset: 52136},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1563, col: 9, offset: 52136},
									name: "Spaces",
								},
								&labeledExpr{
									pos:   position{line: 1564, col: 9, offset: 52188},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 1564, col: 18, offset: 52197},
										run: (*parser).callonLabeledListElementDescription16,
										expr: &oneOrMoreExpr{
											pos: position{line: 1564, col: 18, offset: 52197},
											expr: &charClassMatcher{
												pos:        position{line: 1564, col: 18, offset: 52197},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1567, col: 9, offset: 52279},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1575, col: 1, offset: 52430},
			expr: &actionExpr{
				pos: position{line: 1577, col: 5, offset: 52508},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1577, col: 5, offset: 52508},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1577, col: 5, offset: 52508},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1580, col: 5, offset: 52570},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 9, offset: 52574},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1580, col: 14, offset: 52579},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1580, col: 14, offset: 52579},
									expr: &charClassMatcher{
										pos:        position{line: 1580, col: 14, offset: 52579},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1580, col: 62, offset: 52627},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1580, col: 66, offset: 52631},
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 66, offset: 52631},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1580, col: 73, offset: 52638},
							expr: &choiceExpr{
								pos: position{line: 1580, col: 75, offset: 52640},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1580, col: 75, offset: 52640},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 81, offset: 52646},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElement",
			pos:  position{line: 1584, col: 1, offset: 52707},
			expr: &actionExpr{
				pos: position{line: 1585, col: 5, offset: 52734},
				run: (*parser).callonCalloutListElement1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 5, offset: 52734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1585, col: 5, offset: 52734},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 10, offset: 52739},
								name: "CalloutListElementPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 5, offset: 52770},
							label: "description",
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 18, offset: 52783},
								name: "CalloutListElementContent",
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementPrefix",
			pos:  position{line: 1590, col: 1, offset: 52902},
			expr: &actionExpr{
				pos: position{line: 1591, col: 5, offset: 52935},
				run: (*parser).callonCalloutListElementPrefix1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 5, offset: 52935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1591, col: 5, offset: 52935},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 9, offset: 52939},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1591, col: 14, offset: 52944},
								run: (*parser).callonCalloutListElementPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1591, col: 14, offset: 52944},
									expr: &charClassMatcher{
										pos:        position{line: 1591, col: 14, offset: 52944},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1591, col: 62, offset: 52992},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1591, col: 66, offset: 52996},
							name: "Spaces",
						},
					},
				},
			},
		},
		{
			name: "CalloutListElementContent",
			pos:  position{line: 1595, col: 1, offset: 53036},
			expr: &actionExpr{
				pos: position{line: 1596, col: 5, offset: 53070},
				run: (*parser).callonCalloutListElementContent1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 5, offset: 53070},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1596, col: 5, offset: 53070},
							label: "rawline",
							expr: &actionExpr{
								pos: position{line: 1596, col: 14, offset: 53079},
								run: (*parser).callonCalloutListElementContent4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1596, col: 14, offset: 53079},
									expr: &charClassMatcher{
										pos:        position{line: 1596, col: 14, offset: 53079},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1599, col: 5, offset: 53136},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1606, col: 1, offset: 53459},
			expr: &actionExpr{
				pos: position{line: 1607, col: 5, offset: 53485},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 5, offset: 53485},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1607, col: 5, offset: 53485},
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 7, offset: 53487},
								name: "Alphanum",
							},
						},
						&andExpr{
							pos: position{line: 1608, col: 5, offset: 53596},
							expr: &notExpr{
								pos: position{line: 1608, col: 7, offset: 53598},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 8, offset: 53599},
									name: "OrderedListElementPrefix",
								},
							},
						},
						&andExpr{
							pos: position{line: 1609, col: 5, offset: 53629},
							expr: &notExpr{
								pos: position{line: 1609, col: 7, offset: 53631},
								expr: &ruleRefExpr{
									pos:  position{line: 1609, col: 8, offset: 53632},
									name: "UnorderedListElementPrefix",
								},
							},
						},
						&andExpr{
							pos: position{line: 1610, col: 5, offset: 53664},
							expr: &notExpr{
								pos: position{line: 1610, col: 7, offset: 53666},
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 8, offset: 53667},
									name: "AdmonitionKind",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 5, offset: 53687},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 16, offset: 53698},
								name: "ParagraphRawLine",
							},
						},
						&andCodeExpr{
							pos: position{line: 1612, col: 5, offset: 53721},
							run: (*parser).callonShortcutParagraph16,
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 5, offset: 54083},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1619, col: 16, offset: 54094},
								expr: &actionExpr{
									pos: position{line: 1620, col: 9, offset: 54104},
									run: (*parser).callonShortcutParagraph19,
									expr: &seqExpr{
										pos: position{line: 1620, col: 9, offset: 54104},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1620, col: 9, offset: 54104},
												expr: &ruleRefExpr{
													pos:  position{line: 1620, col: 10, offset: 54105},
													name: "EOF",
												},
											},
											&notExpr{
												pos: position{line: 1621, col: 9, offset: 54117},
												expr: &ruleRefExpr{
													pos:  position{line: 1621, col: 10, offset: 54118},
													name: "ListElementContinuationMarker",
												},
											},
											&labeledExpr{
												pos:   position{line: 1622, col: 9, offset: 54156},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1622, col: 15, offset: 54162},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1622, col: 15, offset: 54162},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 1622, col: 35, offset: 54182},
															name: "ParagraphRawLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1628, col: 1, offset: 54358},
			expr: &actionExpr{
				pos: position{line: 1629, col: 5, offset: 54376},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 5, offset: 54376},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1629, col: 5, offset: 54376},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 16, offset: 54387},
								name: "ParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 5, offset: 54410},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1630, col: 16, offset: 54421},
								expr: &actionExpr{
									pos: position{line: 1631, col: 9, offset: 54431},
									run: (*parser).callonParagraph7,
									expr: &seqExpr{
										pos: position{line: 1631, col: 9, offset: 54431},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1631, col: 9, offset: 54431},
												expr: &ruleRefExpr{
													pos:  position{line: 1631, col: 10, offset: 54432},
													name: "EOF",
												},
											},
											&notExpr{
												pos: position{line: 1632, col: 9, offset: 54444},
												expr: &ruleRefExpr{
													pos:  position{line: 1632, col: 10, offset: 54445},
													name: "ListElementContinuationMarker",
												},
											},
											&labeledExpr{
												pos:   position{line: 1633, col: 9, offset: 54483},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1633, col: 15, offset: 54489},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1633, col: 15, offset: 54489},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 1633, col: 35, offset: 54509},
															name: "ParagraphRawLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdmonitionParagraph",
			pos:  position{line: 1641, col: 1, offset: 54718},
			expr: &actionExpr{
				pos: position{line: 1642, col: 5, offset: 54746},
				run: (*parser).callonAdmonitionParagraph1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 5, offset: 54746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1642, col: 5, offset: 54746},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 11, offset: 54752},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 1642, col: 27, offset: 54768},
							val:        ": ",
							ignoreCase: false,
							want:       "\": \"",
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 5, offset: 54778},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 16, offset: 54789},
								name: "ParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 5, offset: 54812},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1644, col: 16, offset: 54823},
								expr: &actionExpr{
									pos: position{line: 1645, col: 9, offset: 54833},
									run: (*parser).callonAdmonitionParagraph10,
									expr: &seqExpr{
										pos: position{line: 1645, col: 9, offset: 54833},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1645, col: 9, offset: 54833},
												expr: &ruleRefExpr{
													pos:  position{line: 1645, col: 10, offset: 54834},
													name: "ListElementContinuationMarker",
												},
											},
											&labeledExpr{
												pos:   position{line: 1646, col: 9, offset: 54872},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1646, col: 15, offset: 54878},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1646, col: 15, offset: 54878},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 1646, col: 35, offset: 54898},
															name: "ParagraphRawLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphRawLine",
			pos:  position{line: 1653, col: 1, offset: 55097},
			expr: &actionExpr{
				pos: position{line: 1654, col: 5, offset: 55122},
				run: (*parser).callonParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 5, offset: 55122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1654, col: 5, offset: 55122},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1654, col: 14, offset: 55131},
								run: (*parser).callonParagraphRawLine4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1654, col: 14, offset: 55131},
									expr: &charClassMatcher{
										pos:        position{line: 1654, col: 14, offset: 55131},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1657, col: 5, offset: 55188},
							run: (*parser).callonParagraphRawLine7,
						},
						&ruleRefExpr{
							pos:  position{line: 1660, col: 5, offset: 55264},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraph",
			pos:  position{line: 1664, col: 1, offset: 55327},
			expr: &actionExpr{
				pos: position{line: 1665, col: 5, offset: 55352},
				run: (*parser).callonLiteralParagraph1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 5, offset: 55352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1665, col: 5, offset: 55352},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 16, offset: 55363},
								name: "LiteralParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 5, offset: 55393},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1666, col: 16, offset: 55404},
								expr: &choiceExpr{
									pos: position{line: 1666, col: 17, offset: 55405},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1666, col: 17, offset: 55405},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 37, offset: 55425},
											name: "ParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralParagraphRawLine",
			pos:  position{line: 1671, col: 1, offset: 55605},
			expr: &actionExpr{
				pos: position{line: 1672, col: 5, offset: 55637},
				run: (*parser).callonLiteralParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 5, offset: 55637},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1672, col: 5, offset: 55637},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1672, col: 14, offset: 55646},
								run: (*parser).callonLiteralParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1672, col: 14, offset: 55646},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1672, col: 14, offset: 55646},
											name: "Spaces",
										},
										&oneOrMoreExpr{
											pos: position{line: 1672, col: 21, offset: 55653},
											expr: &charClassMatcher{
												pos:        position{line: 1672, col: 21, offset: 55653},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1675, col: 5, offset: 55710},
							run: (*parser).callonLiteralParagraphRawLine9,
						},
						&ruleRefExpr{
							pos:  position{line: 1678, col: 5, offset: 55786},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1685, col: 1, offset: 56172},
			expr: &choiceExpr{
				pos: position{line: 1686, col: 5, offset: 56191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1687, col: 9, offset: 56201},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1687, col: 9, offset: 56201},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1687, col: 9, offset: 56201},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1687, col: 20, offset: 56212},
										expr: &ruleRefExpr{
											pos:  position{line: 1687, col: 21, offset: 56213},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1688, col: 9, offset: 56339},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1688, col: 15, offset: 56345},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1688, col: 15, offset: 56345},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1688, col: 41, offset: 56371},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1692, col: 7, offset: 56490},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1694, col: 1, offset: 56509},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 32, offset: 56540},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1694, col: 32, offset: 56540},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1694, col: 32, offset: 56540},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1694, col: 36, offset: 56544},
								expr: &litMatcher{
									pos:        position{line: 1694, col: 37, offset: 56545},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1694, col: 43, offset: 56551},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1694, col: 43, offset: 56551},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1694, col: 47, offset: 56555},
								expr: &litMatcher{
									pos:        position{line: 1694, col: 48, offset: 56556},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1694, col: 54, offset: 56562},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1694, col: 54, offset: 56562},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1694, col: 58, offset: 56566},
								expr: &litMatcher{
									pos:        position{line: 1694, col: 59, offset: 56567},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1694, col: 65, offset: 56573},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1694, col: 65, offset: 56573},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1694, col: 69, offset: 56577},
								expr: &litMatcher{
									pos:        position{line: 1694, col: 70, offset: 56578},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1696, col: 1, offset: 56583},
			expr: &choiceExpr{
				pos: position{line: 1696, col: 34, offset: 56616},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1696, col: 34, offset: 56616},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1696, col: 41, offset: 56623},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1696, col: 48, offset: 56630},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 55, offset: 56637},
						name: "DoubleQuoteMarkedTextDelimiter",
					},
					&litMatcher{
						pos:        position{line: 1696, col: 88, offset: 56670},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1696, col: 94, offset: 56676},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1698, col: 1, offset: 56681},
			expr: &choiceExpr{
				pos: position{line: 1699, col: 5, offset: 56711},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1699, col: 5, offset: 56711},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1700, col: 7, offset: 56738},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1701, col: 7, offset: 56766},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1702, col: 7, offset: 56794},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1703, col: 7, offset: 56826},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 7, offset: 56847},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1706, col: 1, offset: 56865},
			expr: &choiceExpr{
				pos: position{line: 1707, col: 5, offset: 56897},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1707, col: 5, offset: 56897},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1708, col: 7, offset: 56923},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 7, offset: 56951},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 7, offset: 56979},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1712, col: 1, offset: 57005},
			expr: &actionExpr{
				pos: position{line: 1713, col: 5, offset: 57086},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1713, col: 5, offset: 57086},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1713, col: 5, offset: 57086},
							expr: &litMatcher{
								pos:        position{line: 1713, col: 7, offset: 57088},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 5, offset: 57097},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1715, col: 9, offset: 57115},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1715, col: 9, offset: 57115},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1716, col: 11, offset: 57142},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1717, col: 11, offset: 57170},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1718, col: 11, offset: 57198},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1719, col: 11, offset: 57230},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1720, col: 11, offset: 57262},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1725, col: 1, offset: 57328},
			expr: &choiceExpr{
				pos: position{line: 1725, col: 33, offset: 57360},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1725, col: 33, offset: 57360},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1725, col: 39, offset: 57366},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1725, col: 39, offset: 57366},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1729, col: 1, offset: 57508},
			expr: &actionExpr{
				pos: position{line: 1729, col: 25, offset: 57532},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1729, col: 25, offset: 57532},
					expr: &litMatcher{
						pos:        position{line: 1729, col: 25, offset: 57532},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1733, col: 1, offset: 57581},
			expr: &actionExpr{
				pos: position{line: 1733, col: 25, offset: 57605},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1733, col: 25, offset: 57605},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1733, col: 25, offset: 57605},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1733, col: 30, offset: 57610},
							expr: &litMatcher{
								pos:        position{line: 1733, col: 30, offset: 57610},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1740, col: 1, offset: 57789},
			expr: &choiceExpr{
				pos: position{line: 1740, col: 13, offset: 57801},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1740, col: 13, offset: 57801},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1740, col: 35, offset: 57823},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "BoldTextDelimiter",
			pos:  position{line: 1742, col: 1, offset: 57890},
			expr: &litMatcher{
				pos:        position{line: 1742, col: 22, offset: 57911},
				val:        "*",
				ignoreCase: false,
				want:       "\"*\"",
			},
		},
		{
			name: "BoldTextWord",
			pos:  position{line: 1744, col: 1, offset: 57916},
			expr: &actionExpr{
				pos: position{line: 1745, col: 5, offset: 57937},
				run: (*parser).callonBoldTextWord1,
				expr: &seqExpr{
					pos: position{line: 1745, col: 5, offset: 57937},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1745, col: 5, offset: 57937},
							expr: &charClassMatcher{
								pos:        position{line: 1745, col: 5, offset: 57937},
								val:        "[\\pL0-9,?!;]",
								chars:      []rune{',', '?', '!', ';'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1745, col: 19, offset: 57951},
							expr: &choiceExpr{
								pos: position{line: 1745, col: 21, offset: 57953},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1745, col: 21, offset: 57953},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 29, offset: 57961},
										name: "BoldTextDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextDelimiter",
			pos:  position{line: 1752, col: 1, offset: 58147},
			expr: &litMatcher{
				pos:        position{line: 1752, col: 33, offset: 58179},
				val:        "**",
				ignoreCase: false,
				want:       "\"**\"",
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1754, col: 1, offset: 58185},
			expr: &actionExpr{
				pos: position{line: 1755, col: 5, offset: 58213},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 5, offset: 58213},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1755, col: 5, offset: 58213},
							name: "DoubleQuoteBoldTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1756, col: 5, offset: 58247},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1756, col: 15, offset: 58257},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1757, col: 5, offset: 58291},
							name: "DoubleQuoteBoldTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1761, col: 1, offset: 58414},
			expr: &oneOrMoreExpr{
				pos: position{line: 1761, col: 32, offset: 58445},
				expr: &ruleRefExpr{
					pos:  position{line: 1761, col: 32, offset: 58445},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1763, col: 1, offset: 58476},
			expr: &actionExpr{
				pos: position{line: 1764, col: 5, offset: 58511},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 5, offset: 58511},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1764, col: 5, offset: 58511},
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 6, offset: 58512},
								name: "DoubleQuoteBoldTextDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 5, offset: 58545},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1766, col: 9, offset: 58563},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1766, col: 9, offset: 58563},
										name: "BoldTextWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1767, col: 11, offset: 58586},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1768, col: 11, offset: 58636},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1768, col: 11, offset: 58636},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1768, col: 19, offset: 58644},
												expr: &ruleRefExpr{
													pos:  position{line: 1768, col: 20, offset: 58645},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1769, col: 11, offset: 58697},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1770, col: 11, offset: 58729},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1771, col: 11, offset: 58756},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 1772, col: 11, offset: 58773},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1773, col: 11, offset: 58795},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1774, col: 11, offset: 58818},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1775, col: 11, offset: 58860},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1776, col: 11, offset: 58889},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1780, col: 1, offset: 58972},
			expr: &actionExpr{
				pos: position{line: 1781, col: 5, offset: 59012},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 5, offset: 59012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1781, col: 5, offset: 59012},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1781, col: 16, offset: 59023},
								expr: &ruleRefExpr{
									pos:  position{line: 1781, col: 17, offset: 59024},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1782, col: 5, offset: 59050},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1783, col: 9, offset: 59065},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1783, col: 9, offset: 59065},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1784, col: 11, offset: 59095},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1785, col: 11, offset: 59116},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1786, col: 11, offset: 59137},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1787, col: 11, offset: 59161},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1788, col: 11, offset: 59185},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1792, col: 1, offset: 59286},
			expr: &choiceExpr{
				pos: position{line: 1793, col: 5, offset: 59330},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1793, col: 5, offset: 59330},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1794, col: 7, offset: 59427},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1794, col: 7, offset: 59427},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1794, col: 7, offset: 59427},
									name: "DoubleQuoteBoldTextDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1794, col: 36, offset: 59456},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStartDelimiter",
			pos:  position{line: 1801, col: 1, offset: 59731},
			expr: &litMatcher{
				pos:        position{line: 1801, col: 38, offset: 59768},
				val:        "*",
				ignoreCase: false,
				want:       "\"*\"",
			},
		},
		{
			name: "SingleQuoteBoldTextEndDelimiter",
			pos:  position{line: 1803, col: 1, offset: 59773},
			expr: &litMatcher{
				pos:        position{line: 1803, col: 36, offset: 59808},
				val:        "*",
				ignoreCase: false,
				want:       "\"*\"",
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1805, col: 1, offset: 59814},
			expr: &actionExpr{
				pos: position{line: 1806, col: 5, offset: 59842},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1806, col: 5, offset: 59842},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1806, col: 5, offset: 59842},
							name: "SingleQuoteBoldTextStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 5, offset: 59880},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 15, offset: 59890},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1808, col: 5, offset: 59924},
							name: "SingleQuoteBoldTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1812, col: 1, offset: 60050},
			expr: &actionExpr{
				pos: position{line: 1813, col: 5, offset: 60087},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1813, col: 5, offset: 60087},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1813, col: 5, offset: 60087},
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 6, offset: 60088},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 1813, col: 10, offset: 60092},
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 11, offset: 60093},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 5, offset: 60131},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1814, col: 14, offset: 60140},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 15, offset: 60141},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1815, col: 5, offset: 60175},
							run: (*parser).callonSingleQuoteBoldTextElements10,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1821, col: 1, offset: 60316},
			expr: &choiceExpr{
				pos: position{line: 1822, col: 5, offset: 60351},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1822, col: 5, offset: 60351},
						name: "BoldTextWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 7, offset: 60370},
						name: "Spaces",
					},
					&seqExpr{
						pos: position{line: 1824, col: 7, offset: 60383},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1824, col: 7, offset: 60383},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1824, col: 15, offset: 60391},
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 16, offset: 60392},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1825, col: 7, offset: 60440},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 7, offset: 60468},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 7, offset: 60491},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 7, offset: 60504},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 7, offset: 60522},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 7, offset: 60541},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 7, offset: 60579},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 7, offset: 60604},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1834, col: 1, offset: 60642},
			expr: &actionExpr{
				pos: position{line: 1835, col: 5, offset: 60682},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 5, offset: 60682},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1835, col: 5, offset: 60682},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1835, col: 16, offset: 60693},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 17, offset: 60694},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 5, offset: 60720},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1837, col: 9, offset: 60735},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1837, col: 9, offset: 60735},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1838, col: 11, offset: 60765},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1839, col: 11, offset: 60786},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1840, col: 11, offset: 60810},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 60831},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 60855},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1845, col: 1, offset: 60955},
			expr: &choiceExpr{
				pos: position{line: 1846, col: 5, offset: 60999},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1846, col: 5, offset: 60999},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1847, col: 7, offset: 61104},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1847, col: 7, offset: 61104},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1847, col: 7, offset: 61104},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 61108},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1851, col: 1, offset: 61279},
			expr: &choiceExpr{
				pos: position{line: 1852, col: 5, offset: 61303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1852, col: 5, offset: 61303},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1852, col: 5, offset: 61303},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1852, col: 5, offset: 61303},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1852, col: 18, offset: 61316},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1852, col: 40, offset: 61338},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1852, col: 45, offset: 61343},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1852, col: 55, offset: 61353},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1852, col: 84, offset: 61382},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1854, col: 9, offset: 61539},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1854, col: 9, offset: 61539},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1854, col: 9, offset: 61539},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1854, col: 22, offset: 61552},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1854, col: 44, offset: 61574},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1854, col: 49, offset: 61579},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1854, col: 59, offset: 61589},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1854, col: 88, offset: 61618},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1857, col: 9, offset: 61818},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1857, col: 9, offset: 61818},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1857, col: 9, offset: 61818},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1857, col: 22, offset: 61831},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1857, col: 44, offset: 61853},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1857, col: 48, offset: 61857},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1857, col: 58, offset: 61867},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1857, col: 87, offset: 61896},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1865, col: 1, offset: 62194},
			expr: &choiceExpr{
				pos: position{line: 1865, col: 15, offset: 62208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1865, col: 15, offset: 62208},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1865, col: 39, offset: 62232},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "ItalicTextDelimiter",
			pos:  position{line: 1867, col: 1, offset: 62255},
			expr: &litMatcher{
				pos:        position{line: 1867, col: 24, offset: 62278},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
		},
		{
			name: "ItalicTextWord",
			pos:  position{line: 1869, col: 1, offset: 62283},
			expr: &actionExpr{
				pos: position{line: 1870, col: 5, offset: 62306},
				run: (*parser).callonItalicTextWord1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 5, offset: 62306},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1870, col: 5, offset: 62306},
							expr: &charClassMatcher{
								pos:        position{line: 1870, col: 5, offset: 62306},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1870, col: 15, offset: 62316},
							expr: &choiceExpr{
								pos: position{line: 1870, col: 17, offset: 62318},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1870, col: 17, offset: 62318},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1870, col: 25, offset: 62326},
										name: "ItalicTextDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextDelimiter",
			pos:  position{line: 1877, col: 1, offset: 62520},
			expr: &litMatcher{
				pos:        position{line: 1877, col: 35, offset: 62554},
				val:        "__",
				ignoreCase: false,
				want:       "\"__\"",
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1879, col: 1, offset: 62560},
			expr: &actionExpr{
				pos: position{line: 1880, col: 5, offset: 62590},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 5, offset: 62590},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1880, col: 5, offset: 62590},
							name: "DoubleQuoteItalicTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1881, col: 5, offset: 62626},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1881, col: 15, offset: 62636},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1882, col: 5, offset: 62672},
							name: "DoubleQuoteItalicTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1886, col: 1, offset: 62844},
			expr: &oneOrMoreExpr{
				pos: position{line: 1886, col: 34, offset: 62877},
				expr: &ruleRefExpr{
					pos:  position{line: 1886, col: 34, offset: 62877},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1888, col: 1, offset: 62909},
			expr: &actionExpr{
				pos: position{line: 1889, col: 5, offset: 62946},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1889, col: 5, offset: 62946},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1889, col: 5, offset: 62946},
							expr: &ruleRefExpr{
								pos:  position{line: 1889, col: 6, offset: 62947},
								name: "DoubleQuoteItalicTextDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 5, offset: 62982},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1891, col: 9, offset: 63000},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1891, col: 9, offset: 63000},
										name: "ItalicTextWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1892, col: 11, offset: 63025},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1893, col: 11, offset: 63075},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1893, col: 11, offset: 63075},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1893, col: 19, offset: 63083},
												expr: &ruleRefExpr{
													pos:  position{line: 1893, col: 20, offset: 63084},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1894, col: 11, offset: 63136},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1895, col: 11, offset: 63168},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 11, offset: 63195},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 63212},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 63234},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 11, offset: 63257},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 11, offset: 63301},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 11, offset: 63330},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1905, col: 1, offset: 63415},
			expr: &actionExpr{
				pos: position{line: 1906, col: 5, offset: 63457},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1906, col: 5, offset: 63457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1906, col: 5, offset: 63457},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1906, col: 16, offset: 63468},
								expr: &ruleRefExpr{
									pos:  position{line: 1906, col: 17, offset: 63469},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1907, col: 5, offset: 63495},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1907, col: 11, offset: 63501},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1907, col: 11, offset: 63501},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1908, col: 11, offset: 63533},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1909, col: 11, offset: 63552},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1910, col: 11, offset: 63573},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1911, col: 11, offset: 63597},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1912, col: 11, offset: 63621},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1916, col: 1, offset: 63722},
			expr: &choiceExpr{
				pos: position{line: 1917, col: 5, offset: 63768},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1917, col: 5, offset: 63768},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1918, col: 7, offset: 63867},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1918, col: 7, offset: 63867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1918, col: 7, offset: 63867},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 12, offset: 63872},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStartDelimiter",
			pos:  position{line: 1925, col: 1, offset: 64155},
			expr: &litMatcher{
				pos:        position{line: 1925, col: 40, offset: 64194},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
		},
		{
			name: "SingleQuoteItalicTextEndDelimiter",
			pos:  position{line: 1927, col: 1, offset: 64200},
			expr: &litMatcher{
				pos:        position{line: 1927, col: 38, offset: 64237},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1929, col: 1, offset: 64243},
			expr: &actionExpr{
				pos: position{line: 1930, col: 5, offset: 64273},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1930, col: 5, offset: 64273},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1930, col: 5, offset: 64273},
							name: "SingleQuoteItalicTextStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1931, col: 5, offset: 64313},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1931, col: 15, offset: 64323},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1932, col: 5, offset: 64359},
							name: "SingleQuoteItalicTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1936, col: 1, offset: 64490},
			expr: &actionExpr{
				pos: position{line: 1937, col: 5, offset: 64528},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1937, col: 5, offset: 64528},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1937, col: 5, offset: 64528},
							expr: &ruleRefExpr{
								pos:  position{line: 1937, col: 6, offset: 64529},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 1937, col: 10, offset: 64533},
							expr: &ruleRefExpr{
								pos:  position{line: 1937, col: 11, offset: 64534},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1938, col: 5, offset: 64572},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1938, col: 14, offset: 64581},
								expr: &ruleRefExpr{
									pos:  position{line: 1938, col: 15, offset: 64582},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1939, col: 5, offset: 64617},
							run: (*parser).callonSingleQuoteItalicTextElements10,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1945, col: 1, offset: 64758},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 5, offset: 64795},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1946, col: 5, offset: 64795},
						name: "ItalicTextWord",
					},
					&ruleRefExpr{
						pos:  position{line: 1947, col: 7, offset: 64816},
						name: "Spaces",
					},
					&seqExpr{
						pos: position{line: 1948, col: 7, offset: 64829},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1948, col: 7, offset: 64829},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1948, col: 15, offset: 64837},
								expr: &ruleRefExpr{
									pos:  position{line: 1948, col: 16, offset: 64838},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1949, col: 7, offset: 64886},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1950, col: 7, offset: 64914},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1951, col: 7, offset: 64937},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1952, col: 7, offset: 64950},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1953, col: 7, offset: 64968},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1954, col: 7, offset: 64987},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1955, col: 7, offset: 65027},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1956, col: 7, offset: 65052},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1958, col: 1, offset: 65092},
			expr: &actionExpr{
				pos: position{line: 1959, col: 5, offset: 65133},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 5, offset: 65133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1959, col: 5, offset: 65133},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1959, col: 16, offset: 65144},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 17, offset: 65145},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1960, col: 5, offset: 65171},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1960, col: 11, offset: 65177},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1960, col: 11, offset: 65177},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1961, col: 11, offset: 65196},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1962, col: 11, offset: 65228},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1963, col: 11, offset: 65249},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1964, col: 11, offset: 65273},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1965, col: 11, offset: 65297},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1969, col: 1, offset: 65398},
			expr: &choiceExpr{
				pos: position{line: 1970, col: 5, offset: 65444},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1970, col: 5, offset: 65444},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1971, col: 7, offset: 65551},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1971, col: 7, offset: 65551},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1971, col: 7, offset: 65551},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1971, col: 11, offset: 65555},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1975, col: 1, offset: 65729},
			expr: &choiceExpr{
				pos: position{line: 1976, col: 5, offset: 65755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1976, col: 5, offset: 65755},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1976, col: 5, offset: 65755},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1976, col: 5, offset: 65755},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1976, col: 18, offset: 65768},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1976, col: 40, offset: 65790},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1976, col: 45, offset: 65795},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1976, col: 55, offset: 65805},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1976, col: 86, offset: 65836},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1978, col: 9, offset: 65993},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1978, col: 9, offset: 65993},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1978, col: 9, offset: 65993},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1978, col: 22, offset: 66006},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1978, col: 44, offset: 66028},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1978, col: 49, offset: 66033},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1978, col: 59, offset: 66043},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1978, col: 90, offset: 66074},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1981, col: 9, offset: 66274},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1981, col: 9, offset: 66274},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1981, col: 9, offset: 66274},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1981, col: 22, offset: 66287},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1981, col: 44, offset: 66309},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1981, col: 48, offset: 66313},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1981, col: 58, offset: 66323},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1981, col: 89, offset: 66354},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1988, col: 1, offset: 66673},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 18, offset: 66690},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1988, col: 18, offset: 66690},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 45, offset: 66717},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "MonospaceTextDelimiter",
			pos:  position{line: 1990, col: 1, offset: 66743},
			expr: &litMatcher{
				pos:        position{line: 1990, col: 27, offset: 66769},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
		},
		{
			name: "MonospaceTextWord",
			pos:  position{line: 1992, col: 1, offset: 66774},
			expr: &actionExpr{
				pos: position{line: 1993, col: 5, offset: 66800},
				run: (*parser).callonMonospaceTextWord1,
				expr: &seqExpr{
					pos: position{line: 1993, col: 5, offset: 66800},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1993, col: 5, offset: 66800},
							expr: &charClassMatcher{
								pos:        position{line: 1993, col: 5, offset: 66800},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1993, col: 15, offset: 66810},
							expr: &choiceExpr{
								pos: position{line: 1993, col: 17, offset: 66812},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1993, col: 17, offset: 66812},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 1993, col: 25, offset: 66820},
										name: "MonospaceTextDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextDelimiter",
			pos:  position{line: 2000, col: 1, offset: 67026},
			expr: &litMatcher{
				pos:        position{line: 2000, col: 38, offset: 67063},
				val:        "``",
				ignoreCase: false,
				want:       "\"``\"",
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2002, col: 1, offset: 67069},
			expr: &actionExpr{
				pos: position{line: 2003, col: 5, offset: 67102},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2003, col: 5, offset: 67102},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2003, col: 5, offset: 67102},
							name: "DoubleQuoteMonospaceTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 5, offset: 67141},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2004, col: 15, offset: 67151},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2005, col: 5, offset: 67190},
							name: "DoubleQuoteMonospaceTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2009, col: 1, offset: 67323},
			expr: &oneOrMoreExpr{
				pos: position{line: 2009, col: 37, offset: 67359},
				expr: &ruleRefExpr{
					pos:  position{line: 2009, col: 37, offset: 67359},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2011, col: 1, offset: 67426},
			expr: &actionExpr{
				pos: position{line: 2012, col: 5, offset: 67466},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 5, offset: 67466},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2012, col: 5, offset: 67466},
							expr: &ruleRefExpr{
								pos:  position{line: 2012, col: 6, offset: 67467},
								name: "DoubleQuoteMonospaceTextDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 5, offset: 67505},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2014, col: 9, offset: 67523},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2014, col: 9, offset: 67523},
										name: "MonospaceTextWord",
									},
									&ruleRefExpr{
										pos:  position{line: 2015, col: 11, offset: 67551},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 2016, col: 11, offset: 67601},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2016, col: 11, offset: 67601},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 2016, col: 19, offset: 67609},
												expr: &ruleRefExpr{
													pos:  position{line: 2016, col: 20, offset: 67610},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2017, col: 11, offset: 67662},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2018, col: 11, offset: 67694},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2019, col: 11, offset: 67721},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 2020, col: 11, offset: 67738},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2021, col: 11, offset: 67760},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2022, col: 11, offset: 67783},
										name: "RawApostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 2023, col: 11, offset: 67850},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2024, col: 11, offset: 67897},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 2025, col: 11, offset: 67926},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 2029, col: 1, offset: 68014},
			expr: &actionExpr{
				pos: position{line: 2030, col: 5, offset: 68058},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 5, offset: 68058},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2030, col: 5, offset: 68058},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2030, col: 16, offset: 68069},
								expr: &ruleRefExpr{
									pos:  position{line: 2030, col: 17, offset: 68070},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2031, col: 5, offset: 68096},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2032, col: 9, offset: 68111},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2032, col: 9, offset: 68111},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2033, col: 11, offset: 68146},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2034, col: 11, offset: 68165},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2035, col: 11, offset: 68186},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2036, col: 11, offset: 68207},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2037, col: 11, offset: 68231},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 2041, col: 1, offset: 68333},
			expr: &choiceExpr{
				pos: position{line: 2042, col: 5, offset: 68382},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2042, col: 5, offset: 68382},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2043, col: 7, offset: 68484},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 2043, col: 7, offset: 68484},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2043, col: 7, offset: 68484},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 12, offset: 68489},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStartDelimiter",
			pos:  position{line: 2052, col: 1, offset: 68876},
			expr: &litMatcher{
				pos:        position{line: 2052, col: 43, offset: 68918},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
		},
		{
			name: "SingleQuoteMonospaceTextEndDelimiter",
			pos:  position{line: 2054, col: 1, offset: 68924},
			expr: &litMatcher{
				pos:        position{line: 2054, col: 41, offset: 68964},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2056, col: 1, offset: 68970},
			expr: &actionExpr{
				pos: position{line: 2057, col: 5, offset: 69003},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2057, col: 5, offset: 69003},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2057, col: 5, offset: 69003},
							name: "SingleQuoteMonospaceTextStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2058, col: 5, offset: 69047},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 15, offset: 69057},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2059, col: 5, offset: 69096},
							name: "SingleQuoteMonospaceTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2063, col: 1, offset: 69233},
			expr: &actionExpr{
				pos: position{line: 2064, col: 5, offset: 69274},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2064, col: 5, offset: 69274},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2064, col: 5, offset: 69274},
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 6, offset: 69275},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 2064, col: 10, offset: 69279},
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 11, offset: 69280},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 2065, col: 5, offset: 69318},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2065, col: 14, offset: 69327},
								expr: &ruleRefExpr{
									pos:  position{line: 2065, col: 15, offset: 69328},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2066, col: 5, offset: 69366},
							run: (*parser).callonSingleQuoteMonospaceTextElements10,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2072, col: 1, offset: 69507},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 5, offset: 69548},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2073, col: 5, offset: 69548},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 7, offset: 69559},
						name: "Spaces",
					},
					&seqExpr{
						pos: position{line: 2075, col: 7, offset: 69573},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2075, col: 7, offset: 69573},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 2075, col: 15, offset: 69581},
								expr: &ruleRefExpr{
									pos:  position{line: 2075, col: 16, offset: 69582},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2076, col: 7, offset: 69630},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 7, offset: 69658},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 2078, col: 7, offset: 69681},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 2079, col: 7, offset: 69694},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2080, col: 7, offset: 69712},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2081, col: 7, offset: 69731},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 2082, col: 7, offset: 69774},
						name: "RawApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2083, col: 7, offset: 69794},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 2084, col: 7, offset: 69819},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2086, col: 1, offset: 69862},
			expr: &actionExpr{
				pos: position{line: 2087, col: 5, offset: 69906},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2087, col: 5, offset: 69906},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2087, col: 5, offset: 69906},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2087, col: 16, offset: 69917},
								expr: &ruleRefExpr{
									pos:  position{line: 2087, col: 17, offset: 69918},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2088, col: 5, offset: 69944},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2089, col: 9, offset: 69959},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2089, col: 9, offset: 69959},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2090, col: 11, offset: 69994},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2091, col: 11, offset: 70013},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2092, col: 11, offset: 70034},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2093, col: 11, offset: 70055},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2094, col: 11, offset: 70079},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 2098, col: 1, offset: 70181},
			expr: &actionExpr{
				pos: position{line: 2099, col: 5, offset: 70230},
				run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 2099, col: 6, offset: 70231},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 2099, col: 6, offset: 70231},
							val:        "[^\\r\\n` ]",
							chars:      []rune{'\r', '\n', '`', ' '},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 2100, col: 7, offset: 70343},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2100, col: 7, offset: 70343},
									name: "MonospaceTextDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 30, offset: 70366},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2104, col: 1, offset: 70544},
			expr: &choiceExpr{
				pos: position{line: 2105, col: 5, offset: 70573},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2105, col: 5, offset: 70573},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2105, col: 5, offset: 70573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2105, col: 5, offset: 70573},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2105, col: 18, offset: 70586},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2105, col: 40, offset: 70608},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2105, col: 45, offset: 70613},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2105, col: 55, offset: 70623},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2105, col: 89, offset: 70657},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2107, col: 9, offset: 70814},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 2107, col: 9, offset: 70814},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2107, col: 9, offset: 70814},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2107, col: 22, offset: 70827},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2107, col: 44, offset: 70849},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2107, col: 49, offset: 70854},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2107, col: 59, offset: 70864},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2107, col: 93, offset: 70898},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2110, col: 9, offset: 71098},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 2110, col: 9, offset: 71098},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2110, col: 9, offset: 71098},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2110, col: 22, offset: 71111},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2110, col: 44, offset: 71133},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2110, col: 48, offset: 71137},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2110, col: 58, offset: 71147},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2110, col: 92, offset: 71181},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2117, col: 1, offset: 71478},
			expr: &choiceExpr{
				pos: position{line: 2117, col: 15, offset: 71492},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2117, col: 15, offset: 71492},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2117, col: 39, offset: 71516},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "MarkedTextDelimiter",
			pos:  position{line: 2119, col: 1, offset: 71539},
			expr: &litMatcher{
				pos:        position{line: 2119, col: 24, offset: 71562},
				val:        "#",
				ignoreCase: false,
				want:       "\"#\"",
			},
		},
		{
			name: "MarkedTextWord",
			pos:  position{line: 2121, col: 1, offset: 71567},
			expr: &actionExpr{
				pos: position{line: 2122, col: 5, offset: 71590},
				run: (*parser).callonMarkedTextWord1,
				expr: &seqExpr{
					pos: position{line: 2122, col: 5, offset: 71590},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 2122, col: 5, offset: 71590},
							expr: &charClassMatcher{
								pos:        position{line: 2122, col: 5, offset: 71590},
								val:        "[\\pL0-9,?!;]",
								chars:      []rune{',', '?', '!', ';'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 2122, col: 19, offset: 71604},
							expr: &choiceExpr{
								pos: position{line: 2122, col: 21, offset: 71606},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2122, col: 21, offset: 71606},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 2122, col: 29, offset: 71614},
										name: "MarkedTextDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextDelimiter",
			pos:  position{line: 2129, col: 1, offset: 71814},
			expr: &litMatcher{
				pos:        position{line: 2129, col: 35, offset: 71848},
				val:        "##",
				ignoreCase: false,
				want:       "\"##\"",
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2131, col: 1, offset: 71854},
			expr: &actionExpr{
				pos: position{line: 2132, col: 5, offset: 71884},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2132, col: 5, offset: 71884},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2132, col: 5, offset: 71884},
							name: "DoubleQuoteMarkedTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2133, col: 5, offset: 71920},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2133, col: 15, offset: 71930},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2134, col: 5, offset: 71966},
							name: "DoubleQuoteMarkedTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2138, col: 1, offset: 72093},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2138, col: 34, offset: 72126},
				expr: &ruleRefExpr{
					pos:  position{line: 2138, col: 34, offset: 72126},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2140, col: 1, offset: 72157},
			expr: &actionExpr{
				pos: position{line: 2141, col: 5, offset: 72226},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2141, col: 5, offset: 72226},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2141, col: 5, offset: 72226},
							expr: &ruleRefExpr{
								pos:  position{line: 2141, col: 6, offset: 72227},
								name: "DoubleQuoteMarkedTextDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2142, col: 5, offset: 72262},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2143, col: 9, offset: 72280},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2143, col: 9, offset: 72280},
										name: "MarkedTextWord",
									},
									&ruleRefExpr{
										pos:  position{line: 2144, col: 11, offset: 72305},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 2145, col: 11, offset: 72355},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2145, col: 11, offset: 72355},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 2145, col: 19, offset: 72363},
												expr: &ruleRefExpr{
													pos:  position{line: 2145, col: 20, offset: 72364},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2146, col: 11, offset: 72416},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2147, col: 11, offset: 72448},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2148, col: 11, offset: 72475},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 2149, col: 11, offset: 72492},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2150, col: 11, offset: 72514},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2151, col: 11, offset: 72537},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2152, col: 11, offset: 72580},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 2153, col: 11, offset: 72609},
										name: "DoubleQuoteMarkedTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2158, col: 1, offset: 72691},
			expr: &actionExpr{
				pos: position{line: 2159, col: 5, offset: 72731},
				run: (*parser).callonQuotedTextInDoubleMarkedBoldText1,
				expr: &seqExpr{
					pos: position{line: 2159, col: 5, offset: 72731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2159, col: 5, offset: 72731},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2159, col: 16, offset: 72742},
								expr: &ruleRefExpr{
									pos:  position{line: 2159, col: 17, offset: 72743},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2160, col: 5, offset: 72769},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2161, col: 9, offset: 72784},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2161, col: 9, offset: 72784},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2162, col: 11, offset: 72816},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2163, col: 11, offset: 72835},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2164, col: 11, offset: 72856},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2165, col: 11, offset: 72880},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2166, col: 11, offset: 72904},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 2170, col: 1, offset: 73006},
			expr: &choiceExpr{
				pos: position{line: 2171, col: 5, offset: 73052},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2171, col: 5, offset: 73052},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2172, col: 7, offset: 73151},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 2172, col: 7, offset: 73151},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2172, col: 7, offset: 73151},
									name: "DoubleQuoteMarkedTextDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2172, col: 38, offset: 73182},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStartDelimiter",
			pos:  position{line: 2179, col: 1, offset: 73471},
			expr: &litMatcher{
				pos:        position{line: 2179, col: 40, offset: 73510},
				val:        "#",
				ignoreCase: false,
				want:       "\"#\"",
			},
		},
		{
			name: "SingleQuoteMarkedTextEndDelimiter",
			pos:  position{line: 2181, col: 1, offset: 73515},
			expr: &litMatcher{
				pos:        position{line: 2181, col: 38, offset: 73552},
				val:        "#",
				ignoreCase: false,
				want:       "\"#\"",
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2183, col: 1, offset: 73558},
			expr: &actionExpr{
				pos: position{line: 2184, col: 5, offset: 73588},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2184, col: 5, offset: 73588},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2184, col: 5, offset: 73588},
							name: "SingleQuoteMarkedTextStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 5, offset: 73628},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2185, col: 15, offset: 73638},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2186, col: 5, offset: 73674},
							name: "SingleQuoteMarkedTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2190, col: 1, offset: 73805},
			expr: &actionExpr{
				pos: position{line: 2191, col: 5, offset: 73843},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2191, col: 5, offset: 73843},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2191, col: 5, offset: 73843},
							expr: &ruleRefExpr{
								pos:  position{line: 2191, col: 6, offset: 73844},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 2191, col: 10, offset: 73848},
							expr: &ruleRefExpr{
								pos:  position{line: 2191, col: 11, offset: 73849},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 2192, col: 5, offset: 73887},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2192, col: 14, offset: 73896},
								expr: &ruleRefExpr{
									pos:  position{line: 2192, col: 15, offset: 73897},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2193, col: 5, offset: 73933},
							run: (*parser).callonSingleQuoteMarkedTextElements10,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2199, col: 1, offset: 74074},
			expr: &choiceExpr{
				pos: position{line: 2200, col: 5, offset: 74111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2200, col: 5, offset: 74111},
						name: "MarkedTextWord",
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 7, offset: 74132},
						name: "Spaces",
					},
					&seqExpr{
						pos: position{line: 2202, col: 7, offset: 74145},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2202, col: 7, offset: 74145},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 2202, col: 15, offset: 74153},
								expr: &ruleRefExpr{
									pos:  position{line: 2202, col: 16, offset: 74154},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2203, col: 7, offset: 74202},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 2204, col: 7, offset: 74230},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 2205, col: 7, offset: 74253},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 2206, col: 7, offset: 74266},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2207, col: 7, offset: 74284},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2208, col: 7, offset: 74303},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2209, col: 7, offset: 74343},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 2210, col: 7, offset: 74368},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2212, col: 1, offset: 74408},
			expr: &actionExpr{
				pos: position{line: 2213, col: 5, offset: 74449},
				run: (*parser).callonQuotedTextInSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2213, col: 5, offset: 74449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2213, col: 5, offset: 74449},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2213, col: 16, offset: 74460},
								expr: &ruleRefExpr{
									pos:  position{line: 2213, col: 17, offset: 74461},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2214, col: 5, offset: 74487},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2215, col: 9, offset: 74502},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2215, col: 9, offset: 74502},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2216, col: 11, offset: 74534},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2217, col: 11, offset: 74553},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2218, col: 11, offset: 74574},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2219, col: 11, offset: 74598},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2220, col: 11, offset: 74622},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 2224, col: 1, offset: 74724},
			expr: &choiceExpr{
				pos: position{line: 2225, col: 5, offset: 74770},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2225, col: 5, offset: 74770},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2226, col: 7, offset: 74875},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 2226, col: 7, offset: 74875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2226, col: 7, offset: 74875},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2226, col: 11, offset: 74879},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2230, col: 1, offset: 75050},
			expr: &choiceExpr{
				pos: position{line: 2231, col: 5, offset: 75075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2231, col: 5, offset: 75075},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2231, col: 5, offset: 75075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2231, col: 5, offset: 75075},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2231, col: 18, offset: 75088},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2231, col: 40, offset: 75110},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2231, col: 45, offset: 75115},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2231, col: 55, offset: 75125},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2231, col: 86, offset: 75156},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2233, col: 9, offset: 75313},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 2233, col: 9, offset: 75313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2233, col: 9, offset: 75313},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2233, col: 22, offset: 75326},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2233, col: 44, offset: 75348},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2233, col: 49, offset: 75353},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2233, col: 59, offset: 75363},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2233, col: 90, offset: 75394},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2236, col: 9, offset: 75594},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 2236, col: 9, offset: 75594},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2236, col: 9, offset: 75594},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 2236, col: 22, offset: 75607},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 2236, col: 44, offset: 75629},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2236, col: 48, offset: 75633},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2236, col: 58, offset: 75643},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2236, col: 89, offset: 75674},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2243, col: 1, offset: 75986},
			expr: &actionExpr{
				pos: position{line: 2244, col: 5, offset: 76008},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2244, col: 5, offset: 76008},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2244, col: 5, offset: 76008},
							name: "SubscriptTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2245, col: 5, offset: 76035},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2245, col: 14, offset: 76044},
								name: "SubscriptTextElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2246, col: 5, offset: 76070},
							name: "SubscriptTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextDelimiter",
			pos:  position{line: 2250, col: 1, offset: 76197},
			expr: &litMatcher{
				pos:        position{line: 2250, col: 27, offset: 76223},
				val:        "~",
				ignoreCase: false,
				want:       "\"~\"",
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2252, col: 1, offset: 76228},
			expr: &choiceExpr{
				pos: position{line: 2252, col: 25, offset: 76252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2252, col: 25, offset: 76252},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2252, col: 38, offset: 76265},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 2254, col: 1, offset: 76284},
			expr: &actionExpr{
				pos: position{line: 2254, col: 21, offset: 76304},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2254, col: 21, offset: 76304},
					expr: &charClassMatcher{
						pos:        position{line: 2254, col: 21, offset: 76304},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2258, col: 1, offset: 76389},
			expr: &actionExpr{
				pos: position{line: 2259, col: 5, offset: 76418},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2259, col: 5, offset: 76418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2259, col: 5, offset: 76418},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 2259, col: 18, offset: 76431},
								name: "OneOrMoreBackslashes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2260, col: 5, offset: 76458},
							name: "SubscriptTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2261, col: 5, offset: 76486},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2261, col: 14, offset: 76495},
								name: "SubscriptTextElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2262, col: 5, offset: 76521},
							name: "SubscriptTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2269, col: 1, offset: 76758},
			expr: &actionExpr{
				pos: position{line: 2270, col: 5, offset: 76782},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2270, col: 5, offset: 76782},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2270, col: 5, offset: 76782},
							name: "SuperscriptTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2271, col: 5, offset: 76812},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2271, col: 14, offset: 76821},
								name: "SuperscriptTextElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2272, col: 5, offset: 76850},
							name: "SuperscriptTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextDelimiter",
			pos:  position{line: 2276, col: 1, offset: 76981},
			expr: &litMatcher{
				pos:        position{line: 2276, col: 29, offset: 77009},
				val:        "^",
				ignoreCase: false,
				want:       "\"^\"",
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2278, col: 1, offset: 77014},
			expr: &choiceExpr{
				pos: position{line: 2278, col: 27, offset: 77040},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2278, col: 27, offset: 77040},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2278, col: 40, offset: 77053},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 2280, col: 1, offset: 77074},
			expr: &actionExpr{
				pos: position{line: 2280, col: 23, offset: 77096},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2280, col: 23, offset: 77096},
					expr: &charClassMatcher{
						pos:        position{line: 2280, col: 23, offset: 77096},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2284, col: 1, offset: 77181},
			expr: &actionExpr{
				pos: position{line: 2285, col: 5, offset: 77212},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2285, col: 5, offset: 77212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2285, col: 5, offset: 77212},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 2285, col: 18, offset: 77225},
								name: "OneOrMoreBackslashes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2286, col: 5, offset: 77252},
							name: "SuperscriptTextDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2287, col: 5, offset: 77282},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2287, col: 14, offset: 77291},
								name: "SuperscriptTextElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2288, col: 5, offset: 77320},
							name: "SuperscriptTextDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2296, col: 1, offset: 77739},
			expr: &choiceExpr{
				pos: position{line: 2296, col: 17, offset: 77755},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2296, col: 17, offset: 77755},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2296, col: 38, offset: 77776},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2298, col: 1, offset: 77796},
			expr: &actionExpr{
				pos: position{line: 2299, col: 5, offset: 77823},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2299, col: 5, offset: 77823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2299, col: 5, offset: 77823},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 2300, col: 5, offset: 77851},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2300, col: 14, offset: 77860},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2301, col: 5, offset: 77892},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2305, col: 1, offset: 78004},
			expr: &actionExpr{
				pos: position{line: 2306, col: 5, offset: 78039},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2306, col: 5, offset: 78039},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2306, col: 14, offset: 78048},
						expr: &ruleRefExpr{
							pos:  position{line: 2306, col: 15, offset: 78049},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 2310, col: 1, offset: 78128},
			expr: &seqExpr{
				pos: position{line: 2310, col: 27, offset: 78154},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2310, col: 27, offset: 78154},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 2310, col: 32, offset: 78159},
						expr: &charClassMatcher{
							pos:        position{line: 2310, col: 33, offset: 78160},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 2312, col: 1, offset: 78171},
			expr: &litMatcher{
				pos:        position{line: 2312, col: 25, offset: 78195},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "QuotedStringWord",
			pos:  position{line: 2314, col: 1, offset: 78201},
			expr: &actionExpr{
				pos: position{line: 2314, col: 21, offset: 78221},
				run: (*parser).callonQuotedStringWord1,
				expr: &seqExpr{
					pos: position{line: 2314, col: 21, offset: 78221},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 2314, col: 21, offset: 78221},
							expr: &charClassMatcher{
								pos:        position{line: 2314, col: 21, offset: 78221},
								val:        "[\\pL0-9]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 2314, col: 31, offset: 78231},
							expr: &choiceExpr{
								pos: position{line: 2314, col: 33, offset: 78233},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2314, col: 33, offset: 78233},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 2314, col: 41, offset: 78241},
										name: "SingleQuoteStringEnd",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2319, col: 1, offset: 78408},
			expr: &actionExpr{
				pos: position{line: 2320, col: 5, offset: 78442},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2320, col: 5, offset: 78442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2320, col: 5, offset: 78442},
							expr: &ruleRefExpr{
								pos:  position{line: 2320, col: 6, offset: 78443},
								name: "SingleQuoteStringEnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 2321, col: 5, offset: 78468},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2322, col: 9, offset: 78486},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2322, col: 9, offset: 78486},
										name: "QuotedStringWord",
									},
									&seqExpr{
										pos: position{line: 2323, col: 11, offset: 78513},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2323, col: 11, offset: 78513},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 2323, col: 19, offset: 78521},
												expr: &ruleRefExpr{
													pos:  position{line: 2323, col: 20, offset: 78522},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2324, col: 11, offset: 78574},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2325, col: 11, offset: 78606},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2326, col: 11, offset: 78633},
										name: "InlineMacro",
									},
									&seqExpr{
										pos: position{line: 2327, col: 11, offset: 78655},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2327, col: 11, offset: 78655},
												name: "LineBreak",
											},
											&notExpr{
												pos: position{line: 2327, col: 21, offset: 78665},
												expr: &ruleRefExpr{
													pos:  position{line: 2327, col: 22, offset: 78666},
													name: "SingleQuoteStringEnd",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2328, col: 11, offset: 78722},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2328, col: 11, offset: 78722},
												name: "Space",
											},
											&notExpr{
												pos: position{line: 2328, col: 17, offset: 78728},
												expr: &ruleRefExpr{
													pos:  position{line: 2328, col: 18, offset: 78729},
													name: "SingleQuoteStringEnd",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2329, col: 11, offset: 78760},
										name: "Symbol",
									},
									&ruleRefExpr{
										pos:  position{line: 2330, col: 11, offset: 78777},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2331, col: 11, offset: 78818},
										name: "DoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2332, col: 11, offset: 78847},
										name: "SingleQuotedStringFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2337, col: 1, offset: 78926},
			expr: &actionExpr{
				pos: position{line: 2338, col: 5, offset: 78964},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2338, col: 5, offset: 78964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2338, col: 5, offset: 78964},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2338, col: 16, offset: 78975},
								expr: &ruleRefExpr{
									pos:  position{line: 2338, col: 17, offset: 78976},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2339, col: 5, offset: 79002},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2339, col: 11, offset: 79008},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2339, col: 11, offset: 79008},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2340, col: 11, offset: 79027},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2341, col: 12, offset: 79049},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2341, col: 12, offset: 79049},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2341, col: 12, offset: 79049},
													expr: &litMatcher{
														pos:        position{line: 2341, col: 13, offset: 79050},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2341, col: 18, offset: 79055},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2341, col: 27, offset: 79064},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2342, col: 11, offset: 79113},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2343, col: 11, offset: 79137},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2344, col: 11, offset: 79163},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 2348, col: 1, offset: 79260},
			expr: &choiceExpr{
				pos: position{line: 2348, col: 41, offset: 79300},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2348, col: 41, offset: 79300},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2348, col: 55, offset: 79314},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 2348, col: 55, offset: 79314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2348, col: 55, offset: 79314},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 2348, col: 59, offset: 79318},
									expr: &litMatcher{
										pos:        position{line: 2348, col: 60, offset: 79319},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2352, col: 1, offset: 79391},
			expr: &actionExpr{
				pos: position{line: 2352, col: 23, offset: 79413},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2352, col: 23, offset: 79413},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2352, col: 23, offset: 79413},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 2352, col: 46, offset: 79436},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2352, col: 55, offset: 79445},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2352, col: 82, offset: 79472},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2356, col: 1, offset: 79584},
			expr: &actionExpr{
				pos: position{line: 2356, col: 31, offset: 79614},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2356, col: 31, offset: 79614},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2356, col: 41, offset: 79624},
						expr: &ruleRefExpr{
							pos:  position{line: 2356, col: 41, offset: 79624},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2361, col: 1, offset: 79785},
			expr: &actionExpr{
				pos: position{line: 2362, col: 5, offset: 79819},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2362, col: 5, offset: 79819},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2362, col: 5, offset: 79819},
							expr: &ruleRefExpr{
								pos:  position{line: 2362, col: 6, offset: 79820},
								name: "DoubleQuoteStringEnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 2363, col: 5, offset: 79845},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2364, col: 9, offset: 79863},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2364, col: 9, offset: 79863},
										name: "QuotedStringWord",
									},
									&seqExpr{
										pos: position{line: 2365, col: 11, offset: 79890},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2365, col: 11, offset: 79890},
												name: "LineBreak",
											},
											&notExpr{
												pos: position{line: 2365, col: 21, offset: 79900},
												expr: &ruleRefExpr{
													pos:  position{line: 2365, col: 22, offset: 79901},
													name: "SingleQuoteStringEnd",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2366, col: 11, offset: 79957},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2366, col: 11, offset: 79957},
												name: "Space",
											},
											&notExpr{
												pos: position{line: 2366, col: 17, offset: 79963},
												expr: &ruleRefExpr{
													pos:  position{line: 2366, col: 18, offset: 79964},
													name: "DoubleQuoteStringEnd",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2367, col: 11, offset: 79995},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2367, col: 11, offset: 79995},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 2367, col: 19, offset: 80003},
												expr: &ruleRefExpr{
													pos:  position{line: 2367, col: 20, offset: 80004},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2368, col: 11, offset: 80056},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2369, col: 11, offset: 80088},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2370, col: 11, offset: 80115},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2371, col: 11, offset: 80137},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2372, col: 11, offset: 80178},
										name: "SingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2373, col: 11, offset: 80207},
										name: "DoubleQuotedStringFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2377, col: 1, offset: 80289},
			expr: &actionExpr{
				pos: position{line: 2378, col: 5, offset: 80327},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2378, col: 5, offset: 80327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2378, col: 5, offset: 80327},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2378, col: 16, offset: 80338},
								expr: &ruleRefExpr{
									pos:  position{line: 2378, col: 17, offset: 80339},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2379, col: 5, offset: 80365},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2380, col: 9, offset: 80380},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2380, col: 9, offset: 80380},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2381, col: 11, offset: 80399},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2382, col: 12, offset: 80421},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2382, col: 12, offset: 80421},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2382, col: 12, offset: 80421},
													expr: &litMatcher{
														pos:        position{line: 2382, col: 13, offset: 80422},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2382, col: 19, offset: 80428},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2382, col: 28, offset: 80437},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2383, col: 11, offset: 80486},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2384, col: 11, offset: 80510},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2385, col: 11, offset: 80536},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 2389, col: 1, offset: 80633},
			expr: &seqExpr{
				pos: position{line: 2389, col: 27, offset: 80659},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2389, col: 27, offset: 80659},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 2389, col: 33, offset: 80665},
						expr: &charClassMatcher{
							pos:        position{line: 2389, col: 34, offset: 80666},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 2391, col: 1, offset: 80677},
			expr: &litMatcher{
				pos:        position{line: 2391, col: 25, offset: 80701},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 2393, col: 1, offset: 80708},
			expr: &actionExpr{
				pos: position{line: 2393, col: 41, offset: 80748},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 2393, col: 42, offset: 80749},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 2393, col: 42, offset: 80749},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 2393, col: 56, offset: 80763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2393, col: 56, offset: 80763},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 2393, col: 60, offset: 80767},
									expr: &litMatcher{
										pos:        position{line: 2393, col: 61, offset: 80768},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 2401, col: 1, offset: 81119},
			expr: &actionExpr{
				pos: position{line: 2402, col: 5, offset: 81135},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 2402, col: 5, offset: 81135},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2402, col: 5, offset: 81135},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 2405, col: 5, offset: 81198},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 2405, col: 12, offset: 81205},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2405, col: 12, offset: 81205},
									expr: &litMatcher{
										pos:        position{line: 2405, col: 13, offset: 81206},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2409, col: 5, offset: 81314},
							run: (*parser).callonSection8,
						},
						&ruleRefExpr{
							pos:  position{line: 2413, col: 5, offset: 81466},
							name: "Spaces",
						},
						&labeledExpr{
							pos:   position{line: 2413, col: 12, offset: 81473},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 2413, col: 19, offset: 81480},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2413, col: 36, offset: 81497},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 2417, col: 1, offset: 81582},
			expr: &actionExpr{
				pos: position{line: 2417, col: 20, offset: 81601},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2417, col: 20, offset: 81601},
					expr: &charClassMatcher{
						pos:        position{line: 2417, col: 20, offset: 81601},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 2428, col: 1, offset: 81925},
			expr: &actionExpr{
				pos: position{line: 2428, col: 20, offset: 81944},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2428, col: 20, offset: 81944},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2428, col: 20, offset: 81944},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2428, col: 29, offset: 81953},
								expr: &choiceExpr{
									pos: position{line: 2429, col: 5, offset: 81959},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2429, col: 5, offset: 81959},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 2430, col: 7, offset: 81975},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 2431, col: 7, offset: 81987},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 2432, col: 7, offset: 82010},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2433, col: 7, offset: 82022},
											name: "InlinePassthrough",
										},
										&ruleRefExpr{
											pos:  position{line: 2434, col: 7, offset: 82046},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 2435, col: 7, offset: 82074},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2436, col: 7, offset: 82187},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2436, col: 17, offset: 82197},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 2441, col: 1, offset: 82294},
			expr: &actionExpr{
				pos: position{line: 2441, col: 27, offset: 82320},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2441, col: 27, offset: 82320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2441, col: 27, offset: 82320},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2441, col: 36, offset: 82329},
								expr: &choiceExpr{
									pos: position{line: 2442, col: 5, offset: 82335},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2442, col: 5, offset: 82335},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2443, col: 7, offset: 82352},
											name: "AttributeSubstitution",
										},
										&ruleRefExpr{
											pos:  position{line: 2444, col: 7, offset: 82380},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2445, col: 7, offset: 82392},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 2446, col: 7, offset: 82415},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2447, col: 7, offset: 82528},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2447, col: 17, offset: 82538},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2452, col: 1, offset: 82638},
			expr: &actionExpr{
				pos: position{line: 2453, col: 5, offset: 82658},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2453, col: 5, offset: 82658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2453, col: 5, offset: 82658},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2453, col: 14, offset: 82667},
								expr: &ruleRefExpr{
									pos:  position{line: 2453, col: 15, offset: 82668},
									name: "HeaderGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2453, col: 36, offset: 82689},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2457, col: 1, offset: 82745},
			expr: &actionExpr{
				pos: position{line: 2458, col: 5, offset: 82771},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2458, col: 5, offset: 82771},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2458, col: 5, offset: 82771},
							expr: &ruleRefExpr{
								pos:  position{line: 2458, col: 6, offset: 82772},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2459, col: 5, offset: 82780},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2460, col: 9, offset: 82798},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2460, col: 9, offset: 82798},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 2461, col: 11, offset: 82819},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 2462, col: 11, offset: 82835},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2463, col: 11, offset: 82863},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2464, col: 11, offset: 82890},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2465, col: 11, offset: 82906},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2466, col: 11, offset: 82921},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2467, col: 11, offset: 82942},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2468, col: 11, offset: 82974},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 2469, col: 11, offset: 83091},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 2470, col: 11, offset: 83113},
										name: "ShortHandAnchor",
									},
									&ruleRefExpr{
										pos:  position{line: 2471, col: 11, offset: 83139},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2472, col: 11, offset: 83164},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 2477, col: 1, offset: 83258},
			expr: &actionExpr{
				pos: position{line: 2477, col: 16, offset: 83273},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 2477, col: 16, offset: 83273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2477, col: 16, offset: 83273},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2477, col: 25, offset: 83282},
								expr: &choiceExpr{
									pos: position{line: 2478, col: 5, offset: 83288},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2478, col: 5, offset: 83288},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2479, col: 7, offset: 83305},
											name: "InlineMacro",
										},
										&ruleRefExpr{
											pos:  position{line: 2480, col: 7, offset: 83323},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2481, col: 7, offset: 83436},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2481, col: 17, offset: 83446},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 2487, col: 1, offset: 83606},
			expr: &actionExpr{
				pos: position{line: 2487, col: 14, offset: 83619},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 2487, col: 14, offset: 83619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2487, col: 14, offset: 83619},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2487, col: 23, offset: 83628},
								expr: &ruleRefExpr{
									pos:  position{line: 2487, col: 24, offset: 83629},
									name: "NoneGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2487, col: 43, offset: 83648},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NoneGroupElement",
			pos:  position{line: 2491, col: 1, offset: 83704},
			expr: &actionExpr{
				pos: position{line: 2492, col: 5, offset: 83729},
				run: (*parser).callonNoneGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2492, col: 5, offset: 83729},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2492, col: 5, offset: 83729},
							expr: &ruleRefExpr{
								pos:  position{line: 2492, col: 6, offset: 83730},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2493, col: 5, offset: 83738},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 2493, col: 13, offset: 83746},
								expr: &choiceExpr{
									pos: position{line: 2494, col: 9, offset: 83756},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2494, col: 9, offset: 83756},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2495, col: 11, offset: 83777},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2496, col: 11, offset: 83894},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2496, col: 21, offset: 83904},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2502, col: 1, offset: 84154},
			expr: &actionExpr{
				pos: position{line: 2502, col: 16, offset: 84169},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2502, col: 16, offset: 84169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2502, col: 16, offset: 84169},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2502, col: 25, offset: 84178},
								expr: &ruleRefExpr{
									pos:  position{line: 2502, col: 26, offset: 84179},
									name: "NormalGroupElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2502, col: 47, offset: 84200},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 2506, col: 1, offset: 84256},
			expr: &actionExpr{
				pos: position{line: 2507, col: 5, offset: 84283},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2507, col: 5, offset: 84283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2507, col: 5, offset: 84283},
							expr: &ruleRefExpr{
								pos:  position{line: 2507, col: 6, offset: 84284},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2508, col: 5, offset: 84292},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2509, col: 9, offset: 84310},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2509, col: 9, offset: 84310},
										name: "InlineWord",
									},
									&ruleRefExpr{
										pos:  position{line: 2510, col: 11, offset: 84331},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 2511, col: 11, offset: 84382},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 2512, col: 11, offset: 84398},
										name: "Newline",
									},
									&ruleRefExpr{
										pos:  position{line: 2513, col: 11, offset: 84416},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2514, col: 11, offset: 84432},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2515, col: 11, offset: 84460},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2516, col: 11, offset: 84549},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 2517, col: 11, offset: 84576},
										name: "AttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 2518, col: 11, offset: 84608},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 2519, col: 11, offset: 84630},
										name: "PostReplacement",
									},
									&ruleRefExpr{
										pos:  position{line: 2520, col: 11, offset: 84656},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 2521, col: 11, offset: 84773},
										name: "AnyChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsGroup",
			pos:  position{line: 2524, col: 1, offset: 84826},
			expr: &actionExpr{
				pos: position{line: 2524, col: 27, offset: 84852},
				run: (*parser).callonPostReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2524, col: 27, offset: 84852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2524, col: 27, offset: 84852},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2524, col: 36, offset: 84861},
								expr: &choiceExpr{
									pos: position{line: 2525, col: 5, offset: 84867},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2525, col: 5, offset: 84867},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2526, col: 7, offset: 84884},
											name: "LineBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 2527, col: 7, offset: 84931},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 2528, col: 7, offset: 84943},
											name: "Newline",
										},
										&ruleRefExpr{
											pos:  position{line: 2529, col: 7, offset: 84957},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2530, col: 7, offset: 85070},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2530, col: 17, offset: 85080},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 2535, col: 1, offset: 85175},
			expr: &actionExpr{
				pos: position{line: 2535, col: 16, offset: 85190},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 2535, col: 16, offset: 85190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2535, col: 16, offset: 85190},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2535, col: 25, offset: 85199},
								expr: &choiceExpr{
									pos: position{line: 2536, col: 5, offset: 85205},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2536, col: 5, offset: 85205},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2537, col: 7, offset: 85222},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2538, col: 7, offset: 85234},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2539, col: 7, offset: 85347},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2539, col: 17, offset: 85357},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 2544, col: 1, offset: 85459},
			expr: &actionExpr{
				pos: position{line: 2544, col: 22, offset: 85480},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2544, col: 22, offset: 85480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2544, col: 22, offset: 85480},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2544, col: 31, offset: 85489},
								expr: &choiceExpr{
									pos: position{line: 2545, col: 5, offset: 85495},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2545, col: 5, offset: 85495},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2546, col: 7, offset: 85512},
											name: "Replacement",
										},
										&ruleRefExpr{
											pos:  position{line: 2547, col: 7, offset: 85530},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2548, col: 7, offset: 85643},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2548, col: 17, offset: 85653},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 2553, col: 1, offset: 85780},
			expr: &actionExpr{
				pos: position{line: 2553, col: 27, offset: 85806},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 2553, col: 27, offset: 85806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2553, col: 27, offset: 85806},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2553, col: 36, offset: 85815},
								expr: &choiceExpr{
									pos: position{line: 2554, col: 5, offset: 85821},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2554, col: 5, offset: 85821},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2555, col: 7, offset: 85838},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 2556, col: 7, offset: 85861},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2557, col: 7, offset: 85974},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2557, col: 17, offset: 85984},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 2561, col: 1, offset: 86040},
			expr: &actionExpr{
				pos: position{line: 2561, col: 18, offset: 86057},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 2561, col: 18, offset: 86057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2561, col: 18, offset: 86057},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2561, col: 27, offset: 86066},
								expr: &choiceExpr{
									pos: position{line: 2562, col: 5, offset: 86072},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2562, col: 5, offset: 86072},
											name: "InlineWord",
										},
										&ruleRefExpr{
											pos:  position{line: 2563, col: 7, offset: 86089},
											name: "Callout",
										},
										&ruleRefExpr{
											pos:  position{line: 2564, col: 7, offset: 86145},
											name: "SpecialCharacter",
										},
										&ruleRefExpr{
											pos:  position{line: 2565, col: 7, offset: 86168},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 2566, col: 7, offset: 86281},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2566, col: 17, offset: 86291},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2570, col: 1, offset: 86351},
			expr: &actionExpr{
				pos: position{line: 2572, col: 5, offset: 86433},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2572, col: 5, offset: 86433},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2572, col: 5, offset: 86433},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2575, col: 5, offset: 86493},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2576, col: 9, offset: 86511},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2576, col: 9, offset: 86511},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2577, col: 11, offset: 86532},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2578, col: 11, offset: 86555},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2579, col: 11, offset: 86571},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2580, col: 11, offset: 86600},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2581, col: 11, offset: 86626},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2582, col: 11, offset: 86652},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2583, col: 11, offset: 86679},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 2584, col: 11, offset: 86705},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2585, col: 11, offset: 86734},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2586, col: 11, offset: 86754},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2590, col: 1, offset: 86816},
			expr: &actionExpr{
				pos: position{line: 2592, col: 5, offset: 86904},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2592, col: 5, offset: 86904},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2592, col: 5, offset: 86904},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2595, col: 5, offset: 86976},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2596, col: 9, offset: 86994},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2596, col: 9, offset: 86994},
										name: "TriplePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2596, col: 33, offset: 87018},
										name: "SinglePlusPassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2596, col: 57, offset: 87042},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacement",
			pos:  position{line: 2601, col: 1, offset: 87102},
			expr: &actionExpr{
				pos: position{line: 2603, col: 5, offset: 87188},
				run: (*parser).callonPostReplacement1,
				expr: &seqExpr{
					pos: position{line: 2603, col: 5, offset: 87188},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2603, col: 5, offset: 87188},
							run: (*parser).callonPostReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 2606, col: 5, offset: 87258},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2607, col: 9, offset: 87276},
								name: "LineBreak",
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2612, col: 1, offset: 87329},
			expr: &actionExpr{
				pos: position{line: 2614, col: 5, offset: 87405},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2614, col: 5, offset: 87405},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2614, col: 5, offset: 87405},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2617, col: 5, offset: 87465},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2618, col: 9, offset: 87483},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2618, col: 9, offset: 87483},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2619, col: 11, offset: 87505},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 2623, col: 1, offset: 87564},
			expr: &actionExpr{
				pos: position{line: 2625, col: 5, offset: 87646},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 2625, col: 5, offset: 87646},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2625, col: 5, offset: 87646},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 2628, col: 5, offset: 87712},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2629, col: 9, offset: 87730},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2634, col: 1, offset: 87780},
			expr: &actionExpr{
				pos: position{line: 2636, col: 5, offset: 87867},
				run: (*parser).callonSpecialCharacter1,
				expr: &seqExpr{
					pos: position{line: 2636, col: 5, offset: 87867},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2636, col: 5, offset: 87867},
							run: (*parser).callonSpecialCharacter3,
						},
						&labeledExpr{
							pos:   position{line: 2639, col: 5, offset: 87938},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2641, col: 9, offset: 88036},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2641, col: 9, offset: 88036},
										run: (*parser).callonSpecialCharacter6,
										expr: &ruleRefExpr{
											pos:  position{line: 2641, col: 9, offset: 88036},
											name: "InternalCrossReference",
										},
									},
									&actionExpr{
										pos: position{line: 2644, col: 11, offset: 88140},
										run: (*parser).callonSpecialCharacter8,
										expr: &choiceExpr{
											pos: position{line: 2644, col: 12, offset: 88141},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2644, col: 12, offset: 88141},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 2644, col: 18, offset: 88147},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 2644, col: 24, offset: 88153},
													val:        "&",
													ignoreCase: false,
													want:       "\"&\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2653, col: 1, offset: 88479},
			expr: &actionExpr{
				pos: position{line: 2653, col: 22, offset: 88500},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2653, col: 22, offset: 88500},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2653, col: 22, offset: 88500},
							name: "SingleLineCommentDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2653, col: 49, offset: 88527},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2653, col: 58, offset: 88536},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2653, col: 84, offset: 88562},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 2658, col: 1, offset: 88691},
			expr: &seqExpr{
				pos: position{line: 2658, col: 31, offset: 88721},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2658, col: 31, offset: 88721},
						val:        "//",
						ignoreCase: false,
						want:       "\"//\"",
					},
					&notExpr{
						pos: position{line: 2658, col: 36, offset: 88726},
						expr: &litMatcher{
							pos:        position{line: 2658, col: 37, offset: 88727},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2660, col: 1, offset: 88734},
			expr: &actionExpr{
				pos: position{line: 2660, col: 29, offset: 88762},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2660, col: 29, offset: 88762},
					expr: &charClassMatcher{
						pos:        position{line: 2660, col: 29, offset: 88762},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2667, col: 1, offset: 89004},
			expr: &choiceExpr{
				pos: position{line: 2667, col: 11, offset: 89014},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2667, col: 11, offset: 89014},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2667, col: 24, offset: 89027},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2667, col: 36, offset: 89039},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2667, col: 48, offset: 89051},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2667, col: 61, offset: 89064},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2667, col: 72, offset: 89075},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2669, col: 1, offset: 89094},
			expr: &actionExpr{
				pos: position{line: 2669, col: 15, offset: 89108},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2669, col: 15, offset: 89108},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "RawApostrophe",
			pos:  position{line: 2673, col: 1, offset: 89170},
			expr: &litMatcher{
				pos:        position{line: 2673, col: 18, offset: 89187},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2675, col: 1, offset: 89210},
			expr: &actionExpr{
				pos: position{line: 2675, col: 14, offset: 89223},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2675, col: 14, offset: 89223},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2679, col: 1, offset: 89286},
			expr: &actionExpr{
				pos: position{line: 2679, col: 14, offset: 89299},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2679, col: 14, offset: 89299},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2683, col: 1, offset: 89363},
			expr: &actionExpr{
				pos: position{line: 2683, col: 15, offset: 89377},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2683, col: 15, offset: 89377},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2687, col: 1, offset: 89440},
			expr: &actionExpr{
				pos: position{line: 2687, col: 13, offset: 89452},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2687, col: 13, offset: 89452},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2695, col: 1, offset: 89737},
			expr: &actionExpr{
				pos: position{line: 2695, col: 22, offset: 89758},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2695, col: 22, offset: 89758},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2695, col: 22, offset: 89758},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2695, col: 31, offset: 89767},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2695, col: 35, offset: 89771},
							expr: &charClassMatcher{
								pos:        position{line: 2695, col: 36, offset: 89772},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2702, col: 1, offset: 90042},
			expr: &actionExpr{
				pos: position{line: 2703, col: 5, offset: 90056},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2703, col: 5, offset: 90056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2703, col: 5, offset: 90056},
							name: "TableStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2704, col: 5, offset: 90080},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2704, col: 12, offset: 90087},
								expr: &ruleRefExpr{
									pos:  position{line: 2704, col: 13, offset: 90088},
									name: "TableHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2705, col: 5, offset: 90106},
							label: "rows",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2705, col: 10, offset: 90111},
								expr: &ruleRefExpr{
									pos:  position{line: 2705, col: 11, offset: 90112},
									name: "TableRow",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2706, col: 5, offset: 90127},
							name: "TableEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2710, col: 1, offset: 90214},
			expr: &seqExpr{
				pos: position{line: 2710, col: 19, offset: 90232},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2710, col: 19, offset: 90232},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2710, col: 26, offset: 90239},
						expr: &ruleRefExpr{
							pos:  position{line: 2710, col: 26, offset: 90239},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2710, col: 33, offset: 90246},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableStartDelimiter",
			pos:  position{line: 2712, col: 1, offset: 90252},
			expr: &ruleRefExpr{
				pos:  position{line: 2712, col: 24, offset: 90275},
				name: "TableDelimiter",
			},
		},
		{
			name: "TableEndDelimiter",
			pos:  position{line: 2714, col: 1, offset: 90291},
			expr: &choiceExpr{
				pos: position{line: 2714, col: 22, offset: 90312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2714, col: 22, offset: 90312},
						name: "TableDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 2714, col: 39, offset: 90329},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "TableHeader",
			pos:  position{line: 2716, col: 1, offset: 90334},
			expr: &actionExpr{
				pos: position{line: 2718, col: 5, offset: 90399},
				run: (*parser).callonTableHeader1,
				expr: &seqExpr{
					pos: position{line: 2718, col: 5, offset: 90399},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2718, col: 5, offset: 90399},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2718, col: 11, offset: 90405},
								expr: &ruleRefExpr{
									pos:  position{line: 2718, col: 12, offset: 90406},
									name: "HeaderCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2718, col: 25, offset: 90419},
							name: "EOL",
						},
						&oneOrMoreExpr{
							pos: position{line: 2719, col: 5, offset: 90427},
							expr: &ruleRefExpr{
								pos:  position{line: 2719, col: 5, offset: 90427},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderCell",
			pos:  position{line: 2723, col: 1, offset: 90503},
			expr: &actionExpr{
				pos: position{line: 2724, col: 5, offset: 90522},
				run: (*parser).callonHeaderCell1,
				expr: &seqExpr{
					pos: position{line: 2724, col: 5, offset: 90522},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2724, col: 5, offset: 90522},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2724, col: 9, offset: 90526},
							expr: &ruleRefExpr{
								pos:  position{line: 2724, col: 9, offset: 90526},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 2725, col: 5, offset: 90538},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 2725, col: 14, offset: 90547},
								expr: &ruleRefExpr{
									pos:  position{line: 2725, col: 14, offset: 90547},
									name: "CellContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 2729, col: 1, offset: 90632},
			expr: &choiceExpr{
				pos: position{line: 2729, col: 13, offset: 90644},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2729, col: 13, offset: 90644},
						name: "MultiLineTableRow",
					},
					&ruleRefExpr{
						pos:  position{line: 2729, col: 33, offset: 90664},
						name: "SingleLineTableRow",
					},
				},
			},
		},
		{
			name: "SingleLineTableRow",
			pos:  position{line: 2731, col: 1, offset: 90684},
			expr: &actionExpr{
				pos: position{line: 2732, col: 5, offset: 90711},
				run: (*parser).callonSingleLineTableRow1,
				expr: &seqExpr{
					pos: position{line: 2732, col: 5, offset: 90711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2732, col: 5, offset: 90711},
							expr: &ruleRefExpr{
								pos:  position{line: 2732, col: 6, offset: 90712},
								name: "TableEndDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2733, col: 5, offset: 90734},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2733, col: 11, offset: 90740},
								expr: &ruleRefExpr{
									pos:  position{line: 2733, col: 12, offset: 90741},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2733, col: 24, offset: 90753},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2734, col: 5, offset: 90761},
							expr: &ruleRefExpr{
								pos:  position{line: 2734, col: 5, offset: 90761},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableRow",
			pos:  position{line: 2738, col: 1, offset: 90837},
			expr: &actionExpr{
				pos: position{line: 2739, col: 5, offset: 90863},
				run: (*parser).callonMultiLineTableRow1,
				expr: &seqExpr{
					pos: position{line: 2739, col: 5, offset: 90863},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2739, col: 5, offset: 90863},
							expr: &ruleRefExpr{
								pos:  position{line: 2739, col: 6, offset: 90864},
								name: "TableEndDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2740, col: 5, offset: 90886},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2740, col: 11, offset: 90892},
								expr: &actionExpr{
									pos: position{line: 2740, col: 12, offset: 90893},
									run: (*parser).callonMultiLineTableRow7,
									expr: &seqExpr{
										pos: position{line: 2740, col: 12, offset: 90893},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2740, col: 12, offset: 90893},
												label: "cell",
												expr: &ruleRefExpr{
													pos:  position{line: 2740, col: 18, offset: 90899},
													name: "TableCell",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2740, col: 29, offset: 90910},
												name: "EOL",
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2743, col: 6, offset: 90955},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2743, col: 6, offset: 90955},
									expr: &ruleRefExpr{
										pos:  position{line: 2743, col: 6, offset: 90955},
										name: "BlankLine",
									},
								},
								&andExpr{
									pos: position{line: 2743, col: 19, offset: 90968},
									expr: &ruleRefExpr{
										pos:  position{line: 2743, col: 20, offset: 90969},
										name: "TableEndDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2748, col: 1, offset: 91116},
			expr: &actionExpr{
				pos: position{line: 2749, col: 5, offset: 91134},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2749, col: 5, offset: 91134},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2749, col: 5, offset: 91134},
							expr: &ruleRefExpr{
								pos:  position{line: 2749, col: 6, offset: 91135},
								name: "TableEndDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 2750, col: 5, offset: 91157},
							expr: &ruleRefExpr{
								pos:  position{line: 2750, col: 6, offset: 91158},
								name: "BlankLine",
							},
						},
						&litMatcher{
							pos:        position{line: 2751, col: 5, offset: 91172},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2751, col: 9, offset: 91176},
							expr: &ruleRefExpr{
								pos:  position{line: 2751, col: 9, offset: 91176},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 2751, col: 16, offset: 91183},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 2751, col: 25, offset: 91192},
								expr: &ruleRefExpr{
									pos:  position{line: 2751, col: 25, offset: 91192},
									name: "CellContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CellContent",
			pos:  position{line: 2756, col: 1, offset: 91315},
			expr: &actionExpr{
				pos: position{line: 2757, col: 5, offset: 91335},
				run: (*parser).callonCellContent1,
				expr: &labeledExpr{
					pos:   position{line: 2757, col: 5, offset: 91335},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 2757, col: 14, offset: 91344},
						run: (*parser).callonCellContent3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2757, col: 14, offset: 91344},
							expr: &charClassMatcher{
								pos:        position{line: 2757, col: 14, offset: 91344},
								val:        "[^\\r\\n|]",
								chars:      []rune{'\r', '\n', '|'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2764, col: 1, offset: 91513},
			expr: &actionExpr{
				pos: position{line: 2764, col: 26, offset: 91538},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2764, col: 26, offset: 91538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2764, col: 26, offset: 91538},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2764, col: 31, offset: 91543},
								expr: &ruleRefExpr{
									pos:  position{line: 2764, col: 32, offset: 91544},
									name: "Column",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2764, col: 41, offset: 91553},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Column",
			pos:  position{line: 2768, col: 1, offset: 91591},
			expr: &actionExpr{
				pos: position{line: 2769, col: 5, offset: 91606},
				run: (*parser).callonColumn1,
				expr: &seqExpr{
					pos: position{line: 2769, col: 5, offset: 91606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2769, col: 5, offset: 91606},
							expr: &ruleRefExpr{
								pos:  position{line: 2769, col: 6, offset: 91607},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2772, col: 5, offset: 91730},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 2772, col: 16, offset: 91741},
								expr: &actionExpr{
									pos: position{line: 2772, col: 17, offset: 91742},
									run: (*parser).callonColumn7,
									expr: &seqExpr{
										pos: position{line: 2772, col: 17, offset: 91742},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2772, col: 17, offset: 91742},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 2772, col: 19, offset: 91744},
													name: "Number",
												},
											},
											&litMatcher{
												pos:        position{line: 2772, col: 26, offset: 91751},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2773, col: 5, offset: 91779},
							label: "halign",
							expr: &zeroOrOneExpr{
								pos: position{line: 2773, col: 12, offset: 91786},
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 91796},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2774, col: 9, offset: 91796},
											run: (*parser).callonColumn15,
											expr: &litMatcher{
												pos:        position{line: 2774, col: 9, offset: 91796},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 2775, col: 11, offset: 91843},
											run: (*parser).callonColumn17,
											expr: &litMatcher{
												pos:        position{line: 2775, col: 11, offset: 91843},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 2776, col: 11, offset: 91891},
											run: (*parser).callonColumn19,
											expr: &litMatcher{
												pos:        position{line: 2776, col: 11, offset: 91891},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2778, col: 5, offset: 91941},
							label: "valign",
							expr: &zeroOrOneExpr{
								pos: position{line: 2778, col: 12, offset: 91948},
								expr: &choiceExpr{
									pos: position{line: 2779, col: 9, offset: 91958},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2779, col: 9, offset: 91958},
											run: (*parser).callonColumn24,
											expr: &litMatcher{
												pos:        position{line: 2779, col: 9, offset: 91958},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 2780, col: 11, offset: 92005},
											run: (*parser).callonColumn26,
											expr: &litMatcher{
												pos:        position{line: 2780, col: 11, offset: 92005},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 2781, col: 11, offset: 92055},
											run: (*parser).callonColumn28,
											expr: &litMatcher{
												pos:        position{line: 2781, col: 11, offset: 92055},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2783, col: 5, offset: 92106},
							label: "weight",
							expr: &zeroOrOneExpr{
								pos: position{line: 2783, col: 12, offset: 92113},
								expr: &choiceExpr{
									pos: position{line: 2783, col: 13, offset: 92114},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2783, col: 13, offset: 92114},
											name: "Number",
										},
										&actionExpr{
											pos: position{line: 2783, col: 23, offset: 92124},
											run: (*parser).callonColumn34,
											expr: &litMatcher{
												pos:        position{line: 2783, col: 23, offset: 92124},
												val:        "~",
												ignoreCase: false,
												want:       "\"~\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2784, col: 5, offset: 92166},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 2784, col: 11, offset: 92172},
								expr: &actionExpr{
									pos: position{line: 2784, col: 12, offset: 92173},
									run: (*parser).callonColumn38,
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 12, offset: 92173},
										val:        "[adehlms]",
										chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2786, col: 5, offset: 92303},
							label: "comma",
							expr: &zeroOrOneExpr{
								pos: position{line: 2786, col: 11, offset: 92309},
								expr: &litMatcher{
									pos:        position{line: 2786, col: 12, offset: 92310},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2787, col: 5, offset: 92320},
							run: (*parser).callonColumn43,
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 2804, col: 1, offset: 92907},
			expr: &actionExpr{
				pos: position{line: 2804, col: 18, offset: 92924},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 2804, col: 18, offset: 92924},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 2804, col: 19, offset: 92925},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2804, col: 19, offset: 92925},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 2804, col: 27, offset: 92933},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 2804, col: 37, offset: 92943},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 2804, col: 45, offset: 92951},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 2804, col: 55, offset: 92961},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 2804, col: 63, offset: 92969},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2804, col: 72, offset: 92978},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2811, col: 1, offset: 93250},
			expr: &actionExpr{
				pos: position{line: 2812, col: 5, offset: 93273},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2812, col: 5, offset: 93273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2812, col: 5, offset: 93273},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2812, col: 11, offset: 93279},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2813, col: 5, offset: 93299},
							run: (*parser).callonUserMacroBlock5,
						},
						&litMatcher{
							pos:        position{line: 2817, col: 5, offset: 93439},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2818, col: 5, offset: 93449},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2818, col: 12, offset: 93456},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2819, col: 5, offset: 93477},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2819, col: 23, offset: 93495},
								name: "InlineAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2819, col: 41, offset: 93513},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2823, col: 1, offset: 93649},
			expr: &actionExpr{
				pos: position{line: 2824, col: 5, offset: 93673},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2824, col: 5, offset: 93673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2824, col: 5, offset: 93673},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2824, col: 11, offset: 93679},
								name: "UserMacroName",
							},
						},
						&andCodeExpr{
							pos: position{line: 2825, col: 5, offset: 93699},
							run: (*parser).callonInlineUserMacro5,
						},
						&litMatcher{
							pos:        position{line: 2829, col: 5, offset: 93839},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2830, col: 5, offset: 93848},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2830, col: 12, offset: 93855},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 2831, col: 5, offset: 93876},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2831, col: 23, offset: 93894},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 2835, col: 1, offset: 94045},
			expr: &actionExpr{
				pos: position{line: 2835, col: 18, offset: 94062},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2835, col: 19, offset: 94063},
					expr: &charClassMatcher{
						pos:        position{line: 2835, col: 19, offset: 94063},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 2839, col: 1, offset: 94120},
			expr: &actionExpr{
				pos: position{line: 2839, col: 19, offset: 94138},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2839, col: 19, offset: 94138},
					expr: &charClassMatcher{
						pos:        position{line: 2839, col: 19, offset: 94138},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2846, col: 1, offset: 94386},
			expr: &charClassMatcher{
				pos:        position{line: 2846, col: 13, offset: 94398},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2848, col: 1, offset: 94408},
			expr: &choiceExpr{
				pos: position{line: 2848, col: 16, offset: 94423},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2848, col: 16, offset: 94423},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2848, col: 22, offset: 94429},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2848, col: 28, offset: 94435},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2848, col: 34, offset: 94441},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2848, col: 40, offset: 94447},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2848, col: 46, offset: 94453},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2850, col: 1, offset: 94459},
			expr: &actionExpr{
				pos: position{line: 2850, col: 14, offset: 94472},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2850, col: 14, offset: 94472},
					expr: &charClassMatcher{
						pos:        position{line: 2850, col: 14, offset: 94472},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2854, col: 1, offset: 94526},
			expr: &choiceExpr{
				pos: position{line: 2858, col: 5, offset: 94853},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2858, col: 5, offset: 94853},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2858, col: 5, offset: 94853},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2858, col: 5, offset: 94853},
									expr: &charClassMatcher{
										pos:        position{line: 2858, col: 5, offset: 94853},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2858, col: 15, offset: 94863},
									expr: &choiceExpr{
										pos: position{line: 2858, col: 17, offset: 94865},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2858, col: 17, offset: 94865},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2858, col: 30, offset: 94878},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2860, col: 9, offset: 94947},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2860, col: 9, offset: 94947},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2860, col: 9, offset: 94947},
									expr: &charClassMatcher{
										pos:        position{line: 2860, col: 9, offset: 94947},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2860, col: 19, offset: 94957},
									expr: &seqExpr{
										pos: position{line: 2860, col: 20, offset: 94958},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2860, col: 20, offset: 94958},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2860, col: 27, offset: 94965},
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 27, offset: 94965},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2865, col: 1, offset: 95057},
			expr: &choiceExpr{
				pos: position{line: 2869, col: 5, offset: 95250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2869, col: 5, offset: 95250},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2869, col: 5, offset: 95250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2869, col: 5, offset: 95250},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 2869, col: 14, offset: 95259},
										run: (*parser).callonInlineWord5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2869, col: 14, offset: 95259},
											expr: &charClassMatcher{
												pos:        position{line: 2869, col: 14, offset: 95259},
												val:        "[\\pL0-9,?!;]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2872, col: 5, offset: 95340},
									expr: &choiceExpr{
										pos: position{line: 2872, col: 7, offset: 95342},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2872, col: 7, offset: 95342},
												name: "Space",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 15, offset: 95350},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2872, col: 21, offset: 95356},
												name: "Alphanum",
											},
											&ruleRefExpr{
												pos:  position{line: 2872, col: 32, offset: 95367},
												name: "ElementPlaceHolderDelimiter",
											},
											&ruleRefExpr{
												pos:  position{line: 2872, col: 62, offset: 95397},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2875, col: 7, offset: 95445},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 2876, col: 7, offset: 95456},
						name: "Punctuation",
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 2878, col: 1, offset: 95469},
			expr: &actionExpr{
				pos: position{line: 2878, col: 16, offset: 95484},
				run: (*parser).callonPunctuation1,
				expr: &seqExpr{
					pos: position{line: 2878, col: 16, offset: 95484},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 2878, col: 17, offset: 95485},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2878, col: 17, offset: 95485},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&litMatcher{
									pos:        position{line: 2878, col: 23, offset: 95491},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&litMatcher{
									pos:        position{line: 2878, col: 29, offset: 95497},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&litMatcher{
									pos:        position{line: 2878, col: 35, offset: 95503},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&litMatcher{
									pos:        position{line: 2878, col: 41, offset: 95509},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&andExpr{
							pos: position{line: 2878, col: 46, offset: 95514},
							expr: &choiceExpr{
								pos: position{line: 2878, col: 48, offset: 95516},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2878, col: 48, offset: 95516},
										name: "Space",
									},
									&ruleRefExpr{
										pos:  position{line: 2878, col: 56, offset: 95524},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2884, col: 1, offset: 95684},
			expr: &actionExpr{
				pos: position{line: 2884, col: 12, offset: 95695},
				run: (*parser).callonAnyChar1,
				expr: &anyMatcher{
					line: 2884, col: 12, offset: 95695,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2888, col: 1, offset: 95762},
			expr: &actionExpr{
				pos: position{line: 2888, col: 17, offset: 95778},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2888, col: 17, offset: 95778},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2888, col: 22, offset: 95783},
						expr: &choiceExpr{
							pos: position{line: 2888, col: 23, offset: 95784},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2888, col: 23, offset: 95784},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2888, col: 34, offset: 95795},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2892, col: 1, offset: 95884},
			expr: &actionExpr{
				pos: position{line: 2892, col: 13, offset: 95896},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2892, col: 13, offset: 95896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2892, col: 13, offset: 95896},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2892, col: 20, offset: 95903},
								expr: &ruleRefExpr{
									pos:  position{line: 2892, col: 21, offset: 95904},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2892, col: 30, offset: 95913},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2892, col: 35, offset: 95918},
								expr: &choiceExpr{
									pos: position{line: 2892, col: 36, offset: 95919},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2892, col: 36, offset: 95919},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2892, col: 47, offset: 95930},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2896, col: 1, offset: 96023},
			expr: &actionExpr{
				pos: position{line: 2896, col: 23, offset: 96045},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2896, col: 23, offset: 96045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2896, col: 23, offset: 96045},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2896, col: 31, offset: 96053},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2896, col: 39, offset: 96061},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2896, col: 44, offset: 96066},
								expr: &choiceExpr{
									pos: position{line: 2896, col: 45, offset: 96067},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2896, col: 45, offset: 96067},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2896, col: 56, offset: 96078},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2900, col: 1, offset: 96171},
			expr: &actionExpr{
				pos: position{line: 2900, col: 13, offset: 96183},
				run: (*parser).callonFilename1,
				expr: &labeledExpr{
					pos:   position{line: 2900, col: 13, offset: 96183},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2900, col: 22, offset: 96192},
						expr: &choiceExpr{
							pos: position{line: 2901, col: 5, offset: 96198},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2901, col: 5, offset: 96198},
									run: (*parser).callonFilename5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2901, col: 5, offset: 96198},
										expr: &charClassMatcher{
											pos:        position{line: 2901, col: 6, offset: 96199},
											val:        "[^\\r\\n[\\]\\uFFFD&<>{ ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2904, col: 7, offset: 96343},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2905, col: 7, offset: 96372},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2907, col: 7, offset: 96423},
									run: (*parser).callonFilename10,
									expr: &litMatcher{
										pos:        position{line: 2907, col: 7, offset: 96423},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2913, col: 1, offset: 96561},
			expr: &choiceExpr{
				pos: position{line: 2913, col: 11, offset: 96571},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2913, col: 11, offset: 96571},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2913, col: 23, offset: 96583},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2913, col: 36, offset: 96596},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2913, col: 47, offset: 96607},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2913, col: 58, offset: 96618},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2915, col: 1, offset: 96629},
			expr: &actionExpr{
				pos: position{line: 2915, col: 7, offset: 96635},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2915, col: 7, offset: 96635},
					expr: &charClassMatcher{
						pos:        position{line: 2915, col: 7, offset: 96635},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2919, col: 1, offset: 96768},
			expr: &actionExpr{
				pos: position{line: 2919, col: 10, offset: 96777},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2919, col: 10, offset: 96777},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2923, col: 1, offset: 96827},
			expr: &actionExpr{
				pos: position{line: 2923, col: 11, offset: 96837},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2923, col: 11, offset: 96837},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2923, col: 11, offset: 96837},
							expr: &litMatcher{
								pos:        position{line: 2923, col: 11, offset: 96837},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2923, col: 16, offset: 96842},
							expr: &ruleRefExpr{
								pos:  position{line: 2923, col: 16, offset: 96842},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2927, col: 1, offset: 96902},
			expr: &choiceExpr{
				pos: position{line: 2927, col: 10, offset: 96911},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2927, col: 10, offset: 96911},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2927, col: 16, offset: 96917},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2927, col: 16, offset: 96917},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 2931, col: 1, offset: 96966},
			expr: &actionExpr{
				pos: position{line: 2931, col: 11, offset: 96976},
				run: (*parser).callonSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2931, col: 11, offset: 96976},
					expr: &choiceExpr{
						pos: position{line: 2931, col: 12, offset: 96977},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 2931, col: 12, offset: 96977},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
							&litMatcher{
								pos:        position{line: 2931, col: 18, offset: 96983},
								val:        "\t",
								ignoreCase: false,
								want:       "\"\\t\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2935, col: 1, offset: 97034},
			expr: &choiceExpr{
				pos: position{line: 2935, col: 12, offset: 97045},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2935, col: 12, offset: 97045},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2935, col: 19, offset: 97052},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&actionExpr{
						pos: position{line: 2935, col: 28, offset: 97061},
						run: (*parser).callonNewline4,
						expr: &litMatcher{
							pos:        position{line: 2935, col: 28, offset: 97061},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2939, col: 1, offset: 97145},
			expr: &notExpr{
				pos: position{line: 2939, col: 8, offset: 97152},
				expr: &anyMatcher{
					line: 2939, col: 9, offset: 97153,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2942, col: 1, offset: 97195},
			expr: &choiceExpr{
				pos: position{line: 2942, col: 8, offset: 97202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2942, col: 8, offset: 97202},
						name: "EOF",
					},
					&ruleRefExpr{
						pos:  position{line: 2942, col: 14, offset: 97208},
						name: "Newline",
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore

	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock1(stack["elements"])
}

func (c *current) onRawLine6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement7()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes12(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["title"])
}

func (c *current) onBlockAttributes19(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes24(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes24(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeRawValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeRawValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeRawValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeRawValueContent8() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeRawValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeRawValueContent8()
}

func (c *current) onSingleQuotedAttributeRawValueContent13() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeRawValueContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeRawValueContent13()
}

func (c *current) onSingleQuotedAttributeRawValueContent15() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeRawValueContent15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeRawValueContent15()
}

func (c *current) onSingleQuotedAttributeRawValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeRawValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeRawValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeRawValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeRawValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeRawValueContent8() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeRawValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeRawValueContent8()
}

func (c *current) onDoubleQuotedAttributeRawValueContent14() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeRawValueContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeRawValueContent14()
}

func (c *current) onDoubleQuotedAttributeRawValueContent16() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeRawValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeRawValueContent16()
}

func (c *current) onDoubleQuotedAttributeRawValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeRawValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeRawValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeRawValue14() (interface{}, error) {
	// not within brackets and stop on space
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue14()
}

func (c *current) onUnquotedAttributeRawValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue1(stack["elements"])
}

func (c *current) onAttributeSubstitution3() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeSubstitution3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution3()
}

func (c *current) onAttributeSubstitution1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["element"])
}

func (c *current) onAttributeValueSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeValueSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValueSubstitution1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onBlockDelimiter1(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiter1(stack["delimiter"])
}

func (c *current) onDelimitedBlockRawLine6() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlockRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockRawLine6()
}

func (c *current) onDelimitedBlockRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlockRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockRawLine1(stack["content"])
}

func (c *current) onCommentBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonCommentBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock3()
}

func (c *current) onCommentBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonCommentBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock5()
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonCommentBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockContent2(stack["line"])
}

func (c *current) onExampleBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Example), nil

}

func (p *parser) callonExampleBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock3()
}

func (c *current) onExampleBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Example)
	return true, nil

}

func (p *parser) callonExampleBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock5()
}

func (c *current) onExampleBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["content"])
}

func (c *current) onExampleBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonExampleBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent2(stack["line"])
}

func (c *current) onFencedBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Fenced), nil

}

func (p *parser) callonFencedBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock3()
}

func (c *current) onFencedBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Fenced)
	return true, nil

}

func (p *parser) callonFencedBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock5()
}

func (c *current) onFencedBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["content"])
}

func (c *current) onFencedBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonFencedBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent2(stack["line"])
}

func (c *current) onListingBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Listing), nil

}

func (p *parser) callonListingBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock3()
}

func (c *current) onListingBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Listing)
	return true, nil

}

func (p *parser) callonListingBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock5()
}

func (c *current) onListingBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["content"])
}

func (c *current) onListingBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListingBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent2(stack["line"])
}

func (c *current) onLiteralBlock4() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Literal), nil

}

func (p *parser) callonLiteralBlock4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock4()
}

func (c *current) onLiteralBlock7(content interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Literal)
	return true, nil

}

func (p *parser) callonLiteralBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock7(stack["content"])
}

func (c *current) onLiteralBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonLiteralBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock1(stack["content"])
}

func (c *current) onLiteralBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonLiteralBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent2(stack["line"])
}

func (c *current) onMarkdownQuoteBlock1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonMarkdownQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlock1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onMarkdownQuoteRawLine7() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteRawLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteRawLine7()
}

func (c *current) onMarkdownQuoteRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonMarkdownQuoteRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteRawLine1(stack["content"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onPassthroughBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Passthrough), nil

}

func (p *parser) callonPassthroughBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock3()
}

func (c *current) onPassthroughBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Passthrough)
	return true, nil

}

func (p *parser) callonPassthroughBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock5()
}

func (c *current) onPassthroughBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["content"])
}

func (c *current) onPassthroughBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonPassthroughBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent2(stack["line"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Quote), nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Quote)
	return true, nil

}

func (p *parser) callonQuoteBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock5()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonQuoteBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent2(stack["line"])
}

func (c *current) onSidebarBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Sidebar), nil

}

func (p *parser) callonSidebarBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock3()
}

func (c *current) onSidebarBlock5() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Sidebar)
	return true, nil

}

func (p *parser) callonSidebarBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock5()
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonSidebarBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent2(stack["line"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader1(title, info, extraAttrs interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore
	return types.NewDocumentHeader(title.([]interface{}), info, extraAttrs.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["info"], stack["extraAttrs"])
}

func (c *current) onDocumentTitle1(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"])
}

func (c *current) onDocumentInformation1(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentInformation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentInformation1(stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthors1(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentAuthors1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthors1(stack["authors"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor15(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentAuthor15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor15(stack["fullName"], stack["email"])
}

func (c *current) onDocumentAuthor1(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullName"], stack["email"])
}

func (c *current) onDocumentAuthorFullName4() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName4()
}

func (c *current) onDocumentAuthorFullName11() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName11()
}

func (c *current) onDocumentAuthorFullName18() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName18()
}

func (c *current) onDocumentAuthorFullName1(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentAuthorFullName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName1(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentAuthorEmail7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorEmail7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail7()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onFileInclusion3() (bool, error) {
	// skip if disabled
	return c.isRuleEnabled(FileInclusion)

}

func (p *parser) callonFileInclusion3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion3()
}

func (c *current) onFileInclusion4() error {
	// force/enable attribute substitution
	// log.Debug("entering FileInclusion rule")
	return c.setCurrentSubstitution("attributes")

}

func (p *parser) callonFileInclusion4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4()
}

func (c *current) onFileInclusion6(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion6(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onFrontMatter3() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonFrontMatter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatter3()
}

func (c *current) onFrontMatter1(frontmatter interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false) // not allowed anymore
	return frontmatter, nil

}

func (p *parser) callonFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatter1(stack["frontmatter"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onFrontMatterLine1() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonFrontMatterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatterLine1()
}

func (c *current) onInlineElements4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements4(stack["comment"])
}

func (c *current) onInlineElements7(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.(types.InlineElements))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent23() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSinglePlusPassthroughContent23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent23()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement7(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement7(stack["element"])
}

func (c *current) onExtraListElement13(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement13(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement20(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20(stack["element"])
}

func (c *current) onExtraListElement26(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement26(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement33(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement33(stack["element"])
}

func (c *current) onExtraListElement39(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement39(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement47(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement47(stack["element"])
}

func (c *current) onExtraListElement53(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement53(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement61(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement61(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementParagraphLine20() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementParagraphLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementParagraphLine20()
}

func (c *current) onListElementParagraphLine1(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementParagraphLine1(stack["content"])
}

func (c *current) onListElementContent4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContent4()
}

func (c *current) onListElementContent1(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContent1(stack["rawline"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onListContinuationParagraph4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationParagraph4()
}

func (c *current) onListContinuationParagraph1(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListContinuationParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationParagraph1(stack["content"])
}

func (c *current) onOrderedListElement1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonOrderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElement1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListElementPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix10()
}

func (c *current) onOrderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix13(stack["depth"])
}

func (c *current) onOrderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonOrderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix7(stack["depth"])
}

func (c *current) onOrderedListElementPrefix14() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonOrderedListElementPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix14()
}

func (c *current) onOrderedListElementPrefix19() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonOrderedListElementPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix19()
}

func (c *current) onOrderedListElementPrefix23() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonOrderedListElementPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix23()
}

func (c *current) onOrderedListElementPrefix27() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonOrderedListElementPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix27()
}

func (c *current) onOrderedListElementPrefix32() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonOrderedListElementPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix32()
}

func (c *current) onOrderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElement1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonUnorderedListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElement1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListElementPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListElementPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix10()
}

func (c *current) onUnorderedListElementPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListElementPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix13(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonUnorderedListElementPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix7(stack["depth"])
}

func (c *current) onUnorderedListElementPrefix15() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonUnorderedListElementPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix15()
}

func (c *current) onUnorderedListElementPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListElementCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle7()
}

func (c *current) onUnorderedListElementCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle9()
}

func (c *current) onUnorderedListElementCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListElementCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle11()
}

func (c *current) onUnorderedListElementCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListElementCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListElementCheckStyle1(stack["style"])
}

func (c *current) onLabeledListElement1(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonLabeledListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElement1(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListElementTerm1() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonLabeledListElementTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementTerm1()
}

func (c *current) onLabeledListElementSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListElementSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementSeparator4()
}

func (c *current) onLabeledListElementSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListElementSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementSeparator7(stack["separator"])
}

func (c *current) onLabeledListElementSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonLabeledListElementSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementSeparator1(stack["separator"])
}

func (c *current) onLabeledListElementDescription2(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonLabeledListElementDescription2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementDescription2(stack["content"])
}

func (c *current) onLabeledListElementDescription16() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonLabeledListElementDescription16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementDescription16()
}

func (c *current) onLabeledListElementDescription12(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonLabeledListElementDescription12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListElementDescription12(stack["content"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListElement1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonCalloutListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElement1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListElementPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListElementPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix5()
}

func (c *current) onCalloutListElementPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonCalloutListElementPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementPrefix1(stack["ref"])
}

func (c *current) onCalloutListElementContent4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCalloutListElementContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementContent4()
}

func (c *current) onCalloutListElementContent1(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonCalloutListElementContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListElementContent1(stack["rawline"])
}

func (c *current) onShortcutParagraph16(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph16(stack["firstLine"])
}

func (c *current) onShortcutParagraph19(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph19(stack["line"])
}

func (c *current) onShortcutParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7(stack["line"])
}

func (c *current) onParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onAdmonitionParagraph10(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonAdmonitionParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionParagraph10(stack["line"])
}

func (c *current) onAdmonitionParagraph1(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonAdmonitionParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionParagraph1(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphRawLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphRawLine4()
}

func (c *current) onParagraphRawLine7(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonParagraphRawLine7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphRawLine7(stack["content"])
}

func (c *current) onParagraphRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphRawLine1(stack["content"])
}

func (c *current) onLiteralParagraph1(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonLiteralParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onLiteralParagraphRawLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLiteralParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphRawLine4()
}

func (c *current) onLiteralParagraphRawLine9(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonLiteralParagraphRawLine9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphRawLine9(stack["content"])
}

func (c *current) onLiteralParagraphRawLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonLiteralParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphRawLine1(stack["content"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used within `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil

}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onBoldTextWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBoldTextWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldTextWord1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements10(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements10(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onItalicTextWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonItalicTextWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicTextWord1()
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements10(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements10(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onMonospaceTextWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMonospaceTextWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceTextWord1()
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements10(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements10(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onMarkedTextWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMarkedTextWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkedTextWord1()
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements10(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements10(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onQuotedTextInSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onQuotedStringWord1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedStringWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringWord1()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection3() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNoneGroupElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroupElement1(stack["element"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onPostReplacementsGroup1(elements interface{}) (interface{}, error) {
	return types.Merge(elements), nil

}

func (p *parser) callonPostReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup1(stack["elements"])
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.Merge(elements), nil

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onPostReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonPostReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement3()
}

func (c *current) onPostReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonPostReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacement1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSpecialCharacter3() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter6()
}

func (c *current) onSpecialCharacter8() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter8()
}

func (c *current) onSpecialCharacter1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1(stack["element"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onTable1(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["header"], stack["rows"])
}

func (c *current) onTableHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonTableHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableHeader1(stack["cells"])
}

func (c *current) onHeaderCell1(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonHeaderCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderCell1(stack["content"])
}

func (c *current) onSingleLineTableRow1(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonSingleLineTableRow1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTableRow1(stack["cells"])
}

func (c *current) onMultiLineTableRow7(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonMultiLineTableRow7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableRow7(stack["cell"])
}

func (c *current) onMultiLineTableRow1(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonMultiLineTableRow1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableRow1(stack["cells"])
}

func (c *current) onTableCell1(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["content"])
}

func (c *current) onCellContent3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCellContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCellContent3()
}

func (c *current) onCellContent1(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonCellContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCellContent1(stack["content"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onColumn7(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonColumn7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn7(stack["n"])
}

func (c *current) onColumn15() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonColumn15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn15()
}

func (c *current) onColumn17() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonColumn17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn17()
}

func (c *current) onColumn19() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonColumn19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn19()
}

func (c *current) onColumn24() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonColumn24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn24()
}

func (c *current) onColumn26() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonColumn26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn26()
}

func (c *current) onColumn28() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonColumn28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn28()
}

func (c *current) onColumn34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonColumn34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn34()
}

func (c *current) onColumn38() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonColumn38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn38()
}

func (c *current) onColumn43(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonColumn43() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn43(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onColumn1(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn1(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onUserMacroBlock5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock5(stack["name"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro5(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro5(stack["name"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord5()
}

func (c *current) onInlineWord2(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2(stack["content"])
}

func (c *current) onPunctuation1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPunctuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename5() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename5()
}

func (c *current) onFilename10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFilename10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename10()
}

func (c *current) onFilename1(elements interface{}) (interface{}, error) {
	return types.Merge(elements.([]interface{})...), nil

}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1(stack["elements"])
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

func (c *current) onSpaces1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaces1()
}

func (c *current) onNewline4() (interface{}, error) {
	// TODO: just use "\n"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNewline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewline4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
